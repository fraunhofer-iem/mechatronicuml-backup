import AbstractILPBasedAlgorithm;
import Opt4J;

modeltype allocationSpecification uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype opt4jconfig uses config('http://www.muml.org/psm/allocation/algorithm/ilp/opt4j/config/1.0.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation Opt4JBasedAlgorithm(in specification : allocationSpecification,
	in oclContextIn : ecore,
	out ecoreOut : ecore)
	extends AbstractILPBasedAlgorithm;

main() {
	computeAllocation();
	ecoreOut.removeOrphans();
}

helper ecore::removeOrphans() {
	// remove Opt4jConfiguration object from the out extent...
	self.objects()->select(
		oclIsKindOf(Opt4jConfiguration)
	)->forEach(elm) {
		self.removeElement(elm);
	};
}

query getAllocationSpecificationIn() : allocationSpecification {
	return specification;
}

query getOclContextIn() : ecore {
	return oclContextIn;
}

helper solveILP(ilpModel : IntegerLinearProgram, solution : Dict(Variable, Integer)) : Integer {
	return opt4jsolve(ilpModel, solution);
}