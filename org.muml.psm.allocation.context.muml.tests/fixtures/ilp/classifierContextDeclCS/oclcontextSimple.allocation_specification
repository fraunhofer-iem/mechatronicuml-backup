testSpecificationName {

	nameProvider 'org.muml.psm.allocation.context.muml.provider.MUMLNameProvider';
	storageProvider 'org.muml.psm.allocation.context.muml.provider.MUMLStorageProvider';
	oclContext oclcontext::OCLContext;
	import 'http://www.muml.org/psm/allocation/context/muml/oclcontext/1.0.0'
	
	relation {
		descriptors (first : pim::instance::ComponentInstance, second : hardware::hwresourceinstance::ResourceInstance);
		lower 1;
		upper 1;
		ocl self.componentInstanceConfiguration.componentInstances->product(
			self.hardwarePlatformInstanceConfiguration.resources
		);
	}
	
	context oclcontext::OCLContext
		def: getECUs(ecuNames : Set(String)) : Sequence(hardware::hwresourceinstance::ResourceInstance) =
			self.hardwarePlatformInstanceConfiguration.resources->select(ecuNames->includes(name))
			
		-- unused in this testcase
		def: getECU(ecuName : String) : hardware::hwresourceinstance::ResourceInstance =
			self.hardwarePlatformInstanceConfiguration.resources->any(name = ecuName)
			
		def: getInstance(instanceName : String) : pim::instance::ComponentInstance =
			self.componentInstanceConfiguration.componentInstances->any(name = instanceName)
			
		def: allocateToOneECU(instanceName : String, ecuNames : Set(String))
			: Set(Tuple(first : pim::instance::ComponentInstance, second : hardware::hwresourceinstance::ResourceInstance))
			=
			self.getInstance(instanceName)->asSet()->product(self.getECUs(ecuNames))->asSet()
			

	constraint requiredHardwareResourceInstance foo {
		descriptors (first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance);
		ocl self.allocateToOneECU('c1', Set{'e1', 'e2'});
	}
}