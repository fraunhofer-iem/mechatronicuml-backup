library Container_Naming_Library;

modeltype MumlPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype Typespackage uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype MessagePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype RTSCPackage uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype ProtocolPackage uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype InstancePackage uses pim::instance('http://www.muml.org/pim/1.0.0');
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype ModelInstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype Actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');


modeltype Hardware uses hardware('http://www.muml.org/pm/hardware/1.0.0');
modeltype Platform uses hardware::hwplatform('http://www.muml.org/pm/hardware/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype Resource uses hardware::hwresource('http://www.muml.org/pm/hardware/1.0.0');


modeltype PSM uses psm('http://www.muml.org/psm/1.0.0');
modeltype Allocation uses psm::allocation('http://www.muml.org/psm/1.0.0');


modeltype MumlContainer uses muml_container('http://www.muml.org/psm/muml_container/0.5.0');
modeltype ECore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
/**
 * Helper Queries
**/
query SystemAllocation::getRootHPIC():HWPlatformInstanceConfiguration{
	return self.hpic;
}

query SystemAllocation::getAllAllocatedAtomicComponentInstances(ecu:StructuredResourceInstance):Sequence(ComponentInstance){
	return self.allocations->select(a|a.resourceInstance=ecu)->select(a|a.componentInstance.oclIsTypeOf(AtomicComponentInstance)).componentInstance;	
}

query ComponentInstance::getAllocatedECU(systemallocation:SystemAllocation):StructuredResourceInstance{
	return systemallocation.allocations->select(a|a.componentInstance=self)->any(true).resourceInstance;
}


/**
 	Returns  PortInstances to which the PortInstance is connected
 	delegation portInstances are ignored by filtering portInstances whose componentInstance is NOT a AtomicComponentInstance
 	Thus, only "real" PortInstances are returned
**/
query PortInstance::getConnectedPortInstances():Collection(PortInstance){
		var connectorEndPointInstances:Set(ConnectorEndpointInstance) :=self.connectorInstances.connectorEndpointInstances->closure(connectorInstances.connectorEndpointInstances);
		var portInstances:Bag(PortInstance) = connectorEndPointInstances->select(e|e.oclIsKindOf(PortInstance) and e<>self and e.oclAsType(PortInstance).componentInstance.oclIsKindOf(AtomicComponentInstance)).oclAsType(PortInstance);
		return portInstances;
}

query SystemAllocation::getAllUsedMessages():Collection(MessageType){
	var senderMessages: Collection(MessageType):=self.allocations.componentInstance.componentType.ports[DiscretePort].senderMessageTypes;
	var receiverMessages: Collection(MessageType):=self.allocations.componentInstance.componentType.ports[DiscretePort].receiverMessageTypes;
	return senderMessages->asSet()->union(receiverMessages->asSet());
}




query getECUConfigurationName(ecu:StructuredResourceInstance):String{
	return ecu.name+"_config"
}

query getContainerName(container:ComponentContainer):String{
	return "MCC_"+container.componentType.name+ 'Component';
}