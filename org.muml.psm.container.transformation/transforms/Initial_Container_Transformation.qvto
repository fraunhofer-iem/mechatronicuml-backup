transformation Initial_Container_Transformation(in mumlModel:PSM, out containerModel:MumlContainer);
import Naming_Library;
import org.muml.container._library.DDSHelperBlackBox;
	

modeltype MumlPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype Typespackage uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype MessagePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype RTSCPackage uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype ProtocolPackage uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype InstancePackage uses pim::instance('http://www.muml.org/pim/1.0.0');
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype ModelInstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype Actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');


modeltype Hardware uses hardware('http://www.muml.org/pm/hardware/1.0.0');
modeltype Platform uses hardware::hwplatform('http://www.muml.org/pm/hardware/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype Resource uses hardware::hwresource('http://www.muml.org/pm/hardware/1.0.0');


modeltype PSM uses psm('http://www.muml.org/psm/1.0.0');
modeltype Allocation uses psm::allocation('http://www.muml.org/psm/1.0.0');


modeltype MumlContainer uses muml_container('http://www.muml.org/psm/muml_container/0.5.0');
modeltype ECore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

intermediate property PortInstance::partnerConfig:PortInstanceConfiguration;

property systemallocation:SystemAllocation;


main() {
	var startTime : Integer;
	var endTime : Integer;
	systemallocation:=mumlModel.rootObjects()[SystemAllocation]->any(true);
	if(systemallocation=null) then{
		systemallocation:=SystemAllocation.allInstances()->any(true);
	}endif;
	startTime := getCurrentTime();
	systemallocation.map mapSystemAllocation();
	endTime := getCurrentTime();
	log("Time for create Deployment Configuration:"+((endTime-startTime)/1000).toString()+" seconds");
	
	
}



mapping SystemAllocation::mapSystemAllocation():DeploymentConfiguration{
	systemAllocation:=self;
	ecuConfigurations+=self.allocations.resourceInstance->map mapECUConfiguration();	
}


mapping StructuredResourceInstance::mapECUConfiguration():ECUConfiguration{
	structuredResourceInstance:=self;
	log("Create ECU Config for ECU:"+self.name);
	/**
	* Create for all ComponentInstance of Same Component Type a Container per ECU
	*/
	var componentInstancesForECU :Sequence(ComponentInstance) = systemallocation.getAllAllocatedAtomicComponentInstances(self);
	componentInstancesForECU.componentType->asOrderedSet()->forEach(componentType){
		log("Create Container for Component:"+componentType.name +" instances: "+componentInstancesForECU->size().toString());
	
		var componentInstancesOfComponentTypeForECU :Collection(ComponentInstance) = componentInstancesForECU->select(ci|ci.componentType = componentType); 
		log("componentInstancesOfComponentTypeForECU"+componentInstancesForECU->size().toString());
		componentContainers+=self.map mapComponent2Container(componentType,componentInstancesOfComponentTypeForECU);
	};
	
	//name works on attribute so at last
	name:=getECUConfigurationName(self);
	}

/**
* Creates a container for the specified ECU, for the given component-type and the set of componentInstances
*/
mapping StructuredResourceInstance::mapComponent2Container(cmp:Component, cic:Collection(ComponentInstance)):ComponentContainer{
		log("Created Container for Component:"+cmp.name);

	componentType:=cmp;
	componentInstanceConfigurations+=cic->map mapComponentInstance2ContainerComponentInstanceConfiguration();
	componentInstances:=cic;
	name:=getContainerName(result);
}

mapping ComponentInstance::mapComponentInstance2ContainerComponentInstanceConfiguration():ContainerComponentInstanceConfiguration{
	componentInstance:=self; 
	portInstanceConfigurations+=self.portInstances->createPortInstance2PortInstanceConfiguration();
}


helper PortInstance::createPortInstance2PortInstanceConfiguration():PortInstanceConfiguration{
	var connectedPortInstances:Collection(PortInstance) :=self.getConnectedPortInstances();
	var portInstanceConfig : PortInstanceConfiguration = null;
	//get the own ECU
	var ownECU : StructuredResourceInstance := self.componentInstance.getAllocatedECU(systemallocation);
	
	//check if we have a broad/multi-cast port
	if(connectedPortInstances->size()>1) then{
		
	}
	else{
	// we have a one-to-one port
		var targetPortInstance : PortInstance := connectedPortInstances->any(true);
		//get the target ECU
		var targetECU: StructuredResourceInstance:= targetPortInstance.componentInstance.getAllocatedECU(systemallocation);
		//check if the connected PortInstances are hosted on the same ECU if(ownECU=targetECU) then{
		if(false) then{
			//create a Local Connector;
			portInstanceConfig :=  object PortInstanceConfiguration_Local {
				portInstance:=self;
				hwportInstance:=null;
				
				//FIXME: compoute ownID and writersID
				//target and source port shall share the same connector ID;
				ownID:= getHash(Set{self});
				writersID:=getHash(Set{targetPortInstance});
			};
			return portInstanceConfig;
		}else {
			log("distributed allocation");
			// ownECU and targetECU are different
			var hwport: HWPortInstance := getNetworkInterface(ownECU, targetECU, systemallocation.getRootHPIC());
			if(hwport.protocol.oclIsKindOf(LinkProtocol)) then{
			
				var protocolKind : LinkProtocolKind := hwport.protocol.oclAsType(LinkProtocol).linkProtocol;
				
				switch{
					//case (protocolKind=LinkProtocolKind::ETHERNET){
					case (true){
						portInstanceConfig:= object PortInstanceConfiguration_DDS{
							portInstance:=self;
							hwportInstance:=hwport;
							partitionID:=getHash(Set{self,targetPortInstance});
							log("created DDS Config");
							};
						}
					else{
						
					}
					
				};
				
			}endif;
			
			
			
		}endif;
		
		
	
	}endif;
	
	return portInstanceConfig;
}

