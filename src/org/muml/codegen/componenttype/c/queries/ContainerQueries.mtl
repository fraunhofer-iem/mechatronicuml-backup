[comment encoding = UTF-8 /]
[module ContainerQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]


[import org::muml::codegen::componenttype::c::queries::stringQueries]
[import org::muml::codegen::componenttype::c::actionlanguage::expression]




[query public getMessageType(msgType : MessageType) : String = 
	msgType.getName() +'_'+ msgType.repository.getName() +'_Message'
/]

[query public getContainerReceiverMethodName(port:Port, msgType:MessageType): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_recv_'+msgType.getMessageType()
/]

[query public getContainerCheckForMessageMethodName(port:Port, msgType:MessageType): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_exists_'+msgType.getMessageType()
/]

[query public getContainerSendMethodName(port:Port, msgType:MessageType): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_send_'+msgType.getMessageType()
/]

[query public getComponetInterfaceHeaderName(cmp:Component) : String =
	cmp.getClassName()+'_Interface'
/]

 [comment methods for directedTypedPort /]
[query public getContainerCheckForMessageMethodName(port:DirectedTypedPort): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_exists_'+'value'
/]

[query public getContainerSendMethodName(port:DirectedTypedPort): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_send_'+'value'
/]

[query public getContainerReceiverMethodName(port:DirectedTypedPort): String =
	'MCC_'+port.component.getClassName()+'_'+port.getName()+'_recv_'+'value'
/]


[**
 * @param operation
*/]
[query public getHeaderDefineComponentInterface(component : Component) : String = 
	getClassName(component).toUpper()+'_Interface_H_'
/]


[query public getFileNameComponentInterface(component : Component, useSubDir : Boolean) : String = 
if (component.oclIsUndefined()) then
'#error null value '
else
	if useSubDir then 'components/' else '' endif + 
		getClassName(component).toLowerFirst()+'_Interface.h'
endif

/]

[**
 * returns the C-type name for a given MessageType
 * @param msgT the message type
 * @return C-type for a the given message type
*/]
[query public getTypeName (msgT: MessageType) : String = 
msgT.getVariableName()+'_Message'/]


[template public generate_ContainerFunctionDefinitions(component:Component)]
[for (port : DiscretePort | component.ports->filter(DiscretePort))]
	[for (sendMsg : MessageType | port.senderMessageTypes)]
		void [getContainerSendMethodName(port, sendMsg)/](Port* p, [sendMsg.getMessageType()/]* msg);
	[/for]
	[for (recvMsg : MessageType | port.receiverMessageTypes)]
		bool_t [getContainerReceiverMethodName(port, recvMsg)/](Port* p, [recvMsg.getMessageType()/]* msg);
		bool_t [getContainerCheckForMessageMethodName(port, recvMsg)/](Port* p);
	[/for]
[/for]

[for (port : DirectedTypedPort | component.ports->filter(DirectedTypedPort))]
		[if (port.outPort)]
			void [getContainerSendMethodName(port)/](Port* p, [port.dataType.getTypeName()/]* value);
		[/if]
		[if port.inPort]
		bool_t [getContainerReceiverMethodName(port)/](Port* p, [port.dataType.getTypeName()/]* value);
		bool_t [getContainerCheckForMessageMethodName(port)/](Port* p);
		[/if]
[/for]

[/template]

