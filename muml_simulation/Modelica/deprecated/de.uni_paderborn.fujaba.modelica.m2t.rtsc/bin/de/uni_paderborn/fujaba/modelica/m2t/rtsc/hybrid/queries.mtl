[module queries('http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0')/]

[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::type]

[**
 * Returns the name of the hybrid port instance. The name of the hybrid port instance
 * is the name of its _portType_ (this is needed because the portType name is used in expressions).
 * @param portInstance the port instance
*/]
[query public getName(portInstance : PortInstance) : String =
	portInstance.portType.name
/]

[**
 * Returns the name of the variable which stores the sampled value of a hybrid port instance.
 * @FIXME the generated name might NOT be unique (a variable with the same name might exist...)
 * @param hybridPortInstance the hybrid port instance
*/]
[query public getSampledValueVariableName(hybridPortInstance : HybridPortInstance) : String =
	hybridPortInstance.getName() + '_sampled'
/]

[**
 * Returns the Modelica connector type for the passed directed typed port.
 * @param directedTypedPort the directed typed port
*/]
[query private getModelicaConnectorType(directedTypedPort : DirectedTypedPort) : String =
	'Modelica.Blocks.Interfaces.' + directedTypedPort.dataType.getType()
	+ if directedTypedPort.inPort then 'Input' else 'Output' endif
/]

[**
 * Returns the Modelica connector type for the passed hybrid or continuous port instance
 * (do not use this query for a discrete port instance).
 * @param portInstance the port instance
*/]
[query public getModelicaConnectorType(portInstance : PortInstance) : String =
	portInstance.portType.oclAsType(DirectedTypedPort).getModelicaConnectorType()
/]

[**
 * Returns the name of a continuous or hybrid port instance
 * (do not use this query for a discrete port instance).
 * @param portInstance the port instance
*/]
[query public getPortName(portInstance : PortInstance) : String =
	portInstance.getName() + 'Port'
/]