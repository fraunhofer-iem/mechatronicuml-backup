[module expression_queries('http://www.storydriven.org/core/0.3.1',
						   'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
						   'http://www.fujaba.de/muml/actionlanguage/0.4.0')/]

[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::naming]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::rtsc]

[**
 * Returns the operator of a comparing operator
 * @param comparingOperator the comparing operator
*/]
[query public getComparingOperator(comparingOperator : ComparingOperator) : String =
	if comparingOperator = ComparingOperator::LESS then
		'<'
	else if comparingOperator = ComparingOperator::LESS_OR_EQUAL then
		'<='
	else if comparingOperator = ComparingOperator::GREATER then
		'>'
	else if comparingOperator = ComparingOperator::GREATER_OR_EQUAL then
		'>='
	else if comparingOperator = ComparingOperator::EQUAL then
		'=='
	else
		'<>'
	endif
	endif
	endif
	endif
	endif
/]

[**
 * Returns a corresponding modelica logic operator
 * @param logicOperator the logic operator
*/]
[query public getLogicOperator(logicOperator : LogicOperator) : String =
	if logicOperator = LogicOperator::AND then
		'and'
	else if logicOperator = LogicOperator::OR then
		'or'
	else
		'unsupported op'
	endif
	endif
/]

[**
 * Returns a corresponding modelica arithmetic operator
 * @param arithmeticOperator the arithmetic operator
*/]
[query public getArithmeticOperator(arithmeticOperator : ArithmeticOperator) : String =
	if arithmeticOperator = ArithmeticOperator::PLUS then
		'+'
	else if arithmeticOperator = ArithmeticOperator::MINUS then
		'-'
	else if arithmeticOperator = ArithmeticOperator::TIMES then
		'*'
	else if arithmeticOperator = ArithmeticOperator::DIVIDE then
		'/'
	else
		'unsupported'
	endif
	endif
	endif
	endif
/]

[**
 * Returns a corresponding modelica unary operator
 * @param unaryOperator the unary operator
*/]
[query public getUnaryOperator(unaryOperator : UnaryOperator) : String =
	if unaryOperator = UnaryOperator::MINUS then
		'-'
	else if unaryOperator = UnaryOperator::INCREMENT then
		'++'
	else if unaryOperator = UnaryOperator::DECREMENT then
		'--'
	else
		'unsupported'
	endif
	endif
	endif
/]

[**
 * Returns the rtsc which contains the trigger message expression's
 * transition (that is the transition which contains the expression).
 * @param expression the trigger message expression 
*/]
[query private getStatechart(expression : TriggerMessageExpression) : RealtimeStatechart =
	expression.oclAsType(ecore::EObject)->asSet()->closure(e : ecore::EObject |
		if not e.oclIsKindOf(Transition) then
			e.eContainer()
		else
			e
		endif
	)->any(oclIsKindOf(Transition)).oclAsType(Transition).statechart
/]

[**
 * Returns the fully qualified name of the trigger message expression's parameter
 * variable. The variable is located in the port statechart.
 * @param expression the trigger message expression
*/]
[query public getTriggerMessageEventParameterVariableFullyQualifiedName(expression : TriggerMessageExpression) : String =
	expression.getStatechart().getParentPortStatechart().getFullyQualifiedName()
		+ '.' + expression.parameter.getTriggerMessageEventParameterVariableName(expression.messageType)
/]