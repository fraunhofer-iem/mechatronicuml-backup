[module rtsc('http://www.fujaba.de/muml/behavior/0.4.0',
			 'http://www.storydriven.org/core/0.3.1',
			 'http://www.fujaba.de/muml/actionlanguage/0.4.0',
			 'http://www.fujaba.de/muml/msgtype/0.4.0',
			 'http://www.fujaba.de/muml/types/0.4.0',
			 'http://www.fujaba.de/modelinstance/0.4.0',
			 'http://www.fujaba.de/muml/component/0.4.0',
			 'http://www.fujaba.de/muml/instance/0.4.0',
			 'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
			 'http://www.fujaba.de/muml/realtimestatechart/0.4.0')/]

[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::actionlanguage::variable]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::actionlanguage::operation]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::state::state]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::transition::transition]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::clock::clock]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::async::async]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::hybrid::hybrid]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::pkg]
[import de::uni_paderborn::fujaba::modelica::m2t::component::port]

[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::annotation]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::rtsc]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::keyword]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::naming]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::state::queries]


[**
 * This is the main template for generating a RTSC
 * @param aRealtimeStatechart the RealtimeStatechart which will be translated
 * @param hybridPortInstanceSet the set of hybrid port instances
 * @param parentPackage the name of the parent package
 */]
[template public generateRTSC(aRealtimeStatechart : RealtimeStatechart, hybridPortInstanceSet : Set(HybridPortInstance), parentPackage : String)]
[aRealtimeStatechart.createLayoutAnnotations() /]
[aRealtimeStatechart.checkModelicaKeywords() /]
[createPackage(aRealtimeStatechart.getModelName(), parentPackage)/]
[file (aRealtimeStatechart.getPath(parentPackage), false, 'UTF-8')]
[within(aRealtimeStatechart.getModelName(), parentPackage)/]
model [aRealtimeStatechart.getModelName()/][if not aRealtimeStatechart.isComponentRTSC()] extends Modelica_StateGraph2.PartialParallel(nEntry=1);[/if]
	[createDiagramAnnotation(aRealtimeStatechart) /];
	[createVariableDeclarations(aRealtimeStatechart)/]
	[createHybridPortDeclarations(hybridPortInstanceSet, aRealtimeStatechart.isComponentRTSC())/]
	[createLocalVariableDeclarations(aRealtimeStatechart)/]
	[createStateDeclarations(aRealtimeStatechart)/]
	[if aRealtimeStatechart.isComponentRTSC()][createDoEventVariableDeclarations(aRealtimeStatechart)/][/if]
	[createDelegationStateDeclaration(aRealtimeStatechart)/]
	[if aRealtimeStatechart.isEnterable()][createEntryPointInputDeclarations(aRealtimeStatechart.getEntryPoints()->collect(state)->asSet())/][/if]
	[createTransitionDeclarations(aRealtimeStatechart.transitions)/]
	[createDelegationTransitionDeclarations(aRealtimeStatechart)/]
	[createClockDeclarations(aRealtimeStatechart)/]
	[createClockConstraintDeclarations(aRealtimeStatechart.transitions)/]
	[if aRealtimeStatechart.isPortRTSC()]
	[createRaiseMessageEventDeclarations(aRealtimeStatechart)/]
	[createTriggerMessageEventDeclarations(aRealtimeStatechart)/]
	[elseif aRealtimeStatechart.isComponentRTSC() or aRealtimeStatechart.isMultiPortRTSC()]
	[createPortDeclarations(aRealtimeStatechart)/]
	[/if]
	equation
		[if not aRealtimeStatechart.isComponentRTSC()][connectInitialStep(aRealtimeStatechart)/][/if]
		[connectSteps(aRealtimeStatechart.transitions)/]
		[connectDelegationTransitions(aRealtimeStatechart)/]
		[connectEntryPointInputs(aRealtimeStatechart)/]
		[createClockConstraints(aRealtimeStatechart.transitions)/]
		[createStateInvariants(aRealtimeStatechart.states)/]
		[if aRealtimeStatechart.isPortRTSC()]
		[createRaiseMessageEvents(aRealtimeStatechart)/]
		[createTriggerMessageEvents(aRealtimeStatechart)/]
		[elseif aRealtimeStatechart.isComponentRTSC()]
		[connectClockResets(aRealtimeStatechart)/]
		[connectSynchronizationChannels(aRealtimeStatechart)/]
		[createHybridPortEquations(hybridPortInstanceSet)/]
		[/if]
		[if aRealtimeStatechart.isComponentRTSC() or aRealtimeStatechart.isMultiPortRTSC()]
		[connectPorts(aRealtimeStatechart)/]
		[/if]
	[if aRealtimeStatechart.isComponentRTSC()]
	[rwHybridPortSampledValueVariable(hybridPortInstanceSet)/]
	algorithm
		[generateExitActions(aRealtimeStatechart)/]
		[triggerMessageEventsAssignParameterVariables(aRealtimeStatechart)/]
		[generateTransitionAction(aRealtimeStatechart) /]
		[raiseMessageEventsAssignPBVariables(aRealtimeStatechart)/]
		[generateEntryActions(aRealtimeStatechart)/]
		[generateDoEventActions(aRealtimeStatechart)/]
	[/if]
end [aRealtimeStatechart.getModelName()/];

[/file]
[comment generate region statecharts /]
[generateRegionStatecharts(aRealtimeStatechart, hybridPortInstanceSet, aRealtimeStatechart.getModelName().getFullyQualifiedSubpackageName(parentPackage))/]
[generateOperations(aRealtimeStatechart, aRealtimeStatechart.getModelName().getFullyQualifiedSubpackageName(parentPackage))/]
[/template]

[**
 * Generate a complex state and its corresponding region statecharts
 * for each state which contains one or more regions.
 * @param rtsc the realtimestatechart
 * @param hybridPortInstanceSet the set of hybrid port instances
 * @param parentPackage the name of the parent package
*/]
[template public generateRegionStatecharts(rtsc : RealtimeStatechart, hybridPortInstanceSet : Set(HybridPortInstance), parentPackage : String)]
[for (state : realtimestatechart::State | rtsc.states->select(embeddedRegions->notEmpty()))]
	[let pkg : String = state.getComplexStateModelName().getFullyQualifiedSubpackageName(parentPackage)]
	[generateComplexState(state, parentPackage)/]
	[for (region : Region | state.embeddedRegions)]
		[generateRTSC(region.embeddedStatechart, hybridPortInstanceSet, pkg) /]
	[/for]
	[/let]
[/for]
[/template]

[**
 * Create an annotation for the diagram
 * @param rtsc the realtimestatechart
*/]
[query public createDiagramAnnotation(rtsc : RealtimeStatechart) : String =
	let width : String = rtsc.getAnnotationDetail('MODELICA_CODEGEN', 'width')
	in
	let height : String = rtsc.getAnnotationDetail('MODELICA_CODEGEN', 'height')
	in
	'annotation (Diagram(coordinateSystem(extent = {{-' + width + ', -' + height + '}, {' + width + ', ' + height + '}})))'
/]

[query public createLayoutAnnotations(rtsc : RealtimeStatechart) : OclAny =
	invoke('de.uni_paderborn.fujaba.modelica.m2t.rtsc.transformation.RealtimeStatechartLayouter',
		'layout(de.uni_paderborn.fujaba.muml.realtimestatechart.RealtimeStatechart)',
		Sequence{rtsc})
/]