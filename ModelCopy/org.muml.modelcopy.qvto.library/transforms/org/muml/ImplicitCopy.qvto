library ImplicitCopy;

import org.muml.modelcopy.qvto._library.ImplicitCopyBlackbox;

modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

mapping Element::create() : Element {
	init {
		result := self.map create(null);
	}
}

mapping Element::create(context : OclAny) : Element {
	init {
	if(self.oclAsType(EObject).eResource().toString().matches("platform:/plugin")) then{
		result:=self.oclAsType(EObject);
	}else{
		var eclass : ecore::EClass := self.oclAsType(EObject).eClass();
		var factory : ecore::EFactory := eclass.ePackage.eFactoryInstance;
		result := factory.create(self.oclAsType(EObject).eClass());
		}endif;
	}
}

query Element :: getValues(feature : EStructuralFeature) : Sequence(OclAny) {
	
	var value = self.oclAsType(EObject).eGet(feature);
	
	if (feature.many) {
		return value.oclAsType(Sequence(OclAny));
	}
	elif (not value.oclIsUndefined()) {
		return Sequence{value};
	};
	
	return Sequence{};
}

mapping Element::transform() : Element {
	init {
		if (result.oclIsUndefined()) {
			result := self.map create();
		}
	}
	var element := self.oclAsType(EObject);
	element.eClass().eAllReferences->select(f | f.isValidFeature())->forEach(f) {
		setValues(result.oclAsType(EObject), f, element.getValues(f)[Element].map transform());
	};
	element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
		setValues(result.oclAsType(EObject), f, element.getValues(f));
	};
}


mapping Element::transformWithContext(context : OclAny) : Element {
	init {
		if (result.oclIsUndefined()) {
			result := self.map create(context);
		}
	}
	var element := self.oclAsType(EObject);
	element.eClass().eAllReferences->select(f | f.isValidFeature())->forEach(f) {
		setValues(result.oclAsType(EObject), f, element.getValues(f)[Element].map transformWithContext(context));
	};
	element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
		setValues(result.oclAsType(EObject), f, element.getValues(f));
	};
}

query EStructuralFeature::isValidFeature() : Boolean {
	return self.changeable and not self._derived;
}