<?xml version="1.0" encoding="UTF-8"?>
<gmfgen:GenEditorGenerator
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:gmfgen="http://www.eclipse.org/gmf/2009/GenModel"
    packageNamePrefix="de.uni_paderborn.fujaba.muml.deployment.diagram"
    modelID="Deployment"
    diagramFileExtension="deployment_diagram"
    domainFileExtension="fujaba"
    dynamicTemplates="true"
    templateDirectory="/de.uni_paderborn.fujaba.muml.common/gmf-templates"
    copyrightText="&lt;copyright>&#xD;&#xA;Copyright (c) 2013 Software Engineering Group, Heinz Nixdorf Institute, University of Paderborn, Germany.&#xD;&#xA;All rights reserved. This program and the accompanying materials&#xD;&#xA;are made available under the terms of the Eclipse Public License v1.0&#xD;&#xA;which accompanies this distribution, and is available at&#xD;&#xA;http://www.eclipse.org/legal/epl-v10.html&#xD;&#xA;&#xD;&#xA;Contributors:&#xD;&#xA;    Software Engineering Group - initial API and implementation&#xD;&#xA;&lt;/copyright>"
    pluginDirectory="/de.uni_paderborn.fujaba.muml.deployment.diagram/src">
  <diagram
      visualID="1000"
      editPartClassName="DeploymentEditPart"
      itemSemanticEditPolicyClassName="DeploymentItemSemanticEditPolicy"
      canonicalEditPolicyClassName="DeploymentCanonicalEditPolicy"
      iconProviderPriority="Low"
      creationWizardCategoryID="de.uni_paderborn.fujaba/de.uni_paderborn.fujaba.diagrams"
      validationProviderPriority="Low"
      validationEnabled="true"
      validationDecorators="true">
    <diagramRunTimeClass
        href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Diagram"/>
    <elementType
        xsi:type="gmfgen:MetamodelType"
        editHelperClassName="DeploymentEditHelper"/>
    <viewmap
        xsi:type="gmfgen:FigureViewmap"
        figureQualifiedClassName="org.eclipse.draw2d.FreeformLayer"/>
    <domainDiagramElement
        href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/Deployment"/>
    <childNodes
        xsi:type="gmfgen:GenChildSideAffixedNode"
        visualID="3003"
        editPartClassName="HardwarePortEditPart"
        itemSemanticEditPolicyClassName="HardwarePortItemSemanticEditPolicy"
        notationViewFactoryClassName="HardwarePortViewFactory"
        canonicalEditPolicyClassName="HardwarePortCanonicalEditPolicy"
        graphicalNodeEditPolicyClassName="HardwarePortGraphicalNodeEditPolicy"
        createCommandClassName="HardwarePortCreateCommand"
        containers="//@diagram/@topLevelNodes.0"
        preferredSideName="WEST">
      <diagramRunTimeClass
          href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Node"/>
      <elementType
          xsi:type="gmfgen:MetamodelType"
          editHelperClassName="HardwarePortEditHelper"/>
      <viewmap
          xsi:type="gmfgen:InnerClassViewmap"
          className="HardwarePortFigure"
          classBody="&#xA;/**&#xA; * @generated&#xA; */&#xA;public class HardwarePortFigure extends org.eclipse.draw2d.RectangleFigure {&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private org.eclipse.draw2d.RectangleFigure fFigureInOutContainer; &#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private org.eclipse.draw2d.RectangleFigure fFigureInContainer; &#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private org.eclipse.draw2d.RectangleFigure fFigureOutContainer; &#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public HardwarePortFigure() {&#xA;&#x9;&#x9;this.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#x9;&#x9;this.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(20)&#xA;, getMapMode().DPtoLP(20)&#xA;));&#xA;this.setMaximumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(20)&#xA;, getMapMode().DPtoLP(20)&#xA;));&#xA;this.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(20)&#xA;, getMapMode().DPtoLP(20)&#xA;));&#xA;this.setSize(getMapMode().DPtoLP(20)&#xA;, getMapMode().DPtoLP(20)&#xA;);&#xA;this.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(1)&#xA;, getMapMode().DPtoLP(1)&#xA;, getMapMode().DPtoLP(1)&#xA;, getMapMode().DPtoLP(1)&#xA;));&#xA;&#x9;&#x9;createContents();&#xA;&#x9;}&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private void createContents(){&#xA;&#xA;&#xA;fFigureInContainer = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;fFigureInContainer.setOutline(false);&#xA;fFigureInContainer.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(2)&#xA;, getMapMode().DPtoLP(7)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#xA;this.add(fFigureInContainer);&#xA;fFigureInContainer.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel inLabel1 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();&#xA;&#xA;inLabel1.setText(&quot;i&quot;);&#xA;&#x9;inLabel1.setForegroundColor(INLABEL1_FORE&#xA;);&#xA;&#xA;inLabel1.setFont(INLABEL1_FONT);&#xA;&#xA;&#xA;&#xA;fFigureInContainer.add(inLabel1);&#xA;&#xA;&#xA;&#xA;&#xA;fFigureOutContainer = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;fFigureOutContainer.setOutline(false);&#xA;fFigureOutContainer.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(2)&#xA;, getMapMode().DPtoLP(6)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#xA;this.add(fFigureOutContainer);&#xA;fFigureOutContainer.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel outLabel1 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();&#xA;&#xA;outLabel1.setText(&quot;o&quot;);&#xA;&#x9;outLabel1.setForegroundColor(OUTLABEL1_FORE&#xA;);&#xA;&#xA;outLabel1.setFont(OUTLABEL1_FONT);&#xA;&#xA;&#xA;&#xA;fFigureOutContainer.add(outLabel1);&#xA;&#xA;&#xA;&#xA;&#xA;fFigureInOutContainer = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;fFigureInOutContainer.setOutline(false);&#xA;fFigureInOutContainer.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(2)&#xA;, getMapMode().DPtoLP(4)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#xA;this.add(fFigureInOutContainer);&#xA;fFigureInOutContainer.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel inOutLabel1 = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();&#xA;&#xA;inOutLabel1.setText(&quot;i/o&quot;);&#xA;&#x9;inOutLabel1.setForegroundColor(INOUTLABEL1_FORE&#xA;);&#xA;&#xA;inOutLabel1.setFont(INOUTLABEL1_FONT);&#xA;&#xA;&#xA;&#xA;fFigureInOutContainer.add(inOutLabel1);&#xA;&#xA;&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public org.eclipse.draw2d.RectangleFigure getFigureInOutContainer() {&#xA;&#x9;&#x9;return fFigureInOutContainer;&#xA;&#x9;}&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public org.eclipse.draw2d.RectangleFigure getFigureInContainer() {&#xA;&#x9;&#x9;return fFigureInContainer;&#xA;&#x9;}&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public org.eclipse.draw2d.RectangleFigure getFigureOutContainer() {&#xA;&#x9;&#x9;return fFigureOutContainer;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color INLABEL1_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Font INLABEL1_FONT = new org.eclipse.swt.graphics.Font(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.widgets.Display.getDefault().getSystemFont().getFontData()[0].getName(), 7, org.eclipse.swt.SWT.NORMAL);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color OUTLABEL1_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Font OUTLABEL1_FONT = new org.eclipse.swt.graphics.Font(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.widgets.Display.getDefault().getSystemFont().getFontData()[0].getName(), 7, org.eclipse.swt.SWT.NORMAL);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color INOUTLABEL1_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Font INOUTLABEL1_FONT = new org.eclipse.swt.graphics.Font(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.widgets.Display.getDefault().getSystemFont().getFontData()[0].getName(), 7, org.eclipse.swt.SWT.NORMAL);&#xA;&#xA;">
        <attributes
            xsi:type="gmfgen:DefaultSizeAttributes"
            width="20"
            height="20"/>
      </viewmap>
      <modelFacet>
        <metaClass
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/HardwarePort"/>
        <containmentMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/HardwareNode/hardwarePorts"/>
        <childMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/HardwareNode/hardwarePorts"/>
        <modelElementInitializer
            xsi:type="gmfgen:GenFeatureSeqInitializer">
          <initializers
              xsi:type="gmfgen:GenFeatureValueSpec"
              value="//@expressionProviders/@providers.0/@expressions.1">
            <feature
                href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
          </initializers>
        </modelElementInitializer>
      </modelFacet>
      <labels
          xsi:type="gmfgen:GenExternalNodeLabel"
          visualID="5005"
          editPartClassName="HardwarePortNameEditPart"
          itemSemanticEditPolicyClassName="HardwarePortNameItemSemanticEditPolicy"
          notationViewFactoryClassName="HardwarePortNameViewFactory">
        <diagramRunTimeClass
            href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Node"/>
        <viewmap
            xsi:type="gmfgen:FigureViewmap"
            figureQualifiedClassName="org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel"/>
        <modelFacet
            xsi:type="gmfgen:FeatureLabelModelFacet"
            parser="//@labelParsers/@implementations.0">
          <metaFeatures
              href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
          <editableMetaFeatures
              href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
        </modelFacet>
      </labels>
    </childNodes>
    <topLevelNodes
        visualID="2003"
        editPartClassName="HardwareNodeEditPart"
        itemSemanticEditPolicyClassName="HardwareNodeItemSemanticEditPolicy"
        notationViewFactoryClassName="HardwareNodeViewFactory"
        canonicalEditPolicyClassName="HardwareNodeCanonicalEditPolicy"
        childNodes="//@diagram/@childNodes.0"
        graphicalNodeEditPolicyClassName="HardwareNodeGraphicalNodeEditPolicy"
        createCommandClassName="HardwareNodeCreateCommand">
      <diagramRunTimeClass
          href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Node"/>
      <elementType
          xsi:type="gmfgen:MetamodelType"
          editHelperClassName="HardwareNodeEditHelper"/>
      <viewmap
          xsi:type="gmfgen:InnerClassViewmap"
          className="HardwareNodeFigure"
          classBody="&#xA;/**&#xA; * @generated&#xA; */&#xA;public class HardwareNodeFigure extends org.eclipse.draw2d.RectangleFigure {&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel fFigureComponentNameFigure; &#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public HardwareNodeFigure() {&#xA;&#x9;&#x9;this.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#x9;&#x9;this.setFill(false);&#xA;this.setOutline(false);&#xA;&#x9;&#x9;createContents();&#xA;&#x9;}&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;private void createContents(){&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperShadow0 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;upperShadow0.setFill(false);&#xA;upperShadow0.setOutline(false);&#xA;&#xA;this.add(upperShadow0);&#xA;&#xA;&#x9;org.eclipse.draw2d.BorderLayout layoutUpperShadow0 = new org.eclipse.draw2d.BorderLayout();&#xA;&#x9;upperShadow0.setLayoutManager(layoutUpperShadow0);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperLeftRectangle1 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;upperLeftRectangle1.setFill(false);&#xA;upperLeftRectangle1.setOutline(false);&#xA;upperLeftRectangle1.setSize(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;);&#xA;&#xA;upperShadow0.add(upperLeftRectangle1, org.eclipse.draw2d.BorderLayout.LEFT);&#xA;upperLeftRectangle1.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.PolygonShape leftPolygon2 = new org.eclipse.draw2d.PolygonShape();&#xA;&#xA;leftPolygon2.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;leftPolygon2.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;leftPolygon2.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;leftPolygon2.setFill(true);&#xA;leftPolygon2.setOutline(false);&#xA;&#x9;leftPolygon2.setForegroundColor(LEFTPOLYGON2_FORE&#xA;);&#xA;&#x9;leftPolygon2.setBackgroundColor(LEFTPOLYGON2_BACK&#xA;);&#xA;leftPolygon2.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;leftPolygon2.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;leftPolygon2.setSize(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;);&#xA;&#xA;upperLeftRectangle1.add(leftPolygon2);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.PolylineShape leftLine2 = new org.eclipse.draw2d.PolylineShape();&#xA;&#xA;leftLine2.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;leftLine2.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#x9;leftLine2.setForegroundColor(LEFTLINE2_FORE&#xA;);&#xA;&#xA;upperLeftRectangle1.add(leftLine2);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperMiddleRectangle1 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;upperMiddleRectangle1.setOutline(false);&#xA;upperMiddleRectangle1.setLineWidth(0);&#xA;&#x9;upperMiddleRectangle1.setBackgroundColor(UPPERMIDDLERECTANGLE1_BACK&#xA;);&#xA;&#xA;upperShadow0.add(upperMiddleRectangle1, org.eclipse.draw2d.BorderLayout.CENTER);&#xA;&#xA;&#x9;org.eclipse.draw2d.BorderLayout layoutUpperMiddleRectangle1 = new org.eclipse.draw2d.BorderLayout();&#xA;&#x9;upperMiddleRectangle1.setLayoutManager(layoutUpperMiddleRectangle1);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperLine2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;upperLine2.setForegroundColor(UPPERLINE2_FORE&#xA;);&#xA;&#x9;upperLine2.setBackgroundColor(UPPERLINE2_BACK&#xA;);&#xA;upperLine2.setSize(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(1)&#xA;);&#xA;&#xA;upperMiddleRectangle1.add(upperLine2, org.eclipse.draw2d.BorderLayout.TOP);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure rightShadow1 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;rightShadow1.setFill(false);&#xA;rightShadow1.setOutline(false);&#xA;rightShadow1.setLineWidth(0);&#xA;&#xA;upperShadow0.add(rightShadow1, org.eclipse.draw2d.BorderLayout.RIGHT);&#xA;&#xA;&#x9;org.eclipse.draw2d.BorderLayout layoutRightShadow1 = new org.eclipse.draw2d.BorderLayout();&#xA;&#x9;rightShadow1.setLayoutManager(layoutRightShadow1);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperRightRectangle2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;upperRightRectangle2.setFill(false);&#xA;upperRightRectangle2.setOutline(false);&#xA;upperRightRectangle2.setLineWidth(0);&#xA;upperRightRectangle2.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;upperRightRectangle2.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;upperRightRectangle2.setSize(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;);&#xA;&#xA;rightShadow1.add(upperRightRectangle2, org.eclipse.draw2d.BorderLayout.TOP);&#xA;upperRightRectangle2.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure upperRightFilledRectangle3 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;upperRightFilledRectangle3.setOutline(false);&#xA;upperRightFilledRectangle3.setLineWidth(0);&#xA;&#x9;upperRightFilledRectangle3.setBackgroundColor(UPPERRIGHTFILLEDRECTANGLE3_BACK&#xA;);&#xA;upperRightFilledRectangle3.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;upperRightFilledRectangle3.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;upperRightFilledRectangle3.setSize(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;);&#xA;&#xA;upperRightRectangle2.add(upperRightFilledRectangle3);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.PolylineShape diagonalLine3 = new org.eclipse.draw2d.PolylineShape();&#xA;&#xA;diagonalLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;diagonalLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(15)&#xA;));&#xA;&#x9;diagonalLine3.setForegroundColor(DIAGONALLINE3_FORE&#xA;);&#xA;&#xA;upperRightRectangle2.add(diagonalLine3);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.PolylineShape upperRightLine3 = new org.eclipse.draw2d.PolylineShape();&#xA;&#xA;upperRightLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;upperRightLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#x9;upperRightLine3.setForegroundColor(UPPERRIGHTLINE3_FORE&#xA;);&#xA;&#xA;upperRightRectangle2.add(upperRightLine3);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.PolylineShape rightUpperLine3 = new org.eclipse.draw2d.PolylineShape();&#xA;&#xA;rightUpperLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(1)&#xA;));&#xA;rightUpperLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(15)&#xA;));&#xA;&#x9;rightUpperLine3.setForegroundColor(RIGHTUPPERLINE3_FORE&#xA;);&#xA;&#xA;upperRightRectangle2.add(rightUpperLine3);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure middleRightRectangle2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;middleRightRectangle2.setOutline(false);&#xA;middleRightRectangle2.setLineWidth(0);&#xA;&#x9;middleRightRectangle2.setBackgroundColor(MIDDLERIGHTRECTANGLE2_BACK&#xA;);&#xA;&#xA;rightShadow1.add(middleRightRectangle2, org.eclipse.draw2d.BorderLayout.CENTER);&#xA;&#xA;&#x9;org.eclipse.draw2d.BorderLayout layoutMiddleRightRectangle2 = new org.eclipse.draw2d.BorderLayout();&#xA;&#x9;middleRightRectangle2.setLayoutManager(layoutMiddleRightRectangle2);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure rightLine3 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;rightLine3.setBackgroundColor(RIGHTLINE3_BACK&#xA;);&#xA;rightLine3.setSize(getMapMode().DPtoLP(1)&#xA;, getMapMode().DPtoLP(0)&#xA;);&#xA;&#xA;middleRightRectangle2.add(rightLine3, org.eclipse.draw2d.BorderLayout.RIGHT);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure lowerRightRectangle2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;lowerRightRectangle2.setFill(false);&#xA;lowerRightRectangle2.setOutline(false);&#xA;lowerRightRectangle2.setLineWidth(0);&#xA;&#xA;rightShadow1.add(lowerRightRectangle2, org.eclipse.draw2d.BorderLayout.BOTTOM);&#xA;lowerRightRectangle2.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.PolygonShape rightPolygon3 = new org.eclipse.draw2d.PolygonShape();&#xA;&#xA;rightPolygon3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(15)&#xA;));&#xA;rightPolygon3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;rightPolygon3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;rightPolygon3.setFill(true);&#xA;rightPolygon3.setOutline(false);&#xA;rightPolygon3.setLineWidth(0);&#xA;&#x9;rightPolygon3.setBackgroundColor(RIGHTPOLYGON3_BACK&#xA;);&#xA;rightPolygon3.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;rightPolygon3.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;rightPolygon3.setSize(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(16)&#xA;);&#xA;&#xA;lowerRightRectangle2.add(rightPolygon3);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.PolylineShape lowerRightLine3 = new org.eclipse.draw2d.PolylineShape();&#xA;&#xA;lowerRightLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(15)&#xA;));&#xA;lowerRightLine3.addPoint(new org.eclipse.draw2d.geometry.Point(getMapMode().DPtoLP(15)&#xA;, getMapMode().DPtoLP(0)&#xA;));&#xA;&#x9;lowerRightLine3.setForegroundColor(LOWERRIGHTLINE3_FORE&#xA;);&#xA;&#xA;lowerRightRectangle2.add(lowerRightLine3);&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure innerRectangleHelper0 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;innerRectangleHelper0.setFill(false);&#xA;innerRectangleHelper0.setOutline(false);&#xA;innerRectangleHelper0.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(16)&#xA;));&#xA;&#xA;this.add(innerRectangleHelper0);&#xA;innerRectangleHelper0.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure innerHardwareNode1 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;innerHardwareNode1.setForegroundColor(INNERHARDWARENODE1_FORE&#xA;);&#xA;innerHardwareNode1.setBorder(new org.eclipse.draw2d.MarginBorder(getMapMode().DPtoLP(5)&#xA;, getMapMode().DPtoLP(5)&#xA;, getMapMode().DPtoLP(5)&#xA;, getMapMode().DPtoLP(5)&#xA;));&#xA;&#xA;innerRectangleHelper0.add(innerHardwareNode1);&#xA;innerHardwareNode1.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentIconRectangle2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentIconRectangle2.setFill(false);&#xA;componentIconRectangle2.setOutline(false);&#xA;&#xA;innerHardwareNode1.add(componentIconRectangle2);&#xA;&#xA;&#x9;org.eclipse.draw2d.GridLayout layoutComponentIconRectangle2 = new org.eclipse.draw2d.GridLayout();&#xA;&#x9;layoutComponentIconRectangle2.numColumns = 1;&#xA;&#x9;layoutComponentIconRectangle2.makeColumnsEqualWidth = false;&#xA;&#x9;componentIconRectangle2.setLayoutManager(layoutComponentIconRectangle2);&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentIconFigure3 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentIconFigure3.setFill(false);&#xA;componentIconFigure3.setOutline(false);&#xA;componentIconFigure3.setPreferredSize(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(20)&#xA;, getMapMode().DPtoLP(20)&#xA;));&#xA;&#xA;&#xA;org.eclipse.draw2d.GridData constraintComponentIconFigure3 = new org.eclipse.draw2d.GridData();&#xA;constraintComponentIconFigure3.verticalAlignment = org.eclipse.draw2d.GridData.BEGINNING;&#xA;constraintComponentIconFigure3.horizontalAlignment = org.eclipse.draw2d.GridData.END;&#xA;constraintComponentIconFigure3.horizontalIndent = 0;&#xA;constraintComponentIconFigure3.horizontalSpan = 1;&#xA;constraintComponentIconFigure3.verticalSpan = 1;&#xA;constraintComponentIconFigure3.grabExcessHorizontalSpace = true;&#xA;constraintComponentIconFigure3.grabExcessVerticalSpace = false;&#xA;componentIconRectangle2.add(componentIconFigure3, constraintComponentIconFigure3);&#xA;&#xA;componentIconFigure3.setLayoutManager(new org.eclipse.draw2d.StackLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentIconOuter4 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentIconOuter4.setFill(false);&#xA;componentIconOuter4.setOutline(false);&#xA;&#xA;componentIconFigure3.add(componentIconOuter4);&#xA;componentIconOuter4.setLayoutManager(new org.eclipse.draw2d.XYLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure b15 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;b15.setForegroundColor(B15_FORE&#xA;);&#xA;&#xA;componentIconOuter4.add(b15, &#xA;new org.eclipse.draw2d.geometry.Rectangle(getMapMode().DPtoLP(4)&#xA;, getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(16)&#xA;, getMapMode().DPtoLP(20)&#xA;)&#xA;);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentIconInner14 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentIconInner14.setFill(false);&#xA;componentIconInner14.setOutline(false);&#xA;&#xA;componentIconFigure3.add(componentIconInner14);&#xA;componentIconInner14.setLayoutManager(new org.eclipse.draw2d.XYLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure c15 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;c15.setForegroundColor(C15_FORE&#xA;);&#xA;&#xA;componentIconInner14.add(c15, &#xA;new org.eclipse.draw2d.geometry.Rectangle(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(2)&#xA;, getMapMode().DPtoLP(12)&#xA;, getMapMode().DPtoLP(6)&#xA;)&#xA;);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentIconInner24 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentIconInner24.setFill(false);&#xA;componentIconInner24.setOutline(false);&#xA;&#xA;componentIconFigure3.add(componentIconInner24);&#xA;componentIconInner24.setLayoutManager(new org.eclipse.draw2d.XYLayout());&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure d15 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;&#x9;d15.setForegroundColor(D15_FORE&#xA;);&#xA;&#xA;componentIconInner24.add(d15, &#xA;new org.eclipse.draw2d.geometry.Rectangle(getMapMode().DPtoLP(0)&#xA;, getMapMode().DPtoLP(10)&#xA;, getMapMode().DPtoLP(12)&#xA;, getMapMode().DPtoLP(6)&#xA;)&#xA;);&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.RectangleFigure componentNameRectangle2 = new org.eclipse.draw2d.RectangleFigure();&#xA;&#xA;componentNameRectangle2.setFill(false);&#xA;componentNameRectangle2.setOutline(false);&#xA;&#xA;innerHardwareNode1.add(componentNameRectangle2);&#xA;&#xA;&#x9;org.eclipse.draw2d.GridLayout layoutComponentNameRectangle2 = new org.eclipse.draw2d.GridLayout();&#xA;&#x9;layoutComponentNameRectangle2.numColumns = 1;&#xA;&#x9;layoutComponentNameRectangle2.makeColumnsEqualWidth = false;&#xA;&#x9;componentNameRectangle2.setLayoutManager(layoutComponentNameRectangle2);&#xA;&#xA;&#xA;&#xA;fFigureComponentNameFigure = new org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel();&#xA;&#xA;fFigureComponentNameFigure.setText(&quot;&quot;);&#xA;&#x9;fFigureComponentNameFigure.setForegroundColor(FFIGURECOMPONENTNAMEFIGURE_FORE&#xA;);&#xA;&#xA;fFigureComponentNameFigure.setFont(FFIGURECOMPONENTNAMEFIGURE_FONT);&#xA;&#xA;&#xA;&#xA;&#xA;org.eclipse.draw2d.GridData constraintFFigureComponentNameFigure = new org.eclipse.draw2d.GridData();&#xA;constraintFFigureComponentNameFigure.verticalAlignment = org.eclipse.draw2d.GridData.CENTER;&#xA;constraintFFigureComponentNameFigure.horizontalAlignment = org.eclipse.draw2d.GridData.FILL;&#xA;constraintFFigureComponentNameFigure.horizontalIndent = 0;&#xA;constraintFFigureComponentNameFigure.horizontalSpan = 1;&#xA;constraintFFigureComponentNameFigure.verticalSpan = 1;&#xA;constraintFFigureComponentNameFigure.grabExcessHorizontalSpace = true;&#xA;constraintFFigureComponentNameFigure.grabExcessVerticalSpace = true;&#xA;componentNameRectangle2.add(fFigureComponentNameFigure, constraintFFigureComponentNameFigure);&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;}&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#x9;/**&#xA;&#x9; * @generated&#xA;&#x9; */&#xA;&#x9;public org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel getFigureComponentNameFigure() {&#xA;&#x9;&#x9;return fFigureComponentNameFigure;&#xA;&#x9;}&#xA;&#xA;&#xA;}&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color LEFTPOLYGON2_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color LEFTPOLYGON2_BACK = new org.eclipse.swt.graphics.Color(null, 140, 140, 140);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color LEFTLINE2_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color UPPERMIDDLERECTANGLE1_BACK = new org.eclipse.swt.graphics.Color(null, 140, 140, 140);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color UPPERLINE2_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color UPPERLINE2_BACK = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color UPPERRIGHTFILLEDRECTANGLE3_BACK = new org.eclipse.swt.graphics.Color(null, 140, 140, 140);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color DIAGONALLINE3_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color UPPERRIGHTLINE3_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color RIGHTUPPERLINE3_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color MIDDLERIGHTRECTANGLE2_BACK = new org.eclipse.swt.graphics.Color(null, 140, 140, 140);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color RIGHTLINE3_BACK = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color RIGHTPOLYGON3_BACK = new org.eclipse.swt.graphics.Color(null, 140, 140, 140);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color LOWERRIGHTLINE3_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color INNERHARDWARENODE1_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color B15_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color C15_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color D15_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Color FFIGURECOMPONENTNAMEFIGURE_FORE = new org.eclipse.swt.graphics.Color(null, 0, 0, 0);&#xA;&#xA;/**&#xA; * @generated&#xA; */&#xA;static final org.eclipse.swt.graphics.Font FFIGURECOMPONENTNAMEFIGURE_FONT = new org.eclipse.swt.graphics.Font(org.eclipse.swt.widgets.Display.getCurrent(), org.eclipse.swt.widgets.Display.getDefault().getSystemFont().getFontData()[0].getName(), 9, org.eclipse.swt.SWT.BOLD);&#xA;&#xA;"/>
      <modelFacet>
        <metaClass
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/HardwareNode"/>
        <containmentMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/Deployment/hardwareNodes"/>
        <childMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/Deployment/hardwareNodes"/>
        <modelElementInitializer
            xsi:type="gmfgen:GenFeatureSeqInitializer">
          <initializers
              xsi:type="gmfgen:GenFeatureValueSpec"
              value="//@expressionProviders/@providers.0/@expressions.0">
            <feature
                href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
          </initializers>
        </modelElementInitializer>
      </modelFacet>
      <labels
          visualID="5006"
          editPartClassName="HardwareNodeNameEditPart"
          itemSemanticEditPolicyClassName="HardwareNodeNameItemSemanticEditPolicy"
          notationViewFactoryClassName="HardwareNodeNameViewFactory">
        <diagramRunTimeClass
            href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Node"/>
        <viewmap
            xsi:type="gmfgen:ParentAssignedViewmap"
            getterName="getFigureComponentNameFigure"
            figureQualifiedClassName="org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel">
          <attributes
              xsi:type="gmfgen:StyleAttributes"
              fixedFont="true"
              fixedForeground="true"/>
        </viewmap>
        <modelFacet
            xsi:type="gmfgen:FeatureLabelModelFacet"
            parser="//@labelParsers/@implementations.0">
          <metaFeatures
              href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
          <editableMetaFeatures
              href="../../org.storydriven.core/model/core.uml.genmodel#//core/NamedElement/name"/>
        </modelFacet>
      </labels>
    </topLevelNodes>
    <links
        visualID="4003"
        editPartClassName="CommunicationLinkEditPart"
        itemSemanticEditPolicyClassName="CommunicationLinkItemSemanticEditPolicy"
        notationViewFactoryClassName="CommunicationLinkViewFactory"
        createCommandClassName="CommunicationLinkCreateCommand"
        reorientCommandClassName="CommunicationLinkReorientCommand">
      <diagramRunTimeClass
          href="../../../plugin/org.eclipse.gmf.runtime.notation/model/notation.genmodel#//notation/Edge"/>
      <elementType
          xsi:type="gmfgen:MetamodelType"
          editHelperClassName="CommunicationLinkEditHelper"/>
      <viewmap
          xsi:type="gmfgen:FigureViewmap"
          figureQualifiedClassName="org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx"/>
      <modelFacet
          xsi:type="gmfgen:TypeLinkModelFacet">
        <metaClass
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/CommunicationLink"/>
        <containmentMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/Deployment/communicationLinks"/>
        <childMetaFeature
            href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#//psm/deployment/Deployment/communicationLinks"/>
        <sourceMetaFeature
            href="../../de.uni_paderborn.fujaba.muml/model/muml.genmodel#//muml/connector/Connector/connectorEndpoints"/>
        <targetMetaFeature
            href="../../de.uni_paderborn.fujaba.muml/model/muml.genmodel#//muml/connector/Connector/connectorEndpoints"/>
      </modelFacet>
      <creationConstraints
          sourceEnd="//@expressionProviders/@providers.0/@expressions.2"
          targetEnd="//@expressionProviders/@providers.0/@expressions.3"/>
    </links>
    <palette>
      <groups
          title="Deployment">
        <entries
            xsi:type="gmfgen:ToolEntry"
            title="HardwareNode"
            description="Create new HardwareNode"
            smallIconPath="/de.uni_paderborn.fujaba.muml.deployment.diagram/icons/obj16/HardwareNode.gif"
            genNodes="//@diagram/@topLevelNodes.0"/>
        <entries
            xsi:type="gmfgen:ToolEntry"
            title="HardwarePort"
            description="Create new HardwarePort"
            smallIconPath="/de.uni_paderborn.fujaba.muml.deployment.diagram/icons/obj16/HardwarePort.gif"
            genNodes="//@diagram/@childNodes.0"/>
        <entries
            xsi:type="gmfgen:ToolEntry"
            title="CommunicationLink"
            description="Create new CommunicationLink"
            smallIconPath="/de.uni_paderborn.fujaba.muml.deployment.diagram/icons/obj16/CommunicationLink.gif"
            genLinks="//@diagram/@links.0"/>
      </groups>
    </palette>
    <preferences>
      <fontColor
          xsi:type="gmfgen:GenConstantColor"
          name="black"/>
      <fillColor
          xsi:type="gmfgen:GenConstantColor"
          name="white"/>
      <lineColor
          xsi:type="gmfgen:GenConstantColor"
          name="black"/>
      <noteFillColor
          xsi:type="gmfgen:GenConstantColor"
          name="yellow"/>
      <noteLineColor
          xsi:type="gmfgen:GenConstantColor"
          name="orange"/>
    </preferences>
    <preferencePages
        xsi:type="gmfgen:GenStandardPreferencePage"
        iD="de.uni_paderborn.fujaba.muml.deployment.diagram.general"
        name="Deployment Diagram Editor"
        parentCategory="de.uni_paderborn.fujaba.preferences">
      <children
          xsi:type="gmfgen:GenStandardPreferencePage"
          iD="de.uni_paderborn.fujaba.muml.deployment.diagram.appearance"
          name="Appearance"
          parentCategory="de.uni_paderborn.fujaba.muml.deployment.diagram.general"
          kind="Appearance"/>
      <children
          xsi:type="gmfgen:GenStandardPreferencePage"
          iD="de.uni_paderborn.fujaba.muml.deployment.diagram.connections"
          name="Connections"
          parentCategory="de.uni_paderborn.fujaba.muml.deployment.diagram.general"
          kind="Connections"/>
      <children
          xsi:type="gmfgen:GenStandardPreferencePage"
          iD="de.uni_paderborn.fujaba.muml.deployment.diagram.printing"
          name="Printing"
          parentCategory="de.uni_paderborn.fujaba.muml.deployment.diagram.general"
          kind="Printing"/>
      <children
          xsi:type="gmfgen:GenStandardPreferencePage"
          iD="de.uni_paderborn.fujaba.muml.deployment.diagram.rulersAndGrid"
          name="Rulers And Grid"
          parentCategory="de.uni_paderborn.fujaba.muml.deployment.diagram.general"
          kind="RulersAndGrid"/>
    </preferencePages>
  </diagram>
  <plugin
      iD="de.uni_paderborn.fujaba.muml.deployment.diagram"
      name="Deployment Diagram Editor"
      provider="Software Engineering Group, Heinz Nixdorf Institute, University of Paderborn"
      version="0.4.0.qualifier">
    <requiredPlugins>org.eclipse.gmf.tooling.runtime</requiredPlugins>
    <requiredPlugins>org.eclipse.draw2d</requiredPlugins>
    <requiredPlugins>org.eclipse.gmf.runtime.draw2d.ui</requiredPlugins>
    <requiredPlugins>de.uni_paderborn.fujaba.common</requiredPlugins>
    <requiredPlugins>de.uni_paderborn.fujaba.muml.common</requiredPlugins>
    <requiredPlugins>de.uni_paderborn.fujaba.modelinstance.ui</requiredPlugins>
    <requiredPlugins>org.storydriven.core.edit.properties</requiredPlugins>
    <requiredPlugins>de.uni_paderborn.fujaba.muml.edit.properties</requiredPlugins>
    <requiredPlugins>de.uni_paderborn.fujaba.properties.runtime</requiredPlugins>
  </plugin>
  <editor/>
  <navigator>
    <childReferences
        child="//@diagram"/>
    <childReferences
        parent="//@diagram/@topLevelNodes.0"
        child="//@diagram/@childNodes.0"/>
    <childReferences
        parent="//@diagram"
        child="//@diagram/@topLevelNodes.0"/>
    <childReferences
        parent="//@diagram"
        child="//@diagram/@links.0"
        groupName="links"
        groupIcon="icons/linksNavigatorGroup.gif"/>
    <childReferences
        parent="//@diagram/@links.0"
        child="//@diagram/@childNodes.0"
        referenceType="out_target"
        groupName="target"
        groupIcon="icons/linkTargetNavigatorGroup.gif"/>
    <childReferences
        parent="//@diagram/@childNodes.0"
        child="//@diagram/@links.0"
        referenceType="in_source"
        groupName="incoming links"
        groupIcon="icons/incomingLinksNavigatorGroup.gif"/>
    <childReferences
        parent="//@diagram/@links.0"
        child="//@diagram/@childNodes.0"
        referenceType="in_source"
        groupName="source"
        groupIcon="icons/linkSourceNavigatorGroup.gif"/>
    <childReferences
        parent="//@diagram/@childNodes.0"
        child="//@diagram/@links.0"
        referenceType="out_target"
        groupName="outgoing links"
        groupIcon="icons/outgoingLinksNavigatorGroup.gif"/>
  </navigator>
  <diagramUpdater/>
  <propertySheet>
    <tabs
        xsi:type="gmfgen:GenStandardPropertyTab"
        iD="appearance"/>
    <tabs
        xsi:type="gmfgen:GenStandardPropertyTab"
        iD="diagram"/>
    <tabs
        xsi:type="gmfgen:GenCustomPropertyTab"
        iD="domain"
        label="Core">
      <filter
          xsi:type="gmfgen:TypeTabFilter">
        <types>org.eclipse.gmf.runtime.notation.View</types>
        <types>org.eclipse.gef.EditPart</types>
        <generatedTypes>abstractNavigatorItem</generatedTypes>
      </filter>
    </tabs>
  </propertySheet>
  <domainGenModel
      href="../../de.uni_paderborn.fujaba.muml.psm.allocation/model/allocation.genmodel#/"/>
  <expressionProviders>
    <providers
        xsi:type="gmfgen:GenExpressionInterpreter">
      <expressions
          body="--'hardwareNode'"/>
      <expressions
          body="--'hardwarePort'"/>
      <expressions
          xsi:type="gmfgen:GenConstraint"
          body="--self.eGet(self.eClass().getEStructuralFeature('kind')).toString()='OUT' or self.eGet(self.eClass().getEStructuralFeature('kind')).toString()='IN_OUT'"/>
      <expressions
          xsi:type="gmfgen:GenConstraint"
          body="--if oppositeEnd.eGet(oppositeEnd.eClass().getEStructuralFeature('kind')).toString()='IN_OUT' then self.eGet(self.eClass().getEStructuralFeature('kind')).toString()='IN_OUT' else self.eGet(self.eClass().getEStructuralFeature('kind')).toString()='IN' endif"/>
    </providers>
  </expressionProviders>
  <labelParsers
      extensibleViaService="true">
    <implementations
        xsi:type="gmfgen:PredefinedParser"
        uses="//@diagram/@childNodes.0/@labels.0/@modelFacet //@diagram/@topLevelNodes.0/@labels.0/@modelFacet"/>
  </labelParsers>
  <contextMenus
      context="//@diagram">
    <items
        xsi:type="gmfgen:LoadResourceAction"/>
  </contextMenus>
</gmfgen:GenEditorGenerator>
