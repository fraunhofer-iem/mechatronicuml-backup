/*
* generated by Xtext
*/
grammar InternalUppaalXML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_paderborn.uppaal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.uppaal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.uppaal.services.UppaalXMLGrammarAccess;

}

@parser::members {

 	private UppaalXMLGrammarAccess grammarAccess;
 	
    public InternalUppaalXMLParser(TokenStream input, UppaalXMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "NTA";	
   	}
   	
   	@Override
   	protected UppaalXMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNTA
entryRuleNTA returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getNTARule()); }
	 iv_ruleNTA=ruleNTA 
	 { $current=$iv_ruleNTA.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule NTA
ruleNTA returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='<?xml version="1.0" encoding="utf-8"?>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNTAAccess().getXmlVersion10EncodingUtf8Keyword_0_0());
    }

    |	otherlv_1='<?xml version=\'1.0\' encoding=\'utf-8\'?>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNTAAccess().getXmlVersion10EncodingUtf8Keyword_0_1());
    }
)	otherlv_2='<!DOCTYPE nta PUBLIC \'-//Uppaal Team//DTD Flat System 1.1//EN\' \'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd\'>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNTAAccess().getDOCTYPENtaPUBLICUppaalTeamDTDFlatSystem11ENHttpWwwItUuSeResearchGroupDartsUppaalFlat1_1DtdKeyword_1());
    }
	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNTAAccess().getLessThanSignKeyword_2());
    }
	otherlv_4='nta' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNTAAccess().getNtaKeyword_3());
    }
	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_4());
    }
(	otherlv_6='<' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNTAAccess().getLessThanSignKeyword_5_0());
    }
	otherlv_7='imports' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNTAAccess().getImportsKeyword_5_1());
    }
	otherlv_8='>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_5_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getNTAAccess().getANY_TOKEN_BUT_XML_CLOSEParserRuleCall_5_3()); 
    }
ruleANY_TOKEN_BUT_XML_CLOSE
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_10='</' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_5_4());
    }
	otherlv_11='imports' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNTAAccess().getImportsKeyword_5_5());
    }
	otherlv_12='>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_5_6());
    }
)*(	otherlv_13='<' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getNTAAccess().getLessThanSignKeyword_6_0());
    }
	otherlv_14='declaration' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getNTAAccess().getDeclarationKeyword_6_1());
    }
	otherlv_15='>' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNTAAccess().getGlobalDeclarationsGlobalDeclarationsParserRuleCall_6_3_0()); 
	    }
		lv_globalDeclarations_16_0=ruleGlobalDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNTARule());
	        }
       		set(
       			$current, 
       			"globalDeclarations",
        		lv_globalDeclarations_16_0, 
        		"GlobalDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17='</' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_6_4());
    }
	otherlv_18='declaration' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getNTAAccess().getDeclarationKeyword_6_5());
    }
	otherlv_19='>' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_6_6());
    }
)?(	otherlv_20='<' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getNTAAccess().getLessThanSignKeyword_7_0());
    }
	otherlv_21='template' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getNTAAccess().getTemplateKeyword_7_1());
    }
	otherlv_22='>' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_7_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNTAAccess().getTemplateTemplateParserRuleCall_7_3_0()); 
	    }
		lv_template_23_0=ruleTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNTARule());
	        }
       		add(
       			$current, 
       			"template",
        		lv_template_23_0, 
        		"Template");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_24='</' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_7_4());
    }
	otherlv_25='template' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getNTAAccess().getTemplateKeyword_7_5());
    }
	otherlv_26='>' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_7_6());
    }
)+(	otherlv_27='<' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getNTAAccess().getLessThanSignKeyword_8_0());
    }
	otherlv_28='instantiation' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getNTAAccess().getInstantiationKeyword_8_1());
    }
	otherlv_29='>' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_8_2());
    }
(
    { 
        newCompositeNode(grammarAccess.getNTAAccess().getANY_TOKEN_BUT_XML_CLOSEParserRuleCall_8_3()); 
    }
ruleANY_TOKEN_BUT_XML_CLOSE
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_31='</' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_8_4());
    }
	otherlv_32='instantiation' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getNTAAccess().getInstantiationKeyword_8_5());
    }
	otherlv_33='>' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_8_6());
    }
)?	otherlv_34='<' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getNTAAccess().getLessThanSignKeyword_9());
    }
	otherlv_35='system' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getNTAAccess().getSystemKeyword_10());
    }
	otherlv_36='>' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_11());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNTAAccess().getSystemDeclarationsSystemDeclarationsParserRuleCall_12_0()); 
	    }
		lv_systemDeclarations_37_0=ruleSystemDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNTARule());
	        }
       		set(
       			$current, 
       			"systemDeclarations",
        		lv_systemDeclarations_37_0, 
        		"SystemDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_38='</' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_13());
    }
	otherlv_39='system' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getNTAAccess().getSystemKeyword_14());
    }
	otherlv_40='>' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_15());
    }
	otherlv_41='</' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getNTAAccess().getLessThanSignSolidusKeyword_16());
    }
	otherlv_42='nta' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getNTAAccess().getNtaKeyword_17());
    }
	otherlv_43='>' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getNTAAccess().getGreaterThanSignKeyword_18());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTemplate
entryRuleTemplate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTemplateRule()); }
	 iv_ruleTemplate=ruleTemplate 
	 { $current=$iv_ruleTemplate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Template
ruleTemplate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTemplateAccess().getLessThanSignKeyword_0());
    }
	otherlv_1='name' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemplateAccess().getNameKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getTemplateAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTemplateAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTemplateAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(	otherlv_3='x' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTemplateAccess().getXKeyword_2_0_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTemplateAccess().getEqualsSignKeyword_2_0_1());
    }
this_STRING_5=RULE_STRING
    { 
    newLeafNode(this_STRING_5, grammarAccess.getTemplateAccess().getSTRINGTerminalRuleCall_2_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTemplateAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getTemplateAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getTemplateAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(	otherlv_6='y' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTemplateAccess().getYKeyword_2_1_0());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTemplateAccess().getEqualsSignKeyword_2_1_1());
    }
this_STRING_8=RULE_STRING
    { 
    newLeafNode(this_STRING_8, grammarAccess.getTemplateAccess().getSTRINGTerminalRuleCall_2_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTemplateAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getTemplateAccess().getUnorderedGroup_2());
	}

)	otherlv_9='>' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_3());
    }
(
(
		lv_name_10_0=RULE_ID
		{
			newLeafNode(lv_name_10_0, grammarAccess.getTemplateAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"ID");
	    }

)
)	otherlv_11='</' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getTemplateAccess().getLessThanSignSolidusKeyword_5());
    }
	otherlv_12='name' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTemplateAccess().getNameKeyword_6());
    }
	otherlv_13='>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_7());
    }
(	otherlv_14='<' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getTemplateAccess().getLessThanSignKeyword_8_0());
    }
	otherlv_15='parameter' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTemplateAccess().getParameterKeyword_8_1());
    }
	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_8_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getParameterParameterContainerParserRuleCall_8_3_0_0()); 
	    }
		lv_parameter_17_0=ruleParameterContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_17_0, 
        		"ParameterContainer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getTemplateAccess().getCommaKeyword_8_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getParameterParameterContainerParserRuleCall_8_3_1_1_0()); 
	    }
		lv_parameter_19_0=ruleParameterContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_19_0, 
        		"ParameterContainer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_20='</' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getTemplateAccess().getLessThanSignSolidusKeyword_8_4());
    }
	otherlv_21='parameter' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getTemplateAccess().getParameterKeyword_8_5());
    }
	otherlv_22='>' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_8_6());
    }
)?(	otherlv_23='<' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getTemplateAccess().getLessThanSignKeyword_9_0());
    }
	otherlv_24='declaration' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getTemplateAccess().getDeclarationKeyword_9_1());
    }
	otherlv_25='>' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_9_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getDeclarationsLocalDeclarationsParserRuleCall_9_3_0()); 
	    }
		lv_declarations_26_0=ruleLocalDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		set(
       			$current, 
       			"declarations",
        		lv_declarations_26_0, 
        		"LocalDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_27='</' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getTemplateAccess().getLessThanSignSolidusKeyword_9_4());
    }
	otherlv_28='declaration' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getTemplateAccess().getDeclarationKeyword_9_5());
    }
	otherlv_29='>' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getTemplateAccess().getGreaterThanSignKeyword_9_6());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getLocationLocationParserRuleCall_10_0()); 
	    }
		lv_location_30_0=ruleLocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"location",
        		lv_location_30_0, 
        		"Location");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_31='<' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getTemplateAccess().getLessThanSignKeyword_11());
    }
	otherlv_32='init' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getTemplateAccess().getInitKeyword_12());
    }
	otherlv_33='ref' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getTemplateAccess().getRefKeyword_13());
    }
	otherlv_34='=' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getTemplateAccess().getEqualsSignKeyword_14());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTemplateRule());
	        }
        }
	otherlv_35=RULE_STRING
	{
		newLeafNode(otherlv_35, grammarAccess.getTemplateAccess().getInitLocationCrossReference_15_0()); 
	}

)
)	otherlv_36='/>' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getTemplateAccess().getSolidusGreaterThanSignKeyword_16());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateAccess().getEdgeEdgeParserRuleCall_17_0()); 
	    }
		lv_edge_37_0=ruleEdge		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateRule());
	        }
       		add(
       			$current, 
       			"edge",
        		lv_edge_37_0, 
        		"Edge");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getLocationRule()); }
	 iv_ruleLocation=ruleLocation 
	 { $current=$iv_ruleLocation.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Location
ruleLocation returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocationAccess().getLessThanSignKeyword_0());
    }
	otherlv_1='location' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocationAccess().getLocationKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getLocationAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(	otherlv_3='id' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocationAccess().getIdKeyword_2_0_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocationAccess().getEqualsSignKeyword_2_0_1());
    }
(
(
		lv_id_5_0=RULE_STRING
		{
			newLeafNode(lv_id_5_0, grammarAccess.getLocationAccess().getIdSTRINGTerminalRuleCall_2_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_5_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getPositionPointParserRuleCall_2_1_0()); 
	    }
		lv_position_6_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_6_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_2(), 2);
	 				}
					({true}?=>(	otherlv_7='color' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLocationAccess().getColorKeyword_2_2_0());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLocationAccess().getEqualsSignKeyword_2_2_1());
    }
(
(
		lv_colorCode_9_0=RULE_STRING
		{
			newLeafNode(lv_colorCode_9_0, grammarAccess.getLocationAccess().getColorCodeSTRINGTerminalRuleCall_2_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"colorCode",
        		lv_colorCode_9_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)+
	  	{getUnorderedGroupHelper().canLeave(grammarAccess.getLocationAccess().getUnorderedGroup_2())}?	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getLocationAccess().getUnorderedGroup_2());
	}

)(	otherlv_10='/>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLocationAccess().getSolidusGreaterThanSignKeyword_3_0());
    }

    |(	otherlv_11='>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_0());
    }
(	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLocationAccess().getLessThanSignKeyword_3_1_1_0());
    }
	otherlv_13='name' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getLocationAccess().getNameKeyword_3_1_1_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2(), 0);
	 				}
					({true}?=>(	otherlv_15='x' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getLocationAccess().getXKeyword_3_1_1_2_0_0());
    }
	otherlv_16='=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_1_2_0_1());
    }
this_STRING_17=RULE_STRING
    { 
    newLeafNode(this_STRING_17, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_1_2_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2(), 1);
	 				}
					({true}?=>(	otherlv_18='y' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getLocationAccess().getYKeyword_3_1_1_2_1_0());
    }
	otherlv_19='=' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_1_2_1_1());
    }
this_STRING_20=RULE_STRING
    { 
    newLeafNode(this_STRING_20, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_1_2_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_1_2());
	}

)	otherlv_21='>' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_1_3());
    }
(
(
		lv_name_22_0=RULE_ID
		{
			newLeafNode(lv_name_22_0, grammarAccess.getLocationAccess().getNameIDTerminalRuleCall_3_1_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_22_0, 
        		"ID");
	    }

)
)	otherlv_23='</' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getLocationAccess().getLessThanSignSolidusKeyword_3_1_1_5());
    }
	otherlv_24='name' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getLocationAccess().getNameKeyword_3_1_1_6());
    }
	otherlv_25='>' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_1_7());
    }
)?(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2(), 0);
	 				}
					({true}?=>(	otherlv_27='<' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getLocationAccess().getLessThanSignKeyword_3_1_2_0_0());
    }
	otherlv_28='label' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getLocationAccess().getLabelKeyword_3_1_2_0_1());
    }
	otherlv_29='kind' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getLocationAccess().getKindKeyword_3_1_2_0_2());
    }
	otherlv_30='=' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_0_3());
    }
	otherlv_31='"comments"' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getLocationAccess().getCommentsKeyword_3_1_2_0_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 0);
	 				}
					({true}?=>(	otherlv_33='x' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getLocationAccess().getXKeyword_3_1_2_0_5_0_0());
    }
	otherlv_34='=' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_0_5_0_1());
    }
this_STRING_35=RULE_STRING
    { 
    newLeafNode(this_STRING_35, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_0_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 1);
	 				}
					({true}?=>(	otherlv_36='y' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getLocationAccess().getYKeyword_3_1_2_0_5_1_0());
    }
	otherlv_37='=' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_0_5_1_1());
    }
this_STRING_38=RULE_STRING
    { 
    newLeafNode(this_STRING_38, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_0_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5(), 2);
	 				}
					({true}?=>(	otherlv_39='color' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getLocationAccess().getColorKeyword_3_1_2_0_5_2_0());
    }
	otherlv_40='=' 
    {
    	newLeafNode(otherlv_40, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_0_5_2_1());
    }
this_STRING_41=RULE_STRING
    { 
    newLeafNode(this_STRING_41, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_0_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_0_5());
	}

)	otherlv_42='>' 
    {
    	newLeafNode(otherlv_42, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_2_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getCommentCommentLabelParserRuleCall_3_1_2_0_7_0()); 
	    }
		lv_comment_43_0=ruleCommentLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_43_0, 
        		"CommentLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_44='</' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getLocationAccess().getLessThanSignSolidusKeyword_3_1_2_0_8());
    }
	otherlv_45='label' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getLocationAccess().getLabelKeyword_3_1_2_0_9());
    }
	otherlv_46='>' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_2_0_10());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2(), 1);
	 				}
					({true}?=>(	otherlv_47='<' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getLocationAccess().getLessThanSignKeyword_3_1_2_1_0());
    }
	otherlv_48='label' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getLocationAccess().getLabelKeyword_3_1_2_1_1());
    }
	otherlv_49='kind' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getLocationAccess().getKindKeyword_3_1_2_1_2());
    }
	otherlv_50='=' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_1_3());
    }
	otherlv_51='"invariant"' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getLocationAccess().getInvariantKeyword_3_1_2_1_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 0);
	 				}
					({true}?=>(	otherlv_53='x' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getLocationAccess().getXKeyword_3_1_2_1_5_0_0());
    }
	otherlv_54='=' 
    {
    	newLeafNode(otherlv_54, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_1_5_0_1());
    }
this_STRING_55=RULE_STRING
    { 
    newLeafNode(this_STRING_55, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_1_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 1);
	 				}
					({true}?=>(	otherlv_56='y' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getLocationAccess().getYKeyword_3_1_2_1_5_1_0());
    }
	otherlv_57='=' 
    {
    	newLeafNode(otherlv_57, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_1_5_1_1());
    }
this_STRING_58=RULE_STRING
    { 
    newLeafNode(this_STRING_58, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_1_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5(), 2);
	 				}
					({true}?=>(	otherlv_59='color' 
    {
    	newLeafNode(otherlv_59, grammarAccess.getLocationAccess().getColorKeyword_3_1_2_1_5_2_0());
    }
	otherlv_60='=' 
    {
    	newLeafNode(otherlv_60, grammarAccess.getLocationAccess().getEqualsSignKeyword_3_1_2_1_5_2_1());
    }
this_STRING_61=RULE_STRING
    { 
    newLeafNode(this_STRING_61, grammarAccess.getLocationAccess().getSTRINGTerminalRuleCall_3_1_2_1_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2_1_5());
	}

)	otherlv_62='>' 
    {
    	newLeafNode(otherlv_62, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_2_1_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getInvariantExpressionParserRuleCall_3_1_2_1_7_0()); 
	    }
		lv_invariant_63_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		set(
       			$current, 
       			"invariant",
        		lv_invariant_63_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_64='</' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getLocationAccess().getLessThanSignSolidusKeyword_3_1_2_1_8());
    }
	otherlv_65='label' 
    {
    	newLeafNode(otherlv_65, grammarAccess.getLocationAccess().getLabelKeyword_3_1_2_1_9());
    }
	otherlv_66='>' 
    {
    	newLeafNode(otherlv_66, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_2_1_10());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getLocationAccess().getUnorderedGroup_3_1_2());
	}

)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocationAccess().getLocationTimeKindLocationKindEnumRuleCall_3_1_3_0()); 
	    }
		lv_locationTimeKind_67_0=ruleLocationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationRule());
	        }
       		set(
       			$current, 
       			"locationTimeKind",
        		lv_locationTimeKind_67_0, 
        		"LocationKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_68='</' 
    {
    	newLeafNode(otherlv_68, grammarAccess.getLocationAccess().getLessThanSignSolidusKeyword_3_1_4());
    }
	otherlv_69='location' 
    {
    	newLeafNode(otherlv_69, grammarAccess.getLocationAccess().getLocationKeyword_3_1_5());
    }
	otherlv_70='>' 
    {
    	newLeafNode(otherlv_70, grammarAccess.getLocationAccess().getGreaterThanSignKeyword_3_1_6());
    }
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEdge
entryRuleEdge returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getEdgeRule()); }
	 iv_ruleEdge=ruleEdge 
	 { $current=$iv_ruleEdge.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Edge
ruleEdge returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEdgeAccess().getLessThanSignKeyword_0());
    }
	otherlv_1='transition' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEdgeAccess().getTransitionKeyword_1());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_2());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 0);
	 				}
					({true}?=>(	otherlv_3='x' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEdgeAccess().getXKeyword_2_0_0());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEdgeAccess().getEqualsSignKeyword_2_0_1());
    }
this_STRING_5=RULE_STRING
    { 
    newLeafNode(this_STRING_5, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_2_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 1);
	 				}
					({true}?=>(	otherlv_6='y' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEdgeAccess().getYKeyword_2_1_0());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEdgeAccess().getEqualsSignKeyword_2_1_1());
    }
this_STRING_8=RULE_STRING
    { 
    newLeafNode(this_STRING_8, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_2_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_2());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_2(), 2);
	 				}
					({true}?=>(	otherlv_9='color' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEdgeAccess().getColorKeyword_2_2_0());
    }
	otherlv_10='=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getEdgeAccess().getEqualsSignKeyword_2_2_1());
    }
(
(
		lv_colorCode_11_0=RULE_STRING
		{
			newLeafNode(lv_colorCode_11_0, grammarAccess.getEdgeAccess().getColorCodeSTRINGTerminalRuleCall_2_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"colorCode",
        		lv_colorCode_11_0, 
        		"STRING");
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_2());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_2());
	}

)	otherlv_12='>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_3());
    }
	otherlv_13='<' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getEdgeAccess().getLessThanSignKeyword_4());
    }
	otherlv_14='source' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getEdgeAccess().getSourceKeyword_5());
    }
	otherlv_15='ref' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getEdgeAccess().getRefKeyword_6());
    }
	otherlv_16='=' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getEdgeAccess().getEqualsSignKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_17=RULE_STRING
	{
		newLeafNode(otherlv_17, grammarAccess.getEdgeAccess().getSourceLocationCrossReference_8_0()); 
	}

)
)	otherlv_18='/>' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getEdgeAccess().getSolidusGreaterThanSignKeyword_9());
    }
	otherlv_19='<' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getEdgeAccess().getLessThanSignKeyword_10());
    }
	otherlv_20='target' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getEdgeAccess().getTargetKeyword_11());
    }
	otherlv_21='ref' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getEdgeAccess().getRefKeyword_12());
    }
	otherlv_22='=' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getEdgeAccess().getEqualsSignKeyword_13());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeRule());
	        }
        }
	otherlv_23=RULE_STRING
	{
		newLeafNode(otherlv_23, grammarAccess.getEdgeAccess().getTargetLocationCrossReference_14_0()); 
	}

)
)	otherlv_24='/>' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getEdgeAccess().getSolidusGreaterThanSignKeyword_15());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 0);
	 				}
					({true}?=>(	otherlv_26='<' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getEdgeAccess().getLessThanSignKeyword_16_0_0());
    }
	otherlv_27='label' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getEdgeAccess().getLabelKeyword_16_0_1());
    }
	otherlv_28='kind' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getEdgeAccess().getKindKeyword_16_0_2());
    }
	otherlv_29='=' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_0_3());
    }
	otherlv_30='"comments"' 
    {
    	newLeafNode(otherlv_30, grammarAccess.getEdgeAccess().getCommentsKeyword_16_0_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 0);
	 				}
					({true}?=>(	otherlv_32='x' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getEdgeAccess().getXKeyword_16_0_5_0_0());
    }
	otherlv_33='=' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_0_5_0_1());
    }
this_STRING_34=RULE_STRING
    { 
    newLeafNode(this_STRING_34, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_0_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 1);
	 				}
					({true}?=>(	otherlv_35='y' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getEdgeAccess().getYKeyword_16_0_5_1_0());
    }
	otherlv_36='=' 
    {
    	newLeafNode(otherlv_36, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_0_5_1_1());
    }
this_STRING_37=RULE_STRING
    { 
    newLeafNode(this_STRING_37, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_0_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5(), 2);
	 				}
					({true}?=>(	otherlv_38='color' 
    {
    	newLeafNode(otherlv_38, grammarAccess.getEdgeAccess().getColorKeyword_16_0_5_2_0());
    }
	otherlv_39='=' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_0_5_2_1());
    }
this_STRING_40=RULE_STRING
    { 
    newLeafNode(this_STRING_40, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_0_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16_0_5());
	}

)	otherlv_41='>' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getCommentCommentLabelParserRuleCall_16_0_7_0()); 
	    }
		lv_comment_42_0=ruleCommentLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_42_0, 
        		"CommentLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_43='</' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_16_0_8());
    }
	otherlv_44='label' 
    {
    	newLeafNode(otherlv_44, grammarAccess.getEdgeAccess().getLabelKeyword_16_0_9());
    }
	otherlv_45='>' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_0_10());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 1);
	 				}
					({true}?=>(	otherlv_46='<' 
    {
    	newLeafNode(otherlv_46, grammarAccess.getEdgeAccess().getLessThanSignKeyword_16_1_0());
    }
	otherlv_47='label' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getEdgeAccess().getLabelKeyword_16_1_1());
    }
	otherlv_48='kind' 
    {
    	newLeafNode(otherlv_48, grammarAccess.getEdgeAccess().getKindKeyword_16_1_2());
    }
	otherlv_49='=' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_1_3());
    }
	otherlv_50='"synchronisation"' 
    {
    	newLeafNode(otherlv_50, grammarAccess.getEdgeAccess().getSynchronisationKeyword_16_1_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 0);
	 				}
					({true}?=>(	otherlv_52='x' 
    {
    	newLeafNode(otherlv_52, grammarAccess.getEdgeAccess().getXKeyword_16_1_5_0_0());
    }
	otherlv_53='=' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_1_5_0_1());
    }
this_STRING_54=RULE_STRING
    { 
    newLeafNode(this_STRING_54, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_1_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 1);
	 				}
					({true}?=>(	otherlv_55='y' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getEdgeAccess().getYKeyword_16_1_5_1_0());
    }
	otherlv_56='=' 
    {
    	newLeafNode(otherlv_56, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_1_5_1_1());
    }
this_STRING_57=RULE_STRING
    { 
    newLeafNode(this_STRING_57, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_1_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5(), 2);
	 				}
					({true}?=>(	otherlv_58='color' 
    {
    	newLeafNode(otherlv_58, grammarAccess.getEdgeAccess().getColorKeyword_16_1_5_2_0());
    }
	otherlv_59='=' 
    {
    	newLeafNode(otherlv_59, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_1_5_2_1());
    }
this_STRING_60=RULE_STRING
    { 
    newLeafNode(this_STRING_60, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_1_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16_1_5());
	}

)	otherlv_61='>' 
    {
    	newLeafNode(otherlv_61, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_1_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getSynchronizationSynchronizationLabelParserRuleCall_16_1_7_0()); 
	    }
		lv_synchronization_62_0=ruleSynchronizationLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		set(
       			$current, 
       			"synchronization",
        		lv_synchronization_62_0, 
        		"SynchronizationLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_63='</' 
    {
    	newLeafNode(otherlv_63, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_16_1_8());
    }
	otherlv_64='label' 
    {
    	newLeafNode(otherlv_64, grammarAccess.getEdgeAccess().getLabelKeyword_16_1_9());
    }
	otherlv_65='>' 
    {
    	newLeafNode(otherlv_65, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_1_10());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 2);
	 				}
					({true}?=>(	otherlv_66='<' 
    {
    	newLeafNode(otherlv_66, grammarAccess.getEdgeAccess().getLessThanSignKeyword_16_2_0());
    }
	otherlv_67='label' 
    {
    	newLeafNode(otherlv_67, grammarAccess.getEdgeAccess().getLabelKeyword_16_2_1());
    }
	otherlv_68='kind' 
    {
    	newLeafNode(otherlv_68, grammarAccess.getEdgeAccess().getKindKeyword_16_2_2());
    }
	otherlv_69='=' 
    {
    	newLeafNode(otherlv_69, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_2_3());
    }
	otherlv_70='"guard"' 
    {
    	newLeafNode(otherlv_70, grammarAccess.getEdgeAccess().getGuardKeyword_16_2_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 0);
	 				}
					({true}?=>(	otherlv_72='x' 
    {
    	newLeafNode(otherlv_72, grammarAccess.getEdgeAccess().getXKeyword_16_2_5_0_0());
    }
	otherlv_73='=' 
    {
    	newLeafNode(otherlv_73, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_2_5_0_1());
    }
this_STRING_74=RULE_STRING
    { 
    newLeafNode(this_STRING_74, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_2_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 1);
	 				}
					({true}?=>(	otherlv_75='y' 
    {
    	newLeafNode(otherlv_75, grammarAccess.getEdgeAccess().getYKeyword_16_2_5_1_0());
    }
	otherlv_76='=' 
    {
    	newLeafNode(otherlv_76, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_2_5_1_1());
    }
this_STRING_77=RULE_STRING
    { 
    newLeafNode(this_STRING_77, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_2_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5(), 2);
	 				}
					({true}?=>(	otherlv_78='color' 
    {
    	newLeafNode(otherlv_78, grammarAccess.getEdgeAccess().getColorKeyword_16_2_5_2_0());
    }
	otherlv_79='=' 
    {
    	newLeafNode(otherlv_79, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_2_5_2_1());
    }
this_STRING_80=RULE_STRING
    { 
    newLeafNode(this_STRING_80, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_2_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16_2_5());
	}

)	otherlv_81='>' 
    {
    	newLeafNode(otherlv_81, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_2_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getGuardExpressionParserRuleCall_16_2_7_0()); 
	    }
		lv_guard_82_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_82_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_83='</' 
    {
    	newLeafNode(otherlv_83, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_16_2_8());
    }
	otherlv_84='label' 
    {
    	newLeafNode(otherlv_84, grammarAccess.getEdgeAccess().getLabelKeyword_16_2_9());
    }
	otherlv_85='>' 
    {
    	newLeafNode(otherlv_85, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_2_10());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 3);
	 				}
					({true}?=>(	otherlv_86='<' 
    {
    	newLeafNode(otherlv_86, grammarAccess.getEdgeAccess().getLessThanSignKeyword_16_3_0());
    }
	otherlv_87='label' 
    {
    	newLeafNode(otherlv_87, grammarAccess.getEdgeAccess().getLabelKeyword_16_3_1());
    }
	otherlv_88='kind' 
    {
    	newLeafNode(otherlv_88, grammarAccess.getEdgeAccess().getKindKeyword_16_3_2());
    }
	otherlv_89='=' 
    {
    	newLeafNode(otherlv_89, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_3_3());
    }
	otherlv_90='"assignment"' 
    {
    	newLeafNode(otherlv_90, grammarAccess.getEdgeAccess().getAssignmentKeyword_16_3_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 0);
	 				}
					({true}?=>(	otherlv_92='x' 
    {
    	newLeafNode(otherlv_92, grammarAccess.getEdgeAccess().getXKeyword_16_3_5_0_0());
    }
	otherlv_93='=' 
    {
    	newLeafNode(otherlv_93, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_3_5_0_1());
    }
this_STRING_94=RULE_STRING
    { 
    newLeafNode(this_STRING_94, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_3_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 1);
	 				}
					({true}?=>(	otherlv_95='y' 
    {
    	newLeafNode(otherlv_95, grammarAccess.getEdgeAccess().getYKeyword_16_3_5_1_0());
    }
	otherlv_96='=' 
    {
    	newLeafNode(otherlv_96, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_3_5_1_1());
    }
this_STRING_97=RULE_STRING
    { 
    newLeafNode(this_STRING_97, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_3_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5(), 2);
	 				}
					({true}?=>(	otherlv_98='color' 
    {
    	newLeafNode(otherlv_98, grammarAccess.getEdgeAccess().getColorKeyword_16_3_5_2_0());
    }
	otherlv_99='=' 
    {
    	newLeafNode(otherlv_99, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_3_5_2_1());
    }
this_STRING_100=RULE_STRING
    { 
    newLeafNode(this_STRING_100, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_3_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16_3_5());
	}

)	otherlv_101='>' 
    {
    	newLeafNode(otherlv_101, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_3_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getUpdateExpressionParserRuleCall_16_3_7_0()); 
	    }
		lv_update_102_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		add(
       			$current, 
       			"update",
        		lv_update_102_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_103=',' 
    {
    	newLeafNode(otherlv_103, grammarAccess.getEdgeAccess().getCommaKeyword_16_3_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getUpdateExpressionParserRuleCall_16_3_8_1_0()); 
	    }
		lv_update_104_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		add(
       			$current, 
       			"update",
        		lv_update_104_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_105='</' 
    {
    	newLeafNode(otherlv_105, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_16_3_9());
    }
	otherlv_106='label' 
    {
    	newLeafNode(otherlv_106, grammarAccess.getEdgeAccess().getLabelKeyword_16_3_10());
    }
	otherlv_107='>' 
    {
    	newLeafNode(otherlv_107, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_3_11());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16(), 4);
	 				}
					({true}?=>(	otherlv_108='<' 
    {
    	newLeafNode(otherlv_108, grammarAccess.getEdgeAccess().getLessThanSignKeyword_16_4_0());
    }
	otherlv_109='label' 
    {
    	newLeafNode(otherlv_109, grammarAccess.getEdgeAccess().getLabelKeyword_16_4_1());
    }
	otherlv_110='kind' 
    {
    	newLeafNode(otherlv_110, grammarAccess.getEdgeAccess().getKindKeyword_16_4_2());
    }
	otherlv_111='=' 
    {
    	newLeafNode(otherlv_111, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_4_3());
    }
	otherlv_112='"select"' 
    {
    	newLeafNode(otherlv_112, grammarAccess.getEdgeAccess().getSelectKeyword_16_4_4());
    }
(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 0);
	 				}
					({true}?=>(	otherlv_114='x' 
    {
    	newLeafNode(otherlv_114, grammarAccess.getEdgeAccess().getXKeyword_16_4_5_0_0());
    }
	otherlv_115='=' 
    {
    	newLeafNode(otherlv_115, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_4_5_0_1());
    }
this_STRING_116=RULE_STRING
    { 
    newLeafNode(this_STRING_116, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_4_5_0_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 1);
	 				}
					({true}?=>(	otherlv_117='y' 
    {
    	newLeafNode(otherlv_117, grammarAccess.getEdgeAccess().getYKeyword_16_4_5_1_0());
    }
	otherlv_118='=' 
    {
    	newLeafNode(otherlv_118, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_4_5_1_1());
    }
this_STRING_119=RULE_STRING
    { 
    newLeafNode(this_STRING_119, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_4_5_1_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5(), 2);
	 				}
					({true}?=>(	otherlv_120='color' 
    {
    	newLeafNode(otherlv_120, grammarAccess.getEdgeAccess().getColorKeyword_16_4_5_2_0());
    }
	otherlv_121='=' 
    {
    	newLeafNode(otherlv_121, grammarAccess.getEdgeAccess().getEqualsSignKeyword_16_4_5_2_1());
    }
this_STRING_122=RULE_STRING
    { 
    newLeafNode(this_STRING_122, grammarAccess.getEdgeAccess().getSTRINGTerminalRuleCall_16_4_5_2_2()); 
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16_4_5());
	}

)	otherlv_123='>' 
    {
    	newLeafNode(otherlv_123, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_4_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getSelectionSelectionParserRuleCall_16_4_7_0()); 
	    }
		lv_selection_124_0=ruleSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		add(
       			$current, 
       			"selection",
        		lv_selection_124_0, 
        		"Selection");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_125=',' 
    {
    	newLeafNode(otherlv_125, grammarAccess.getEdgeAccess().getCommaKeyword_16_4_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getSelectionSelectionParserRuleCall_16_4_8_1_0()); 
	    }
		lv_selection_126_0=ruleSelection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		add(
       			$current, 
       			"selection",
        		lv_selection_126_0, 
        		"Selection");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_127='</' 
    {
    	newLeafNode(otherlv_127, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_16_4_9());
    }
	otherlv_128='label' 
    {
    	newLeafNode(otherlv_128, grammarAccess.getEdgeAccess().getLabelKeyword_16_4_10());
    }
	otherlv_129='>' 
    {
    	newLeafNode(otherlv_129, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_16_4_11());
    }
))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getEdgeAccess().getUnorderedGroup_16());
	}

)(	otherlv_130='<' 
    {
    	newLeafNode(otherlv_130, grammarAccess.getEdgeAccess().getLessThanSignKeyword_17_0());
    }
	otherlv_131='nail' 
    {
    	newLeafNode(otherlv_131, grammarAccess.getEdgeAccess().getNailKeyword_17_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeAccess().getBendPointPointParserRuleCall_17_2_0()); 
	    }
		lv_bendPoint_132_0=rulePoint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeRule());
	        }
       		add(
       			$current, 
       			"bendPoint",
        		lv_bendPoint_132_0, 
        		"Point");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_133='/>' 
    {
    	newLeafNode(otherlv_133, grammarAccess.getEdgeAccess().getSolidusGreaterThanSignKeyword_17_3());
    }
)*	otherlv_134='</' 
    {
    	newLeafNode(otherlv_134, grammarAccess.getEdgeAccess().getLessThanSignSolidusKeyword_18());
    }
	otherlv_135='transition' 
    {
    	newLeafNode(otherlv_135, grammarAccess.getEdgeAccess().getTransitionKeyword_19());
    }
	otherlv_136='>' 
    {
    	newLeafNode(otherlv_136, grammarAccess.getEdgeAccess().getGreaterThanSignKeyword_20());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleCommentLabel
entryRuleCommentLabel returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getCommentLabelRule()); } 
	 iv_ruleCommentLabel=ruleCommentLabel 
	 { $current=$iv_ruleCommentLabel.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule CommentLabel
ruleCommentLabel returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCommentLabelAccess().getANY_TOKEN_BUT_XML_CLOSEParserRuleCall()); 
    }
    this_ANY_TOKEN_BUT_XML_CLOSE_0=ruleANY_TOKEN_BUT_XML_CLOSE    {
		$current.merge(this_ANY_TOKEN_BUT_XML_CLOSE_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSynchronizationLabel
entryRuleSynchronizationLabel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSynchronizationLabelRule()); }
	 iv_ruleSynchronizationLabel=ruleSynchronizationLabel 
	 { $current=$iv_ruleSynchronizationLabel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SynchronizationLabel
ruleSynchronizationLabel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationLabelAccess().getChannelExpressionIdentifierExpressionParserRuleCall_0_0()); 
	    }
		lv_channelExpression_0_0=ruleIdentifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationLabelRule());
	        }
       		set(
       			$current, 
       			"channelExpression",
        		lv_channelExpression_0_0, 
        		"IdentifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationLabelAccess().getKindSynchronizationKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleSynchronizationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationLabelRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"SynchronizationKind");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPointAccess().getPointAction_0(),
            $current);
    }
)(

(
	{ 
	  getUnorderedGroupHelper().enter(grammarAccess.getPointAccess().getUnorderedGroup_1());
	}
	(
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPointAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getPointAccess().getUnorderedGroup_1(), 0);
	 				}
					({true}?=>(	otherlv_2='x' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPointAccess().getXKeyword_1_0_0());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPointAccess().getEqualsSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getXQUOTED_INTParserRuleCall_1_0_2_0()); 
	    }
		lv_x_4_0=ruleQUOTED_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_4_0, 
        		"QUOTED_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPointAccess().getUnorderedGroup_1());
	 				}
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPointAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getPointAccess().getUnorderedGroup_1(), 1);
	 				}
					({true}?=>(	otherlv_5='y' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPointAccess().getYKeyword_1_1_0());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPointAccess().getEqualsSignKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getYQUOTED_INTParserRuleCall_1_1_2_0()); 
	    }
		lv_y_7_0=ruleQUOTED_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_7_0, 
        		"QUOTED_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)))
					{ 
	 				  getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPointAccess().getUnorderedGroup_1());
	 				}
 				)
			)  

		)*	
	)
)
	{ 
	  getUnorderedGroupHelper().leave(grammarAccess.getPointAccess().getUnorderedGroup_1());
	}

))
;





// Entry rule entryRuleSelection
entryRuleSelection returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSelectionRule()); }
	 iv_ruleSelection=ruleSelection 
	 { $current=$iv_ruleSelection.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Selection
ruleSelection returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getElementsVariableNameOnlyParserRuleCall_0_0()); 
	    }
		lv_elements_0_0=ruleVariableNameOnly		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"VariableNameOnly");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectionAccess().getColonKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getTypeDefinitionRangeTypeSpecificationParserRuleCall_2_0_0()); 
	    }
		lv_typeDefinition_2_1=ruleRangeTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_2_1, 
        		"RangeTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getTypeDefinitionScalarTypeSpecificationParserRuleCall_2_0_1()); 
	    }
		lv_typeDefinition_2_2=ruleScalarTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_2_2, 
        		"ScalarTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getSelectionAccess().getTypeDefinitionSimpleIdentifierExpressionParserRuleCall_2_0_2()); 
	    }
		lv_typeDefinition_2_3=ruleSimpleIdentifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectionRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_2_3, 
        		"SimpleIdentifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleGlobalDeclarations
entryRuleGlobalDeclarations returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getGlobalDeclarationsRule()); }
	 iv_ruleGlobalDeclarations=ruleGlobalDeclarations 
	 { $current=$iv_ruleGlobalDeclarations.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule GlobalDeclarations
ruleGlobalDeclarations returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGlobalDeclarationsAccess().getGlobalDeclarationsAction_0(),
            $current);
    }
)((
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationsAccess().getDeclarationTypedDeclarationParserRuleCall_1_0_0_0()); 
	    }
		lv_declaration_1_1=ruleTypedDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_1, 
        		"TypedDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationsAccess().getDeclarationTypeDeclarationParserRuleCall_1_0_0_1()); 
	    }
		lv_declaration_1_2=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_2, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalDeclarationsAccess().getChannelPriorityChannelPriorityDeclarationParserRuleCall_1_1_0()); 
	    }
		lv_channelPriority_2_0=ruleChannelPriorityDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalDeclarationsRule());
	        }
       		set(
       			$current, 
       			"channelPriority",
        		lv_channelPriority_2_0, 
        		"ChannelPriorityDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleLocalDeclarations
entryRuleLocalDeclarations returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getLocalDeclarationsRule()); }
	 iv_ruleLocalDeclarations=ruleLocalDeclarations 
	 { $current=$iv_ruleLocalDeclarations.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule LocalDeclarations
ruleLocalDeclarations returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLocalDeclarationsAccess().getLocalDeclarationsAction_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalDeclarationsAccess().getDeclarationTypedDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_declaration_1_1=ruleTypedDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_1, 
        		"TypedDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLocalDeclarationsAccess().getDeclarationTypeDeclarationParserRuleCall_1_0_1()); 
	    }
		lv_declaration_1_2=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_2, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSystemDeclarations
entryRuleSystemDeclarations returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getSystemDeclarationsRule()); }
	 iv_ruleSystemDeclarations=ruleSystemDeclarations 
	 { $current=$iv_ruleSystemDeclarations.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SystemDeclarations
ruleSystemDeclarations returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSystemDeclarationsAccess().getSystemDeclarationsAction_0(),
            $current);
    }
)((
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationsAccess().getDeclarationTypedDeclarationParserRuleCall_1_0_0_0()); 
	    }
		lv_declaration_1_1=ruleTypedDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_1, 
        		"TypedDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationsAccess().getDeclarationTypeDeclarationParserRuleCall_1_0_0_1()); 
	    }
		lv_declaration_1_2=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_2, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationsAccess().getDeclarationTemplateDeclarationParserRuleCall_1_0_0_2()); 
	    }
		lv_declaration_1_3=ruleTemplateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_3, 
        		"TemplateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationsAccess().getSystemSystemParserRuleCall_1_1_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationsRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationsAccess().getProgressMeasureProgressMeasureParserRuleCall_1_2_0()); 
	    }
		lv_progressMeasure_3_0=ruleProgressMeasure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationsRule());
	        }
       		set(
       			$current, 
       			"progressMeasure",
        		lv_progressMeasure_3_0, 
        		"ProgressMeasure");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProgressMeasure
entryRuleProgressMeasure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgressMeasureRule()); }
	 iv_ruleProgressMeasure=ruleProgressMeasure 
	 { $current=$iv_ruleProgressMeasure.current; } 
	 EOF 
;

// Rule ProgressMeasure
ruleProgressMeasure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='progress' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProgressMeasureAccess().getProgressKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProgressMeasureAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgressMeasureAccess().getExpressionExpressionParserRuleCall_2_0_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgressMeasureRule());
	        }
       		add(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProgressMeasureAccess().getSemicolonKeyword_2_1());
    }
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProgressMeasureAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTemplateDeclaration
entryRuleTemplateDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateDeclarationRule()); }
	 iv_ruleTemplateDeclaration=ruleTemplateDeclaration 
	 { $current=$iv_ruleTemplateDeclaration.current; } 
	 EOF 
;

// Rule TemplateDeclaration
ruleTemplateDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateDeclarationAccess().getDeclaredTemplateRedefinedTemplateParserRuleCall_0_0()); 
	    }
		lv_declaredTemplate_0_0=ruleRedefinedTemplate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaredTemplate",
        		lv_declaredTemplate_0_0, 
        		"RedefinedTemplate");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTemplateDeclarationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateDeclarationAccess().getArgumentExpressionParserRuleCall_2_0_0()); 
	    }
		lv_argument_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateDeclarationRule());
	        }
       		add(
       			$current, 
       			"argument",
        		lv_argument_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTemplateDeclarationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTemplateDeclarationAccess().getArgumentExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_argument_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTemplateDeclarationRule());
	        }
       		add(
       			$current, 
       			"argument",
        		lv_argument_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTemplateDeclarationAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTemplateDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleRedefinedTemplate
entryRuleRedefinedTemplate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRedefinedTemplateRule()); }
	 iv_ruleRedefinedTemplate=ruleRedefinedTemplate 
	 { $current=$iv_ruleRedefinedTemplate.current; } 
	 EOF 
;

// Rule RedefinedTemplate
ruleRedefinedTemplate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRedefinedTemplateAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRedefinedTemplateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRedefinedTemplateAccess().getEqualsSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRedefinedTemplateRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getRedefinedTemplateAccess().getReferredTemplateTemplateCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemAccess().getSystemKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getInstantiationListInstantiationListParserRuleCall_1_0()); 
	    }
		lv_instantiationList_1_0=ruleInstantiationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"instantiationList",
        		lv_instantiationList_1_0, 
        		"InstantiationList");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='&lt;' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemAccess().getLtKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemAccess().getInstantiationListInstantiationListParserRuleCall_2_1_0()); 
	    }
		lv_instantiationList_3_0=ruleInstantiationList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemRule());
	        }
       		add(
       			$current, 
       			"instantiationList",
        		lv_instantiationList_3_0, 
        		"InstantiationList");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSystemAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInstantiationList
entryRuleInstantiationList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstantiationListRule()); }
	 iv_ruleInstantiationList=ruleInstantiationList 
	 { $current=$iv_ruleInstantiationList.current; } 
	 EOF 
;

// Rule InstantiationList
ruleInstantiationList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstantiationListRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInstantiationListAccess().getTemplateAbstractTemplateCrossReference_0_0()); 
	    }
		ruleUPPAAL_IDENTIFIER		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstantiationListAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstantiationListRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInstantiationListAccess().getTemplateAbstractTemplateCrossReference_1_1_0()); 
	    }
		ruleUPPAAL_IDENTIFIER		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTypedDeclaration
entryRuleTypedDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedDeclarationRule()); }
	 iv_ruleTypedDeclaration=ruleTypedDeclaration 
	 { $current=$iv_ruleTypedDeclaration.current; } 
	 EOF 
;

// Rule TypedDeclaration
ruleTypedDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedDeclarationAccess().getTypeDefinitionTypeExpressionParserRuleCall_0_0()); 
	    }
		lv_typeDefinition_0_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_0_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedDeclarationAccess().getElementsFunctionParserRuleCall_1_0_0()); 
	    }
		lv_elements_1_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedDeclarationAccess().getElementsVariableParserRuleCall_1_1_0_0()); 
	    }
		lv_elements_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypedDeclarationAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedDeclarationAccess().getElementsVariableParserRuleCall_1_1_1_1_0()); 
	    }
		lv_elements_4_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypedDeclarationAccess().getSemicolonKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleTypedElement
entryRuleTypedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedElementRule()); }
	 iv_ruleTypedElement=ruleTypedElement 
	 { $current=$iv_ruleTypedElement.current; } 
	 EOF 
;

// Rule TypedElement
ruleTypedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypedElementAccess().getTypeDefinitionTypeExpressionParserRuleCall_0_0()); 
	    }
		lv_typeDefinition_0_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedElementRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_0_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedElementAccess().getElementsVariableParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypedElementAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedElementAccess().getElementsVariableParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedElementRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleVariableNameOnly
entryRuleVariableNameOnly returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableNameOnlyRule()); }
	 iv_ruleVariableNameOnly=ruleVariableNameOnly 
	 { $current=$iv_ruleVariableNameOnly.current; } 
	 EOF 
;

// Rule VariableNameOnly
ruleVariableNameOnly returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableNameOnlyAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_0()); 
	    }
		lv_name_0_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableNameOnlyRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getIndexExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_index_2_1=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_1, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getIndexScalarTypeSpecificationParserRuleCall_1_1_0_1()); 
	    }
		lv_index_2_2=ruleScalarTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_2, 
        		"ScalarTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getRightSquareBracketKeyword_1_2());
    }
)*(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getInitializerInitializerParserRuleCall_2_1_0()); 
	    }
		lv_initializer_5_0=ruleInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_5_0, 
        		"Initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInitializer
entryRuleInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializerRule()); }
	 iv_ruleInitializer=ruleInitializer 
	 { $current=$iv_ruleInitializer.current; } 
	 EOF 
;

// Rule Initializer
ruleInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitializerAccess().getArrayInitializerParserRuleCall_0()); 
    }
    this_ArrayInitializer_0=ruleArrayInitializer
    { 
        $current = $this_ArrayInitializer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitializerAccess().getExpressionInitializerParserRuleCall_1()); 
    }
    this_ExpressionInitializer_1=ruleExpressionInitializer
    { 
        $current = $this_ExpressionInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionInitializer
entryRuleExpressionInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionInitializerRule()); }
	 iv_ruleExpressionInitializer=ruleExpressionInitializer 
	 { $current=$iv_ruleExpressionInitializer.current; } 
	 EOF 
;

// Rule ExpressionInitializer
ruleExpressionInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionInitializerAccess().getExpressionExpressionParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionInitializerRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArrayInitializer
entryRuleArrayInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializerRule()); }
	 iv_ruleArrayInitializer=ruleArrayInitializer 
	 { $current=$iv_ruleArrayInitializer.current; } 
	 EOF 
;

// Rule ArrayInitializer
ruleArrayInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayInitializerAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getInitializerInitializerParserRuleCall_1_0()); 
	    }
		lv_initializer_1_0=ruleInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		add(
       			$current, 
       			"initializer",
        		lv_initializer_1_0, 
        		"Initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayInitializerAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializerAccess().getInitializerInitializerParserRuleCall_2_1_0()); 
	    }
		lv_initializer_3_0=ruleInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializerRule());
	        }
       		add(
       			$current, 
       			"initializer",
        		lv_initializer_3_0, 
        		"Initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTypeExpression
entryRuleTypeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	 iv_ruleTypeExpression=ruleTypeExpression 
	 { $current=$iv_ruleTypeExpression.current; } 
	 EOF 
;

// Rule TypeExpression
ruleTypeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getRangeTypeSpecificationParserRuleCall_0()); 
    }
    this_RangeTypeSpecification_0=ruleRangeTypeSpecification
    { 
        $current = $this_RangeTypeSpecification_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getScalarTypeSpecificationParserRuleCall_1()); 
    }
    this_ScalarTypeSpecification_1=ruleScalarTypeSpecification
    { 
        $current = $this_ScalarTypeSpecification_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getStructTypeSpecificationParserRuleCall_2()); 
    }
    this_StructTypeSpecification_2=ruleStructTypeSpecification
    { 
        $current = $this_StructTypeSpecification_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getSimpleIdentifierExpressionParserRuleCall_3()); 
    }
    this_SimpleIdentifierExpression_3=ruleSimpleIdentifierExpression
    { 
        $current = $this_SimpleIdentifierExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getChannelPrefixExpressionParserRuleCall_4()); 
    }
    this_ChannelPrefixExpression_4=ruleChannelPrefixExpression
    { 
        $current = $this_ChannelPrefixExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getDataPrefixExpressionParserRuleCall_5()); 
    }
    this_DataPrefixExpression_5=ruleDataPrefixExpression
    { 
        $current = $this_DataPrefixExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChannelPrefixExpression
entryRuleChannelPrefixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelPrefixExpressionRule()); }
	 iv_ruleChannelPrefixExpression=ruleChannelPrefixExpression 
	 { $current=$iv_ruleChannelPrefixExpression.current; } 
	 EOF 
;

// Rule ChannelPrefixExpression
ruleChannelPrefixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPrefixExpressionAccess().getUrgentChannelPrefixExpression_UrgentParserRuleCall_0_0_0_0()); 
	    }
		lv_urgent_0_0=ruleChannelPrefixExpression_Urgent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"urgent",
        		lv_urgent_0_0, 
        		"ChannelPrefixExpression_Urgent");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPrefixExpressionAccess().getBroadcastChannelPrefixExpression_BroadcastParserRuleCall_0_0_1_0()); 
	    }
		lv_broadcast_1_0=ruleChannelPrefixExpression_Broadcast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"broadcast",
        		lv_broadcast_1_0, 
        		"ChannelPrefixExpression_Broadcast");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPrefixExpressionAccess().getBroadcastChannelPrefixExpression_BroadcastParserRuleCall_0_1_0_0()); 
	    }
		lv_broadcast_2_0=ruleChannelPrefixExpression_Broadcast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"broadcast",
        		lv_broadcast_2_0, 
        		"ChannelPrefixExpression_Broadcast");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPrefixExpressionAccess().getUrgentChannelPrefixExpression_UrgentParserRuleCall_0_1_1_0()); 
	    }
		lv_urgent_3_0=ruleChannelPrefixExpression_Urgent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"urgent",
        		lv_urgent_3_0, 
        		"ChannelPrefixExpression_Urgent");
	        afterParserOrEnumRuleCall();
	    }

)
)?))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChannelPrefixExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getChannelPrefixExpressionAccess().getChannelTypeTypeCrossReference_1_0()); 
	    }
		ruleCHAN_KEYWORD		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCHAN_KEYWORD
entryRuleCHAN_KEYWORD returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHAN_KEYWORDRule()); } 
	 iv_ruleCHAN_KEYWORD=ruleCHAN_KEYWORD 
	 { $current=$iv_ruleCHAN_KEYWORD.current.getText(); }  
	 EOF 
;

// Rule CHAN_KEYWORD
ruleCHAN_KEYWORD returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='chan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCHAN_KEYWORDAccess().getChanKeyword()); 
    }

    ;





// Entry rule entryRuleChannelPrefixExpression_Urgent
entryRuleChannelPrefixExpression_Urgent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelPrefixExpression_UrgentRule()); } 
	 iv_ruleChannelPrefixExpression_Urgent=ruleChannelPrefixExpression_Urgent 
	 { $current=$iv_ruleChannelPrefixExpression_Urgent.current.getText(); }  
	 EOF 
;

// Rule ChannelPrefixExpression_Urgent
ruleChannelPrefixExpression_Urgent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='urgent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChannelPrefixExpression_UrgentAccess().getUrgentKeyword()); 
    }

    ;





// Entry rule entryRuleChannelPrefixExpression_Broadcast
entryRuleChannelPrefixExpression_Broadcast returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelPrefixExpression_BroadcastRule()); } 
	 iv_ruleChannelPrefixExpression_Broadcast=ruleChannelPrefixExpression_Broadcast 
	 { $current=$iv_ruleChannelPrefixExpression_Broadcast.current.getText(); }  
	 EOF 
;

// Rule ChannelPrefixExpression_Broadcast
ruleChannelPrefixExpression_Broadcast returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='broadcast' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChannelPrefixExpression_BroadcastAccess().getBroadcastKeyword()); 
    }

    ;





// Entry rule entryRuleDataPrefixExpression
entryRuleDataPrefixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataPrefixExpressionRule()); }
	 iv_ruleDataPrefixExpression=ruleDataPrefixExpression 
	 { $current=$iv_ruleDataPrefixExpression.current; } 
	 EOF 
;

// Rule DataPrefixExpression
ruleDataPrefixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataPrefixExpressionAccess().getPrefixDataVariablePrefixEnumRuleCall_0_0()); 
	    }
		lv_prefix_0_0=ruleDataVariablePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_0_0, 
        		"DataVariablePrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataPrefixExpressionAccess().getDataTypeExpressionRangeTypeSpecificationParserRuleCall_1_0_0()); 
	    }
		lv_dataTypeExpression_1_1=ruleRangeTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"dataTypeExpression",
        		lv_dataTypeExpression_1_1, 
        		"RangeTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDataPrefixExpressionAccess().getDataTypeExpressionScalarTypeSpecificationParserRuleCall_1_0_1()); 
	    }
		lv_dataTypeExpression_1_2=ruleScalarTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"dataTypeExpression",
        		lv_dataTypeExpression_1_2, 
        		"ScalarTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDataPrefixExpressionAccess().getDataTypeExpressionStructTypeSpecificationParserRuleCall_1_0_2()); 
	    }
		lv_dataTypeExpression_1_3=ruleStructTypeSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"dataTypeExpression",
        		lv_dataTypeExpression_1_3, 
        		"StructTypeSpecification");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDataPrefixExpressionAccess().getDataTypeExpressionSimpleIdentifierExpressionParserRuleCall_1_0_3()); 
	    }
		lv_dataTypeExpression_1_4=ruleSimpleIdentifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataPrefixExpressionRule());
	        }
       		set(
       			$current, 
       			"dataTypeExpression",
        		lv_dataTypeExpression_1_4, 
        		"SimpleIdentifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleRangeTypeSpecification
entryRuleRangeTypeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeTypeSpecificationRule()); }
	 iv_ruleRangeTypeSpecification=ruleRangeTypeSpecification 
	 { $current=$iv_ruleRangeTypeSpecification.current; } 
	 EOF 
;

// Rule RangeTypeSpecification
ruleRangeTypeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='int' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeTypeSpecificationAccess().getIntKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeTypeSpecificationAccess().getBoundsIntegerBoundsParserRuleCall_1_0()); 
	    }
		lv_bounds_1_0=ruleIntegerBounds		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeTypeSpecificationRule());
	        }
       		set(
       			$current, 
       			"bounds",
        		lv_bounds_1_0, 
        		"IntegerBounds");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerBounds
entryRuleIntegerBounds returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerBoundsRule()); }
	 iv_ruleIntegerBounds=ruleIntegerBounds 
	 { $current=$iv_ruleIntegerBounds.current; } 
	 EOF 
;

// Rule IntegerBounds
ruleIntegerBounds returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntegerBoundsAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerBoundsAccess().getLowerBoundExpressionParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerBoundsRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerBoundsAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerBoundsAccess().getUpperBoundExpressionParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerBoundsRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntegerBoundsAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleStructTypeSpecification
entryRuleStructTypeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeSpecificationRule()); }
	 iv_ruleStructTypeSpecification=ruleStructTypeSpecification 
	 { $current=$iv_ruleStructTypeSpecification.current; } 
	 EOF 
;

// Rule StructTypeSpecification
ruleStructTypeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='struct' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStructTypeSpecificationAccess().getStructKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructTypeSpecificationAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeSpecificationAccess().getDeclarationTypedElementParserRuleCall_2_0_0()); 
	    }
		lv_declaration_2_0=ruleTypedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeSpecificationRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_2_0, 
        		"TypedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructTypeSpecificationAccess().getSemicolonKeyword_2_1());
    }
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructTypeSpecificationAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleScalarTypeSpecification
entryRuleScalarTypeSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScalarTypeSpecificationRule()); }
	 iv_ruleScalarTypeSpecification=ruleScalarTypeSpecification 
	 { $current=$iv_ruleScalarTypeSpecification.current; } 
	 EOF 
;

// Rule ScalarTypeSpecification
ruleScalarTypeSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='scalar' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScalarTypeSpecificationAccess().getScalarKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScalarTypeSpecificationAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScalarTypeSpecificationAccess().getSizeExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_sizeExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarTypeSpecificationRule());
	        }
       		set(
       			$current, 
       			"sizeExpression",
        		lv_sizeExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScalarTypeSpecificationAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypedefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeDefinitionTypeExpressionParserRuleCall_1_0()); 
	    }
		lv_typeDefinition_1_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_1_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeDeclaredTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleDeclaredType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"DeclaredType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDeclarationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeDeclaredTypeParserRuleCall_3_1_0()); 
	    }
		lv_type_4_0=ruleDeclaredType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"DeclaredType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleDeclaredType
entryRuleDeclaredType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredTypeRule()); }
	 iv_ruleDeclaredType=ruleDeclaredType 
	 { $current=$iv_ruleDeclaredType.current; } 
	 EOF 
;

// Rule DeclaredType
ruleDeclaredType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclaredTypeAccess().getDeclaredTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredTypeAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChannelPriorityDeclaration
entryRuleChannelPriorityDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelPriorityDeclarationRule()); }
	 iv_ruleChannelPriorityDeclaration=ruleChannelPriorityDeclaration 
	 { $current=$iv_ruleChannelPriorityDeclaration.current; } 
	 EOF 
;

// Rule ChannelPriorityDeclaration
ruleChannelPriorityDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='chan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChannelPriorityDeclarationAccess().getChanKeyword_0());
    }
	otherlv_1='priority' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChannelPriorityDeclarationAccess().getPriorityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPriorityDeclarationAccess().getGroupsChannelPriorityGroupParserRuleCall_2_0()); 
	    }
		lv_groups_2_0=ruleChannelPriorityGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPriorityDeclarationRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_2_0, 
        		"ChannelPriorityGroup");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='&lt;' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChannelPriorityDeclarationAccess().getLtKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPriorityDeclarationAccess().getGroupsChannelPriorityGroupParserRuleCall_3_1_0()); 
	    }
		lv_groups_4_0=ruleChannelPriorityGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPriorityDeclarationRule());
	        }
       		add(
       			$current, 
       			"groups",
        		lv_groups_4_0, 
        		"ChannelPriorityGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChannelPriorityDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleChannelPriorityGroup
entryRuleChannelPriorityGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelPriorityGroupRule()); }
	 iv_ruleChannelPriorityGroup=ruleChannelPriorityGroup 
	 { $current=$iv_ruleChannelPriorityGroup.current; } 
	 EOF 
;

// Rule ChannelPriorityGroup
ruleChannelPriorityGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPriorityGroupAccess().getItemsPriorityItemParserRuleCall_0_0()); 
	    }
		lv_items_0_0=rulePriorityItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPriorityGroupRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_0_0, 
        		"PriorityItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChannelPriorityGroupAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelPriorityGroupAccess().getItemsPriorityItemParserRuleCall_1_1_0()); 
	    }
		lv_items_2_0=rulePriorityItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelPriorityGroupRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"PriorityItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePriorityItem
entryRulePriorityItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPriorityItemRule()); }
	 iv_rulePriorityItem=rulePriorityItem 
	 { $current=$iv_rulePriorityItem.current; } 
	 EOF 
;

// Rule PriorityItem
rulePriorityItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPriorityItemAccess().getDefaultItemParserRuleCall_0()); 
    }
    this_DefaultItem_0=ruleDefaultItem
    { 
        $current = $this_DefaultItem_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPriorityItemAccess().getChannelItemParserRuleCall_1()); 
    }
    this_ChannelItem_1=ruleChannelItem
    { 
        $current = $this_ChannelItem_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefaultItem
entryRuleDefaultItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultItemRule()); }
	 iv_ruleDefaultItem=ruleDefaultItem 
	 { $current=$iv_ruleDefaultItem.current; } 
	 EOF 
;

// Rule DefaultItem
ruleDefaultItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultItemAccess().getDefaultItemAction_0(),
            $current);
    }
)	otherlv_1='default' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultItemAccess().getDefaultKeyword_1());
    }
)
;





// Entry rule entryRuleChannelItem
entryRuleChannelItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelItemRule()); }
	 iv_ruleChannelItem=ruleChannelItem 
	 { $current=$iv_ruleChannelItem.current; } 
	 EOF 
;

// Rule ChannelItem
ruleChannelItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelItemAccess().getChannelExpressionIdentifierExpressionParserRuleCall_0()); 
	    }
		lv_channelExpression_0_0=ruleIdentifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelItemRule());
	        }
       		set(
       			$current, 
       			"channelExpression",
        		lv_channelExpression_0_0, 
        		"IdentifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParameterParameterContainerParserRuleCall_2_0_0()); 
	    }
		lv_parameter_2_0=ruleParameterContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"ParameterContainer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParameterParameterContainerParserRuleCall_2_1_1_0()); 
	    }
		lv_parameter_4_0=ruleParameterContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"ParameterContainer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_6_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_6_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterContainer
entryRuleParameterContainer returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getParameterContainerRule()); }
	 iv_ruleParameterContainer=ruleParameterContainer 
	 { $current=$iv_ruleParameterContainer.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ParameterContainer
ruleParameterContainer returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterContainerAccess().getTypeDefinitionTypeExpressionParserRuleCall_0_0()); 
	    }
		lv_typeDefinition_0_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterContainerRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_0_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterContainerAccess().getElementsParameterParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterContainerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getCallTypeCallTypeEnumRuleCall_0_0()); 
	    }
		lv_callType_0_0=ruleCallType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"callType",
        		lv_callType_0_0, 
        		"CallType");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getNameUPPAAL_IDENTIFIERParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleUPPAAL_IDENTIFIER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"UPPAAL_IDENTIFIER");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_0()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEmptyStatementParserRuleCall_1()); 
    }
    this_EmptyStatement_1=ruleEmptyStatement
    { 
        $current = $this_EmptyStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_2()); 
    }
    this_ExpressionStatement_2=ruleExpressionStatement
    { 
        $current = $this_ExpressionStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getForLoopParserRuleCall_3()); 
    }
    this_ForLoop_3=ruleForLoop
    { 
        $current = $this_ForLoop_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIterationParserRuleCall_4()); 
    }
    this_Iteration_4=ruleIteration
    { 
        $current = $this_Iteration_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhileLoopParserRuleCall_5()); 
    }
    this_WhileLoop_5=ruleWhileLoop
    { 
        $current = $this_WhileLoop_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDoWhileLoopParserRuleCall_6()); 
    }
    this_DoWhileLoop_6=ruleDoWhileLoop
    { 
        $current = $this_DoWhileLoop_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_7()); 
    }
    this_IfStatement_7=ruleIfStatement
    { 
        $current = $this_IfStatement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_8()); 
    }
    this_ReturnStatement_8=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_1(),
            $current);
    }
)((
(
ruleBlockDeclarations
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getDeclarationsBlockDeclarationsParserRuleCall_2_0()); 
	    }
		lv_declarations_2_0=ruleBlockDeclarations		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"BlockDeclarations");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBlockDeclarations
entryRuleBlockDeclarations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockDeclarationsRule()); }
	 iv_ruleBlockDeclarations=ruleBlockDeclarations 
	 { $current=$iv_ruleBlockDeclarations.current; } 
	 EOF 
;

// Rule BlockDeclarations
ruleBlockDeclarations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockDeclarationsAccess().getLocalDeclarationsAction_0(),
            $current);
    }
)((
(
(
ruleBlockTypedDeclaration
    |ruleTypeDeclaration
)

)
)=>
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockDeclarationsAccess().getDeclarationBlockTypedDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_declaration_1_1=ruleBlockTypedDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_1, 
        		"BlockTypedDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getBlockDeclarationsAccess().getDeclarationTypeDeclarationParserRuleCall_1_0_1()); 
	    }
		lv_declaration_1_2=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockDeclarationsRule());
	        }
       		add(
       			$current, 
       			"declaration",
        		lv_declaration_1_2, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)+)
;





// Entry rule entryRuleBlockTypedDeclaration
entryRuleBlockTypedDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockTypedDeclarationRule()); }
	 iv_ruleBlockTypedDeclaration=ruleBlockTypedDeclaration 
	 { $current=$iv_ruleBlockTypedDeclaration.current; } 
	 EOF 
;

// Rule BlockTypedDeclaration
ruleBlockTypedDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockTypedDeclarationAccess().getTypeDefinitionTypeExpressionParserRuleCall_0_0()); 
	    }
		lv_typeDefinition_0_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockTypedDeclarationRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_0_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockTypedDeclarationAccess().getElementsVariableParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockTypedDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockTypedDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockTypedDeclarationAccess().getElementsVariableParserRuleCall_2_1_0()); 
	    }
		lv_elements_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockTypedDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBlockTypedDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleEmptyStatement
entryRuleEmptyStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyStatementRule()); }
	 iv_ruleEmptyStatement=ruleEmptyStatement 
	 { $current=$iv_ruleEmptyStatement.current; } 
	 EOF 
;

// Rule EmptyStatement
ruleEmptyStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0=';' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyStatementAccess().getEmptyStatementAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current; } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	 iv_ruleForLoop=ruleForLoop 
	 { $current=$iv_ruleForLoop.current; } 
	 EOF 
;

// Rule ForLoop
ruleForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getInitializationExpressionParserRuleCall_2_0()); 
	    }
		lv_initialization_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"initialization",
        		lv_initialization_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForLoopAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getConditionExpressionParserRuleCall_4_0()); 
	    }
		lv_condition_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForLoopAccess().getSemicolonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getIterationExpressionParserRuleCall_6_0()); 
	    }
		lv_iteration_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"iteration",
        		lv_iteration_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getStatementStatementParserRuleCall_8_0()); 
	    }
		lv_statement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIteration
entryRuleIteration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationRule()); }
	 iv_ruleIteration=ruleIteration 
	 { $current=$iv_ruleIteration.current; } 
	 EOF 
;

// Rule Iteration
ruleIteration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIterationAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIterationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterationAccess().getElementsVariableNameOnlyParserRuleCall_2_0()); 
	    }
		lv_elements_2_0=ruleVariableNameOnly		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"VariableNameOnly");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIterationAccess().getColonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterationAccess().getTypeDefinitionTypeExpressionParserRuleCall_4_0()); 
	    }
		lv_typeDefinition_4_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterationRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_4_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIterationAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIterationAccess().getStatementStatementParserRuleCall_6_0()); 
	    }
		lv_statement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIterationRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	 iv_ruleWhileLoop=ruleWhileLoop 
	 { $current=$iv_ruleWhileLoop.current; } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	 iv_ruleDoWhileLoop=ruleDoWhileLoop 
	 { $current=$iv_ruleDoWhileLoop.current; } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileLoopAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoWhileLoopAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_ifExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifExpression",
        		lv_ifExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenStatementStatementParserRuleCall_4_0()); 
	    }
		lv_thenStatement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenStatement",
        		lv_thenStatement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getReturnExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_returnExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"returnExpression",
        		lv_returnExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SINGLE_LINE_COMMENT", "RULE_MULTI_LINE_COMMENT");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getQuantificationExpressionParserRuleCall()); 
    }
    this_QuantificationExpression_0=ruleQuantificationExpression
    { 
        $current = $this_QuantificationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleQuantificationExpression
entryRuleQuantificationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantificationExpressionRule()); }
	 iv_ruleQuantificationExpression=ruleQuantificationExpression 
	 { $current=$iv_ruleQuantificationExpression.current; } 
	 EOF 
;

// Rule QuantificationExpression
ruleQuantificationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuantificationExpressionAccess().getQuantificationExpressionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationExpressionAccess().getQuantifierQuantifierEnumRuleCall_0_1_0()); 
	    }
		lv_quantifier_1_0=ruleQuantifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationExpressionRule());
	        }
       		set(
       			$current, 
       			"quantifier",
        		lv_quantifier_1_0, 
        		"Quantifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantificationExpressionAccess().getLeftParenthesisKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationExpressionAccess().getElementsVariableNameOnlyParserRuleCall_0_3_0()); 
	    }
		lv_elements_3_0=ruleVariableNameOnly		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationExpressionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"VariableNameOnly");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantificationExpressionAccess().getColonKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationExpressionAccess().getTypeDefinitionTypeExpressionParserRuleCall_0_5_0()); 
	    }
		lv_typeDefinition_5_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationExpressionRule());
	        }
       		set(
       			$current, 
       			"typeDefinition",
        		lv_typeDefinition_5_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getQuantificationExpressionAccess().getRightParenthesisKeyword_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantificationExpressionAccess().getExpressionLogicalExpression_OrImplyParserRuleCall_0_7_0()); 
	    }
		lv_expression_7_0=ruleLogicalExpression_OrImply		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantificationExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"LogicalExpression_OrImply");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getQuantificationExpressionAccess().getLogicalExpression_OrImplyParserRuleCall_1()); 
    }
    this_LogicalExpression_OrImply_8=ruleLogicalExpression_OrImply
    { 
        $current = $this_LogicalExpression_OrImply_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLogicalExpression_OrImply
entryRuleLogicalExpression_OrImply returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpression_OrImplyRule()); }
	 iv_ruleLogicalExpression_OrImply=ruleLogicalExpression_OrImply 
	 { $current=$iv_ruleLogicalExpression_OrImply.current; } 
	 EOF 
;

// Rule LogicalExpression_OrImply
ruleLogicalExpression_OrImply returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalExpression_OrImplyAccess().getLogicalExpression_AndParserRuleCall_0()); 
    }
    this_LogicalExpression_And_0=ruleLogicalExpression_And
    { 
        $current = $this_LogicalExpression_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpression_OrImplyAccess().getLogicalExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_OrImplyAccess().getOperatorLogicalOperator_OrImplyEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOperator_OrImply		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_OrImplyRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOperator_OrImply");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_OrImplyAccess().getSecondExprLogicalExpression_AndParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleLogicalExpression_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_OrImplyRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"LogicalExpression_And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalExpression_And
entryRuleLogicalExpression_And returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpression_AndRule()); }
	 iv_ruleLogicalExpression_And=ruleLogicalExpression_And 
	 { $current=$iv_ruleLogicalExpression_And.current; } 
	 EOF 
;

// Rule LogicalExpression_And
ruleLogicalExpression_And returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalExpression_AndAccess().getNegationExpressionParserRuleCall_0()); 
    }
    this_NegationExpression_0=ruleNegationExpression
    { 
        $current = $this_NegationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpression_AndAccess().getLogicalExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_AndAccess().getOperatorLogicalOperator_AndEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOperator_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_AndRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOperator_And");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_AndAccess().getSecondExprNegationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleNegationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_AndRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"NegationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegationExpression
entryRuleNegationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationExpressionRule()); }
	 iv_ruleNegationExpression=ruleNegationExpression 
	 { $current=$iv_ruleNegationExpression.current; } 
	 EOF 
;

// Rule NegationExpression
ruleNegationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegationExpressionAccess().getNegationExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='not' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNegationExpressionAccess().getNotKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationExpressionAccess().getNegatedExpressionAssignmentExpressionParserRuleCall_0_2_0()); 
	    }
		lv_negatedExpression_2_0=ruleAssignmentExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationExpressionRule());
	        }
       		set(
       			$current, 
       			"negatedExpression",
        		lv_negatedExpression_2_0, 
        		"AssignmentExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNegationExpressionAccess().getAssignmentExpressionParserRuleCall_1()); 
    }
    this_AssignmentExpression_3=ruleAssignmentExpression
    { 
        $current = $this_AssignmentExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); }
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current; } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getConditionExpressionParserRuleCall_0()); 
    }
    this_ConditionExpression_0=ruleConditionExpression
    { 
        $current = $this_ConditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getOperatorAssignmentOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentExpressionAccess().getSecondExprConditionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleConditionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentExpressionRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"ConditionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionExpression
entryRuleConditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionExpressionRule()); }
	 iv_ruleConditionExpression=ruleConditionExpression 
	 { $current=$iv_ruleConditionExpression.current; } 
	 EOF 
;

// Rule ConditionExpression
ruleConditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionExpressionAccess().getLogicalExpression_OrAlternativeParserRuleCall_0()); 
    }
    this_LogicalExpression_OrAlternative_0=ruleLogicalExpression_OrAlternative
    { 
        $current = $this_LogicalExpression_OrAlternative_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getConditionExpressionAccess().getConditionExpressionIfExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionExpressionAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionExpressionAccess().getThenExpressionExpressionParserRuleCall_1_2_0()); 
	    }
		lv_thenExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionExpressionRule());
	        }
       		set(
       			$current, 
       			"thenExpression",
        		lv_thenExpression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionExpressionAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionExpressionAccess().getElseExpressionLogicalExpression_OrAlternativeParserRuleCall_1_4_0()); 
	    }
		lv_elseExpression_5_0=ruleLogicalExpression_OrAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionExpressionRule());
	        }
       		set(
       			$current, 
       			"elseExpression",
        		lv_elseExpression_5_0, 
        		"LogicalExpression_OrAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLogicalExpression_OrAlternative
entryRuleLogicalExpression_OrAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpression_OrAlternativeRule()); }
	 iv_ruleLogicalExpression_OrAlternative=ruleLogicalExpression_OrAlternative 
	 { $current=$iv_ruleLogicalExpression_OrAlternative.current; } 
	 EOF 
;

// Rule LogicalExpression_OrAlternative
ruleLogicalExpression_OrAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalExpression_OrAlternativeAccess().getLogicalExpression_AndAlternativeParserRuleCall_0()); 
    }
    this_LogicalExpression_AndAlternative_0=ruleLogicalExpression_AndAlternative
    { 
        $current = $this_LogicalExpression_AndAlternative_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpression_OrAlternativeAccess().getLogicalExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_OrAlternativeAccess().getOperatorLogicalOperator_OrAlternativeEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOperator_OrAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_OrAlternativeRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOperator_OrAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_OrAlternativeAccess().getSecondExprLogicalExpression_AndAlternativeParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleLogicalExpression_AndAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_OrAlternativeRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"LogicalExpression_AndAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalExpression_AndAlternative
entryRuleLogicalExpression_AndAlternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpression_AndAlternativeRule()); }
	 iv_ruleLogicalExpression_AndAlternative=ruleLogicalExpression_AndAlternative 
	 { $current=$iv_ruleLogicalExpression_AndAlternative.current; } 
	 EOF 
;

// Rule LogicalExpression_AndAlternative
ruleLogicalExpression_AndAlternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalExpression_AndAlternativeAccess().getBitwiseExpression_OrParserRuleCall_0()); 
    }
    this_BitwiseExpression_Or_0=ruleBitwiseExpression_Or
    { 
        $current = $this_BitwiseExpression_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpression_AndAlternativeAccess().getLogicalExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_AndAlternativeAccess().getOperatorLogicalOperator_AndAlternativeEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOperator_AndAlternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_AndAlternativeRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOperator_AndAlternative");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpression_AndAlternativeAccess().getSecondExprBitwiseExpression_OrParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleBitwiseExpression_Or		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpression_AndAlternativeRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"BitwiseExpression_Or");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseExpression_Or
entryRuleBitwiseExpression_Or returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseExpression_OrRule()); }
	 iv_ruleBitwiseExpression_Or=ruleBitwiseExpression_Or 
	 { $current=$iv_ruleBitwiseExpression_Or.current; } 
	 EOF 
;

// Rule BitwiseExpression_Or
ruleBitwiseExpression_Or returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseExpression_OrAccess().getBitwiseExpression_XorParserRuleCall_0()); 
    }
    this_BitwiseExpression_Xor_0=ruleBitwiseExpression_Xor
    { 
        $current = $this_BitwiseExpression_Xor_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseExpression_OrAccess().getBitwiseExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_OrAccess().getOperatorBitwiseOperator_OrEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleBitwiseOperator_Or		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_OrRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"BitwiseOperator_Or");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_OrAccess().getSecondExprBitwiseExpression_XorParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleBitwiseExpression_Xor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_OrRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"BitwiseExpression_Xor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseExpression_Xor
entryRuleBitwiseExpression_Xor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseExpression_XorRule()); }
	 iv_ruleBitwiseExpression_Xor=ruleBitwiseExpression_Xor 
	 { $current=$iv_ruleBitwiseExpression_Xor.current; } 
	 EOF 
;

// Rule BitwiseExpression_Xor
ruleBitwiseExpression_Xor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseExpression_XorAccess().getBitwiseExpression_AndParserRuleCall_0()); 
    }
    this_BitwiseExpression_And_0=ruleBitwiseExpression_And
    { 
        $current = $this_BitwiseExpression_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseExpression_XorAccess().getBitwiseExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_XorAccess().getOperatorBitwiseOperator_XorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleBitwiseOperator_Xor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_XorRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"BitwiseOperator_Xor");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_XorAccess().getSecondExprBitwiseExpression_AndParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleBitwiseExpression_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_XorRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"BitwiseExpression_And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitwiseExpression_And
entryRuleBitwiseExpression_And returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitwiseExpression_AndRule()); }
	 iv_ruleBitwiseExpression_And=ruleBitwiseExpression_And 
	 { $current=$iv_ruleBitwiseExpression_And.current; } 
	 EOF 
;

// Rule BitwiseExpression_And
ruleBitwiseExpression_And returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitwiseExpression_AndAccess().getCompareExpression_EqualUnequalParserRuleCall_0()); 
    }
    this_CompareExpression_EqualUnequal_0=ruleCompareExpression_EqualUnequal
    { 
        $current = $this_CompareExpression_EqualUnequal_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitwiseExpression_AndAccess().getBitwiseExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_AndAccess().getOperatorBitwiseOperator_AndEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleBitwiseOperator_And		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_AndRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"BitwiseOperator_And");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitwiseExpression_AndAccess().getSecondExprCompareExpression_EqualUnequalParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleCompareExpression_EqualUnequal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitwiseExpression_AndRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"CompareExpression_EqualUnequal");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareExpression_EqualUnequal
entryRuleCompareExpression_EqualUnequal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExpression_EqualUnequalRule()); }
	 iv_ruleCompareExpression_EqualUnequal=ruleCompareExpression_EqualUnequal 
	 { $current=$iv_ruleCompareExpression_EqualUnequal.current; } 
	 EOF 
;

// Rule CompareExpression_EqualUnequal
ruleCompareExpression_EqualUnequal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExpression_EqualUnequalAccess().getCompareExpression_OtherParserRuleCall_0()); 
    }
    this_CompareExpression_Other_0=ruleCompareExpression_Other
    { 
        $current = $this_CompareExpression_Other_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExpression_EqualUnequalAccess().getCompareExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpression_EqualUnequalAccess().getOperatorCompareOperator_EqualUnequalEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator_EqualUnequal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpression_EqualUnequalRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator_EqualUnequal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpression_EqualUnequalAccess().getSecondExprCompareExpression_OtherParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleCompareExpression_Other		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpression_EqualUnequalRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"CompareExpression_Other");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCompareExpression_Other
entryRuleCompareExpression_Other returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompareExpression_OtherRule()); }
	 iv_ruleCompareExpression_Other=ruleCompareExpression_Other 
	 { $current=$iv_ruleCompareExpression_Other.current; } 
	 EOF 
;

// Rule CompareExpression_Other
ruleCompareExpression_Other returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompareExpression_OtherAccess().getMinMaxExpressionParserRuleCall_0()); 
    }
    this_MinMaxExpression_0=ruleMinMaxExpression
    { 
        $current = $this_MinMaxExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompareExpression_OtherAccess().getCompareExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpression_OtherAccess().getOperatorCompareOperator_OtherEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleCompareOperator_Other		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpression_OtherRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"CompareOperator_Other");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompareExpression_OtherAccess().getSecondExprMinMaxExpressionParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleMinMaxExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompareExpression_OtherRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"MinMaxExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMinMaxExpression
entryRuleMinMaxExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinMaxExpressionRule()); }
	 iv_ruleMinMaxExpression=ruleMinMaxExpression 
	 { $current=$iv_ruleMinMaxExpression.current; } 
	 EOF 
;

// Rule MinMaxExpression
ruleMinMaxExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getBitShiftExpressionParserRuleCall_0()); 
    }
    this_BitShiftExpression_0=ruleBitShiftExpression
    { 
        $current = $this_BitShiftExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMinMaxExpressionAccess().getMinMaxExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getOperatorMinMaxOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMinMaxOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MinMaxOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMinMaxExpressionAccess().getSecondExprBitShiftExpressionParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleBitShiftExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinMaxExpressionRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"BitShiftExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBitShiftExpression
entryRuleBitShiftExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitShiftExpressionRule()); }
	 iv_ruleBitShiftExpression=ruleBitShiftExpression 
	 { $current=$iv_ruleBitShiftExpression.current; } 
	 EOF 
;

// Rule BitShiftExpression
ruleBitShiftExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBitShiftExpressionAccess().getArithmeticExpression_PlusMinusParserRuleCall_0()); 
    }
    this_ArithmeticExpression_PlusMinus_0=ruleArithmeticExpression_PlusMinus
    { 
        $current = $this_ArithmeticExpression_PlusMinus_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitShiftExpressionAccess().getBitShiftExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitShiftExpressionAccess().getOperatorBitShiftOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleBitShiftOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"BitShiftOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitShiftExpressionAccess().getSecondExprArithmeticExpression_PlusMinusParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleArithmeticExpression_PlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitShiftExpressionRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"ArithmeticExpression_PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArithmeticExpression_PlusMinus
entryRuleArithmeticExpression_PlusMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpression_PlusMinusRule()); }
	 iv_ruleArithmeticExpression_PlusMinus=ruleArithmeticExpression_PlusMinus 
	 { $current=$iv_ruleArithmeticExpression_PlusMinus.current; } 
	 EOF 
;

// Rule ArithmeticExpression_PlusMinus
ruleArithmeticExpression_PlusMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArithmeticExpression_PlusMinusAccess().getArithmeticExpression_OtherParserRuleCall_0()); 
    }
    this_ArithmeticExpression_Other_0=ruleArithmeticExpression_Other
    { 
        $current = $this_ArithmeticExpression_Other_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArithmeticExpression_PlusMinusAccess().getArithmeticExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpression_PlusMinusAccess().getOperatorArithmeticOperator_PlusMinusEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleArithmeticOperator_PlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpression_PlusMinusRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ArithmeticOperator_PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpression_PlusMinusAccess().getSecondExprArithmeticExpression_OtherParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleArithmeticExpression_Other		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpression_PlusMinusRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"ArithmeticExpression_Other");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArithmeticExpression_Other
entryRuleArithmeticExpression_Other returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpression_OtherRule()); }
	 iv_ruleArithmeticExpression_Other=ruleArithmeticExpression_Other 
	 { $current=$iv_ruleArithmeticExpression_Other.current; } 
	 EOF 
;

// Rule ArithmeticExpression_Other
ruleArithmeticExpression_Other returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArithmeticExpression_OtherAccess().getNegationExpression_AlternativeParserRuleCall_0()); 
    }
    this_NegationExpression_Alternative_0=ruleNegationExpression_Alternative
    { 
        $current = $this_NegationExpression_Alternative_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArithmeticExpression_OtherAccess().getArithmeticExpressionFirstExprAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpression_OtherAccess().getOperatorArithmeticOperator_OtherEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleArithmeticOperator_Other		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpression_OtherRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ArithmeticOperator_Other");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpression_OtherAccess().getSecondExprNegationExpression_AlternativeParserRuleCall_1_2_0()); 
	    }
		lv_secondExpr_3_0=ruleNegationExpression_Alternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpression_OtherRule());
	        }
       		set(
       			$current, 
       			"secondExpr",
        		lv_secondExpr_3_0, 
        		"NegationExpression_Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegationExpression_Alternative
entryRuleNegationExpression_Alternative returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationExpression_AlternativeRule()); }
	 iv_ruleNegationExpression_Alternative=ruleNegationExpression_Alternative 
	 { $current=$iv_ruleNegationExpression_Alternative.current; } 
	 EOF 
;

// Rule NegationExpression_Alternative
ruleNegationExpression_Alternative returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegationExpression_AlternativeAccess().getNegationExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNegationExpression_AlternativeAccess().getExclamationMarkKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationExpression_AlternativeAccess().getNegatedExpressionNegationExpression_AlternativeParserRuleCall_0_2_0()); 
	    }
		lv_negatedExpression_2_0=ruleNegationExpression_Alternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationExpression_AlternativeRule());
	        }
       		set(
       			$current, 
       			"negatedExpression",
        		lv_negatedExpression_2_0, 
        		"NegationExpression_Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNegationExpression_AlternativeAccess().getPlusExpressionParserRuleCall_1()); 
    }
    this_PlusExpression_3=rulePlusExpression
    { 
        $current = $this_PlusExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePlusExpression
entryRulePlusExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusExpressionRule()); }
	 iv_rulePlusExpression=rulePlusExpression 
	 { $current=$iv_rulePlusExpression.current; } 
	 EOF 
;

// Rule PlusExpression
rulePlusExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPlusExpressionAccess().getPlusExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlusExpressionAccess().getPlusSignKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusExpressionAccess().getConfirmedExpressionNegationExpression_AlternativeParserRuleCall_0_2_0()); 
	    }
		lv_confirmedExpression_2_0=ruleNegationExpression_Alternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusExpressionRule());
	        }
       		set(
       			$current, 
       			"confirmedExpression",
        		lv_confirmedExpression_2_0, 
        		"NegationExpression_Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPlusExpressionAccess().getMinusExpressionParserRuleCall_1()); 
    }
    this_MinusExpression_3=ruleMinusExpression
    { 
        $current = $this_MinusExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMinusExpression
entryRuleMinusExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMinusExpressionRule()); }
	 iv_ruleMinusExpression=ruleMinusExpression 
	 { $current=$iv_ruleMinusExpression.current; } 
	 EOF 
;

// Rule MinusExpression
ruleMinusExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMinusExpressionAccess().getMinusExpressionAction_0_0(),
            $current);
    }
)	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMinusExpressionAccess().getHyphenMinusKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMinusExpressionAccess().getInvertedExpressionNegationExpression_AlternativeParserRuleCall_0_2_0()); 
	    }
		lv_invertedExpression_2_0=ruleNegationExpression_Alternative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMinusExpressionRule());
	        }
       		set(
       			$current, 
       			"invertedExpression",
        		lv_invertedExpression_2_0, 
        		"NegationExpression_Alternative");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getMinusExpressionAccess().getIncrementDecrementExpressionParserRuleCall_1()); 
    }
    this_IncrementDecrementExpression_3=ruleIncrementDecrementExpression
    { 
        $current = $this_IncrementDecrementExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIncrementDecrementExpression
entryRuleIncrementDecrementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncrementDecrementExpressionRule()); }
	 iv_ruleIncrementDecrementExpression=ruleIncrementDecrementExpression 
	 { $current=$iv_ruleIncrementDecrementExpression.current; } 
	 EOF 
;

// Rule IncrementDecrementExpression
ruleIncrementDecrementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getIncrementDecrementExpressionAccess().getPreIncrementDecrementExpressionParserRuleCall()); 
    }
    this_PreIncrementDecrementExpression_0=rulePreIncrementDecrementExpression
    { 
        $current = $this_PreIncrementDecrementExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePreIncrementDecrementExpression
entryRulePreIncrementDecrementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreIncrementDecrementExpressionRule()); }
	 iv_rulePreIncrementDecrementExpression=rulePreIncrementDecrementExpression 
	 { $current=$iv_rulePreIncrementDecrementExpression.current; } 
	 EOF 
;

// Rule PreIncrementDecrementExpression
rulePreIncrementDecrementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPreIncrementDecrementExpressionAccess().getPostIncrementDecrementExpressionParserRuleCall_0()); 
    }
    this_PostIncrementDecrementExpression_0=rulePostIncrementDecrementExpression
    { 
        $current = $this_PostIncrementDecrementExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPreIncrementDecrementExpressionAccess().getPreIncrementDecrementExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPreIncrementDecrementExpressionAccess().getOperatorIncrementDecrementOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreIncrementDecrementExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"IncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPreIncrementDecrementExpressionAccess().getExpressionPreIncrementDecrementExpressionParserRuleCall_1_2_0()); 
	    }
		lv_expression_3_0=rulePreIncrementDecrementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPreIncrementDecrementExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"PreIncrementDecrementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRulePostIncrementDecrementExpression
entryRulePostIncrementDecrementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPostIncrementDecrementExpressionRule()); }
	 iv_rulePostIncrementDecrementExpression=rulePostIncrementDecrementExpression 
	 { $current=$iv_rulePostIncrementDecrementExpression.current; } 
	 EOF 
;

// Rule PostIncrementDecrementExpression
rulePostIncrementDecrementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPostIncrementDecrementExpressionAccess().getScopedIdentifierExpressionParserRuleCall_0()); 
    }
    this_ScopedIdentifierExpression_0=ruleScopedIdentifierExpression
    { 
        $current = $this_ScopedIdentifierExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
ruleIncrementDecrementOperator
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPostIncrementDecrementExpressionAccess().getPostIncrementDecrementExpressionExpressionAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPostIncrementDecrementExpressionAccess().getOperatorIncrementDecrementOperatorEnumRuleCall_1_0_1_0()); 
	    }
		lv_operator_2_0=ruleIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPostIncrementDecrementExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"IncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleScopedIdentifierExpression
entryRuleScopedIdentifierExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopedIdentifierExpressionRule()); }
	 iv_ruleScopedIdentifierExpression=ruleScopedIdentifierExpression 
	 { $current=$iv_ruleScopedIdentifierExpression.current; } 
	 EOF 
;

// Rule ScopedIdentifierExpression
ruleScopedIdentifierExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getScopedIdentifierExpressionAccess().getTerminatingExpressionsParserRuleCall_0()); 
    }
    this_TerminatingExpressions_0=ruleTerminatingExpressions
    { 
        $current = $this_TerminatingExpressions_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getScopedIdentifierExpressionAccess().getScopedIdentifierExpressionScopeAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getScopedIdentifierExpressionAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScopedIdentifierExpressionAccess().getIdentifierIdentifierExpressionParserRuleCall_1_2_0()); 
	    }
		lv_identifier_3_0=ruleIdentifierExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopedIdentifierExpressionRule());
	        }
       		set(
       			$current, 
       			"identifier",
        		lv_identifier_3_0, 
        		"IdentifierExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerminatingExpressions
entryRuleTerminatingExpressions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminatingExpressionsRule()); }
	 iv_ruleTerminatingExpressions=ruleTerminatingExpressions 
	 { $current=$iv_ruleTerminatingExpressions.current; } 
	 EOF 
;

// Rule TerminatingExpressions
ruleTerminatingExpressions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTerminatingExpressionsAccess().getIdentifierExpressionParserRuleCall_0()); 
    }
    this_IdentifierExpression_0=ruleIdentifierExpression
    { 
        $current = $this_IdentifierExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminatingExpressionsAccess().getFunctionCallExpressionParserRuleCall_1()); 
    }
    this_FunctionCallExpression_1=ruleFunctionCallExpression
    { 
        $current = $this_FunctionCallExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminatingExpressionsAccess().getLiteralExpressionParserRuleCall_2()); 
    }
    this_LiteralExpression_2=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTerminatingExpressionsAccess().getLeftParenthesisKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminatingExpressionsAccess().getExpressionParserRuleCall_3_1()); 
    }
    this_Expression_4=ruleExpression
    { 
        $current = $this_Expression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTerminatingExpressionsAccess().getRightParenthesisKeyword_3_2());
    }
))
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTextLiteralExpressionTextParserRuleCall_0()); 
	    }
		lv_text_0_0=ruleLiteralExpressionText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"LiteralExpressionText");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLiteralExpressionText
entryRuleLiteralExpressionText returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionTextRule()); } 
	 iv_ruleLiteralExpressionText=ruleLiteralExpressionText 
	 { $current=$iv_ruleLiteralExpressionText.current.getText(); }  
	 EOF 
;

// Rule LiteralExpressionText
ruleLiteralExpressionText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralExpressionTextAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralExpressionTextAccess().getFalseKeyword_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getLiteralExpressionTextAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleFunctionCallExpression
entryRuleFunctionCallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionCallExpressionRule()); }
	 iv_ruleFunctionCallExpression=ruleFunctionCallExpression 
	 { $current=$iv_ruleFunctionCallExpression.current; } 
	 EOF 
;

// Rule FunctionCallExpression
ruleFunctionCallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionCallExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getFunctionFunctionCrossReference_0_0()); 
	    }
		ruleUPPAAL_IDENTIFIER		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionCallExpressionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgumentExpressionParserRuleCall_2_0_0()); 
	    }
		lv_argument_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
	        }
       		add(
       			$current, 
       			"argument",
        		lv_argument_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionCallExpressionAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionCallExpressionAccess().getArgumentExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_argument_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionCallExpressionRule());
	        }
       		add(
       			$current, 
       			"argument",
        		lv_argument_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionCallExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleIdentifierExpression
entryRuleIdentifierExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierExpressionRule()); }
	 iv_ruleIdentifierExpression=ruleIdentifierExpression 
	 { $current=$iv_ruleIdentifierExpression.current; } 
	 EOF 
;

// Rule IdentifierExpression
ruleIdentifierExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentifierExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getIdentifierExpressionAccess().getIdentifierNamedElementCrossReference_0_0()); 
	    }
		ruleUPPAAL_TYPE_OR_IDENTIFIER		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIdentifierExpressionAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierExpressionAccess().getIndexExpressionParserRuleCall_1_1_0()); 
	    }
		lv_index_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierExpressionRule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentifierExpressionAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleSimpleIdentifierExpression
entryRuleSimpleIdentifierExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleIdentifierExpressionRule()); }
	 iv_ruleSimpleIdentifierExpression=ruleSimpleIdentifierExpression 
	 { $current=$iv_ruleSimpleIdentifierExpression.current; } 
	 EOF 
;

// Rule SimpleIdentifierExpression
ruleSimpleIdentifierExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleIdentifierExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSimpleIdentifierExpressionAccess().getIdentifierNamedElementCrossReference_0()); 
	    }
		ruleUPPAAL_TYPE_OR_IDENTIFIER		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleUPPAAL_TYPE_OR_IDENTIFIER
entryRuleUPPAAL_TYPE_OR_IDENTIFIER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERRule()); } 
	 iv_ruleUPPAAL_TYPE_OR_IDENTIFIER=ruleUPPAAL_TYPE_OR_IDENTIFIER 
	 { $current=$iv_ruleUPPAAL_TYPE_OR_IDENTIFIER.current.getText(); }  
	 EOF 
;

// Rule UPPAAL_TYPE_OR_IDENTIFIER
ruleUPPAAL_TYPE_OR_IDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getUPPAAL_IDENTIFIERParserRuleCall_0()); 
    }
    this_UPPAAL_IDENTIFIER_0=ruleUPPAAL_IDENTIFIER    {
		$current.merge(this_UPPAAL_IDENTIFIER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getIntKeyword_1()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getBoolKeyword_2()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getVoidKeyword_3()); 
    }

    |
	kw='chan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getChanKeyword_4()); 
    }

    |
	kw='clock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_TYPE_OR_IDENTIFIERAccess().getClockKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleUPPAAL_IDENTIFIER
entryRuleUPPAAL_IDENTIFIER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUPPAAL_IDENTIFIERRule()); } 
	 iv_ruleUPPAAL_IDENTIFIER=ruleUPPAAL_IDENTIFIER 
	 { $current=$iv_ruleUPPAAL_IDENTIFIER.current.getText(); }  
	 EOF 
;

// Rule UPPAAL_IDENTIFIER
ruleUPPAAL_IDENTIFIER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getUPPAAL_IDENTIFIERAccess().getIDTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getUPPAAL_IDENTIFIERAccess().getXML_KEYWORDSParserRuleCall_1()); 
    }
    this_XML_KEYWORDS_1=ruleXML_KEYWORDS    {
		$current.merge(this_XML_KEYWORDS_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleUPPAAL_KEYWORDS
entryRuleUPPAAL_KEYWORDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUPPAAL_KEYWORDSRule()); } 
	 iv_ruleUPPAAL_KEYWORDS=ruleUPPAAL_KEYWORDS 
	 { $current=$iv_ruleUPPAAL_KEYWORDS.current.getText(); }  
	 EOF 
;

// Rule UPPAAL_KEYWORDS
ruleUPPAAL_KEYWORDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='chan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getChanKeyword_0()); 
    }

    |
	kw='clock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getClockKeyword_1()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getBoolKeyword_2()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getIntKeyword_3()); 
    }

    |
	kw='commit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getCommitKeyword_4()); 
    }

    |
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getConstKeyword_5()); 
    }

    |
	kw='urgent' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getUrgentKeyword_6()); 
    }

    |
	kw='broadcast' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getBroadcastKeyword_7()); 
    }

    |
	kw='init' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getInitKeyword_8()); 
    }

    |
	kw='process' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getProcessKeyword_9()); 
    }

    |
	kw='state' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getStateKeyword_10()); 
    }

    |
	kw='guard' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getGuardKeyword_11()); 
    }

    |
	kw='sync' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getSyncKeyword_12()); 
    }

    |
	kw='assign' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getAssignKeyword_13()); 
    }

    |
	kw='system' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getSystemKeyword_14()); 
    }

    |
	kw='trans' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getTransKeyword_15()); 
    }

    |
	kw='deadlock' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getDeadlockKeyword_16()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getAndKeyword_17()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getOrKeyword_18()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getNotKeyword_19()); 
    }

    |
	kw='imply' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getImplyKeyword_20()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getTrueKeyword_21()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getFalseKeyword_22()); 
    }

    |
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getForKeyword_23()); 
    }

    |
	kw='forall' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getForallKeyword_24()); 
    }

    |
	kw='exists' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getExistsKeyword_25()); 
    }

    |
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getWhileKeyword_26()); 
    }

    |
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getDoKeyword_27()); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getIfKeyword_28()); 
    }

    |
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getElseKeyword_29()); 
    }

    |
	kw='return' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getReturnKeyword_30()); 
    }

    |
	kw='typedef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getTypedefKeyword_31()); 
    }

    |
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getStructKeyword_32()); 
    }

    |
	kw='rate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getRateKeyword_33()); 
    }

    |
	kw='before_update' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getBefore_updateKeyword_34()); 
    }

    |
	kw='after_update' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getAfter_updateKeyword_35()); 
    }

    |
	kw='meta' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getMetaKeyword_36()); 
    }

    |
	kw='priority' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getPriorityKeyword_37()); 
    }

    |
	kw='progress' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getProgressKeyword_38()); 
    }

    |
	kw='scalar' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getScalarKeyword_39()); 
    }

    |
	kw='select' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getSelectKeyword_40()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getVoidKeyword_41()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getSwitchKeyword_42()); 
    }

    |
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getCaseKeyword_43()); 
    }

    |
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getContinueKeyword_44()); 
    }

    |
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getBreakKeyword_45()); 
    }

    |
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_KEYWORDSAccess().getDefaultKeyword_46()); 
    }
)
    ;





// Entry rule entryRuleUPPAAL_STRUCTURE_KEYWORDS
entryRuleUPPAAL_STRUCTURE_KEYWORDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSRule()); } 
	 iv_ruleUPPAAL_STRUCTURE_KEYWORDS=ruleUPPAAL_STRUCTURE_KEYWORDS 
	 { $current=$iv_ruleUPPAAL_STRUCTURE_KEYWORDS.current.getText(); }  
	 EOF 
;

// Rule UPPAAL_STRUCTURE_KEYWORDS
ruleUPPAAL_STRUCTURE_KEYWORDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLeftSquareBracketKeyword_0()); 
    }

    |
	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getRightSquareBracketKeyword_1()); 
    }

    |
	kw='&lt;' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLtKeyword_2()); 
    }

    |
	kw='&gt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getGtKeyword_3()); 
    }

    |
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getSemicolonKeyword_4()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getCommaKeyword_5()); 
    }

    |
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLeftCurlyBracketKeyword_6()); 
    }

    |
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getRightCurlyBracketKeyword_7()); 
    }

    |
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLeftParenthesisKeyword_8()); 
    }

    |
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getRightParenthesisKeyword_9()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getQuestionMarkKeyword_10()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getExclamationMarkKeyword_11()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAsteriskKeyword_12()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getPercentSignKeyword_13()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getSolidusKeyword_14()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getPlusSignKeyword_15()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getHyphenMinusKeyword_16()); 
    }

    |
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getPlusSignPlusSignKeyword_17()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getHyphenMinusHyphenMinusKeyword_18()); 
    }

    |
	kw='&lt;&lt;' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLtLtKeyword_19()); 
    }

    |
	kw='&gt;&gt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getGtGtKeyword_20()); 
    }

    |
	kw='&lt;?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLtKeyword_21()); 
    }

    |
	kw='&gt;?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getGtKeyword_22()); 
    }

    |
	kw='&lt;=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLtKeyword_23()); 
    }

    |
	kw='&gt;=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getGtKeyword_24()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getEqualsSignEqualsSignKeyword_25()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getExclamationMarkEqualsSignKeyword_26()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAmpersandKeyword_27()); 
    }

    |
	kw='&amp;' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAmpKeyword_28()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getCircumflexAccentKeyword_29()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getVerticalLineKeyword_30()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAmpersandAmpersandKeyword_31()); 
    }

    |
	kw='&amp;&amp;' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAmpAmpKeyword_32()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getVerticalLineVerticalLineKeyword_33()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getEqualsSignKeyword_34()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getPlusSignEqualsSignKeyword_35()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getHyphenMinusEqualsSignKeyword_36()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAsteriskEqualsSignKeyword_37()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getSolidusEqualsSignKeyword_38()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getPercentSignEqualsSignKeyword_39()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getVerticalLineEqualsSignKeyword_40()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getAmpersandEqualsSignKeyword_41()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getCircumflexAccentEqualsSignKeyword_42()); 
    }

    |
	kw='&lt;&lt;=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getLtLtKeyword_43()); 
    }

    |
	kw='&gt;&gt;=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getGtGtKeyword_44()); 
    }

    |
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUPPAAL_STRUCTURE_KEYWORDSAccess().getColonKeyword_45()); 
    }
)
    ;





// Entry rule entryRuleQUOTED_INT
entryRuleQUOTED_INT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQUOTED_INTRule()); } 
	 iv_ruleQUOTED_INT=ruleQUOTED_INT 
	 { $current=$iv_ruleQUOTED_INT.current.getText(); }  
	 EOF 
;

// Rule QUOTED_INT
ruleQUOTED_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getQUOTED_INTAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleANY_TOKEN_BUT_XML_CLOSE
entryRuleANY_TOKEN_BUT_XML_CLOSE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSERule()); } 
	 iv_ruleANY_TOKEN_BUT_XML_CLOSE=ruleANY_TOKEN_BUT_XML_CLOSE 
	 { $current=$iv_ruleANY_TOKEN_BUT_XML_CLOSE.current.getText(); }  
	 EOF 
;

// Rule ANY_TOKEN_BUT_XML_CLOSE
ruleANY_TOKEN_BUT_XML_CLOSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getXML_KEYWORDSParserRuleCall_0()); 
    }
    this_XML_KEYWORDS_0=ruleXML_KEYWORDS    {
		$current.merge(this_XML_KEYWORDS_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getXML_ATTRIBUTE_KEYWORDSParserRuleCall_1()); 
    }
    this_XML_ATTRIBUTE_KEYWORDS_1=ruleXML_ATTRIBUTE_KEYWORDS    {
		$current.merge(this_XML_ATTRIBUTE_KEYWORDS_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getXML_STRUCTURE_KEYWORDSParserRuleCall_2()); 
    }
    this_XML_STRUCTURE_KEYWORDS_2=ruleXML_STRUCTURE_KEYWORDS    {
		$current.merge(this_XML_STRUCTURE_KEYWORDS_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getUPPAAL_KEYWORDSParserRuleCall_3()); 
    }
    this_UPPAAL_KEYWORDS_3=ruleUPPAAL_KEYWORDS    {
		$current.merge(this_UPPAAL_KEYWORDS_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getUPPAAL_STRUCTURE_KEYWORDSParserRuleCall_4()); 
    }
    this_UPPAAL_STRUCTURE_KEYWORDS_4=ruleUPPAAL_STRUCTURE_KEYWORDS    {
		$current.merge(this_UPPAAL_STRUCTURE_KEYWORDS_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_5=RULE_STRING    {
		$current.merge(this_STRING_5);
    }

    { 
    newLeafNode(this_STRING_5, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getSTRINGTerminalRuleCall_5()); 
    }

    |    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getIDTerminalRuleCall_6()); 
    }

    |    this_WS_7=RULE_WS    {
		$current.merge(this_WS_7);
    }

    { 
    newLeafNode(this_WS_7, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getWSTerminalRuleCall_7()); 
    }

    |    this_ANY_OTHER_8=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_8);
    }

    { 
    newLeafNode(this_ANY_OTHER_8, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getANY_OTHERTerminalRuleCall_8()); 
    }

    |    this_INT_9=RULE_INT    {
		$current.merge(this_INT_9);
    }

    { 
    newLeafNode(this_INT_9, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getINTTerminalRuleCall_9()); 
    }

    |    this_SINGLE_LINE_COMMENT_10=RULE_SINGLE_LINE_COMMENT    {
		$current.merge(this_SINGLE_LINE_COMMENT_10);
    }

    { 
    newLeafNode(this_SINGLE_LINE_COMMENT_10, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getSINGLE_LINE_COMMENTTerminalRuleCall_10()); 
    }

    |    this_MULTI_LINE_COMMENT_11=RULE_MULTI_LINE_COMMENT    {
		$current.merge(this_MULTI_LINE_COMMENT_11);
    }

    { 
    newLeafNode(this_MULTI_LINE_COMMENT_11, grammarAccess.getANY_TOKEN_BUT_XML_CLOSEAccess().getMULTI_LINE_COMMENTTerminalRuleCall_11()); 
    }
)
    ;





// Entry rule entryRuleXML_STRUCTURE_KEYWORDS
entryRuleXML_STRUCTURE_KEYWORDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getXML_STRUCTURE_KEYWORDSRule()); } 
	 iv_ruleXML_STRUCTURE_KEYWORDS=ruleXML_STRUCTURE_KEYWORDS 
	 { $current=$iv_ruleXML_STRUCTURE_KEYWORDS.current.getText(); }  
	 EOF 
;

// Rule XML_STRUCTURE_KEYWORDS
ruleXML_STRUCTURE_KEYWORDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getLessThanSignKeyword_0()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getGreaterThanSignKeyword_1()); 
    }

    |
	kw='/>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getSolidusGreaterThanSignKeyword_2()); 
    }

    |
	kw='<?xml version="1.0" encoding="utf-8"?>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getXmlVersion10EncodingUtf8Keyword_3()); 
    }

    |
	kw='<?xml version=\'1.0\' encoding=\'utf-8\'?>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getXmlVersion10EncodingUtf8Keyword_4()); 
    }

    |
	kw='<!DOCTYPE nta PUBLIC \'-//Uppaal Team//DTD Flat System 1.1//EN\' \'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd\'>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_STRUCTURE_KEYWORDSAccess().getDOCTYPENtaPUBLICUppaalTeamDTDFlatSystem11ENHttpWwwItUuSeResearchGroupDartsUppaalFlat1_1DtdKeyword_5()); 
    }
)
    ;







// Entry rule entryRuleXML_KEYWORDS
entryRuleXML_KEYWORDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getXML_KEYWORDSRule()); } 
	 iv_ruleXML_KEYWORDS=ruleXML_KEYWORDS 
	 { $current=$iv_ruleXML_KEYWORDS.current.getText(); }  
	 EOF 
;

// Rule XML_KEYWORDS
ruleXML_KEYWORDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='imports' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getImportsKeyword_0()); 
    }

    |
	kw='nta' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getNtaKeyword_1()); 
    }

    |
	kw='template' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getTemplateKeyword_2()); 
    }

    |
	kw='name' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getNameKeyword_3()); 
    }

    |
	kw='ref' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getRefKeyword_4()); 
    }

    |
	kw='location' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getLocationKeyword_5()); 
    }

    |
	kw='id' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getIdKeyword_6()); 
    }

    |
	kw='color' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getColorKeyword_7()); 
    }

    |
	kw='transition' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getTransitionKeyword_8()); 
    }

    |
	kw='source' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getSourceKeyword_9()); 
    }

    |
	kw='target' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getTargetKeyword_10()); 
    }

    |
	kw='nail' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getNailKeyword_11()); 
    }

    |
	kw='label' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getLabelKeyword_12()); 
    }

    |
	kw='kind' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getKindKeyword_13()); 
    }

    |
	kw='declaration' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getDeclarationKeyword_14()); 
    }

    |
	kw='instantiation' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getInstantiationKeyword_15()); 
    }

    |
	kw='parameter' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getParameterKeyword_16()); 
    }

    |
	kw='committed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getCommittedKeyword_17()); 
    }

    |
	kw='x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getXKeyword_18()); 
    }

    |
	kw='y' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_KEYWORDSAccess().getYKeyword_19()); 
    }
)
    ;





// Entry rule entryRuleXML_ATTRIBUTE_KEYWORDS
entryRuleXML_ATTRIBUTE_KEYWORDS returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getXML_ATTRIBUTE_KEYWORDSRule()); } 
	 iv_ruleXML_ATTRIBUTE_KEYWORDS=ruleXML_ATTRIBUTE_KEYWORDS 
	 { $current=$iv_ruleXML_ATTRIBUTE_KEYWORDS.current.getText(); }  
	 EOF 
;

// Rule XML_ATTRIBUTE_KEYWORDS
ruleXML_ATTRIBUTE_KEYWORDS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='"synchronisation"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_ATTRIBUTE_KEYWORDSAccess().getSynchronisationKeyword_0()); 
    }

    |
	kw='"guard"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_ATTRIBUTE_KEYWORDSAccess().getGuardKeyword_1()); 
    }

    |
	kw='"assignment"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_ATTRIBUTE_KEYWORDSAccess().getAssignmentKeyword_2()); 
    }

    |
	kw='"invariant"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_ATTRIBUTE_KEYWORDSAccess().getInvariantKeyword_3()); 
    }

    |
	kw='"comments"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getXML_ATTRIBUTE_KEYWORDSAccess().getCommentsKeyword_4()); 
    }
)
    ;





// Rule LocationKind
ruleLocationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<urgent/>' 
	{
        $current = grammarAccess.getLocationKindAccess().getURGENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLocationKindAccess().getURGENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<committed/>' 
	{
        $current = grammarAccess.getLocationKindAccess().getCOMMITEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLocationKindAccess().getCOMMITEDEnumLiteralDeclaration_1()); 
    }
));



// Rule SynchronizationKind
ruleSynchronizationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='!' 
	{
        $current = grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='?' 
	{
        $current = grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_1()); 
    }
));



// Rule DataVariablePrefix
ruleDataVariablePrefix returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='const' 
	{
        $current = grammarAccess.getDataVariablePrefixAccess().getCONSTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataVariablePrefixAccess().getCONSTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='meta' 
	{
        $current = grammarAccess.getDataVariablePrefixAccess().getMETAEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataVariablePrefixAccess().getMETAEnumLiteralDeclaration_1()); 
    }
));



// Rule CallType
ruleCallType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&amp;' 
	{
        $current = grammarAccess.getCallTypeAccess().getCALL_BY_REFERENCEEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCallTypeAccess().getCALL_BY_REFERENCEEnumLiteralDeclaration()); 
    }
);



// Rule Quantifier
ruleQuantifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='forall' 
	{
        $current = grammarAccess.getQuantifierAccess().getUNIVERSALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuantifierAccess().getUNIVERSALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='exists' 
	{
        $current = grammarAccess.getQuantifierAccess().getEXISTENTIALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuantifierAccess().getEXISTENTIALEnumLiteralDeclaration_1()); 
    }
));



// Rule LogicalOperator_OrImply
ruleLogicalOperator_OrImply returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='or' 
	{
        $current = grammarAccess.getLogicalOperator_OrImplyAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperator_OrImplyAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='imply' 
	{
        $current = grammarAccess.getLogicalOperator_OrImplyAccess().getIMPLYEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicalOperator_OrImplyAccess().getIMPLYEnumLiteralDeclaration_1()); 
    }
));



// Rule LogicalOperator_And
ruleLogicalOperator_And returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getLogicalOperator_AndAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperator_AndAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule AssignmentOperator
ruleAssignmentOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1=':=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOperatorAccess().getEQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='+=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='-=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='*=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getTIMES_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOperatorAccess().getTIMES_EQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='/=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getDIVIDE_EQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOperatorAccess().getDIVIDE_EQUALEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='%=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getMODULO_EQUALEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOperatorAccess().getMODULO_EQUALEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='|=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getBIT_OR_EQUALEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOperatorAccess().getBIT_OR_EQUALEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='&=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getBIT_AND_EQUALEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOperatorAccess().getBIT_AND_EQUALEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='^=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getBIT_XOR_EQUALEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOperatorAccess().getBIT_XOR_EQUALEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='&lt;&lt;=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getBIT_LEFT_EQUALEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOperatorAccess().getBIT_LEFT_EQUALEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='&gt;&gt;=' 
	{
        $current = grammarAccess.getAssignmentOperatorAccess().getBIT_RIGHT_EQUALEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getAssignmentOperatorAccess().getBIT_RIGHT_EQUALEnumLiteralDeclaration_11()); 
    }
));



// Rule LogicalOperator_OrAlternative
ruleLogicalOperator_OrAlternative returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOperator_OrAlternativeAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperator_OrAlternativeAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule LogicalOperator_AndAlternative
ruleLogicalOperator_AndAlternative returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&amp;&amp;' 
	{
        $current = grammarAccess.getLogicalOperator_AndAlternativeAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperator_AndAlternativeAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule BitwiseOperator_Or
ruleBitwiseOperator_Or returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='|' 
	{
        $current = grammarAccess.getBitwiseOperator_OrAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitwiseOperator_OrAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule BitwiseOperator_Xor
ruleBitwiseOperator_Xor returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='^' 
	{
        $current = grammarAccess.getBitwiseOperator_XorAccess().getXOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitwiseOperator_XorAccess().getXOREnumLiteralDeclaration()); 
    }
);



// Rule BitwiseOperator_And
ruleBitwiseOperator_And returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&amp;' 
	{
        $current = grammarAccess.getBitwiseOperator_AndAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitwiseOperator_AndAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule CompareOperator_EqualUnequal
ruleCompareOperator_EqualUnequal returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getCompareOperator_EqualUnequalAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperator_EqualUnequalAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getCompareOperator_EqualUnequalAccess().getUNEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperator_EqualUnequalAccess().getUNEQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule CompareOperator_Other
ruleCompareOperator_Other returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&gt;' 
	{
        $current = grammarAccess.getCompareOperator_OtherAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperator_OtherAccess().getGREATEREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&gt;=' 
	{
        $current = grammarAccess.getCompareOperator_OtherAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperator_OtherAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='&lt;' 
	{
        $current = grammarAccess.getCompareOperator_OtherAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperator_OtherAccess().getLESSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='&lt;=' 
	{
        $current = grammarAccess.getCompareOperator_OtherAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompareOperator_OtherAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3()); 
    }
));



// Rule MinMaxOperator
ruleMinMaxOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&lt;?' 
	{
        $current = grammarAccess.getMinMaxOperatorAccess().getMINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMinMaxOperatorAccess().getMINEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&gt;?' 
	{
        $current = grammarAccess.getMinMaxOperatorAccess().getMAXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMinMaxOperatorAccess().getMAXEnumLiteralDeclaration_1()); 
    }
));



// Rule BitShiftOperator
ruleBitShiftOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&lt;&lt;' 
	{
        $current = grammarAccess.getBitShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBitShiftOperatorAccess().getLEFTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&gt;&gt' 
	{
        $current = grammarAccess.getBitShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBitShiftOperatorAccess().getRIGHTEnumLiteralDeclaration_1()); 
    }
));



// Rule ArithmeticOperator_PlusMinus
ruleArithmeticOperator_PlusMinus returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getArithmeticOperator_PlusMinusAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArithmeticOperator_PlusMinusAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getArithmeticOperator_PlusMinusAccess().getSUBTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArithmeticOperator_PlusMinusAccess().getSUBTRACTEnumLiteralDeclaration_1()); 
    }
));



// Rule ArithmeticOperator_Other
ruleArithmeticOperator_Other returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getArithmeticOperator_OtherAccess().getMULTIPLICATEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArithmeticOperator_OtherAccess().getMULTIPLICATEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getArithmeticOperator_OtherAccess().getDIVIDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArithmeticOperator_OtherAccess().getDIVIDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getArithmeticOperator_OtherAccess().getMODULOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getArithmeticOperator_OtherAccess().getMODULOEnumLiteralDeclaration_2()); 
    }
));



// Rule IncrementDecrementOperator
ruleIncrementDecrementOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_SINGLE_LINE_COMMENT : '//' ~(('<'|'\r'|'\n'))*;

RULE_MULTI_LINE_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


