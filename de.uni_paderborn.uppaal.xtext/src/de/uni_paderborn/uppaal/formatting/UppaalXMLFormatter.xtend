/*
 * generated by Xtext
 */
package de.uni_paderborn.uppaal.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import de.uni_paderborn.uppaal.services.UppaalXMLGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class UppaalXMLFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension UppaalXMLGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		for(pair: findKeywordPairs('{', '}')) {
			c.setIndentation(pair.first, pair.second)
			c.setLinewrap(1).before(pair.first)
			c.setLinewrap(1).after(pair.first)
			c.setLinewrap(1).before(pair.second)
			c.setLinewrap(1).after(pair.second)
		}
		for(comma: findKeywords(',')) {
			c.setNoLinewrap().before(comma)
			c.setNoSpace().before(comma)
			c.setNoLinewrap().after(comma)
		}
		for(period: findKeywords('.')) {
			c.setNoLinewrap().before(period)
			c.setNoSpace().before(period)
			c.setNoSpace().after(period)
			c.setNoLinewrap().after(period)
		}
		for(semi: findKeywords(';')) {
			c.setNoLinewrap().before(semi)
			c.setNoSpace().before(semi)
			c.setLinewrap(1).after(semi)
		}
		for(equality: findKeywords('=')) {
			c.setNoLinewrap().before(equality)
			c.setNoLinewrap().after(equality)
			c.setNoSpace().before(equality)
			c.setNoSpace().after(equality)
		}
		for(pair: findKeywordPairs('<', '>')) {
			c.setNoLinewrap().before(pair.first)
			c.setLinewrap(1).after(pair.second)
			c.setNoSpace().before(pair.first)
			c.setNoSpace().before(pair.second)
			c.setNoSpace().after(pair.first)
			c.setNoSpace().after(pair.second)
		}	
		for(pair: findKeywordPairs('[', ']')) {
			c.setNoLinewrap().before(pair.first)
			c.setNoLinewrap().after(pair.first)
			c.setNoLinewrap().before(pair.second)
			c.setNoLinewrap().after(pair.second)
			c.setNoSpace().before(pair.first)
			c.setNoSpace().before(pair.second)
			c.setNoSpace().after(pair.first)
			c.setNoSpace().after(pair.second)
		}	
		for(pair: findKeywordPairs('</', '>')) {
			c.setNoLinewrap().before(pair.first)
			c.setLinewrap(1).after(pair.second)
			c.setNoSpace().before(pair.first)
			c.setNoSpace().before(pair.second)
			c.setNoSpace().after(pair.first)
			c.setNoSpace().after(pair.second)
		}
		for(pair: findKeywordPairs('<', '/>')) {
			c.setNoLinewrap().before(pair.first)
			c.setLinewrap(1).after(pair.second)
			c.setNoSpace().before(pair.first)
			c.setNoSpace().before(pair.second)
			c.setNoSpace().after(pair.first)
			c.setNoSpace().after(pair.second)
		}
		
		val UppaalXMLGrammarAccess f = getGrammarAccess() as UppaalXMLGrammarAccess
	}
}
