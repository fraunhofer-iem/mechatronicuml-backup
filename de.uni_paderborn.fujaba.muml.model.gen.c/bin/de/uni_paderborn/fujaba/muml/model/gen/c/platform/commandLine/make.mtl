[comment encoding = UTF-8 /]
[**
 * provides a template to generate a make file for standard command line execution
*/]
[module make('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/swplatform/0.4.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/')]

[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::modelQueries]

[**
 * creates a make file for standard command line
 * @param rsri the (home)-ECU
 * @param the current file-path to generate files 
*]

[template public generateMakeFileForC(rsri : RefinedStructuredResourceInstance, path : String)]

[file (path+'makefile', false, 'UTF-8')]
RTSC = [for (comp : Component | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType)->asSet())][if (comp.componentKind = ComponentKind::SOFTWARE_COMPONENT)][comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getClassName().toLowerFirst()/].o [/if][/for]
COMP = [for (comp : Component | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType)->asSet())][if ((comp.componentKind = ComponentKind::SOFTWARE_COMPONENT))][comp.getClassName().toLowerFirst()/].o [/if][/for] 
MW = MiddlewareCore.o MiddlewareInternalLogic.o NetworkInterfaceImplementation.o
LIB = syncChannel.o  Messages.o MessageBuffer.o NetworkMessageBuffer.o port.o NetworkInterface.o
COMMON = Configuration.o [if (rsri.allocatedAtomicComponentInstances.eAllContents(APICallParameterBinding)->size()>0)]implementations.o[/if]

CC = gcc
CFLAGS = -c -g -std=c99 -Wall -Wpedantic -Wstrict-prototypes
all: app

app : main.o $(RTSC) $(COMP) $(LIB) $(MW) $(COMMON) [if (rsri.eAllContents(Operation)->size() > 0)]operations.o[/if] [if (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.eAllContents(HybridPort)->size()>0)]hybridPortImpl.o[/if]
	$(CC) main.o $(RTSC) $(COMP) $(LIB) $(MW) $(COMMON) [if (rsri.eAllContents(Operation)->size() > 0)]operations.o[/if] [if (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.eAllContents(HybridPort)->size()>0)]hybridPortImpl.o[/if] -o app
[for (rtsc : RealtimeStatechart | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart))->asSet())]
[rtsc.getClassName().toLowerFirst()/].o: [rtsc.getFileName(false,false)/]
	$(CC) $(CFLAGS) [rtsc.getFileName(false,false)/]
[/for]

[for (comp : Component | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType)->asSet())]
[comp.getClassName().toLowerFirst()/].o: [comp.getFileName(false,false)/]
	$(CC) $(CFLAGS) [comp.getFileName(false,false)/]
[/for]

syncChannel.o: lib/syncChannel.c
	$(CC) $(CFLAGS) lib/syncChannel.c
MessageBuffer.o: lib/MessageBuffer.c
	$(CC) $(CFLAGS) lib/MessageBuffer.c
NetworkMessageBuffer.o: lib/NetworkMessageBuffer.c
	$(CC) $(CFLAGS) lib/NetworkMessageBuffer.c
port.o: lib/port.c
	$(CC) $(CFLAGS) lib/port.c
Messages.o: messages/Messages.c
	$(CC) $(CFLAGS) messages/Messages.c
MiddlewareCore.o: Middleware/MiddlewareCore.c
	$(CC) $(CFLAGS) Middleware/MiddlewareCore.c
MiddlewareInternalLogic.o: Middleware/MiddlewareInternalLogic.c
	$(CC) $(CFLAGS) Middleware/MiddlewareInternalLogic.c
NetworkInterfaceImplementation.o: Middleware/NetworkInterfaceImplementation.c
	$(CC) $(CFLAGS) Middleware/NetworkInterfaceImplementation.c
NetworkInterface.o: lib/NetworkInterface.c
	$(CC) $(CFLAGS) lib/NetworkInterface.c
[if (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.oclAsType(AtomicComponent).behavior.eAllContents(Operation)->size() > 0)]operations.o: operations/operations.c
	$(CC) $(CFLAGS) operations/operations.c
[/if]
[if (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.eAllContents(HybridPort)->size()>0)]hybridPortImpl.o: hybridPortImpl.c
	$(CC) $(CFLAGS) hybridPortImpl.c
[/if]
Configuration.o: Configuration.c
	$(CC) $(CFLAGS) Configuration.c
[if (rsri.allocatedAtomicComponentInstances.eAllContents(APICallParameterBinding)->size()>0)]
implementations.o: apiCallCode/implementations.c
	$(CC) $(CFLAGS) apiCallCode/implementations.c
[/if]

clean:
	rm -rf *o app
[/file]
[/template]