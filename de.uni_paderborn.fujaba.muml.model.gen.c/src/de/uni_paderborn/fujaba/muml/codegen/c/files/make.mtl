[comment encoding = UTF-8 /]
[module make('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]

[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]
[template public generateMakeFile(cic : ComponentInstanceConfiguration, path : String)]

[file (path+'makefile', false, 'UTF-8')]

RTSC = [for (comp : Component | cic.eAllContents(ComponentInstance).componentType)][if ((comp.oclIsKindOf(AtomicComponent)) and (comp.componentKind = ComponentKind::SOFTWARE_COMPONENT))][comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getClassName().toLowerFirst()/].o [/if][/for]
COMP = [for (comp : Component | cic.eAllContents(ComponentInstance).componentType)][if (not(componentKind=ComponentKind::CONTINUOUS_COMPONENT))][comp.getClassName().toLowerFirst()/].o [/if][/for] 
LIB = ContImplementations.o syncChannel.o discreteConnection.o discreteConnectionList.o event.o eventQueue.o discretePort.o messages.o

CC = gcc
CFLAGS = -c
all: app

app : main.o $(RTSC) $(COMP) $(LIB) $(HYB) [if (cic.eAllContents(Operation)->size() > 0)]operations.o[/if] 
	$(CC) main.o $(RTSC) $(COMP) $(LIB) $(HYB) [if (cic.eAllContents(Operation)->size() > 0)]operations.o[/if]  -o app
[for (comp : Component | cic.eAllContents(AtomicComponentInstance).componentType)? (componentKind=ComponentKind::SOFTWARE_COMPONENT)]
[let rtsc : RealtimeStatechart = comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart)]
[rtsc.getClassName().toLowerFirst()/].o: [rtsc.getFileName(false,false)/]
	$(CC) $(CFLAGS) [rtsc.getFileName(false,false)/]
[/let]
[/for]
[for (comp : Component | cic.eAllContents(ComponentInstance).componentType) ? (not(componentKind=ComponentKind::CONTINUOUS_COMPONENT))]
[comp.getClassName().toLowerFirst()/].o: [comp.getFileName(false,false)/]
	$(CC) $(CFLAGS) [comp.getFileName(false,false)/]
[/for]
ContImplementations.o: continuousComponents/ContImplementations.c
	$(CC) $(CFLAGS) continuousComponents/ContImplementations.c
syncChannel.o: lib/syncChannel.c
	$(CC) $(CFLAGS) lib/syncChannel.c
discreteConnection.o: lib/discreteConnection.c
	$(CC) $(CFLAGS) lib/discreteConnection.c
discreteConnectionList.o: lib/discreteConnectionList.c
	$(CC) $(CFLAGS) lib/discreteConnectionList.c
discretePort.o: lib/ports/discretePort.c
	$(CC) $(CFLAGS) lib/ports/discretePort.c
event.o: lib/event.c
	$(CC) $(CFLAGS) lib/event.c
eventQueue.o: lib/eventQueue.c
	$(CC) $(CFLAGS) lib/eventQueue.c
messages.o: msg/messages.c
	$(CC) $(CFLAGS) msg/messages.c
[if (cic.eAllContents(Operation)->size() > 0)]operations.o: operations/operations.c
	$(CC) $(CFLAGS) operations/operations.c
[/if]

clean:
	rm -rf *o app
[/file]
[/template]


[template public generateMakeFileForNXTOSEK(cic : ComponentInstanceConfiguration, path : String)]
[file (path+'makefile', false, 'UTF-8')]
# Targets
TARGET = nxtOSEKImpl
TARGET_SOURCES := \
		lib/syncChannel.c\
		lib/discreteConnection.c\
		lib/discreteConnectionList.c\
		lib/event.c\
		lib/eventQueue.c\
		lib/ports/discretePort.c\
		msg/messages.c\
		operations/operations.c\
		[for (comp : Component | cic.eAllContents(ComponentInstance).componentType)][if ((comp.oclIsKindOf(AtomicComponent)) and (comp.componentKind = ComponentKind::SOFTWARE_COMPONENT))]		RTSCs/[comp.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).getClassName().toLowerFirst()/].c\
[/if][/for]
		[for (comp : Component | cic.eAllContents(ComponentInstance).componentType) ? (not(componentKind=ComponentKind::CONTINUOUS_COMPONENT))]		components/[comp.getClassName().toLowerFirst()/].c\
[/for]
		main.c

		
TOPPERS_OSEK_OIL_SOURCE := ./nxtOSEK.oil
BUILD_MODE = ROM_ONLY

O_PATH ?= build

include ../../ecrobot/ecrobot.mak
[/file]
[/template]