[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module modelQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
'http://www.fujaba.de/muml/valuetype/0.4.0')]



[query public getAllStates(rtsc : RealtimeStatechart) : Set(State) =
	rtsc.states
/]



[query public getAllRegions(rtsc : RealtimeStatechart) : Set(Region) =
	rtsc.eAllContents(Region)->asSet()

/]
[query public getInitalState(rtsc : RealtimeStatechart) : State =
	rtsc.states->select(state : State | state.initial)->at(1)
/]

[**
 * @param state
*/]
[query public getInnerRegions(state : State) : OrderedSet(Region) = 
	state.embeddedRegions->sortedBy(priority)->reverse()
/]

[**
 * @param region
*/]
[query public isExitGenerationNecessary(region : Region) : Boolean =
	region.eAllContents(Region)->exists(isExitGenerationNecessary()) or 
	region.eContents(State)->exists(isStateExitGenerationNecessary(false))
/]

[**
 * @param state
*/]
[query public isStateExitGenerationNecessary(state : State, withInnerRegions : Boolean) : Boolean =
	not (state.final) and 
	(
		not (state.exitEvent.action.oclIsUndefined()) or
		state.exitEvent.clockResets->size() > 0 or
		(withInnerRegions and state.embeddedRegions->size() > 0) 
	)
/]



[query public getMainCIC(mec : ModelElementCategory) : ComponentInstanceConfiguration = 
	mec.modelElements->at(1).oclAsType(ComponentInstanceConfiguration)
/]



[query public getBehaviour(component : AtomicComponentInstance) : RealtimeStatechart =
	component.oclAsType(AtomicComponentInstance).componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart)
/]

[query public isDiscreteConnection(cInst : ConnectorInstance) : Boolean =
	cInst.connectorEndpointInstances->at(1).oclIsKindOf(DiscretePortInstance) and cInst.connectorEndpointInstances->at(2).oclIsKindOf(DiscretePortInstance)
/]

[query public isBidirectional(cInst : ConnectorInstance) : Boolean =
	cInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).portType.oclAsType(DiscretePort).isDiscreteInOutPort
/]

[query public getEmbeddingComponent(conInst : ConnectorInstance) : StructuredComponentInstance =
	conInst.connectorEndpointInstances->at(1).oclAsType(PortInstance).componentInstance.parentCIC.parentStructuredComponentInstance
/]

[query public getSourcePort(conInst : ConnectorInstance) : PortInstance =
	if ((conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).senderMessageTypes->size()>0) and (conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).receiverMessageTypes->size()>0)) then
		conInst.connectorEndpointInstances->at(1).oclAsType(PortInstance)
	else
		if (conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).senderMessageTypes->size()>0) then
		conInst.connectorEndpointInstances->at(1).oclAsType(PortInstance)
		else
		conInst.connectorEndpointInstances->at(2).oclAsType(PortInstance)
		endif
	endif
/]

[query public getTargetPort(conInst : ConnectorInstance) : PortInstance =
	if ((conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).senderMessageTypes->size()>0) and (conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).receiverMessageTypes->size()>0)) then
		conInst.connectorEndpointInstances->at(2).oclAsType(PortInstance)
	else
		if (conInst.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance).receiverMessageTypes->size()>0) then
		conInst.connectorEndpointInstances->at(1).oclAsType(PortInstance)
		else
		conInst.connectorEndpointInstances->at(2).oclAsType(PortInstance)
		endif
	endif
/]


[query public getPortForRegion(region : Region) : DiscretePort =
	if (region.embeddedStatechart.behavioralElement.oclIsUndefined()) then
		getPortForRegion(region.parentState.parentStatechart.parentRegion)
	else
		region.embeddedStatechart.behavioralElement.oclAsType(DiscretePort)
	endif
/]

[query public getRootStateChart(stateChart : RealtimeStatechart) : RealtimeStatechart =  
	stateChart.getHighestParentStatechart()
/]

[query public getRootStateChart(state : State) : RealtimeStatechart =  
	state.parentStatechart.getHighestParentStatechart()
/]

[query public getRootStateChart(region : Region) : RealtimeStatechart =  
	region.parentState.getRootStateChart()
/]

[query public getTimeUnitFactor(timeValue : TimeValue) : Real =
	invoke('de.uni_paderborn.fujaba.muml.model.gen.c.helper.TimeHelper', 'getFactor(de.uni_paderborn.fujaba.muml.valuetype.TimeValue)',Sequence{timeValue})
/]
