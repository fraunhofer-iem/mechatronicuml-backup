[comment encoding = UTF-8 /]
[**
 * The documentation of the module operations.
 */]
[module hybridPorts('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]

[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::modelQueries]
[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generatehybridPortFiles(cic : ComponentInstanceConfiguration, path : String)]

[for (component : Component | cic.getAllComponentInstances().componentType)]
[if ((component.eAllContents(HybridPort)->size()>0) and component.oclIsKindOf(AtomicComponent) and (component.componentKind = ComponentKind::SOFTWARE_COMPONENT))]
[file ('hybridPorts/hybridPortImplof'+component.getName()+'.h', false, 'UTF-8')]
#import "[getFileName(component, true)/]"
[for (port : Port | component.ports) ? (oclIsKindOf(HybridPort))]
	[let hybridPort  :HybridPort = port.oclAsType(HybridPort)]
	void write_[hybridPort.getName()/]([component.getClassName()/] *component, [hybridPort.dataType.getTypeName()/] value);
	[hybridPort.dataType.getTypeName()/] read_[hybridPort.getName()/]([component.getClassName()/] *component);
	[/let]
[/for]
[/file]
[/if]
[/for]

[for (component : Component | cic.getAllComponentInstances().componentType)]
[if ((component.eAllContents(HybridPort)->size()>0) and component.oclIsKindOf(AtomicComponent) and (component.componentKind = ComponentKind::SOFTWARE_COMPONENT))]

[file ('hybridPorts/hybridPortImplof'+component.getName()+'.c', false, 'UTF-8')]
#import "hybridPortImpl.h"
[for (port : Port | component.ports) ? (oclIsKindOf(HybridPort))]
	[let hybridPort  :HybridPort = port.oclAsType(HybridPort)]
	//write port
	void write_[hybridPort.getName()/]([component.getClassName()/] *component, [hybridPort.dataType.getTypeName()/] value){
	
	}
	[hybridPort.dataType.getTypeName()/] read_[hybridPort.getName()/]([component.getClassName()/] *component){
	return [hybridPort.dataType.getDefaultValue()/];
	}
	[/let]
[/for]
[/file]
[/if]
[/for]
[/template]



