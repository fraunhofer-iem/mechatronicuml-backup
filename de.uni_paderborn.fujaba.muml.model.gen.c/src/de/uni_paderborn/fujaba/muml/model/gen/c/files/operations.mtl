[comment encoding = UTF-8 /]
[**
 * The documentation of the module operations.
 */]
[module operations('http://www.fujaba.de/modelinstance/0.4.0', 'http://www.fujaba.de/muml/0.4.0')]

[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationFiles(root : RootNode)]
[for (modelElementCategory : ModelElementCategory | root.categories)]
[if (modelElementCategory.key.matches('de.uni_paderborn.fujaba.muml.instance.category'))]
[let atomics : Sequence(AtomicComponentInstance) = modelElements->at(1).oclAsType(ComponentInstanceConfiguration).eAllContents(AtomicComponentInstance)]
[let allOperations : Sequence(Operation) = atomics.componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).eAllContents(Operation)]

[generateOperationHeader(allOperations)/]
[generateOperationClass(allOperations)/]
[/let]
[/let]
[/if]
[/for]
[/template]


[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template private generateOperationHeader(allOperations : Sequence(Operation))]

[file ('operations/Operations.h', false, 'UTF-8')]
#ifndef OPERATIONS_H_
#define OPERATIONS_H_

#include "../lib/types.h"
[for (operation : Operation | allOperations)]

[operation.returnType.getTypeName()/] [operation.getName()/]([for (p: Parameter | operation.parameters) separator (', ')][p.dataType.getTypeName()/] [p.getName()/][/for]);
[/for]

#endif /*OPERATIONS_H_ */
[/file]
[/template]

[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template private generateOperationClass(allOperations : Sequence(Operation))]

[file ('operations/Operations.c', false, 'UTF-8')]
#include "operations.h"
[for (operation : Operation | allOperations)]


[operation.returnType.getTypeName()/] [operation.name/]([for (p: Parameter | operation.parameters) separator (', ')][p.dataType.getTypeName()/] [p.getName()/][/for]){
/** [protected (operation.getName()+' **/')] 
//add your implementation here

[if not (operation.returnType.name = 'VOID')]
//default return value
return [getDefaultReturn(operation)/];
[/if]
/**[/protected]**/
}


[/for]
[/file]
[/template]

