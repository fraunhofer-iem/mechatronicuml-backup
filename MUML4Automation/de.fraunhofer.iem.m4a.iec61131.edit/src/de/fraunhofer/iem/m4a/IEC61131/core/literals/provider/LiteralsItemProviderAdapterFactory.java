/**
 */
package de.fraunhofer.iem.m4a.IEC61131.core.literals.provider;

import de.fraunhofer.iem.m4a.IEC61131.core.literals.util.LiteralsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LiteralsItemProviderAdapterFactory extends LiteralsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LiteralsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.NumericLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericLiteralItemProvider numericLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.NumericLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericLiteralAdapter() {
		if (numericLiteralItemProvider == null) {
			numericLiteralItemProvider = new NumericLiteralItemProvider(this);
		}

		return numericLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.CharacterLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacterLiteralItemProvider characterLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.CharacterLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacterLiteralAdapter() {
		if (characterLiteralItemProvider == null) {
			characterLiteralItemProvider = new CharacterLiteralItemProvider(this);
		}

		return characterLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.BitStringLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitStringLiteralItemProvider bitStringLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.BitStringLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitStringLiteralAdapter() {
		if (bitStringLiteralItemProvider == null) {
			bitStringLiteralItemProvider = new BitStringLiteralItemProvider(this);
		}

		return bitStringLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Literal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiteralItemProvider literalItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Literal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiteralAdapter() {
		if (literalItemProvider == null) {
			literalItemProvider = new LiteralItemProvider(this);
		}

		return literalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Boolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanItemProvider booleanItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Boolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanAdapter() {
		if (booleanItemProvider == null) {
			booleanItemProvider = new BooleanItemProvider(this);
		}

		return booleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.RealLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealLiteralItemProvider realLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.RealLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealLiteralAdapter() {
		if (realLiteralItemProvider == null) {
			realLiteralItemProvider = new RealLiteralItemProvider(this);
		}

		return realLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.SignedInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignedIntegerItemProvider signedIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.SignedInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignedIntegerAdapter() {
		if (signedIntegerItemProvider == null) {
			signedIntegerItemProvider = new SignedIntegerItemProvider(this);
		}

		return signedIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.BinaryInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerItemProvider binaryIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.BinaryInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerAdapter() {
		if (binaryIntegerItemProvider == null) {
			binaryIntegerItemProvider = new BinaryIntegerItemProvider(this);
		}

		return binaryIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.OctalInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OctalIntegerItemProvider octalIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.OctalInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOctalIntegerAdapter() {
		if (octalIntegerItemProvider == null) {
			octalIntegerItemProvider = new OctalIntegerItemProvider(this);
		}

		return octalIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.HexInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HexIntegerItemProvider hexIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.HexInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHexIntegerAdapter() {
		if (hexIntegerItemProvider == null) {
			hexIntegerItemProvider = new HexIntegerItemProvider(this);
		}

		return hexIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.UnsignedInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnsignedIntegerItemProvider unsignedIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.UnsignedInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnsignedIntegerAdapter() {
		if (unsignedIntegerItemProvider == null) {
			unsignedIntegerItemProvider = new UnsignedIntegerItemProvider(this);
		}

		return unsignedIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.CharacterString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacterStringItemProvider characterStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.CharacterString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacterStringAdapter() {
		if (characterStringItemProvider == null) {
			characterStringItemProvider = new CharacterStringItemProvider(this);
		}

		return characterStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.SingleByteCharacterString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleByteCharacterStringItemProvider singleByteCharacterStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.SingleByteCharacterString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleByteCharacterStringAdapter() {
		if (singleByteCharacterStringItemProvider == null) {
			singleByteCharacterStringItemProvider = new SingleByteCharacterStringItemProvider(this);
		}

		return singleByteCharacterStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.DoubleByteCharacterString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleByteCharacterStringItemProvider doubleByteCharacterStringItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.DoubleByteCharacterString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleByteCharacterStringAdapter() {
		if (doubleByteCharacterStringItemProvider == null) {
			doubleByteCharacterStringItemProvider = new DoubleByteCharacterStringItemProvider(this);
		}

		return doubleByteCharacterStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.TimeLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeLiteralItemProvider timeLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.TimeLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeLiteralAdapter() {
		if (timeLiteralItemProvider == null) {
			timeLiteralItemProvider = new TimeLiteralItemProvider(this);
		}

		return timeLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Duration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DurationItemProvider durationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Duration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDurationAdapter() {
		if (durationItemProvider == null) {
			durationItemProvider = new DurationItemProvider(this);
		}

		return durationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.TimeOfDay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeOfDayItemProvider timeOfDayItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.TimeOfDay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeOfDayAdapter() {
		if (timeOfDayItemProvider == null) {
			timeOfDayItemProvider = new TimeOfDayItemProvider(this);
		}

		return timeOfDayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Date} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateItemProvider dateItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.Date}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAdapter() {
		if (dateItemProvider == null) {
			dateItemProvider = new DateItemProvider(this);
		}

		return dateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.DateAndTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateAndTimeItemProvider dateAndTimeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.literals.DateAndTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateAndTimeAdapter() {
		if (dateAndTimeItemProvider == null) {
			dateAndTimeItemProvider = new DateAndTimeItemProvider(this);
		}

		return dateAndTimeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (constantItemProvider != null) constantItemProvider.dispose();
		if (numericLiteralItemProvider != null) numericLiteralItemProvider.dispose();
		if (characterLiteralItemProvider != null) characterLiteralItemProvider.dispose();
		if (bitStringLiteralItemProvider != null) bitStringLiteralItemProvider.dispose();
		if (literalItemProvider != null) literalItemProvider.dispose();
		if (booleanItemProvider != null) booleanItemProvider.dispose();
		if (realLiteralItemProvider != null) realLiteralItemProvider.dispose();
		if (signedIntegerItemProvider != null) signedIntegerItemProvider.dispose();
		if (binaryIntegerItemProvider != null) binaryIntegerItemProvider.dispose();
		if (octalIntegerItemProvider != null) octalIntegerItemProvider.dispose();
		if (hexIntegerItemProvider != null) hexIntegerItemProvider.dispose();
		if (unsignedIntegerItemProvider != null) unsignedIntegerItemProvider.dispose();
		if (characterStringItemProvider != null) characterStringItemProvider.dispose();
		if (singleByteCharacterStringItemProvider != null) singleByteCharacterStringItemProvider.dispose();
		if (doubleByteCharacterStringItemProvider != null) doubleByteCharacterStringItemProvider.dispose();
		if (timeLiteralItemProvider != null) timeLiteralItemProvider.dispose();
		if (durationItemProvider != null) durationItemProvider.dispose();
		if (timeOfDayItemProvider != null) timeOfDayItemProvider.dispose();
		if (dateItemProvider != null) dateItemProvider.dispose();
		if (dateAndTimeItemProvider != null) dateAndTimeItemProvider.dispose();
	}

}
