/**
 */
package de.fraunhofer.iem.m4a.IEC61131.core.types.provider;

import de.fraunhofer.iem.m4a.IEC61131.core.types.util.TypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypesItemProviderAdapterFactory extends TypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.DateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateTypeItemProvider dateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.DateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateTypeAdapter() {
		if (dateTypeItemProvider == null) {
			dateTypeItemProvider = new DateTypeItemProvider(this);
		}

		return dateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.BitStringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BitStringTypeItemProvider bitStringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.BitStringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBitStringTypeAdapter() {
		if (bitStringTypeItemProvider == null) {
			bitStringTypeItemProvider = new BitStringTypeItemProvider(this);
		}

		return bitStringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.TimeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeTypeItemProvider timeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.TimeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeTypeAdapter() {
		if (timeTypeItemProvider == null) {
			timeTypeItemProvider = new TimeTypeItemProvider(this);
		}

		return timeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.RealType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTypeItemProvider realTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.RealType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTypeAdapter() {
		if (realTypeItemProvider == null) {
			realTypeItemProvider = new RealTypeItemProvider(this);
		}

		return realTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SignedIntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignedIntegerTypeItemProvider signedIntegerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SignedIntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignedIntegerTypeAdapter() {
		if (signedIntegerTypeItemProvider == null) {
			signedIntegerTypeItemProvider = new SignedIntegerTypeItemProvider(this);
		}

		return signedIntegerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.UnsignedIntegerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnsignedIntegerTypeItemProvider unsignedIntegerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.UnsignedIntegerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnsignedIntegerTypeAdapter() {
		if (unsignedIntegerTypeItemProvider == null) {
			unsignedIntegerTypeItemProvider = new UnsignedIntegerTypeItemProvider(this);
		}

		return unsignedIntegerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ElementaryStringType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementaryStringTypeItemProvider elementaryStringTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ElementaryStringType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementaryStringTypeAdapter() {
		if (elementaryStringTypeItemProvider == null) {
			elementaryStringTypeItemProvider = new ElementaryStringTypeItemProvider(this);
		}

		return elementaryStringTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeDeclarationItemProvider arrayTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeDeclarationAdapter() {
		if (arrayTypeDeclarationItemProvider == null) {
			arrayTypeDeclarationItemProvider = new ArrayTypeDeclarationItemProvider(this);
		}

		return arrayTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureTypeDeclarationItemProvider structureTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureTypeDeclarationAdapter() {
		if (structureTypeDeclarationItemProvider == null) {
			structureTypeDeclarationItemProvider = new StructureTypeDeclarationItemProvider(this);
		}

		return structureTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StringTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringTypeDeclarationItemProvider stringTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StringTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringTypeDeclarationAdapter() {
		if (stringTypeDeclarationItemProvider == null) {
			stringTypeDeclarationItemProvider = new StringTypeDeclarationItemProvider(this);
		}

		return stringTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTypeDeclarationItemProvider simpleTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTypeDeclarationAdapter() {
		if (simpleTypeDeclarationItemProvider == null) {
			simpleTypeDeclarationItemProvider = new SimpleTypeDeclarationItemProvider(this);
		}

		return simpleTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeTypeDeclarationItemProvider subrangeTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeTypeDeclarationAdapter() {
		if (subrangeTypeDeclarationItemProvider == null) {
			subrangeTypeDeclarationItemProvider = new SubrangeTypeDeclarationItemProvider(this);
		}

		return subrangeTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedTypeDeclarationItemProvider enumeratedTypeDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedTypeDeclarationAdapter() {
		if (enumeratedTypeDeclarationItemProvider == null) {
			enumeratedTypeDeclarationItemProvider = new EnumeratedTypeDeclarationItemProvider(this);
		}

		return enumeratedTypeDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleSpecInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleSpecInitItemProvider simpleSpecInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleSpecInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleSpecInitAdapter() {
		if (simpleSpecInitItemProvider == null) {
			simpleSpecInitItemProvider = new SimpleSpecInitItemProvider(this);
		}

		return simpleSpecInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeSpecInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeSpecInitItemProvider subrangeSpecInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeSpecInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeSpecInitAdapter() {
		if (subrangeSpecInitItemProvider == null) {
			subrangeSpecInitItemProvider = new SubrangeSpecInitItemProvider(this);
		}

		return subrangeSpecInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.Subrange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeItemProvider subrangeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.Subrange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeAdapter() {
		if (subrangeItemProvider == null) {
			subrangeItemProvider = new SubrangeItemProvider(this);
		}

		return subrangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeTypeSpecificationItemProvider subrangeTypeSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeTypeSpecificationAdapter() {
		if (subrangeTypeSpecificationItemProvider == null) {
			subrangeTypeSpecificationItemProvider = new SubrangeTypeSpecificationItemProvider(this);
		}

		return subrangeTypeSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedSpecInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedSpecInitItemProvider enumeratedSpecInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedSpecInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedSpecInitAdapter() {
		if (enumeratedSpecInitItemProvider == null) {
			enumeratedSpecInitItemProvider = new EnumeratedSpecInitItemProvider(this);
		}

		return enumeratedSpecInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedValueItemProvider enumeratedValueItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedValueAdapter() {
		if (enumeratedValueItemProvider == null) {
			enumeratedValueItemProvider = new EnumeratedValueItemProvider(this);
		}

		return enumeratedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedTypeSpecificationItemProvider enumeratedTypeSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedTypeSpecificationAdapter() {
		if (enumeratedTypeSpecificationItemProvider == null) {
			enumeratedTypeSpecificationItemProvider = new EnumeratedTypeSpecificationItemProvider(this);
		}

		return enumeratedTypeSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArraySpecInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArraySpecInitItemProvider arraySpecInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArraySpecInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArraySpecInitAdapter() {
		if (arraySpecInitItemProvider == null) {
			arraySpecInitItemProvider = new ArraySpecInitItemProvider(this);
		}

		return arraySpecInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayInitItemProvider arrayInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayInitAdapter() {
		if (arrayInitItemProvider == null) {
			arrayInitItemProvider = new ArrayInitItemProvider(this);
		}

		return arrayInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeSpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeSpecificationItemProvider arrayTypeSpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeSpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeSpecificationAdapter() {
		if (arrayTypeSpecificationItemProvider == null) {
			arrayTypeSpecificationItemProvider = new ArrayTypeSpecificationItemProvider(this);
		}

		return arrayTypeSpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureDeclarationItemProvider structureDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureDeclarationAdapter() {
		if (structureDeclarationItemProvider == null) {
			structureDeclarationItemProvider = new StructureDeclarationItemProvider(this);
		}

		return structureDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.InitializedStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitializedStructureItemProvider initializedStructureItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.InitializedStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitializedStructureAdapter() {
		if (initializedStructureItemProvider == null) {
			initializedStructureItemProvider = new InitializedStructureItemProvider(this);
		}

		return initializedStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureElementDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureElementDeclarationItemProvider structureElementDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureElementDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureElementDeclarationAdapter() {
		if (structureElementDeclarationItemProvider == null) {
			structureElementDeclarationItemProvider = new StructureElementDeclarationItemProvider(this);
		}

		return structureElementDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureInitItemProvider structureInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureInitAdapter() {
		if (structureInitItemProvider == null) {
			structureInitItemProvider = new StructureInitItemProvider(this);
		}

		return structureInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureElementInit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureElementInitItemProvider structureElementInitItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructureElementInit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureElementInitAdapter() {
		if (structureElementInitItemProvider == null) {
			structureElementInitItemProvider = new StructureElementInitItemProvider(this);
		}

		return structureElementInitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.GenericType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericTypeItemProvider genericTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.GenericType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericTypeAdapter() {
		if (genericTypeItemProvider == null) {
			genericTypeItemProvider = new GenericTypeItemProvider(this);
		}

		return genericTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeReferenceItemProvider arrayTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.ArrayTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeReferenceAdapter() {
		if (arrayTypeReferenceItemProvider == null) {
			arrayTypeReferenceItemProvider = new ArrayTypeReferenceItemProvider(this);
		}

		return arrayTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTypeReferenceItemProvider simpleTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SimpleTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTypeReferenceAdapter() {
		if (simpleTypeReferenceItemProvider == null) {
			simpleTypeReferenceItemProvider = new SimpleTypeReferenceItemProvider(this);
		}

		return simpleTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubrangeTypeReferenceItemProvider subrangeTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.SubrangeTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubrangeTypeReferenceAdapter() {
		if (subrangeTypeReferenceItemProvider == null) {
			subrangeTypeReferenceItemProvider = new SubrangeTypeReferenceItemProvider(this);
		}

		return subrangeTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedTypeReferenceItemProvider enumeratedTypeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedTypeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedTypeReferenceAdapter() {
		if (enumeratedTypeReferenceItemProvider == null) {
			enumeratedTypeReferenceItemProvider = new EnumeratedTypeReferenceItemProvider(this);
		}

		return enumeratedTypeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructurePointer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructurePointerItemProvider structurePointerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.StructurePointer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructurePointerAdapter() {
		if (structurePointerItemProvider == null) {
			structurePointerItemProvider = new StructurePointerItemProvider(this);
		}

		return structurePointerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedValuePointer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumeratedValuePointerItemProvider enumeratedValuePointerItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.EnumeratedValuePointer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumeratedValuePointerAdapter() {
		if (enumeratedValuePointerItemProvider == null) {
			enumeratedValuePointerItemProvider = new EnumeratedValuePointerItemProvider(this);
		}

		return enumeratedValuePointerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.fraunhofer.iem.m4a.IEC61131.core.types.HardwareResourceTypeName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareResourceTypeNameItemProvider hardwareResourceTypeNameItemProvider;

	/**
	 * This creates an adapter for a {@link de.fraunhofer.iem.m4a.IEC61131.core.types.HardwareResourceTypeName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardwareResourceTypeNameAdapter() {
		if (hardwareResourceTypeNameItemProvider == null) {
			hardwareResourceTypeNameItemProvider = new HardwareResourceTypeNameItemProvider(this);
		}

		return hardwareResourceTypeNameItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dateTypeItemProvider != null) dateTypeItemProvider.dispose();
		if (bitStringTypeItemProvider != null) bitStringTypeItemProvider.dispose();
		if (timeTypeItemProvider != null) timeTypeItemProvider.dispose();
		if (realTypeItemProvider != null) realTypeItemProvider.dispose();
		if (signedIntegerTypeItemProvider != null) signedIntegerTypeItemProvider.dispose();
		if (unsignedIntegerTypeItemProvider != null) unsignedIntegerTypeItemProvider.dispose();
		if (elementaryStringTypeItemProvider != null) elementaryStringTypeItemProvider.dispose();
		if (arrayTypeDeclarationItemProvider != null) arrayTypeDeclarationItemProvider.dispose();
		if (structureTypeDeclarationItemProvider != null) structureTypeDeclarationItemProvider.dispose();
		if (stringTypeDeclarationItemProvider != null) stringTypeDeclarationItemProvider.dispose();
		if (simpleTypeDeclarationItemProvider != null) simpleTypeDeclarationItemProvider.dispose();
		if (subrangeTypeDeclarationItemProvider != null) subrangeTypeDeclarationItemProvider.dispose();
		if (enumeratedTypeDeclarationItemProvider != null) enumeratedTypeDeclarationItemProvider.dispose();
		if (simpleSpecInitItemProvider != null) simpleSpecInitItemProvider.dispose();
		if (subrangeSpecInitItemProvider != null) subrangeSpecInitItemProvider.dispose();
		if (subrangeItemProvider != null) subrangeItemProvider.dispose();
		if (subrangeTypeSpecificationItemProvider != null) subrangeTypeSpecificationItemProvider.dispose();
		if (enumeratedSpecInitItemProvider != null) enumeratedSpecInitItemProvider.dispose();
		if (enumeratedValueItemProvider != null) enumeratedValueItemProvider.dispose();
		if (enumeratedTypeSpecificationItemProvider != null) enumeratedTypeSpecificationItemProvider.dispose();
		if (arraySpecInitItemProvider != null) arraySpecInitItemProvider.dispose();
		if (arrayInitItemProvider != null) arrayInitItemProvider.dispose();
		if (arrayTypeSpecificationItemProvider != null) arrayTypeSpecificationItemProvider.dispose();
		if (structureDeclarationItemProvider != null) structureDeclarationItemProvider.dispose();
		if (initializedStructureItemProvider != null) initializedStructureItemProvider.dispose();
		if (structureElementDeclarationItemProvider != null) structureElementDeclarationItemProvider.dispose();
		if (structureInitItemProvider != null) structureInitItemProvider.dispose();
		if (structureElementInitItemProvider != null) structureElementInitItemProvider.dispose();
		if (genericTypeItemProvider != null) genericTypeItemProvider.dispose();
		if (arrayTypeReferenceItemProvider != null) arrayTypeReferenceItemProvider.dispose();
		if (simpleTypeReferenceItemProvider != null) simpleTypeReferenceItemProvider.dispose();
		if (subrangeTypeReferenceItemProvider != null) subrangeTypeReferenceItemProvider.dispose();
		if (enumeratedTypeReferenceItemProvider != null) enumeratedTypeReferenceItemProvider.dispose();
		if (structurePointerItemProvider != null) structurePointerItemProvider.dispose();
		if (enumeratedValuePointerItemProvider != null) enumeratedValuePointerItemProvider.dispose();
		if (hardwareResourceTypeNameItemProvider != null) hardwareResourceTypeNameItemProvider.dispose();
	}

}
