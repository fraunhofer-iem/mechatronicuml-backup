	/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Component of Type: Main
 * @details This files contains a description of the Main in form of the MainComponent
 * 			and all methods which can be executed on an Instance of this Component
 */
		#ifndef MAINCOMPONENT_INTERFACE_H_
		#define MAINCOMPONENT_INTERFACE_H_

#ifdef __cplusplus
  extern "C" {
#endif
				// Library
				#include "../types/standardTypes.h"
				#include "../types/customTypes.h"
					#include "../continuousComponents/contImplementations.h"	
					
					
				
			
				#include "../lib/clock.h"
			#include "../lib/Debug.h"
			#include "../lib/MiddlewareTypes.h"
			#include "../Middleware/MiddlewareCore.h"
				
			
	
			/**
			 * @brief Forward Declaration of the struct MainRootRTSCStateChart which describes the behavior of MainComponent
			 * 
			 */
			 typedef struct MainRootRTSCStateChart MainRootRTSCStateChart;
			/**
			 * @brief Forward Declaration of the struct MainComponent
			 */
				typedef struct MainComponent MainComponent;
			
			/**
			*  
			* @brief Description for a ComponentInstance of Type: Main
			* @details This struct describes a specific Component Instances which is typed over the Component: Main
			*/
			struct MainComponent {
			
			
						MainRootRTSCStateChart* stateChart;	/**< The MainRootRTSCStateChart of the Component Main */
				
			
								void (*setterOf_LED_voltage)(int8_T);/**< A Pointer to the setter function of the hybrid port: LED_voltage */
			
						
					
					
			
					MainComponent * next;/**< A Pointer to the next component part, if this component ist part of a multipart in the CIC */
					
				};
		
			/**
			* @brief This Methodes intializes the Component: Main
			* @details All struct members of the struct MainComponent are initialized
			* 
			* @param component The MainComponent to be initialized
			*/	
				void MainComponent_initialize(MainComponent* component);
	
			/**
			* @brief Creates a Instance of the Component: Main
			* @details Allocates Memory for the struct MainComponent
			* @return A Pointer to the new created MainComponent
			*/
				MainComponent* MainComponent_create();
	
			/**
			 * @brief Destroys a Component: Main
			 * @details Frees the Memory for the struct MainComponent
			 * 
			* @param component The specific MainComponent to be destroyed
			 */
				void MainComponent_destroy(MainComponent* component);
		
			
			/**
			* @brief Executes the next Step of the behavior an Instance of the Component: Main
			* @details The behavior of the Component:  Main is executed.
			*			
			* @param component The MainComponent whose behavior shall be checked
			*/
				void MainComponent_processStep(MainComponent* component);
		
			
		
			

		
/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Realtime-StateChart: MainRootRTSC
 * @details This files contains the description of the Realtime-StateChart: MainRootRTSC and its behavior which is executed
 */
	//ENUM
	/** 
	 * @brief This enum represents the States of the Realtime-StateChart: MainRootRTSC
	 */
		typedef enum {
			MAINROOTRTSC_INACTIVE,
			STATE_MAININIT /**< Represents the State: STATE_MAININIT of the Realtime-StateChart: MainRootRTSC */
			,
					STATE_MAININITLED_OFF /**< Represents the State: STATE_MAININITLED_OFF of the Realtime-StateChart: MainInit */
			,		STATE_MAININITLED_ON /**< Represents the State: STATE_MAININITLED_ON of the Realtime-StateChart: MainInit */	
		}MainRootRTSCState;
	
	
		/**
		 * 
		 * @brief Description of the Realtime-StateChart: MainRootRTSC
		 * @details This struct represents the  Realtime-StateChart: MainRootRTSC and its States
		 */
	struct MainRootRTSCStateChart {	
			MainComponent * parentComponent;/**< A pointer to the parent ComponentInstance of Type: MainComponent , which has this Realtime-StateChart as its behavior */			
	
	
						MainRootRTSCState currentStateOfMainRootRTSC;/**< The current State of the Realtime-StateChart: MainRootRTSC */
	
				MainRootRTSCState currentStateOfMainInit;/**< Represents the state of region: MainInit */
	
			bool_t MainRootRTSC_isExecutable;/**< Execution Verifier of RTSC: MainRootRTSC. This variable is used to ensure that a RTSC is executed only once per execution cycle */
				bool_t MainInit_isExecutable;/**< Execution Verifier of RTSC: MainInit. This variable is used to ensure that a RTSC is executed only once per execution cycle */
		
				Clock mainInitChangingClockMainInitClock;/**< The Clock: MainInitChangingClockMainInit */
	
	
		
	
	
					int8_T LED_voltage;
	
	
			
	
		} ;

//METHOD STUBS
	/**
	 * @brief Creates an Instance of the Realtime-StateChart: MainRootRTSC
	 * @details Allocates Memory for the struct MainRootRTSCStateChart
	 * 
	 * @param parentComponent An Instance of the Component: MainComponent which behavior is described via this Realtime-StateChart
	 * @return A Pointer to the new created MainRootRTSCStateChart
	 */
		MainRootRTSCStateChart* MainRootRTSCStateChart_create(MainComponent* parentComponent);
	/**
	 * @brief Initializes an Instance of the Realtime-StateChart: MainRootRTSC
	 * @details All struct members of the struct MainRootRTSCStateChart are initialized,
	 *			and all Regions of the Realtime-StateChart are initialized, too.
	 * 
	 * @param rtsc The specific MainRootRTSCStateChart to be initialized
	 */
		void MainRootRTSCStateChart_initialize(MainRootRTSCStateChart* rtsc);
	/**
	 * @brief Initializes the Region: MainInit of the Realtime-StateChart: MainRootRTSC
	 * @details The Member MainRootRTSCStateChart::currentStateOfMainInit is initialized
	 * 
	 * @param stateChart The specific MainRootRTSCStateChart whose Region shall be initialized
	 */
	
		void initializeMainInitRegion(MainRootRTSCStateChart* stateChart);
	/**
	 * @brief Destroys the Realtime-StateChart: MainRootRTSC
	 * @details Frees the Memory for the struct MainRootRTSCStateChart
	 * 
	 * @param rtsc The specific MainRootRTSCStateChart to be destroyed
	 */	
		void MainRootRTSCStateChart_destroy(MainRootRTSCStateChart* rtsc);		
	/**
	 * @brief Executes the next Step of the Realtime-StateChart: MainRootRTSC
	 * 
	 * @param rtsc The specific MainRootRTSCStateChart to be executed
	 */	
		void MainRootRTSCStateChart_processStep(MainRootRTSCStateChart* rtsc);

	/**
	 * @brief Leaves the Region: Main of the Realtime-StateChart: MainRootRTSC
	 * @details This method is called, whenever a the Region: Main is left.
	 * 			The correct State is set and all Exit-Events are executed.
	 *
	 * @param rtsc The specific MainRootRTSCStateChart whose Region: Main shall be exit
	 */
		void MainInitStateChart_exit(MainRootRTSCStateChart* rtsc);
			
	/**
	 * @brief Returns wether the Realtime-StateChart: MainRootRTSC is in a specific State
	 * 
	 * @param rtsc The specific Realtime-StateChart: MainRootRTSCStateChart
	 * @param state One of the States of the Enum: MainRootRTSCState
	 * 
	 * @return True, If the Realtime-StateChart is in the specific State, otherwise False
	 */	
		bool_t MainRootRTSCStateChart_isInState(MainRootRTSCStateChart* rtsc, MainRootRTSCState state);




#ifdef __cplusplus
  }
#endif
		#endif /* MAINCOMPONENT_INTERFACE_H_ */


