brakeByWireAllocationSpecification {
	nameProvider 'org.muml.eloquent.adapter.muml.provider.MUMLNameProvider'
	storageProvider 'org.muml.eloquent.adapter.muml.provider.MUMLStorageProvider'
	import 'http://www.muml.org/eloquent/adapter/muml/oclcontext/1.0.0'
	
	oclContext oclcontext::OCLContext
	
	-- include our library with predefined OCL constraints
	include 'platform:/plugin/org.muml.eloquent.adapter.muml/operations/OCLContext.ocl'
	
	relation alloc {
		descriptors (first : pim::instance::ComponentInstance, second : hardware::hwresourceinstance::ResourceInstance);
		lower 1;
		upper 1;
		ocl self.getAllSWInstances()->product(
			self.getAllHWInstances()->select(oclIsTypeOf(hardware::hwresourceinstance::StructuredResourceInstance))
		)
		;
	}
	
	
	constraint collocation colocateBrakePedalComponents {
		descriptors (first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance);
		ocl	self.colocateSCIAndEmbeddedParts('wheel');
	}
	
	constraint collocation collocateSC11AndSC12 {
		descriptors (first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance);
		ocl self.allocateToSameECUs('sc11','sc12');
	}
	
	constraint requiredLocation calliperToBrakeECU {
		descriptors (first : pim::instance::ComponentInstance, second : hardware::hwresourceinstance::ResourceInstance);
		ocl	self.allocateEmbeddedToPlatformInstance('calliper', 'Brake.0');
	}
	
	constraint requiredLocation communicatingComponents {
		descriptors (c1 : pim::instance::ComponentInstance, e1 : hardware::hwresourceinstance::ResourceInstance), (c2 : pim::instance::ComponentInstance, e2 : hardware::hwresourceinstance::ResourceInstance);
		ocl self.allocateCommunicatingComponentsToConnectedECUs();
	}
	
	constraint requiredResource maxMemoryConsumption {
		weight requiredMemory;
		bound maxMemory;
		descriptors (componentInstance : pim::instance::ComponentInstance, resourceInstance : hardware::hwresourceinstance::ResourceInstance);
		ocl	self.maxMemoryConsumption();
	}
	
	constraint requiredLocation allowedECUs {
		descriptors (first : pim::instance::ComponentInstance, second : hardware::hwresourceinstance::ResourceInstance);
		ocl
			self.getAllSWInstances()->collect(ci |
				self.allowedECUNames(ci.name)->collect(ecu |
					self.allocateToECU(ci, ecu)
				)
			)->asSet()
		;
	}
	
	context oclcontext::OCLContext
		def: sensorActuatorMapping(componentName : String) : Set(String) =
			-- calliper component instances
			if componentName = 'sc1' then
				-- temperatureSensor
				Set{'R1.0.1'}
			else if componentName = 'sc2' then
				-- calliper position sensor
				Set{'R2.0.1'}
			else if componentName = 'sc3' then
				-- parking brake actuator
				Set{'R3.0.1'}
			else if componentName = 'sc5' then
				-- calliper clamp actuator
				Set{'R5.0.1'}
			-- brake pedal component instances
			else if componentName = 'sc11' then
				-- pedal position sensor
				Set{'R11.0.1'}
			else if componentName = 'sc12' then
				-- brake force sensor
				Set{'R12.0.1'}
			else if componentName = 'sc13' then
				-- brake feedback actuator
				Set{'R13.0.1'}
			-- wheel component instances
			else if componentName = 'sc7' then
				Set{'R7.0.1'} -- (brake platform)
			-- other sensors (not part of a structured ci)
			else if componentName = 'sc9' then
				Set{'R9.0.1'}
			else
				Set{}
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			
		def: allowedECUNames(componentName : String) : Set(String) =
			let ecuNames : Set(String) = self.sensorActuatorMapping(componentName)
			in
			if ecuNames->isEmpty() then
				self.getAllHWInstances()->collect(name)->asSet()
			else
				ecuNames
			endif

}