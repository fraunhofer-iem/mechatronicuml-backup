	/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Component of Type: Sender
 * @details This files contains a description of the Sender in form of the SenderComponent
 * 			and all methods which can be executed on an Instance of this Component
 */
		#ifndef SENDERCOMPONENT_INTERFACE_H_
		#define SENDERCOMPONENT_INTERFACE_H_

#ifdef __cplusplus
  extern "C" {
#endif
				// Library
				#include "../types/standardTypes.h"
				#include "../types/customTypes.h"
					#include "../lib/port.h"
					#include "../messages/Messages.h"
			
					
					
				
			
				#include "../lib/clock.h"
			#include "../lib/Debug.h"
			#include "../lib/MiddlewareTypes.h"
			#include "../Middleware/MiddlewareCore.h"
				
			
	
			/**
			 * @brief Forward Declaration of the struct SenderSenderStateChart which describes the behavior of SenderComponent
			 * 
			 */
			 typedef struct SenderSenderStateChart SenderSenderStateChart;
			/**
			 * @brief Forward Declaration of the struct SenderComponent
			 */
				typedef struct SenderComponent SenderComponent;
			
			/**
			*  
			* @brief Description for a ComponentInstance of Type: Sender
			* @details This struct describes a specific Component Instances which is typed over the Component: Sender
			*/
			struct SenderComponent {
			
			
						SenderSenderStateChart* stateChart;	/**< The SenderSenderStateChart of the Component Sender */
				
							Port* outPort; /**< A Pointer to the Component's Port: out */
			
						
					
					
			
					SenderComponent * next;/**< A Pointer to the next component part, if this component ist part of a multipart in the CIC */
					
				};
		
			/**
			* @brief This Methodes intializes the Component: Sender
			* @details All struct members of the struct SenderComponent are initialized
			* 
			* @param component The SenderComponent to be initialized
			*/	
				void SenderComponent_initialize(SenderComponent* component);
	
			/**
			* @brief Creates a Instance of the Component: Sender
			* @details Allocates Memory for the struct SenderComponent
			* @return A Pointer to the new created SenderComponent
			*/
				SenderComponent* SenderComponent_create();
	
			/**
			 * @brief Destroys a Component: Sender
			 * @details Frees the Memory for the struct SenderComponent
			 * 
			* @param component The specific SenderComponent to be destroyed
			 */
				void SenderComponent_destroy(SenderComponent* component);
		
			
			/**
			* @brief Executes the next Step of the behavior an Instance of the Component: Sender
			* @details The behavior of the Component:  Sender is executed.
			*			
			* @param component The SenderComponent whose behavior shall be checked
			*/
				void SenderComponent_processStep(SenderComponent* component);
		
			/**
					 * @brief Get the Port: out of an Instance of the Component: Sender
					 * @details The Pointer SenderComponent::outPort is returned
					 * 
					 * @param component The specific Instance SenderComponent  of the Component: Sender whose Port shall be returned
					 * @return A Pointer to the Port out of the struct SenderComponent
					 */
					Port* SenderComponent_getout(SenderComponent* component);
		
			

		
/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Realtime-StateChart: SenderSender
 * @details This files contains the description of the Realtime-StateChart: SenderSender and its behavior which is executed
 */
	//ENUM
	/** 
	 * @brief This enum represents the States of the Realtime-StateChart: SenderSender
	 */
		typedef enum {
			SENDERSENDER_INACTIVE,
			STATE_SENDERSENDER_MAIN /**< Represents the State: STATE_SENDERSENDER_MAIN of the Realtime-StateChart: SenderSender */
			,
					STATE_SENDEROUTINIT /**< Represents the State: STATE_SENDEROUTINIT of the Realtime-StateChart: SenderOutSenderRoleRTSC_out */
			,		STATE_SENDEROUTMESSAGESENT /**< Represents the State: STATE_SENDEROUTMESSAGESENT of the Realtime-StateChart: SenderOutSenderRoleRTSC_out */	
		}SenderSenderState;
	
	
		/**
		 * 
		 * @brief Description of the Realtime-StateChart: SenderSender
		 * @details This struct represents the  Realtime-StateChart: SenderSender and its States
		 */
	struct SenderSenderStateChart {	
			SenderComponent * parentComponent;/**< A pointer to the parent ComponentInstance of Type: SenderComponent , which has this Realtime-StateChart as its behavior */			
	
	
						SenderSenderState currentStateOfSenderSender;/**< The current State of the Realtime-StateChart: SenderSender */
	
				SenderSenderState currentStateOfSenderOutSenderRoleRTSC_out;/**< Represents the state of region: SenderOutSenderRoleRTSC_out */
	
			bool_t SenderSender_isExecutable;/**< Execution Verifier of RTSC: SenderSender. This variable is used to ensure that a RTSC is executed only once per execution cycle */
				bool_t SenderOutSenderRoleRTSC_out_isExecutable;/**< Execution Verifier of RTSC: SenderOutSenderRoleRTSC_out. This variable is used to ensure that a RTSC is executed only once per execution cycle */
		
				Clock senderOutClockSenderOutSenderRoleRTSC_outClock;/**< The Clock: SenderOutClockSenderOutSenderRoleRTSC_out */
	
	
		
	
	
	
	
			
	
		} ;

//METHOD STUBS
	/**
	 * @brief Creates an Instance of the Realtime-StateChart: SenderSender
	 * @details Allocates Memory for the struct SenderSenderStateChart
	 * 
	 * @param parentComponent An Instance of the Component: SenderComponent which behavior is described via this Realtime-StateChart
	 * @return A Pointer to the new created SenderSenderStateChart
	 */
		SenderSenderStateChart* SenderSenderStateChart_create(SenderComponent* parentComponent);
	/**
	 * @brief Initializes an Instance of the Realtime-StateChart: SenderSender
	 * @details All struct members of the struct SenderSenderStateChart are initialized,
	 *			and all Regions of the Realtime-StateChart are initialized, too.
	 * 
	 * @param rtsc The specific SenderSenderStateChart to be initialized
	 */
		void SenderSenderStateChart_initialize(SenderSenderStateChart* rtsc);
	/**
	 * @brief Initializes the Region: SenderOutSenderRoleRTSC_out of the Realtime-StateChart: SenderSender
	 * @details The Member SenderSenderStateChart::currentStateOfSenderOutSenderRoleRTSC_out is initialized
	 * 
	 * @param stateChart The specific SenderSenderStateChart whose Region shall be initialized
	 */
	
		void initializeSenderOutSenderRoleRTSC_outRegion(SenderSenderStateChart* stateChart);
	/**
	 * @brief Destroys the Realtime-StateChart: SenderSender
	 * @details Frees the Memory for the struct SenderSenderStateChart
	 * 
	 * @param rtsc The specific SenderSenderStateChart to be destroyed
	 */	
		void SenderSenderStateChart_destroy(SenderSenderStateChart* rtsc);		
	/**
	 * @brief Executes the next Step of the Realtime-StateChart: SenderSender
	 * 
	 * @param rtsc The specific SenderSenderStateChart to be executed
	 */	
		void SenderSenderStateChart_processStep(SenderSenderStateChart* rtsc);

	/**
	 * @brief Leaves the Region: senderRoleRTSC_out of the Realtime-StateChart: SenderSender
	 * @details This method is called, whenever a the Region: senderRoleRTSC_out is left.
	 * 			The correct State is set and all Exit-Events are executed.
	 *
	 * @param rtsc The specific SenderSenderStateChart whose Region: senderRoleRTSC_out shall be exit
	 */
		void SenderOutSenderRoleRTSC_outStateChart_exit(SenderSenderStateChart* rtsc);
			
	/**
	 * @brief Returns wether the Realtime-StateChart: SenderSender is in a specific State
	 * 
	 * @param rtsc The specific Realtime-StateChart: SenderSenderStateChart
	 * @param state One of the States of the Enum: SenderSenderState
	 * 
	 * @return True, If the Realtime-StateChart is in the specific State, otherwise False
	 */	
		bool_t SenderSenderStateChart_isInState(SenderSenderStateChart* rtsc, SenderSenderState state);
	

//RTSC internal operations









#ifdef __cplusplus
  }
#endif
		#endif /* SENDERCOMPONENT_INTERFACE_H_ */


