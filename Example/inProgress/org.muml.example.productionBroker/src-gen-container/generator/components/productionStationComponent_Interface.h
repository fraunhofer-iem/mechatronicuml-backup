	/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Component of Type: ProductionStation
 * @details This files contains a description of the ProductionStation in form of the ProductionStationComponent
 * 			and all methods which can be executed on an Instance of this Component
 */
		#ifndef PRODUCTIONSTATIONCOMPONENT_Interface_H_
		#define PRODUCTIONSTATIONCOMPONENT_Interface_H_

#ifdef __cplusplus
  extern "C" {
#endif		// Library
	#include "../types/standardTypes.h"
	#include "../types/customTypes.h"
	#include "../lib/port.h"
		#include "../messages/messages_types.h"
	#include "../lib/clock.h"
	#include "../lib/Debug.h"


		

	//include Operation Repositories
			#include "../operations/productionManagementOpRep.h"

			#include "../operations/iDManagementOpRep.h"





		//#include "../RTSCs/productionStationProductionStationRTSCStateChart.h"
			/*****
 			 *
 			 *  Forward Delcaration of Container Functions
 			 *
 			 */		
					void MCC_ProductionStationComponent_getOrder_send_MessagesDoneOrder_Messages_Message(Port* p, MessagesDoneOrder_Messages_Message* msg);
					void MCC_ProductionStationComponent_getOrder_send_MessagesGetOrder_Messages_Message(Port* p, MessagesGetOrder_Messages_Message* msg);
					void MCC_ProductionStationComponent_getOrder_send_MessagesHeartbeat_Messages_Message(Port* p, MessagesHeartbeat_Messages_Message* msg);
					bool_T MCC_ProductionStationComponent_getOrder_recv_MessagesOrderForPS_Messages_Message(Port* p, MessagesOrderForPS_Messages_Message* msg);
					bool_T MCC_ProductionStationComponent_getOrder_exists_MessagesOrderForPS_Messages_Message(Port* p);
					bool_T MCC_ProductionStationComponent_getOrder_recv_MessagesNoOrder_Messages_Message(Port* p, MessagesNoOrder_Messages_Message* msg);
					bool_T MCC_ProductionStationComponent_getOrder_exists_MessagesNoOrder_Messages_Message(Port* p);
			
			
			
	
			/*****
 			 *
 			 *  Component Functions
 			 *
 			 */
			/**
			 * @file 
			 * @author generated by Fraunhofer IEM 
			 * @brief Specification of Component of Type: ProductionStation
			 * @details This files contains a description of the ProductionStation in form of the ProductionStationComponent
			 * 			and all methods which can be executed on an Instance of this Component
			 */
				
						/**
						 * @brief Forward Declaration of the struct ProductionStationProductionStationRTSCStateChart which describes the behavior of ProductionStationComponent
						 * 
						 */
						 typedef struct ProductionStationProductionStationRTSCStateChart ProductionStationProductionStationRTSCStateChart;
						/**
						 * @brief Forward Declaration of the struct ProductionStationComponent
						 */
							typedef struct ProductionStationComponent ProductionStationComponent;
						
						/**
						*  
						* @brief Description for a ComponentInstance of Type: ProductionStation
						* @details This struct describes a specific Component Instances which is typed over the Component: ProductionStation
						*/
						struct ProductionStationComponent {
						
								uint8_T ID;	
						
						
									ProductionStationProductionStationRTSCStateChart* stateChart;	/**< The ProductionStationProductionStationRTSCStateChart of the Component ProductionStation */
							
										Port getOrderPort; /**< A  Component's Port: getOrder */
								
						
								
								
						
								ProductionStationComponent * next;/**< A Pointer to the next component part, if this component ist part of a multipart in the CIC */
								
							};
					
						/**
						* @brief This Methodes intializes the Component: ProductionStation
						* @details All struct members of the struct ProductionStationComponent are initialized
						* 
						* @param component The ProductionStationComponent to be initialized
						*/	
							void ProductionStationComponent_initialize(ProductionStationComponent* component);
				
						/**
						* @brief Creates a Instance of the Component: ProductionStation
						* @details Allocates Memory for the struct ProductionStationComponent
						* @return A Pointer to the new created ProductionStationComponent
						*/
							ProductionStationComponent ProductionStationComponent_create();
				
						/**
						 * @brief Destroys a Component: ProductionStation
						 * @details Frees the Memory for the struct ProductionStationComponent
						 * 
						* @param component The specific ProductionStationComponent to be destroyed
						 */
							void ProductionStationComponent_destroy(ProductionStationComponent* component);
						
						/**
						* @brief Executes the next Step of the behavior an Instance of the Component: ProductionStation
						* @details The behavior of the Component:  ProductionStation is executed.
						*			
						* @param component The ProductionStationComponent whose behavior shall be checked
						*/
							void ProductionStationComponent_processStep(ProductionStationComponent* component);
				
			
			
			
			
						/*Getter and Setter for Sending Values of Hybrid/Continuous ports*/
								ProductionStationProductionStationRTSCStateChart* ProductionStationComponent_getStateMachine(ProductionStationComponent* component);
						
						/**
								 * @brief Get the Port: getOrder of an Instance of the Component: ProductionStation
								 * @details The Pointer ProductionStationComponent::getOrderPort is returned
								 * 
								 * @param component The specific Instance ProductionStationComponent  of the Component: ProductionStation whose Port shall be returned
								 * @return A Pointer to the Port getOrder of the struct ProductionStationComponent
								 */
								Port* ProductionStationComponent_getgetOrder(ProductionStationComponent* component);
					
						
		

	
	
			/*****
 			 *
 			 *  RealtimeStatechart Functions
 			 *
 			 */
			/**
			 * @file 
			 * @author generated by Fraunhofer IEM
			 * @brief Specification of Realtime-StateChart: ProductionStationProductionStationRTSC
			 * @details This files contains the description of the Realtime-StateChart: ProductionStationProductionStationRTSC and its behavior which is executed
			 */
			
			//ENUM
				/** 
				 * @brief This enum represents the States of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 */
					typedef enum {
						PRODUCTIONSTATIONPRODUCTIONSTATIONRTSC_INACTIVE,
						STATE_PRODUCTIONSTATIONINIT /**< Represents the State: STATE_PRODUCTIONSTATIONINIT of the Realtime-StateChart: ProductionStationProductionStationRTSC */
						,
								STATE_PRODUCTIONSTATIONGETORDERINIT /**< Represents the State: STATE_PRODUCTIONSTATIONGETORDERINIT of the Realtime-StateChart: ProductionStationGetOrderParameterizedGetOrderRTSC */
						,		STATE_PRODUCTIONSTATIONGETORDERIDLE /**< Represents the State: STATE_PRODUCTIONSTATIONGETORDERIDLE of the Realtime-StateChart: ProductionStationGetOrderParameterizedGetOrderRTSC */
						,		STATE_PRODUCTIONSTATIONGETORDEREVALUATEORDER /**< Represents the State: STATE_PRODUCTIONSTATIONGETORDEREVALUATEORDER of the Realtime-StateChart: ProductionStationGetOrderParameterizedGetOrderRTSC */
						,		STATE_PRODUCTIONSTATIONGETORDERPROCESSORDER /**< Represents the State: STATE_PRODUCTIONSTATIONGETORDERPROCESSORDER of the Realtime-StateChart: ProductionStationGetOrderParameterizedGetOrderRTSC */
						,		STATE_PRODUCTIONSTATIONGETORDERSEMANTICBREAK /**< Represents the State: STATE_PRODUCTIONSTATIONGETORDERSEMANTICBREAK of the Realtime-StateChart: ProductionStationGetOrderParameterizedGetOrderRTSC */	
					}ProductionStationProductionStationRTSCState;
				
				
					/**
					 * 
					 * @brief Description of the Realtime-StateChart: ProductionStationProductionStationRTSC
					 * @details This struct represents the  Realtime-StateChart: ProductionStationProductionStationRTSC and its States
					 */
				struct ProductionStationProductionStationRTSCStateChart {	
						ProductionStationComponent * parentComponent;/**< A pointer to the parent ComponentInstance of Type: ProductionStationComponent , which has this Realtime-StateChart as its behavior */			
				
				
									ProductionStationProductionStationRTSCState currentStateOfProductionStationProductionStationRTSC;/**< The current State of the Realtime-StateChart: ProductionStationProductionStationRTSC */
				
							ProductionStationProductionStationRTSCState currentStateOfProductionStationGetOrderParameterizedGetOrderRTSC;/**< Represents the state of region: ProductionStationGetOrderParameterizedGetOrderRTSC */
				
						bool_t ProductionStationProductionStationRTSC_isExecutable;/**< Execution Verifier of RTSC: ProductionStationProductionStationRTSC. This variable is used to ensure that a RTSC is executed only once per execution cycle */
							bool_t ProductionStationGetOrderParameterizedGetOrderRTSC_isExecutable;/**< Execution Verifier of RTSC: ProductionStationGetOrderParameterizedGetOrderRTSC. This variable is used to ensure that a RTSC is executed only once per execution cycle */
					
							Clock productionStationGetOrderProcessingTimeProductionStationGetOrderParameterizedGetOrderRTSCClock;/**< The Clock: ProductionStationGetOrderProcessingTimeProductionStationGetOrderParameterizedGetOrderRTSC */
							Clock productionStationGetOrderProductionHeartbeatProductionStationGetOrderParameterizedGetOrderRTSCClock;/**< The Clock: ProductionStationGetOrderProductionHeartbeatProductionStationGetOrderParameterizedGetOrderRTSC */
				
				
					
				
							int32_T ID; /**< The Realtime-StateChart Variable: ID of Type: int32; */
							int32_T amount; /**< The Realtime-StateChart Variable: amount of Type: int32; */
							int32_T processedOrderID; /**< The Realtime-StateChart Variable: processedOrderID of Type: int32; */
							int32_T incomingOrderPsID; /**< The Realtime-StateChart Variable: incomingOrderPsID of Type: int32; */
							int32_T ingredientID; /**< The Realtime-StateChart Variable: ingredientID of Type: int32; */
							bool_T evaluateOrderFailed; /**< The Realtime-StateChart Variable: evaluateOrderFailed of Type: boolean; */
							int32_T producibleIngredients; /**< The Realtime-StateChart Variable: producibleIngredients of Type: int32; */
				
				
				
						
				
					} ;
			
			//METHOD STUBS
				/**
				 * @brief Creates an Instance of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * @details Allocates Memory for the struct ProductionStationProductionStationRTSCStateChart
				 * 
				 * @param parentComponent An Instance of the Component: ProductionStationComponent which behavior is described via this Realtime-StateChart
				 * @return A Pointer to the new created ProductionStationProductionStationRTSCStateChart
				 */
					ProductionStationProductionStationRTSCStateChart* ProductionStationProductionStationRTSCStateChart_create(ProductionStationComponent* parentComponent);
				/**
				 * @brief Initializes an Instance of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * @details All struct members of the struct ProductionStationProductionStationRTSCStateChart are initialized,
				 *			and all Regions of the Realtime-StateChart are initialized, too.
				 * 
				 * @param rtsc The specific ProductionStationProductionStationRTSCStateChart to be initialized
				 */
					void ProductionStationProductionStationRTSCStateChart_initialize(ProductionStationProductionStationRTSCStateChart* rtsc);
				/**
				 * @brief Initializes the Region: ProductionStationGetOrderParameterizedGetOrderRTSC of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * @details The Member ProductionStationProductionStationRTSCStateChart::currentStateOfProductionStationGetOrderParameterizedGetOrderRTSC is initialized
				 * 
				 * @param stateChart The specific ProductionStationProductionStationRTSCStateChart whose Region shall be initialized
				 */
				
					void initializeProductionStationGetOrderParameterizedGetOrderRTSCRegion(ProductionStationProductionStationRTSCStateChart* stateChart);
				/**
				 * @brief Destroys the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * @details Frees the Memory for the struct ProductionStationProductionStationRTSCStateChart
				 * 
				 * @param rtsc The specific ProductionStationProductionStationRTSCStateChart to be destroyed
				 */	
					void ProductionStationProductionStationRTSCStateChart_destroy(ProductionStationProductionStationRTSCStateChart* rtsc);		
				/**
				 * @brief Executes the next Step of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * 
				 * @param rtsc The specific ProductionStationProductionStationRTSCStateChart to be executed
				 */	
					void ProductionStationProductionStationRTSCStateChart_processStep(ProductionStationProductionStationRTSCStateChart* rtsc);
			
				/**
				 * @brief Leaves the Region: parameterizedGetOrderRTSC of the Realtime-StateChart: ProductionStationProductionStationRTSC
				 * @details This method is called, whenever a the Region: parameterizedGetOrderRTSC is left.
				 * 			The correct State is set and all Exit-Events are executed.
				 *
				 * @param rtsc The specific ProductionStationProductionStationRTSCStateChart whose Region: parameterizedGetOrderRTSC shall be exit
				 */
					void ProductionStationGetOrderParameterizedGetOrderRTSCStateChart_exit(ProductionStationProductionStationRTSCStateChart* rtsc);
						
				/**
				 * @brief Returns wether the Realtime-StateChart: ProductionStationProductionStationRTSC is in a specific State
				 * 
				 * @param rtsc The specific Realtime-StateChart: ProductionStationProductionStationRTSCStateChart
				 * @param state One of the States of the Enum: ProductionStationProductionStationRTSCState
				 * 
				 * @return True, If the Realtime-StateChart is in the specific State, otherwise False
				 */	
					bool_t ProductionStationProductionStationRTSCStateChart_isInState(ProductionStationProductionStationRTSCStateChart* rtsc, ProductionStationProductionStationRTSCState state);





#ifdef __cplusplus
  }
#endif
		#endif /* PRODUCTIONSTATIONCOMPONENT_Interface_H_ */
