	/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Component of Type: LED
 * @details This files contains a description of the LED in form of the LEDComponent
 * 			and all methods which can be executed on an Instance of this Component
 */
		#ifndef LEDCOMPONENT_Interface_H_
		#define LEDCOMPONENT_Interface_H_

#ifdef __cplusplus
  extern "C" {
#endif		// Library
	#include "../types/standardTypes.h"
	#include "../types/customTypes.h"
	#include "../lib/clock.h"
	#include "../lib/Debug.h"
	#include "../lib/port.h"

			/*****
 			 *
 			 *  Forward Delcaration of Container Functions
 			 *
 			 */		
			
					bool_t MCC_LEDComponent_voltage_recv_value(Port* p, int8_T* value);
					bool_t MCC_LEDComponent_voltage_exists_value(Port* p);
			//		void voltageAccessCommand(int8_T* value);
								
	
			/*****
 			 *
 			 *  Component Functions
 			 *
 			 */
			/**
			 * @file 
			 * @author generated by Fraunhofer IEM 
			 * @brief Specification of Component of Type: LED
			 * @details This files contains a description of the LED in form of the LEDComponent
			 * 			and all methods which can be executed on an Instance of this Component
			 */
				
						/**
						 * @brief Forward Declaration of the struct LEDComponent
						 */
							typedef struct LEDComponent LEDComponent;
						
						/**
						*  
						* @brief Description for a ComponentInstance of Type: LED
						* @details This struct describes a specific Component Instances which is typed over the Component: LED
						*/
						struct LEDComponent {
						
								uint8_T ID;	
								Port voltage; /**< A  Component's Port: voltage */
								Clock voltageClock; // manuell
								void (*voltageAccessFunction) (int8_T*); //manuell
								int8_T LED_voltage; 
								LEDComponent * next;/**< A Pointer to the next component part, if this component ist part of a multipart in the CIC */
								
							};
					
						/**
						* @brief This Methodes intializes the Component: LED
						* @details All struct members of the struct LEDComponent are initialized
						* 
						* @param component The LEDComponent to be initialized
						*/	
							void LEDComponent_initialize(LEDComponent* component);
				
						/**
						* @brief Creates a Instance of the Component: LED
						* @details Allocates Memory for the struct LEDComponent
						* @return A Pointer to the new created LEDComponent
						*/
							LEDComponent LEDComponent_create();
				
						/**
						 * @brief Destroys a Component: LED
						 * @details Frees the Memory for the struct LEDComponent
						 * 
						* @param component The specific LEDComponent to be destroyed
						 */
							void LEDComponent_destroy(LEDComponent* component);
					
						
					
							//Manual written code
							void getterOf_LED_voltage(Port* port, int8_T* value);/**< A the setter function of the hybrid port: LED_voltage */

		

	





#ifdef __cplusplus
  }
#endif
		#endif /* LEDCOMPONENT_Interface_H_ */
