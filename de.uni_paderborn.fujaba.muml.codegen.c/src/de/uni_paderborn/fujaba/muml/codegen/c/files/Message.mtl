[comment encoding = UTF-8 /]
[**
 * The documentation of the module Events.
 */]
[module Message('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::actionlanguage::expression]


[**
 * The documentation of the template generateMessageFiles.
 */]
[template public generateMessageFiles(CIs : OrderedSet(ComponentInstance), path : String)]

[generateMessageClass(CIs, path)/]
[generateMessageHeader(CIs, path)/]

[/template]


[**
 * The documentation of the template generateMessageClass.
 */]
[template public generateMessageClass(CIs : OrderedSet(ComponentInstance), path : String)]

[file (path+'msg/messages.h', false, 'UTF-8')]

#ifndef MESSAGES_H_
#define MESSAGES_H_
		
#include "../lib/event.h"

[let dPorts : Sequence(DiscretePort) = CIs.eAllContents(DiscretePortInstance).portType]
[for (msg : MessageType | (dPorts.senderMessageTypes->addAll(dPorts.receiverMessageTypes))->asSet())]
			extern Event [getVariableName(msg)/];
[/for]
[/let]
#endif /* MESSAGES_H_ */
[/file]

[/template]


[**
 * The documentation of the template generateMessageHeader.
 */]
[template public generateMessageHeader(CIs : OrderedSet(ComponentInstance), path : String)]

[file (path+'msg/messages.c', false, 'UTF-8')]

#include "../lib/event.h"

[let dPorts : Sequence(DiscretePort) = CIs.eAllContents(DiscretePortInstance).portType]
[for (msg : MessageType | (dPorts.senderMessageTypes->addAll(dPorts.receiverMessageTypes))->asSet())]
			Event [getVariableName(msg)/] = {[i/], "[getVariableName(msg)/]"};
[/for]
[/let]


[/file]

[/template]
