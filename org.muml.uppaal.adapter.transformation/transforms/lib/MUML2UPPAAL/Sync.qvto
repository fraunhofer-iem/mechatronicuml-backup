import transforms.lib.MUML2UPPAAL.Types;
import transforms.lib.MUML2UPPAAL.Enums;
import transforms.lib.MUML2UPPAAL.Decls;
import transforms.lib.MUML2UPPAAL.Expressions;

library Sync;

modeltype uppaal uses 'http://www.muml.org/uppaal/1.0.0';
modeltype uppaal_templates uses uppaal::templates('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_expressions uses uppaal::expressions('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_types uses uppaal::types('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_declarations uses uppaal::declarations('http://www.muml.org/uppaal/1.0.0');
modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype component uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype storydriven_expressions uses core::expressions('http://www.muml.org/core/1.0.0');


	mapping SynchronizationChannel :: SyncChannel2VariableDeclaration() : ChannelVariableDeclaration {
	
		// TODO prefix channel names according to their parent state (prevent name clashes between 'globalized' channels)
						
		typeDefinition := object TypeReference {
		
			referredType := CHAN;
			
		};			
	
		variable += self.map SyncChannel2Variable();
		
		urgent := self.isUrgent();
				
	}
	
	query SynchronizationChannel :: isUrgent() : Boolean {
		return assert fatal (false) with log('Should never be reached.')
	}
	
	query SynchronizationChannel :: belongsToSubrole() : Boolean {
		return assert fatal (false) with log('Should never be reached.') 
	}
	
	query RealtimeStatechart :: belongsToRole() : Boolean {
		return assert fatal (false) with log('Should never be reached.');
	}
				
	mapping SynchronizationChannel :: SyncChannel2Variable() : Variable {
		
		name := self.name;
					
		// add an index to make the channel accessible for multiple template instances by means of their ID	

		var idRange : DeclaredType = self.map SyncChannel2IDRange();
		
		index += object TypeIndex {
			
			typeDefinition := object TypeReference {
			
				referredType := idRange
	
			}
			
		};

		if(not self.selectorType.oclIsUndefined())
		then {
			// TODO support selector types with reference to all possible types (e.g. integer)
			assert fatal (self.selectorType.oclIsKindOf(Port)) with log("Selector types must be ports");
			index += object TypeIndex {
				
				typeDefinition := object TypeReference {
					referredType := map DiscretePortInstanceType()
				}
				
			};	
		} endif;
		
	}

	mapping rtsc::Synchronization :: Synchronization2Synchronization(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : Synchronization {
		
		init {

			result := switch {
				
				case (self.kind = rtsc::SynchronizationKind::RECEIVE) self.getReceiveSynchronization(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
				case (self.kind = rtsc::SynchronizationKind::SEND) self.getSendSynchronization(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
				else assert fatal (false) with log("Illegal enum value");
			
			};
		
		}
						
	}
	
	helper rtsc::Synchronization :: getReceiveSynchronization(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : Synchronization {
		
		var ID : Variable;
		
		if (self.syncChannel.isPortOrRoleSyncChannel())
		then {
		
			assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID must be specified.');
			
			if(self.syncChannel.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Subport/role instance ID must be specified.');
				ID := subPortOrRoleInstanceID // in case of multiport behavior, this is the subrole singleport instance ID
			} else {
				ID := portOrRoleInstanceID	// in case of multiport behavior, this is the multiport instance ID
			} endif;
			
		}
		else {
			assert fatal (self.syncChannel.state.parentStatechart.isComponentStatechart()) with log('Component statechart expected.');
			assert fatal (componentInstanceID != null) with log('Component instance ID must be specified.');
			ID := componentInstanceID
		}
		endif;
		
		return self.syncChannel.resolveoneIn(rtsc::SynchronizationChannel::SyncChannel2Variable, Variable).getReceiveSynchronization(ID, componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID, self.selectorExpression);
		
	}
	
	helper rtsc::Synchronization :: getSendSynchronization(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : Synchronization {
	
		var ID : Variable;
		
		if (self.syncChannel.isPortOrRoleSyncChannel())
		then {
			assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID must be specified.');
			
			if(self.syncChannel.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Subport/role instance ID must be specified.');
				ID := subPortOrRoleInstanceID // in case of multiport behavior, this is the subrole singleport instance ID
			} else {
				ID := portOrRoleInstanceID	// in case of multiport behavior, this is the multiport instance ID
			} endif;
		}
		else {
			assert fatal (self.syncChannel.state.parentStatechart.isComponentStatechart()) with log('Component statechart expected.');
			assert fatal (componentInstanceID != null) with log('Component instance ID must be specified.');
			ID := componentInstanceID
		}
		endif;	
	
		return self.syncChannel.resolveoneIn(rtsc::SynchronizationChannel::SyncChannel2Variable, Variable).getSendSynchronization(ID, componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID, self.selectorExpression);
		
	}
	
		
	helper Variable :: getReceiveSynchronization(ID : Variable, componentInstanceID : Variable,  portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable, selectorExpression : storydriven_expressions::Expression) : Synchronization {
		
		var sync : Synchronization = self.getReceiveSynchronization();

		sync.channelExpression.index += object IdentifierExpression {
			identifier := ID
		};

		sync.channelExpression.index += selectorExpression.map createExpression(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
		
		return sync		
	}
		
	helper Variable :: getSendSynchronization(ID : Variable, componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable, selectorExpression : storydriven_expressions::Expression) : Synchronization {
		
		var sync : Synchronization = self.getSendSynchronization();
				
		sync.channelExpression.index += object IdentifierExpression {
			identifier := ID
		};
		
		sync.channelExpression.index += selectorExpression.map createExpression(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
			
		return sync		
	}
	
	helper Variable :: getReceiveSynchronization() : Synchronization {
		
		var sync : Synchronization = new Synchronization(self);
		
		sync.kind := SynchronizationKind::RECEIVE;
		
		return sync
		
	}
	
	helper Variable :: getSendSynchronization() : Synchronization {
		
		var sync : Synchronization = new Synchronization(self);
		
		sync.kind := SynchronizationKind::SEND;
		
		return sync
		
	}
	
	constructor Synchronization :: Synchronization(channel : Variable) {		
		
		channelExpression := object IdentifierExpression {
				
			identifier := channel;
							
		};
				
	}