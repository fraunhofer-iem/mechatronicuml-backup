/*
 * generated by Xtext
 */
grammar InternalLPSolve;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.muml.psm.allocation.ilp.lpsolve.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.muml.psm.allocation.ilp.lpsolve.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.muml.psm.allocation.ilp.lpsolve.xtext.services.LPSolveGrammarAccess;

}

@parser::members {
 
 	private LPSolveGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LPSolveGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleIntegerLinearProgram
entryRuleIntegerLinearProgram 
:
{ before(grammarAccess.getIntegerLinearProgramRule()); }
	 ruleIntegerLinearProgram
{ after(grammarAccess.getIntegerLinearProgramRule()); } 
	 EOF 
;

// Rule IntegerLinearProgram
ruleIntegerLinearProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getGroup()); }
(rule__IntegerLinearProgram__Group__0)
{ after(grammarAccess.getIntegerLinearProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleObjectiveFunctionExpression
entryRuleObjectiveFunctionExpression 
:
{ before(grammarAccess.getObjectiveFunctionExpressionRule()); }
	 ruleObjectiveFunctionExpression
{ after(grammarAccess.getObjectiveFunctionExpressionRule()); } 
	 EOF 
;

// Rule ObjectiveFunctionExpression
ruleObjectiveFunctionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getAlternatives()); }
(rule__ObjectiveFunctionExpression__Alternatives)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression 
:
{ before(grammarAccess.getConstraintExpressionRule()); }
	 ruleConstraintExpression
{ after(grammarAccess.getConstraintExpressionRule()); } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup()); }
(rule__ConstraintExpression__Group__0)
{ after(grammarAccess.getConstraintExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableID
entryRuleVariableID 
:
{ before(grammarAccess.getVariableIDRule()); }
	 ruleVariableID
{ after(grammarAccess.getVariableIDRule()); } 
	 EOF 
;

// Rule VariableID
ruleVariableID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableIDAccess().getGroup()); }
(rule__VariableID__Group__0)
{ after(grammarAccess.getVariableIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLinearExpression
entryRuleLinearExpression 
:
{ before(grammarAccess.getLinearExpressionRule()); }
	 ruleLinearExpression
{ after(grammarAccess.getLinearExpressionRule()); } 
	 EOF 
;

// Rule LinearExpression
ruleLinearExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinearExpressionAccess().getSimpleLinearExpressionParserRuleCall()); }
	ruleSimpleLinearExpression
{ after(grammarAccess.getLinearExpressionAccess().getSimpleLinearExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleLinearExpression
entryRuleSimpleLinearExpression 
:
{ before(grammarAccess.getSimpleLinearExpressionRule()); }
	 ruleSimpleLinearExpression
{ after(grammarAccess.getSimpleLinearExpressionRule()); } 
	 EOF 
;

// Rule SimpleLinearExpression
ruleSimpleLinearExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleLinearExpressionAccess().getAdditionExpressionParserRuleCall()); }
	ruleAdditionExpression
{ after(grammarAccess.getSimpleLinearExpressionAccess().getAdditionExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression 
:
{ before(grammarAccess.getAdditionExpressionRule()); }
	 ruleAdditionExpression
{ after(grammarAccess.getAdditionExpressionRule()); } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup()); }
(rule__AdditionExpression__Group__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression 
:
{ before(grammarAccess.getMultiplicationExpressionRule()); }
	 ruleMultiplicationExpression
{ after(grammarAccess.getMultiplicationExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
(rule__MultiplicationExpression__Group__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandAccess().getAlternatives()); }
(rule__Operand__Alternatives)
{ after(grammarAccess.getOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteralExpression
entryRuleNumberLiteralExpression 
:
{ before(grammarAccess.getNumberLiteralExpressionRule()); }
	 ruleNumberLiteralExpression
{ after(grammarAccess.getNumberLiteralExpressionRule()); } 
	 EOF 
;

// Rule NumberLiteralExpression
ruleNumberLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralExpressionAccess().getValueAssignment()); }
(rule__NumberLiteralExpression__ValueAssignment)
{ after(grammarAccess.getNumberLiteralExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumber
entryRuleNumber 
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberAccess().getGroup()); }
(rule__Number__Group__0)
{ after(grammarAccess.getNumberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDecimal
entryRuleDecimal 
:
{ before(grammarAccess.getDecimalRule()); }
	 ruleDecimal
{ after(grammarAccess.getDecimalRule()); } 
	 EOF 
;

// Rule Decimal
ruleDecimal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDecimalAccess().getGroup()); }
(rule__Decimal__Group__0)
{ after(grammarAccess.getDecimalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableExpression
entryRuleVariableExpression 
:
{ before(grammarAccess.getVariableExpressionRule()); }
	 ruleVariableExpression
{ after(grammarAccess.getVariableExpressionRule()); } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableExpressionAccess().getVariableAssignment()); }
(rule__VariableExpression__VariableAssignment)
{ after(grammarAccess.getVariableExpressionAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ObjectiveGoal
ruleObjectiveGoal
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveGoalAccess().getAlternatives()); }
(rule__ObjectiveGoal__Alternatives)
{ after(grammarAccess.getObjectiveGoalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule RelationalOperator
ruleRelationalOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
(rule__RelationalOperator__Alternatives)
{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ILPDataType
ruleILPDataType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getILPDataTypeAccess().getAlternatives()); }
(rule__ILPDataType__Alternatives)
{ after(grammarAccess.getILPDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditionOperator
ruleAdditionOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
(rule__AdditionOperator__Alternatives)
{ after(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicationOperator
ruleMultiplicationOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ObjectiveFunctionExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getGroup_0()); }
(rule__ObjectiveFunctionExpression__Group_0__0)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getGroup_1()); }
(rule__ObjectiveFunctionExpression__Group_1__0)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getMinKeyword_0_0_0()); }

	'min' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getMinKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getMaxKeyword_0_0_1()); }

	'max' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getMaxKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_0()); }
	RULE_ID
{ after(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_0()); }
)

    |(
{ before(grammarAccess.getVariableIDAccess().getGroup_1_1_1()); }
(rule__VariableID__Group_1_1_1__0)
{ after(grammarAccess.getVariableIDAccess().getGroup_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getNumberLiteralExpressionParserRuleCall_0()); }
	ruleNumberLiteralExpression
{ after(grammarAccess.getOperandAccess().getNumberLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getVariableExpressionParserRuleCall_1()); }
	ruleVariableExpression
{ after(grammarAccess.getOperandAccess().getVariableExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getDecimalParserRuleCall_1_0()); }
	ruleDecimal
{ after(grammarAccess.getNumberAccess().getDecimalParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveGoal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveGoalAccess().getMINEnumLiteralDeclaration_0()); }
(	'min' 
)
{ after(grammarAccess.getObjectiveGoalAccess().getMINEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getObjectiveGoalAccess().getMAXEnumLiteralDeclaration_1()); }
(	'max' 
)
{ after(grammarAccess.getObjectiveGoalAccess().getMAXEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalOperatorAccess().getLESS_THAN_OR_EQUAL_TOEnumLiteralDeclaration_0()); }
(	'<=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getLESS_THAN_OR_EQUAL_TOEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getGREATER_THAN_OR_EQUAL_TOEnumLiteralDeclaration_1()); }
(	'>=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getGREATER_THAN_OR_EQUAL_TOEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getRelationalOperatorAccess().getEQUAL_TOEnumLiteralDeclaration_2()); }
(	'=' 
)
{ after(grammarAccess.getRelationalOperatorAccess().getEQUAL_TOEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ILPDataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getILPDataTypeAccess().getBINARYEnumLiteralDeclaration_0()); }
(	'bin' 
)
{ after(grammarAccess.getILPDataTypeAccess().getBINARYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getILPDataTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
(	'int' 
)
{ after(grammarAccess.getILPDataTypeAccess().getINTEGEREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getILPDataTypeAccess().getREALEnumLiteralDeclaration_2()); }
(	'real' 
)
{ after(grammarAccess.getILPDataTypeAccess().getREALEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IntegerLinearProgram__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLinearProgram__Group__0__Impl
	rule__IntegerLinearProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLinearProgram__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getObjectiveFunctionAssignment_0()); }
(rule__IntegerLinearProgram__ObjectiveFunctionAssignment_0)
{ after(grammarAccess.getIntegerLinearProgramAccess().getObjectiveFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLinearProgram__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLinearProgram__Group__1__Impl
	rule__IntegerLinearProgram__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLinearProgram__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getConstraintsAssignment_1()); }
(rule__IntegerLinearProgram__ConstraintsAssignment_1)*
{ after(grammarAccess.getIntegerLinearProgramAccess().getConstraintsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerLinearProgram__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerLinearProgram__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLinearProgram__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getVariablesAssignment_2()); }
(rule__IntegerLinearProgram__VariablesAssignment_2)*
{ after(grammarAccess.getIntegerLinearProgramAccess().getVariablesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ObjectiveFunctionExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_0__0__Impl
	rule__ObjectiveFunctionExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getAlternatives_0_0()); }
(rule__ObjectiveFunctionExpression__Alternatives_0_0)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveFunctionExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_0__1__Impl
	rule__ObjectiveFunctionExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveFunctionExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_0_2()); }

	';' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ObjectiveFunctionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_1__0__Impl
	rule__ObjectiveFunctionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getGoalAssignment_1_0()); }
(rule__ObjectiveFunctionExpression__GoalAssignment_1_0)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getGoalAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveFunctionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_1__1__Impl
	rule__ObjectiveFunctionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_1_1()); }

	':' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveFunctionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_1__2__Impl
	rule__ObjectiveFunctionExpression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getObjectiveFunctionAssignment_1_2()); }
(rule__ObjectiveFunctionExpression__ObjectiveFunctionAssignment_1_2)
{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getObjectiveFunctionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectiveFunctionExpression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ObjectiveFunctionExpression__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_1_3()); }

	';' 

{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ConstraintExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__0__Impl
	rule__ConstraintExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getGroup_0()); }
(rule__ConstraintExpression__Group_0__0)?
{ after(grammarAccess.getConstraintExpressionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__1__Impl
	rule__ConstraintExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getLeftExpressionAssignment_1()); }
(rule__ConstraintExpression__LeftExpressionAssignment_1)
{ after(grammarAccess.getConstraintExpressionAccess().getLeftExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__2__Impl
	rule__ConstraintExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_2()); }
(rule__ConstraintExpression__OperatorAssignment_2)
{ after(grammarAccess.getConstraintExpressionAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__3__Impl
	rule__ConstraintExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightExpressionAssignment_3()); }
(rule__ConstraintExpression__RightExpressionAssignment_3)
{ after(grammarAccess.getConstraintExpressionAccess().getRightExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getConstraintExpressionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ConstraintExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_0__0__Impl
	rule__ConstraintExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getCommentAssignment_0_0()); }
(rule__ConstraintExpression__CommentAssignment_0_0)
{ after(grammarAccess.getConstraintExpressionAccess().getCommentAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstraintExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstraintExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getConstraintExpressionAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getDataTypeAssignment_0()); }
(rule__Variable__DataTypeAssignment_0)
{ after(grammarAccess.getVariableAccess().getDataTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
(rule__Variable__NameAssignment_1)
{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getVariableAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group__0__Impl
	rule__VariableID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getGroup_1()); }
(rule__VariableID__Group_1__0)*
{ after(grammarAccess.getVariableIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group_1__0__Impl
	rule__VariableID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getAlternatives_1_1()); }
(rule__VariableID__Alternatives_1_1)
{ after(grammarAccess.getVariableIDAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableID__Group_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group_1_1_1__0__Impl
	rule__VariableID__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getINTTerminalRuleCall_1_1_1_0()); }
	RULE_INT
{ after(grammarAccess.getVariableIDAccess().getINTTerminalRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableID__Group_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableID__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableID__Group_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_1_1()); }
(	RULE_ID)?
{ after(grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__0__Impl
	rule__AdditionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
	ruleMultiplicationExpression
{ after(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
(rule__AdditionExpression__Group_1__0)?
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__0__Impl
	rule__AdditionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__1__Impl
	rule__AdditionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditionExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__AdditionExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getAdditionExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__0__Impl
	rule__MultiplicationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_0()); }
	ruleOperand
{ after(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
(rule__MultiplicationExpression__Group_1__0)?
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__0__Impl
	rule__MultiplicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__1__Impl
	rule__MultiplicationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1()); }
(rule__MultiplicationExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__MultiplicationExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Number__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getNumberAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Number__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberAccess().getAlternatives_1()); }
(rule__Number__Alternatives_1)
{ after(grammarAccess.getNumberAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Decimal__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__0__Impl
	rule__Decimal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__1__Impl
	rule__Decimal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getDecimalAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Decimal__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Decimal__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decimal__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__IntegerLinearProgram__ObjectiveFunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getObjectiveFunctionObjectiveFunctionExpressionParserRuleCall_0_0()); }
	ruleObjectiveFunctionExpression{ after(grammarAccess.getIntegerLinearProgramAccess().getObjectiveFunctionObjectiveFunctionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLinearProgram__ConstraintsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getConstraintsConstraintExpressionParserRuleCall_1_0()); }
	ruleConstraintExpression{ after(grammarAccess.getIntegerLinearProgramAccess().getConstraintsConstraintExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLinearProgram__VariablesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLinearProgramAccess().getVariablesVariableParserRuleCall_2_0()); }
	ruleVariable{ after(grammarAccess.getIntegerLinearProgramAccess().getVariablesVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__GoalAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getGoalObjectiveGoalEnumRuleCall_1_0_0()); }
	ruleObjectiveGoal{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getGoalObjectiveGoalEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectiveFunctionExpression__ObjectiveFunctionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObjectiveFunctionExpressionAccess().getObjectiveFunctionLinearExpressionParserRuleCall_1_2_0()); }
	ruleLinearExpression{ after(grammarAccess.getObjectiveFunctionExpressionAccess().getObjectiveFunctionLinearExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__CommentAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getCommentVariableIDParserRuleCall_0_0_0()); }
	ruleVariableID{ after(grammarAccess.getConstraintExpressionAccess().getCommentVariableIDParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__LeftExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getLeftExpressionSimpleLinearExpressionParserRuleCall_1_0()); }
	ruleSimpleLinearExpression{ after(grammarAccess.getConstraintExpressionAccess().getLeftExpressionSimpleLinearExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_2_0()); }
	ruleRelationalOperator{ after(grammarAccess.getConstraintExpressionAccess().getOperatorRelationalOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstraintExpression__RightExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintExpressionAccess().getRightExpressionSimpleLinearExpressionParserRuleCall_3_0()); }
	ruleSimpleLinearExpression{ after(grammarAccess.getConstraintExpressionAccess().getRightExpressionSimpleLinearExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__DataTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getDataTypeILPDataTypeEnumRuleCall_0_0()); }
	ruleILPDataType{ after(grammarAccess.getVariableAccess().getDataTypeILPDataTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameVariableIDParserRuleCall_1_0()); }
	ruleVariableID{ after(grammarAccess.getVariableAccess().getNameVariableIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
	ruleAdditionOperator{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightExpressionLinearExpressionParserRuleCall_1_2_0()); }
	ruleLinearExpression{ after(grammarAccess.getAdditionExpressionAccess().getRightExpressionLinearExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); }
	ruleMultiplicationOperator{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_2_0()); }
	ruleOperand{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteralExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralExpressionAccess().getValueNumberParserRuleCall_0()); }
	ruleNumber{ after(grammarAccess.getNumberLiteralExpressionAccess().getValueNumberParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableExpression__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableExpressionAccess().getVariableVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableExpressionAccess().getVariableVariableVariableIDParserRuleCall_0_1()); }
	ruleVariableID{ after(grammarAccess.getVariableExpressionAccess().getVariableVariableVariableIDParserRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableExpressionAccess().getVariableVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


