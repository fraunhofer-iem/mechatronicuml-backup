/*
 * Copyright (c) 2009 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
modeltype GMFMAP uses mappings('http://www.eclipse.org/gmf/2006/mappings');
modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
modeltype GMFGRAPH uses gmfgraph('http://www.eclipse.org/gmf/2006/GraphicalDefinition');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation Viewmaps(in mapModel : GMFMAP, inout gmfgenModel : GMFGEN);

	
main() {
	var mapRoot := mapModel.rootObjects()![GMFMAP::Mapping];
	var editorGen := gmfgenModel.rootObjects()![GMFGEN::GenEditorGenerator];
	viewmaps(mapRoot, editorGen.diagram);
}


-- *************************************************************************************
-- Viewmaps
-- *************************************************************************************

helper viewmaps(in mapRoot : GMFMAP::Mapping, inout genDiagram : GMFGEN::GenDiagram) {
	genDiagram.topLevelNodes->forEach(n) {
		n.viewmap := n.invresolveone(NodeMapping).diagramNode.map viewmap();
	};
	genDiagram.childNodes->forEach(n) {
		n.viewmap := n.invresolveone(NodeMapping).diagramNode.map viewmap();
	};
	genDiagram.links->forEach(l) {
		l.viewmap := l.invresolveone(LinkMapping).diagramLink.map viewmap();
	};
}

mapping GMFGRAPH::Node::viewmap() : GMFGEN::Viewmap {
	init {
		result := object ModeledViewmap { figureModel := self.oclAsType(ECORE::EObject); };
	}
}

mapping GMFGRAPH::Connection::viewmap() : GMFGEN::Viewmap {
	init {
		result := object ModeledViewmap { figureModel := self.oclAsType(ECORE::EObject); };
	}
}
mapping GMFGRAPH::DiagramLabel::viewmap() : GMFGEN::Viewmap {
	init {
		result := object ModeledViewmap { figureModel := self.oclAsType(ECORE::EObject); };
	}
	-- for GenLinkLabel, need to specify alignment based on AlignmentFacet
	-- besides, need to create LabelOffsetAttributes and optionally populate it from LabelOffsetFacet
}
