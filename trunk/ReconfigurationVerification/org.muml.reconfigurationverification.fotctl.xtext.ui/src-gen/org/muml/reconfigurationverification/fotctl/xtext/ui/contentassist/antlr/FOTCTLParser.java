/*
 * generated by Xtext
 */
package org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.muml.reconfigurationverification.fotctl.xtext.services.FOTCTLGrammarAccess;

public class FOTCTLParser extends AbstractContentAssistParser {
	
	@Inject
	private FOTCTLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr.internal.InternalFOTCTLParser createParser() {
		org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr.internal.InternalFOTCTLParser result = new org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr.internal.InternalFOTCTLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFormulaDefinitionAccess().getAlternatives(), "rule__FormulaDefinition__Alternatives");
					put(grammarAccess.getUnaryFormulaAccess().getAlternatives(), "rule__UnaryFormula__Alternatives");
					put(grammarAccess.getBinaryFormulaAccess().getAlternatives(), "rule__BinaryFormula__Alternatives");
					put(grammarAccess.getAtomicFormulaAccess().getAlternatives(), "rule__AtomicFormula__Alternatives");
					put(grammarAccess.getTCTLFormulaAccess().getAlternatives(), "rule__TCTLFormula__Alternatives");
					put(grammarAccess.getTemporalFormulaAccess().getAlternatives(), "rule__TemporalFormula__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getQuantifierAccess().getAlternatives(), "rule__Quantifier__Alternatives");
					put(grammarAccess.getBinaryLogicOperatorAccess().getAlternatives(), "rule__BinaryLogicOperator__Alternatives");
					put(grammarAccess.getComparisonOperatorAccess().getAlternatives(), "rule__ComparisonOperator__Alternatives");
					put(grammarAccess.getTemporalOperatorAccess().getAlternatives(), "rule__TemporalOperator__Alternatives");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup(), "rule__FoTCTLSpec__Group__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_2(), "rule__FoTCTLSpec__Group_2__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_2_2(), "rule__FoTCTLSpec__Group_2_2__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_3(), "rule__FoTCTLSpec__Group_3__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_3_2(), "rule__FoTCTLSpec__Group_3_2__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_4(), "rule__FoTCTLSpec__Group_4__0");
					put(grammarAccess.getFoTCTLSpecAccess().getGroup_4_2(), "rule__FoTCTLSpec__Group_4_2__0");
					put(grammarAccess.getFoTCTLFormulaAccess().getGroup(), "rule__FoTCTLFormula__Group__0");
					put(grammarAccess.getNodeLabelPredicateDeclAccess().getGroup(), "rule__NodeLabelPredicateDecl__Group__0");
					put(grammarAccess.getEdgeLabelPredicateDeclAccess().getGroup(), "rule__EdgeLabelPredicateDecl__Group__0");
					put(grammarAccess.getConstantSymbolDeclAccess().getGroup(), "rule__ConstantSymbolDecl__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getNodeLabelPredicateAccess().getGroup(), "rule__NodeLabelPredicate__Group__0");
					put(grammarAccess.getEdgeLabelPredicateAccess().getGroup(), "rule__EdgeLabelPredicate__Group__0");
					put(grammarAccess.getQuantifiedFormulaAccess().getGroup(), "rule__QuantifiedFormula__Group__0");
					put(grammarAccess.getTCTLFormulaAccess().getGroup_0(), "rule__TCTLFormula__Group_0__0");
					put(grammarAccess.getNotFormulaAccess().getGroup(), "rule__NotFormula__Group__0");
					put(grammarAccess.getUnaryTemporalFormulaAccess().getGroup(), "rule__UnaryTemporalFormula__Group__0");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getGroup(), "rule__BinaryTemporalFormula__Group__0");
					put(grammarAccess.getBinaryLogicFormulaAccess().getGroup(), "rule__BinaryLogicFormula__Group__0");
					put(grammarAccess.getAtomicPropositionAccess().getGroup(), "rule__AtomicProposition__Group__0");
					put(grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesAssignment_2_1(), "rule__FoTCTLSpec__NodeLabelPredicatesAssignment_2_1");
					put(grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesAssignment_2_2_1(), "rule__FoTCTLSpec__NodeLabelPredicatesAssignment_2_2_1");
					put(grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesAssignment_3_1(), "rule__FoTCTLSpec__EdgeLabelPredicatesAssignment_3_1");
					put(grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesAssignment_3_2_1(), "rule__FoTCTLSpec__EdgeLabelPredicatesAssignment_3_2_1");
					put(grammarAccess.getFoTCTLSpecAccess().getConstantsAssignment_4_1(), "rule__FoTCTLSpec__ConstantsAssignment_4_1");
					put(grammarAccess.getFoTCTLSpecAccess().getConstantsAssignment_4_2_1(), "rule__FoTCTLSpec__ConstantsAssignment_4_2_1");
					put(grammarAccess.getFoTCTLSpecAccess().getFormulasAssignment_6(), "rule__FoTCTLSpec__FormulasAssignment_6");
					put(grammarAccess.getFoTCTLFormulaAccess().getFormulaAssignment_1(), "rule__FoTCTLFormula__FormulaAssignment_1");
					put(grammarAccess.getNodeLabelPredicateDeclAccess().getNameAssignment_1(), "rule__NodeLabelPredicateDecl__NameAssignment_1");
					put(grammarAccess.getEdgeLabelPredicateDeclAccess().getNameAssignment_1(), "rule__EdgeLabelPredicateDecl__NameAssignment_1");
					put(grammarAccess.getConstantSymbolDeclAccess().getNameAssignment_1(), "rule__ConstantSymbolDecl__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getDeclarationAssignment_1(), "rule__Constant__DeclarationAssignment_1");
					put(grammarAccess.getVariableAccess().getDeclarationAssignment_1(), "rule__Variable__DeclarationAssignment_1");
					put(grammarAccess.getNodeLabelPredicateAccess().getDeclarationAssignment_1(), "rule__NodeLabelPredicate__DeclarationAssignment_1");
					put(grammarAccess.getNodeLabelPredicateAccess().getTermAssignment_3(), "rule__NodeLabelPredicate__TermAssignment_3");
					put(grammarAccess.getEdgeLabelPredicateAccess().getDeclarationAssignment_1(), "rule__EdgeLabelPredicate__DeclarationAssignment_1");
					put(grammarAccess.getEdgeLabelPredicateAccess().getTermAssignment_3(), "rule__EdgeLabelPredicate__TermAssignment_3");
					put(grammarAccess.getEdgeLabelPredicateAccess().getSecondTermAssignment_5(), "rule__EdgeLabelPredicate__SecondTermAssignment_5");
					put(grammarAccess.getQuantifiedFormulaAccess().getQuantifierAssignment_1(), "rule__QuantifiedFormula__QuantifierAssignment_1");
					put(grammarAccess.getQuantifiedFormulaAccess().getNameAssignment_3(), "rule__QuantifiedFormula__NameAssignment_3");
					put(grammarAccess.getQuantifiedFormulaAccess().getSubformulaAssignment_5(), "rule__QuantifiedFormula__SubformulaAssignment_5");
					put(grammarAccess.getTCTLFormulaAccess().getFormulaAssignment_0_1(), "rule__TCTLFormula__FormulaAssignment_0_1");
					put(grammarAccess.getNotFormulaAccess().getSubformulaAssignment_2(), "rule__NotFormula__SubformulaAssignment_2");
					put(grammarAccess.getUnaryTemporalFormulaAccess().getTemporalOperatorAssignment_1(), "rule__UnaryTemporalFormula__TemporalOperatorAssignment_1");
					put(grammarAccess.getUnaryTemporalFormulaAccess().getComparisonOperatorAssignment_3(), "rule__UnaryTemporalFormula__ComparisonOperatorAssignment_3");
					put(grammarAccess.getUnaryTemporalFormulaAccess().getValueAssignment_4(), "rule__UnaryTemporalFormula__ValueAssignment_4");
					put(grammarAccess.getUnaryTemporalFormulaAccess().getSubformulaAssignment_6(), "rule__UnaryTemporalFormula__SubformulaAssignment_6");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getLeftSubformulaAssignment_2(), "rule__BinaryTemporalFormula__LeftSubformulaAssignment_2");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getTemporalOperatorAssignment_4(), "rule__BinaryTemporalFormula__TemporalOperatorAssignment_4");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getComparisonOperatorAssignment_6(), "rule__BinaryTemporalFormula__ComparisonOperatorAssignment_6");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getValueAssignment_7(), "rule__BinaryTemporalFormula__ValueAssignment_7");
					put(grammarAccess.getBinaryTemporalFormulaAccess().getRightSubformulaAssignment_9(), "rule__BinaryTemporalFormula__RightSubformulaAssignment_9");
					put(grammarAccess.getBinaryLogicFormulaAccess().getLeftSubformulaAssignment_2(), "rule__BinaryLogicFormula__LeftSubformulaAssignment_2");
					put(grammarAccess.getBinaryLogicFormulaAccess().getOperatorAssignment_3(), "rule__BinaryLogicFormula__OperatorAssignment_3");
					put(grammarAccess.getBinaryLogicFormulaAccess().getRightSubformulaAssignment_4(), "rule__BinaryLogicFormula__RightSubformulaAssignment_4");
					put(grammarAccess.getAtomicPropositionAccess().getNameAssignment_1(), "rule__AtomicProposition__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr.internal.InternalFOTCTLParser typedParser = (org.muml.reconfigurationverification.fotctl.xtext.ui.contentassist.antlr.internal.InternalFOTCTLParser) parser;
			typedParser.entryRuleFoTCTLSpec();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FOTCTLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FOTCTLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
