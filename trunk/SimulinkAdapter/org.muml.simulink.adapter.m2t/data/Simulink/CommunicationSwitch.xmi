<?xml version="1.0" encoding="ASCII"?>
<model:SimulinkContainer xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:model="http://www.muml.org/simulink/1.0.0" id="_rWygIJhtEeGVzsCBdc_15A">
  <libraries id="_rY-4gJhtEeGVzsCBdc_15A" name="CommunicationSwitch">
    <blocks xsi:type="model:SubSystem" id="_rgBUoJhtEeGVzsCBdc_15A" name="CommunicationSwitch">
      <parameters name="System.Location" value="[559, 228, 1057, 528]"/>
      <parameters name="System.ModelBrowserWidth" value="200"/>
      <parameters name="Position" value="[40, 29, 135, 71]"/>
      <outPorts id="_rgZIEJhtEeGVzsCBdc_15A" name="Out" incomingLines="_rhkMwJhtEeGVzsCBdc_15A" dimensions="-1">
        <parameters name="Position" value="[425, 118, 455, 132]"/>
        <inPorts id="_rgeAkJhtEeGVzsCBdc_15A" name="In1"/>
      </outPorts>
      <inPorts id="_rgenoJhtEeGVzsCBdc_15A" name="In" outgoingLines="_rhhwgJhtEeGVzsCBdc_15A" dimensions="-1">
        <parameters name="Position" value="[100, 118, 130, 132]"/>
        <outPorts id="_rggc0JhtEeGVzsCBdc_15A" name="Out1"/>
      </inPorts>
      <lines id="_rhhwgJhtEeGVzsCBdc_15A" sourcePort="_rggc0JhtEeGVzsCBdc_15A" targetPort="_rgw7gJhtEeGVzsCBdc_15A" sourceBlock="_rgenoJhtEeGVzsCBdc_15A" targetBlock="_rgqN0JhtEeGVzsCBdc_15A" bus="_rhjlsJhtEeGVzsCBdc_15A"/>
      <lines id="_rhkMwJhtEeGVzsCBdc_15A" sourcePort="_rgjgIZhtEeGVzsCBdc_15A" targetPort="_rgeAkJhtEeGVzsCBdc_15A" sourceBlock="_rgiSAJhtEeGVzsCBdc_15A" targetBlock="_rgZIEJhtEeGVzsCBdc_15A"/>
      <lines id="_rhkz0JhtEeGVzsCBdc_15A" sourcePort="_rgyJoZhtEeGVzsCBdc_15A" targetPort="_rgjgIJhtEeGVzsCBdc_15A" sourceBlock="_rgqN0JhtEeGVzsCBdc_15A" targetBlock="_rgiSAJhtEeGVzsCBdc_15A"/>
      <blocks xsi:type="model:UnitDelay" id="_rgiSAJhtEeGVzsCBdc_15A" name="Unit Delay" incomingLines="_rhkz0JhtEeGVzsCBdc_15A" outgoingLines="_rhkMwJhtEeGVzsCBdc_15A">
        <parameters name="Position" value="[350, 108, 385, 142]"/>
        <outPorts id="_rgjgIZhtEeGVzsCBdc_15A"/>
        <inPorts id="_rgjgIJhtEeGVzsCBdc_15A"/>
      </blocks>
      <blocks xsi:type="model:EmbeddedMatlabFunction" id="_rgqN0JhtEeGVzsCBdc_15A" name="Embedded\nMATLAB Function" incomingLines="_rhhwgJhtEeGVzsCBdc_15A" outgoingLines="_rhkz0JhtEeGVzsCBdc_15A" code="function outBus = BusImpl(inBus)\n%#eml\neml.extrinsic('fieldnames','disp','setfield','fprintf');\n\nbusSize = numel(inBus.rc1.from);\nqueueSize = 10*busSize; %length of queue\nnumShuttles = 0; %Define data type\nnumShuttles = numel(fieldnames(inBus)); %Shuttles connected to the bus\nassert(numShuttles &lt;= 20) %Defines an upper bound for number of shuttles. \n%Important for static memory allocation. \nlookupTableSize = 200;\n\n\n\nNOT_ASSIGNED = -1;\n\n%We need persistent queues\npersistent queue;\npersistent lookupTable;\n\n%Initialize the queues\nif isempty(queue)\n    queue = repmat(emptyPacket(), numShuttles, queueSize);\nend\n\nif isempty(lookupTable)\n    lookupTable = repmat(NOT_ASSIGNED, lookupTableSize,1);\nend\n\n%Clean outbus\noutBus = inBus;\nfor i = 1:numShuttles\n    outBus = setfield(outBus, createRailCabName(i), emptyBus(busSize));\nend\n\n%Retrieve packets\nfor i = 1:numShuttles\n    %Get current bus\n    currentBus = getBusFromIndex(inBus, busSize, i);\n    for j = 1:busSize\n        %Read packet\n        packet = getPacketFromBus(currentBus, j);\n        \n        %Check if new packet\n        if isValid(packet, numShuttles)\n             %Save sender bus element to lookup table\n            if lookupTable(packet.from) == NOT_ASSIGNED\n                lookupTable(packet.from) = i;\n            end\n            \n            %Save packet in queue\n            target = lookupTable(packet.to);\n            %Destination unkown. Send to all unassigned.\n            if target == NOT_ASSIGNED\n                for k = 1:numShuttles\n                    if(lookupTable(k) == NOT_ASSIGNED)\n                        queue(k,:) = enqueue(queue(k,:), packet); \n                    end\n                end                \n            %Destination known\n            else \n                queue(target,:) = enqueue(queue(target,:), packet);\n            end            \n        end\n    end\n\nend\n\n%Send packet from queue\nfor i = 1:numShuttles    \n    currentBus = getBusFromIndex(outBus, busSize, i);\n    for j = 1:busSize\n        if ~isEmpty(queue(i,:))\n            \n            \n            %Read last packet\n            packet = front(queue(i,:));\n            queue(i,:) = dequeue(queue(i,:)); \n            \n%            if packet.msg ~= 255 %No ACK\n%                fprintf('Sending on port %u[%u/%u]: %s\\n', i, j, busSize, toString(packet));\n%            end            \n            \n            %Save packet to bus\n            currentBus = setPacketToBus(currentBus, j, packet);\n            \n        else\n            break;\n        end\n    end \n    %Save bus\n    outBus = setBusToIndex(outBus, i, currentBus);\nend\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% BUS\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nfunction name = createRailCabName(index) %#eml\n%Create name for the railcab used on the bus\neml.extrinsic('sprintf');\nname = sprintf('rc%d', index);\n\nfunction bus = getBusFromIndex(inBus, busSize, index) %eml\n%Retrieve a PacketBus from the RailCaBbus\neml.extrinsic('getfield');\nbusName = createRailCabName(index);\nbus = emptyBus(busSize);\nbus = getfield(inBus, busName);\n\nfunction rcBus = setBusToIndex(rcBus, index, packetBus) %eml\n%Save a PacketBus to RailCabBus\neml.extrinsic('setfield');\nbusName = createRailCabName(index);\nrcBus = setfield(rcBus, busName, packetBus);\n\nfunction packet = getPacketFromBus(packetBus, index) %eml\n%Retrieve a packet from the bus\npacket = emptyPacket();\npacket.from = packetBus.from(index);\npacket.to = packetBus.to(index);\npacket.msg = packetBus.msg(index);\npacket.param = packetBus.param (index);\npacket.pkgid = packetBus.pkgid(index);\npacket.time = packetBus.time(index);\n\nfunction packetBus = setPacketToBus(packetBus, index, packet) %eml\n%Save a packet to the bus\npacketBus.from(index) = packet.from;\npacketBus.to(index) = packet.to;\npacketBus.msg(index) = packet.msg;\npacketBus.param (index) = packet.param;\npacketBus.pkgid(index) = packet.pkgid;\npacketBus.time(index) = packet.time;\n\nfunction bus = emptyBus(size) %emp\n%Create an empty bus\nbus = struct('from', zeros(size,1,'uint8'),'to', zeros(size,1,'uint8'),'msg', zeros(size,1,'uint16'),'param', zeros(size,1,'double'),'pkgid', zeros(size,1,'uint32'), 'time', zeros(size,1,'double'));\n\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% PACKET\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nfunction packet = emptyPacket() %#eml\n%Creates an empty packet\npacket = struct('from', uint8(0),'to', uint8(0),'msg', uint16(0),'param', double(0.0),'pkgid', uint32(0), 'time', double(0));\n\nfunction valid = isValid(packet, numShuttles) %#eml\n%Checks wether the given packet is valid and transported by the bus\neml.extrinsic('getfield');\nvalid = false;\nif packet.to > 0 &amp;&amp; packet.to &lt;= numShuttles \n    if packet.from > 0 &amp;&amp; packet.from &lt;= numShuttles\n        valid = true;\n    end\nend\n\nfunction packetString = toString(packet) %#eml\neml.extrinsic('sprintf');\npacketString = sprintf('%3u: %u->%u :%3u (%.1f) @%.2f', packet.pkgid, packet.from, packet.to, packet.msg, packet.param, packet.time);\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%% QUEUE\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\nfunction queue = enqueue(queue, packet) %#eml\n%Insert the packet at the end of the queue\neml.extrinsic('warning');\nfor i=1:length(queue)\n    if queue(i).to == 0\n        queue(i) = packet;\n        return;\n    end\nend\n%No empty entry found\nwarning('RailCab:Bus','Bus: buffer overflow for outgoing queue to %d', queue(1).to);\n\nfunction queue = dequeue(queue) %#eml\n%Removes the first packet of the queue\nfor i = 1:length(queue)-1\n    queue(i) = queue(i+1);\n    if queue(i).to == 0\n        %end reached\n        return;\n    end\nend\nqueue(length(queue)) = emptyPacket();\n\nfunction packet = front(queue) %#eml\n%Returns the first element from the queue\npacket = queue(1);\n\nfunction empty = isEmpty(queue) %#eml\n%Checks whether the queue is empty or not\npacket = queue(1);\nif packet.to == 0\n    empty = true;\nelse\n    empty = false;\nend">
        <parameters name="System.Location" value="[257, 457, 812, 717]"/>
        <parameters name="System.ModelBrowserWidth" value="200"/>
        <parameters name="Position" value="[200, 89, 310, 161]"/>
        <outPorts id="_rgyJoZhtEeGVzsCBdc_15A" name="outBus" dimensions="-1">
          <parameters name="Position" value="[460, 101, 480, 119]"/>
          <inPorts id="_rgzXwJhtEeGVzsCBdc_15A" name="In1"/>
        </outPorts>
        <inPorts id="_rgw7gJhtEeGVzsCBdc_15A" name="inBus" dimensions="-1">
          <parameters name="Position" value="[20, 101, 40, 119]"/>
          <outPorts id="_rgyJoJhtEeGVzsCBdc_15A" name="Out1"/>
        </inPorts>
      </blocks>
    </blocks>
    <buses id="_rhjlsJhtEeGVzsCBdc_15A" name="RailCabBus"/>
  </libraries>
</model:SimulinkContainer>
