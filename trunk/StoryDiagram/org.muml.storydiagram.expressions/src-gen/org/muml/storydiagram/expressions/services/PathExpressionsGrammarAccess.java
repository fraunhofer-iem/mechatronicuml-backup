/*
 * generated by Xtext
 */
package org.muml.storydiagram.expressions.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PathExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.PathExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPathAlternativesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPathAlternativesPathParserRuleCall_0_0 = (RuleCall)cPathAlternativesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPathAlternativesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPathAlternativesPathParserRuleCall_1_1_0 = (RuleCall)cPathAlternativesAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cVerticalLineKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cPathAlternativesAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cPathAlternativesPathParserRuleCall_1_3_2_0 = (RuleCall)cPathAlternativesAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		
		//PathExpression:
		//	pathAlternatives+=Path | '(' pathAlternatives+=Path ')' ('|' '(' pathAlternatives+=Path ')')+;
		@Override public ParserRule getRule() { return rule; }

		//pathAlternatives+=Path | '(' pathAlternatives+=Path ')' ('|' '(' pathAlternatives+=Path ')')+
		public Alternatives getAlternatives() { return cAlternatives; }

		//pathAlternatives+=Path
		public Assignment getPathAlternativesAssignment_0() { return cPathAlternativesAssignment_0; }

		//Path
		public RuleCall getPathAlternativesPathParserRuleCall_0_0() { return cPathAlternativesPathParserRuleCall_0_0; }

		//'(' pathAlternatives+=Path ')' ('|' '(' pathAlternatives+=Path ')')+
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//pathAlternatives+=Path
		public Assignment getPathAlternativesAssignment_1_1() { return cPathAlternativesAssignment_1_1; }

		//Path
		public RuleCall getPathAlternativesPathParserRuleCall_1_1_0() { return cPathAlternativesPathParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//('|' '(' pathAlternatives+=Path ')')+
		public Group getGroup_1_3() { return cGroup_1_3; }

		//'|'
		public Keyword getVerticalLineKeyword_1_3_0() { return cVerticalLineKeyword_1_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }

		//pathAlternatives+=Path
		public Assignment getPathAlternativesAssignment_1_3_2() { return cPathAlternativesAssignment_1_3_2; }

		//Path
		public RuleCall getPathAlternativesPathParserRuleCall_1_3_2_0() { return cPathAlternativesPathParserRuleCall_1_3_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3_3() { return cRightParenthesisKeyword_1_3_3; }
	}

	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentsPathSegmentParserRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsPathSegmentParserRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		
		//Path:
		//	segments+=PathSegment ('.' segments+=PathSegment)*;
		@Override public ParserRule getRule() { return rule; }

		//segments+=PathSegment ('.' segments+=PathSegment)*
		public Group getGroup() { return cGroup; }

		//segments+=PathSegment
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }

		//PathSegment
		public RuleCall getSegmentsPathSegmentParserRuleCall_0_0() { return cSegmentsPathSegmentParserRuleCall_0_0; }

		//('.' segments+=PathSegment)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//segments+=PathSegment
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }

		//PathSegment
		public RuleCall getSegmentsPathSegmentParserRuleCall_1_1_0() { return cSegmentsPathSegmentParserRuleCall_1_1_0; }
	}

	public class PathSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.PathSegment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cAlternativesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cAlternativesPathSegmentDescriptionParserRuleCall_0_0_0 = (RuleCall)cAlternativesAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cAlternativesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cAlternativesPathSegmentDescriptionParserRuleCall_0_1_1_0 = (RuleCall)cAlternativesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cVerticalLineKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cAlternativesAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cAlternativesPathSegmentDescriptionParserRuleCall_0_1_2_1_0 = (RuleCall)cAlternativesAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cRepeatOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRepeatOperatorRepeatOperatorEnumRuleCall_1_0 = (RuleCall)cRepeatOperatorAssignment_1.eContents().get(0);
		
		//PathSegment:
		//	(alternatives+=PathSegmentDescription | '(' alternatives+=PathSegmentDescription ('|'
		//	alternatives+=PathSegmentDescription)+ ')') repeatOperator=RepeatOperator?;
		@Override public ParserRule getRule() { return rule; }

		//(alternatives+=PathSegmentDescription | '(' alternatives+=PathSegmentDescription ('|'
		//alternatives+=PathSegmentDescription)+ ')') repeatOperator=RepeatOperator?
		public Group getGroup() { return cGroup; }

		//(alternatives+=PathSegmentDescription | '(' alternatives+=PathSegmentDescription ('|'
		//alternatives+=PathSegmentDescription)+ ')')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//alternatives+=PathSegmentDescription
		public Assignment getAlternativesAssignment_0_0() { return cAlternativesAssignment_0_0; }

		//PathSegmentDescription
		public RuleCall getAlternativesPathSegmentDescriptionParserRuleCall_0_0_0() { return cAlternativesPathSegmentDescriptionParserRuleCall_0_0_0; }

		//'(' alternatives+=PathSegmentDescription ('|' alternatives+=PathSegmentDescription)+ ')'
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }

		//alternatives+=PathSegmentDescription
		public Assignment getAlternativesAssignment_0_1_1() { return cAlternativesAssignment_0_1_1; }

		//PathSegmentDescription
		public RuleCall getAlternativesPathSegmentDescriptionParserRuleCall_0_1_1_0() { return cAlternativesPathSegmentDescriptionParserRuleCall_0_1_1_0; }

		//('|' alternatives+=PathSegmentDescription)+
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//'|'
		public Keyword getVerticalLineKeyword_0_1_2_0() { return cVerticalLineKeyword_0_1_2_0; }

		//alternatives+=PathSegmentDescription
		public Assignment getAlternativesAssignment_0_1_2_1() { return cAlternativesAssignment_0_1_2_1; }

		//PathSegmentDescription
		public RuleCall getAlternativesPathSegmentDescriptionParserRuleCall_0_1_2_1_0() { return cAlternativesPathSegmentDescriptionParserRuleCall_0_1_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_1_3() { return cRightParenthesisKeyword_0_1_3; }

		//repeatOperator=RepeatOperator?
		public Assignment getRepeatOperatorAssignment_1() { return cRepeatOperatorAssignment_1; }

		//RepeatOperator
		public RuleCall getRepeatOperatorRepeatOperatorEnumRuleCall_1_0() { return cRepeatOperatorRepeatOperatorEnumRuleCall_1_0; }
	}

	public class PathSegmentDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.PathSegmentDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cImplicitPathDescriptionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cExplicitPathDescriptionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Assignment cRestrictionListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestrictionListRestrictionListParserRuleCall_1_0 = (RuleCall)cRestrictionListAssignment_1.eContents().get(0);
		
		//PathSegmentDescription:
		//	(ImplicitPathDescription | ExplicitPathDescription) restrictionList=RestrictionList?;
		@Override public ParserRule getRule() { return rule; }

		//(ImplicitPathDescription | ExplicitPathDescription) restrictionList=RestrictionList?
		public Group getGroup() { return cGroup; }

		//(ImplicitPathDescription | ExplicitPathDescription)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ImplicitPathDescription
		public RuleCall getImplicitPathDescriptionParserRuleCall_0_0() { return cImplicitPathDescriptionParserRuleCall_0_0; }

		//ExplicitPathDescription
		public RuleCall getExplicitPathDescriptionParserRuleCall_0_1() { return cExplicitPathDescriptionParserRuleCall_0_1; }

		//restrictionList=RestrictionList?
		public Assignment getRestrictionListAssignment_1() { return cRestrictionListAssignment_1; }

		//RestrictionList
		public RuleCall getRestrictionListRestrictionListParserRuleCall_1_0() { return cRestrictionListRestrictionListParserRuleCall_1_0; }
	}

	public class RestrictionListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.RestrictionList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRestrictionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRestrictionsTypeRestrictionParserRuleCall_1_0 = (RuleCall)cRestrictionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRestrictionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRestrictionsTypeRestrictionParserRuleCall_2_1_0 = (RuleCall)cRestrictionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RestrictionList:
		//	'[' restrictions+=TypeRestriction (',' restrictions+=TypeRestriction)* ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' restrictions+=TypeRestriction (',' restrictions+=TypeRestriction)* ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//restrictions+=TypeRestriction
		public Assignment getRestrictionsAssignment_1() { return cRestrictionsAssignment_1; }

		//TypeRestriction
		public RuleCall getRestrictionsTypeRestrictionParserRuleCall_1_0() { return cRestrictionsTypeRestrictionParserRuleCall_1_0; }

		//(',' restrictions+=TypeRestriction)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//restrictions+=TypeRestriction
		public Assignment getRestrictionsAssignment_2_1() { return cRestrictionsAssignment_2_1; }

		//TypeRestriction
		public RuleCall getRestrictionsTypeRestrictionParserRuleCall_2_1_0() { return cRestrictionsTypeRestrictionParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ImplicitPathDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.ImplicitPathDescription");
		private final Assignment cKindAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cKindImplicitPathKindEnumRuleCall_0 = (RuleCall)cKindAssignment.eContents().get(0);
		
		//ImplicitPathDescription:
		//	kind=ImplicitPathKind;
		@Override public ParserRule getRule() { return rule; }

		//kind=ImplicitPathKind
		public Assignment getKindAssignment() { return cKindAssignment; }

		//ImplicitPathKind
		public RuleCall getKindImplicitPathKindEnumRuleCall_0() { return cKindImplicitPathKindEnumRuleCall_0; }
	}

	public class ExplicitPathDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.ExplicitPathDescription");
		private final Assignment cAssociationNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAssociationNameIDTerminalRuleCall_0 = (RuleCall)cAssociationNameAssignment.eContents().get(0);
		
		//ExplicitPathDescription:
		//	associationName=ID;
		@Override public ParserRule getRule() { return rule; }

		//associationName=ID
		public Assignment getAssociationNameAssignment() { return cAssociationNameAssignment; }

		//ID
		public RuleCall getAssociationNameIDTerminalRuleCall_0() { return cAssociationNameIDTerminalRuleCall_0; }
	}

	public class TypeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.TypeRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cForbiddenAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cForbiddenExclamationMarkKeyword_0_0 = (Keyword)cForbiddenAssignment_0.eContents().get(0);
		private final Assignment cTypeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNameIDTerminalRuleCall_1_0 = (RuleCall)cTypeNameAssignment_1.eContents().get(0);
		
		//TypeRestriction:
		//	forbidden?='!'? typeName=ID;
		@Override public ParserRule getRule() { return rule; }

		//forbidden?='!'? typeName=ID
		public Group getGroup() { return cGroup; }

		//forbidden?='!'?
		public Assignment getForbiddenAssignment_0() { return cForbiddenAssignment_0; }

		//'!'
		public Keyword getForbiddenExclamationMarkKeyword_0_0() { return cForbiddenExclamationMarkKeyword_0_0; }

		//typeName=ID
		public Assignment getTypeNameAssignment_1() { return cTypeNameAssignment_1; }

		//ID
		public RuleCall getTypeNameIDTerminalRuleCall_1_0() { return cTypeNameIDTerminalRuleCall_1_0; }
	}
	
	
	public class RepeatOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.RepeatOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNO_REPEATEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNO_REPEATNO_REPEATKeyword_0_0 = (Keyword)cNO_REPEATEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAT_LEAST_ONCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAT_LEAST_ONCEPlusSignKeyword_1_0 = (Keyword)cAT_LEAST_ONCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cARBITRARYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cARBITRARYAsteriskKeyword_2_0 = (Keyword)cARBITRARYEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RepeatOperator:
		//	NO_REPEAT | AT_LEAST_ONCE='+' | ARBITRARY='*';
		public EnumRule getRule() { return rule; }

		//NO_REPEAT | AT_LEAST_ONCE='+' | ARBITRARY='*'
		public Alternatives getAlternatives() { return cAlternatives; }

		//NO_REPEAT
		public EnumLiteralDeclaration getNO_REPEATEnumLiteralDeclaration_0() { return cNO_REPEATEnumLiteralDeclaration_0; }

		//"NO_REPEAT"
		public Keyword getNO_REPEATNO_REPEATKeyword_0_0() { return cNO_REPEATNO_REPEATKeyword_0_0; }

		//AT_LEAST_ONCE='+'
		public EnumLiteralDeclaration getAT_LEAST_ONCEEnumLiteralDeclaration_1() { return cAT_LEAST_ONCEEnumLiteralDeclaration_1; }

		//'+'
		public Keyword getAT_LEAST_ONCEPlusSignKeyword_1_0() { return cAT_LEAST_ONCEPlusSignKeyword_1_0; }

		//ARBITRARY='*'
		public EnumLiteralDeclaration getARBITRARYEnumLiteralDeclaration_2() { return cARBITRARYEnumLiteralDeclaration_2; }

		//'*'
		public Keyword getARBITRARYAsteriskKeyword_2_0() { return cARBITRARYAsteriskKeyword_2_0; }
	}

	public class ImplicitPathKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.storydiagram.expressions.PathExpressions.ImplicitPathKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINMENT_SOURCEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCONTAINMENT_SOURCELessThanSignGreaterThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cCONTAINMENT_SOURCEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONTAINMENT_TARGETEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONTAINMENT_TARGETHyphenMinusHyphenMinusGreaterThanSignLessThanSignGreaterThanSignKeyword_2_0 = (Keyword)cCONTAINMENT_TARGETEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ImplicitPathKind:
		//	ANY='-->' | CONTAINMENT_SOURCE='<>-->' | CONTAINMENT_TARGET='--><>';
		public EnumRule getRule() { return rule; }

		//ANY='-->' | CONTAINMENT_SOURCE='<>-->' | CONTAINMENT_TARGET='--><>'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY='-->'
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }

		//'-->'
		public Keyword getANYHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0() { return cANYHyphenMinusHyphenMinusGreaterThanSignKeyword_0_0; }

		//CONTAINMENT_SOURCE='<>-->'
		public EnumLiteralDeclaration getCONTAINMENT_SOURCEEnumLiteralDeclaration_1() { return cCONTAINMENT_SOURCEEnumLiteralDeclaration_1; }

		//'<>-->'
		public Keyword getCONTAINMENT_SOURCELessThanSignGreaterThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0() { return cCONTAINMENT_SOURCELessThanSignGreaterThanSignHyphenMinusHyphenMinusGreaterThanSignKeyword_1_0; }

		//CONTAINMENT_TARGET='--><>'
		public EnumLiteralDeclaration getCONTAINMENT_TARGETEnumLiteralDeclaration_2() { return cCONTAINMENT_TARGETEnumLiteralDeclaration_2; }

		//'--><>'
		public Keyword getCONTAINMENT_TARGETHyphenMinusHyphenMinusGreaterThanSignLessThanSignGreaterThanSignKeyword_2_0() { return cCONTAINMENT_TARGETHyphenMinusHyphenMinusGreaterThanSignLessThanSignGreaterThanSignKeyword_2_0; }
	}
	
	private final PathExpressionElements pPathExpression;
	private final PathElements pPath;
	private final PathSegmentElements pPathSegment;
	private final PathSegmentDescriptionElements pPathSegmentDescription;
	private final RestrictionListElements pRestrictionList;
	private final RepeatOperatorElements eRepeatOperator;
	private final ImplicitPathDescriptionElements pImplicitPathDescription;
	private final ImplicitPathKindElements eImplicitPathKind;
	private final ExplicitPathDescriptionElements pExplicitPathDescription;
	private final TypeRestrictionElements pTypeRestriction;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PathExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPathExpression = new PathExpressionElements();
		this.pPath = new PathElements();
		this.pPathSegment = new PathSegmentElements();
		this.pPathSegmentDescription = new PathSegmentDescriptionElements();
		this.pRestrictionList = new RestrictionListElements();
		this.eRepeatOperator = new RepeatOperatorElements();
		this.pImplicitPathDescription = new ImplicitPathDescriptionElements();
		this.eImplicitPathKind = new ImplicitPathKindElements();
		this.pExplicitPathDescription = new ExplicitPathDescriptionElements();
		this.pTypeRestriction = new TypeRestrictionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.muml.storydiagram.expressions.PathExpressions".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//PathExpression:
	//	pathAlternatives+=Path | '(' pathAlternatives+=Path ')' ('|' '(' pathAlternatives+=Path ')')+;
	public PathExpressionElements getPathExpressionAccess() {
		return pPathExpression;
	}
	
	public ParserRule getPathExpressionRule() {
		return getPathExpressionAccess().getRule();
	}

	//Path:
	//	segments+=PathSegment ('.' segments+=PathSegment)*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}

	//PathSegment:
	//	(alternatives+=PathSegmentDescription | '(' alternatives+=PathSegmentDescription ('|'
	//	alternatives+=PathSegmentDescription)+ ')') repeatOperator=RepeatOperator?;
	public PathSegmentElements getPathSegmentAccess() {
		return pPathSegment;
	}
	
	public ParserRule getPathSegmentRule() {
		return getPathSegmentAccess().getRule();
	}

	//PathSegmentDescription:
	//	(ImplicitPathDescription | ExplicitPathDescription) restrictionList=RestrictionList?;
	public PathSegmentDescriptionElements getPathSegmentDescriptionAccess() {
		return pPathSegmentDescription;
	}
	
	public ParserRule getPathSegmentDescriptionRule() {
		return getPathSegmentDescriptionAccess().getRule();
	}

	//RestrictionList:
	//	'[' restrictions+=TypeRestriction (',' restrictions+=TypeRestriction)* ']';
	public RestrictionListElements getRestrictionListAccess() {
		return pRestrictionList;
	}
	
	public ParserRule getRestrictionListRule() {
		return getRestrictionListAccess().getRule();
	}

	//enum RepeatOperator:
	//	NO_REPEAT | AT_LEAST_ONCE='+' | ARBITRARY='*';
	public RepeatOperatorElements getRepeatOperatorAccess() {
		return eRepeatOperator;
	}
	
	public EnumRule getRepeatOperatorRule() {
		return getRepeatOperatorAccess().getRule();
	}

	//ImplicitPathDescription:
	//	kind=ImplicitPathKind;
	public ImplicitPathDescriptionElements getImplicitPathDescriptionAccess() {
		return pImplicitPathDescription;
	}
	
	public ParserRule getImplicitPathDescriptionRule() {
		return getImplicitPathDescriptionAccess().getRule();
	}

	//enum ImplicitPathKind:
	//	ANY='-->' | CONTAINMENT_SOURCE='<>-->' | CONTAINMENT_TARGET='--><>';
	public ImplicitPathKindElements getImplicitPathKindAccess() {
		return eImplicitPathKind;
	}
	
	public EnumRule getImplicitPathKindRule() {
		return getImplicitPathKindAccess().getRule();
	}

	//ExplicitPathDescription:
	//	associationName=ID;
	public ExplicitPathDescriptionElements getExplicitPathDescriptionAccess() {
		return pExplicitPathDescription;
	}
	
	public ParserRule getExplicitPathDescriptionRule() {
		return getExplicitPathDescriptionAccess().getRule();
	}

	//TypeRestriction:
	//	forbidden?='!'? typeName=ID;
	public TypeRestrictionElements getTypeRestrictionAccess() {
		return pTypeRestriction;
	}
	
	public ParserRule getTypeRestrictionRule() {
		return getTypeRestrictionAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
