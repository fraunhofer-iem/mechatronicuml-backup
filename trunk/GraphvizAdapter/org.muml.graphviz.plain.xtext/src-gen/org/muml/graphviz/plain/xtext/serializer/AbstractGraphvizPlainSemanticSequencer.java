/*
 * generated by Xtext
 */
package org.muml.graphviz.plain.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.muml.core.CorePackage;
import org.muml.graphviz.plain.PlainEdge;
import org.muml.graphviz.plain.PlainGraph;
import org.muml.graphviz.plain.PlainNode;
import org.muml.graphviz.plain.PlainPackage;
import org.muml.graphviz.plain.xtext.services.GraphvizPlainGrammarAccess;
import org.muml.graphviz.util.Point;
import org.muml.graphviz.util.UtilPackage;

@SuppressWarnings("all")
public abstract class AbstractGraphvizPlainSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphvizPlainGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PlainPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PlainPackage.PLAIN_EDGE:
				sequence_Edge(context, (PlainEdge) semanticObject); 
				return; 
			case PlainPackage.PLAIN_GRAPH:
				sequence_Graph(context, (PlainGraph) semanticObject); 
				return; 
			case PlainPackage.PLAIN_NODE:
				sequence_Node(context, (PlainNode) semanticObject); 
				return; 
			}
		else if (epackage == UtilPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UtilPackage.POINT:
				sequence_Point(context, (Point) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Edge returns PlainEdge
	 *
	 * Constraint:
	 *     (source=[PlainNode|Identifier] target=[PlainNode|Identifier] splinePoints+=Point*)
	 */
	protected void sequence_Edge(ISerializationContext context, PlainEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Graph returns PlainGraph
	 *
	 * Constraint:
	 *     (scale=Number width=Number height=Number nodes+=Node* edges+=Edge*)
	 */
	protected void sequence_Graph(ISerializationContext context, PlainGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Node returns PlainNode
	 *
	 * Constraint:
	 *     (name=Identifier position=Point width=Number height=Number)
	 */
	protected void sequence_Node(ISerializationContext context, PlainNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, PlainPackage.Literals.PLAIN_NODE__POSITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlainPackage.Literals.PLAIN_NODE__POSITION));
			if (transientValues.isValueTransient(semanticObject, PlainPackage.Literals.PLAIN_NODE__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlainPackage.Literals.PLAIN_NODE__WIDTH));
			if (transientValues.isValueTransient(semanticObject, PlainPackage.Literals.PLAIN_NODE__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PlainPackage.Literals.PLAIN_NODE__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNodeAccess().getNameIdentifierParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNodeAccess().getPositionPointParserRuleCall_2_0(), semanticObject.getPosition());
		feeder.accept(grammarAccess.getNodeAccess().getWidthNumberParserRuleCall_3_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getNodeAccess().getHeightNumberParserRuleCall_4_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Point returns Point
	 *
	 * Constraint:
	 *     (x=Number y=Number)
	 */
	protected void sequence_Point(ISerializationContext context, Point semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UtilPackage.Literals.POINT__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UtilPackage.Literals.POINT__X));
			if (transientValues.isValueTransient(semanticObject, UtilPackage.Literals.POINT__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UtilPackage.Literals.POINT__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointAccess().getXNumberParserRuleCall_0_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPointAccess().getYNumberParserRuleCall_1_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
}
