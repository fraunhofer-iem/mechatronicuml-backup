/*
 * generated by Xtext
 */
package org.muml.graphviz.dot.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.muml.graphviz.dot.xtext.services.DotLanguageGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractDotLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DotLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DirectedDotEdge_SemicolonKeyword_4_q;
	protected AbstractElementAlias match_DotGraph_SemicolonKeyword_4_0_5_q;
	protected AbstractElementAlias match_DotGraph_SemicolonKeyword_4_1_5_q;
	protected AbstractElementAlias match_DotGraph_SemicolonKeyword_4_2_5_q;
	protected AbstractElementAlias match_DotNode_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_DotSubGraph_SemicolonKeyword_4_0_5_q;
	protected AbstractElementAlias match_DotSubGraph_SemicolonKeyword_4_1_5_q;
	protected AbstractElementAlias match_DotSubGraph_SemicolonKeyword_4_2_5_q;
	protected AbstractElementAlias match_UndirectedDotEdge_SemicolonKeyword_4_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DotLanguageGrammarAccess) access;
		match_DirectedDotEdge_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getDirectedDotEdgeAccess().getSemicolonKeyword_4());
		match_DotGraph_SemicolonKeyword_4_0_5_q = new TokenAlias(false, true, grammarAccess.getDotGraphAccess().getSemicolonKeyword_4_0_5());
		match_DotGraph_SemicolonKeyword_4_1_5_q = new TokenAlias(false, true, grammarAccess.getDotGraphAccess().getSemicolonKeyword_4_1_5());
		match_DotGraph_SemicolonKeyword_4_2_5_q = new TokenAlias(false, true, grammarAccess.getDotGraphAccess().getSemicolonKeyword_4_2_5());
		match_DotNode_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getDotNodeAccess().getSemicolonKeyword_2());
		match_DotSubGraph_SemicolonKeyword_4_0_5_q = new TokenAlias(false, true, grammarAccess.getDotSubGraphAccess().getSemicolonKeyword_4_0_5());
		match_DotSubGraph_SemicolonKeyword_4_1_5_q = new TokenAlias(false, true, grammarAccess.getDotSubGraphAccess().getSemicolonKeyword_4_1_5());
		match_DotSubGraph_SemicolonKeyword_4_2_5_q = new TokenAlias(false, true, grammarAccess.getDotSubGraphAccess().getSemicolonKeyword_4_2_5());
		match_UndirectedDotEdge_SemicolonKeyword_4_q = new TokenAlias(false, true, grammarAccess.getUndirectedDotEdgeAccess().getSemicolonKeyword_4());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DirectedDotEdge_SemicolonKeyword_4_q.equals(syntax))
				emit_DirectedDotEdge_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotGraph_SemicolonKeyword_4_0_5_q.equals(syntax))
				emit_DotGraph_SemicolonKeyword_4_0_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotGraph_SemicolonKeyword_4_1_5_q.equals(syntax))
				emit_DotGraph_SemicolonKeyword_4_1_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotGraph_SemicolonKeyword_4_2_5_q.equals(syntax))
				emit_DotGraph_SemicolonKeyword_4_2_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotNode_SemicolonKeyword_2_q.equals(syntax))
				emit_DotNode_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotSubGraph_SemicolonKeyword_4_0_5_q.equals(syntax))
				emit_DotSubGraph_SemicolonKeyword_4_0_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotSubGraph_SemicolonKeyword_4_1_5_q.equals(syntax))
				emit_DotSubGraph_SemicolonKeyword_4_1_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DotSubGraph_SemicolonKeyword_4_2_5_q.equals(syntax))
				emit_DotSubGraph_SemicolonKeyword_4_2_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_UndirectedDotEdge_SemicolonKeyword_4_q.equals(syntax))
				emit_UndirectedDotEdge_SemicolonKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     settings+=Setting ']' (ambiguity) (rule end)
	 *     target=[DotNode|DotID] (ambiguity) (rule end)
	 */
	protected void emit_DirectedDotEdge_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     graphSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     graphSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     graphSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     graphSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotGraph_SemicolonKeyword_4_0_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     nodeSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     nodeSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     nodeSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     nodeSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotGraph_SemicolonKeyword_4_1_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     edgeSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     edgeSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     edgeSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     edgeSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotGraph_SemicolonKeyword_4_2_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=DotID (ambiguity) (rule end)
	 *     settings+=Setting ']' (ambiguity) (rule end)
	 */
	protected void emit_DotNode_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     graphSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     graphSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     graphSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     graphSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     graphSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotSubGraph_SemicolonKeyword_4_0_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     nodeSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     nodeSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     nodeSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     nodeSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     nodeSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotSubGraph_SemicolonKeyword_4_1_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     edgeSettings+=Setting ']' (ambiguity) 'edge' '[' edgeSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) 'graph' '[' graphSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) 'node' '[' nodeSettings+=Setting
	 *     edgeSettings+=Setting ']' (ambiguity) '}' (rule end)
	 *     edgeSettings+=Setting ']' (ambiguity) edges+=DotEdge
	 *     edgeSettings+=Setting ']' (ambiguity) nodes+=DotNode
	 *     edgeSettings+=Setting ']' (ambiguity) subgraphs+=DotSubGraph
	 */
	protected void emit_DotSubGraph_SemicolonKeyword_4_2_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     settings+=Setting ']' (ambiguity) (rule end)
	 *     target=[DotNode|DotID] (ambiguity) (rule end)
	 */
	protected void emit_UndirectedDotEdge_SemicolonKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
