import transforms.lib.MUML2MUML;

modeltype muml_protocol uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype mumlConstraint uses pim::constraint('http://www.muml.org/pim/1.0.0');
modeltype mumlBehavior uses 'http://www.muml.org/pim/behavior/1.0.0';
modeltype mumlconnector uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype mumlmsgtype uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype modelinstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype verification_extension uses 'http://www.muml.org/uppaal/adapter/extension/verificationextension/1.0.0';


modeltype mtctl uses 'http://www.muml.org/uppaal/adapter/mtctl/1.0.0';
modeltype mtctlQuantifiers uses mtctl::quantifiers('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlPredicates uses mtctl::predicates('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlSets uses mtctl::sets('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlBooleanLogic uses mtctl::booleanlogic('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlComparables uses mtctl::comparables('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

//Splits properties into multiple properties that each are rooted in a TemporalQuantifierExpr (these sub-properties can be verified by Uppaal)
//Afterwards, only one property repository exists for each verifiable element, including all properties from the original repositories.
transformation MTCTLPropertySplitTransformation(in input:muml_protocol, out output:muml_protocol) extends library MUML2MUML;

main() {
	input.objects()[RootNode]->map RootNode2RootNode();
	output.objects()[VerifiableElement]->select(vr | vr.extensions->exists(oclIsKindOf(ElementToVerifyExtension)))->forEach(verifiableElement) {
		var combinedRepo := object PropertyRepository {};
		combinedRepo.properties := verifiableElement.verificationConstraintRepositories->selectByKind(PropertyRepository).properties->asOrderedSet();
		verifiableElement.verificationConstraintRepositories->forEach(repo) {
			output.removeElement(repo);
		};
		verifiableElement.verificationConstraintRepositories := combinedRepo;
	}
}

mapping mtctl::PropertyRepository :: PropertyRepository2PropertyRepository() : mtctl::PropertyRepository {
	//Go through all indirectly contained TemporalQuantifierExpressions and add them as a new Property to the target model repository
	self.properties->forEach(_property) {
		_property.allSubobjectsOfKind(TemporalQuantifierExpr)->forEach(_tempQuant) {
			properties += _tempQuant.oclAsType(TemporalQuantifierExpr).map TemporalQuantifierExpr2Property();
		};
	};
}

mapping TemporalQuantifierExpr::TemporalQuantifierExpr2Property() : mtctl::Property { //maps a TemporalQuantifierExpr onto a Property containing exactly that expression
	expression := self.map TemporalQuantifierExpr2TemporalQuantifierExpr();
	comment := self->closure(x|if (x.oclIsKindOf(Property)) then x else x.oclAsType(EObject).eContainer() endif)->any(oclIsKindOf(Property)).oclAsType(Property).comment;
}