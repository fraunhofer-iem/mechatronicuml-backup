/*
 * generated by Xtext
 */
package org.muml.psm.api.apimappinglanguage.xtext.scoping;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.muml.core.modelinstance.ModelElementCategory;
import org.muml.core.modelinstance.ModelInstancePlugin;
import org.muml.core.modelinstance.RootNode;
import org.muml.pim.behavior.Parameter;
import org.muml.pim.instance.ContinuousPortInstance;
import org.muml.pim.instance.InstancePackage;
import org.muml.pim.types.ArrayDataType;
import org.muml.pim.types.DataType;
import org.muml.pim.types.PrimitiveDataType;
import org.muml.pim.types.RangedPrimitiveDataType;
import org.muml.pim.types.StructureDataType;
import org.muml.pim.types.blackbox.TypesBlackbox;
import org.muml.pm.software.APICommand;
import org.muml.pm.software.APIRepository;
import org.muml.pm.software.EnumerationValue;
import org.muml.pm.software.SoftwarePackage;
import org.muml.psm.apiexpressions.APICallExpression;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping on how and when
 * to use it
 * 
 */
public class APIMappingLanguageScopeProvider extends
org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if(reference.getName()=="dataType")
		{
			Collection preDef = TypesBlackbox.getPredefinedTypes(context.eResource().getResourceSet());
			Iterable<IEObjectDescription> sup = super.getScope(context,reference).getAllElements();
			
	
			for (Iterator<IEObjectDescription> iterator = sup.iterator(); iterator.hasNext();) {
				EObject addMe = iterator.next().getEObjectOrProxy();
				preDef.add(addMe);
			
				
			}
			return  Scopes.scopeFor(preDef);
		}
		
		return super.getScope(context,reference);
}}
