/**
 */
package de.uni_paderborn.fujaba.muml.hardware.platform.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.uni_paderborn.fujaba.muml.hardware.platform.util.PlatformAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PlatformItemProviderAdapterFactory extends PlatformAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PlatformItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatformConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWPlatformConfigurationItemProvider hwPlatformConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatformConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWPlatformConfigurationAdapter() {
		if (hwPlatformConfigurationItemProvider == null) {
			hwPlatformConfigurationItemProvider = new HWPlatformConfigurationItemProvider(this);
		}

		return hwPlatformConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.StorageMemoryInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageMemoryInstanceItemProvider storageMemoryInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.StorageMemoryInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageMemoryInstanceAdapter() {
		if (storageMemoryInstanceItemProvider == null) {
			storageMemoryInstanceItemProvider = new StorageMemoryInstanceItemProvider(this);
		}

		return storageMemoryInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProcessingMemoryInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingMemoryInstanceItemProvider processingMemoryInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProcessingMemoryInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessingMemoryInstanceAdapter() {
		if (processingMemoryInstanceItemProvider == null) {
			processingMemoryInstanceItemProvider = new ProcessingMemoryInstanceItemProvider(this);
		}

		return processingMemoryInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.CacheInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheInstanceItemProvider cacheInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.CacheInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheInstanceAdapter() {
		if (cacheInstanceItemProvider == null) {
			cacheInstanceItemProvider = new CacheInstanceItemProvider(this);
		}

		return cacheInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProgrammableLogicDeviceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgrammableLogicDeviceInstanceItemProvider programmableLogicDeviceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProgrammableLogicDeviceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgrammableLogicDeviceInstanceAdapter() {
		if (programmableLogicDeviceInstanceItemProvider == null) {
			programmableLogicDeviceInstanceItemProvider = new ProgrammableLogicDeviceInstanceItemProvider(this);
		}

		return programmableLogicDeviceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProcessorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessorInstanceItemProvider processorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ProcessorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessorInstanceAdapter() {
		if (processorInstanceItemProvider == null) {
			processorInstanceItemProvider = new ProcessorInstanceItemProvider(this);
		}

		return processorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.StructuredResourceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredResourceInstanceItemProvider structuredResourceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.StructuredResourceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredResourceInstanceAdapter() {
		if (structuredResourceInstanceItemProvider == null) {
			structuredResourceInstanceItemProvider = new StructuredResourceInstanceItemProvider(this);
		}

		return structuredResourceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.Bus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusItemProvider busItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.Bus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusAdapter() {
		if (busItemProvider == null) {
			busItemProvider = new BusItemProvider(this);
		}

		return busItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWPlatformItemProvider hwPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWPlatformAdapter() {
		if (hwPlatformItemProvider == null) {
			hwPlatformItemProvider = new HWPlatformItemProvider(this);
		}

		return hwPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatformPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWPlatformPartItemProvider hwPlatformPartItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPlatformPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWPlatformPartAdapter() {
		if (hwPlatformPartItemProvider == null) {
			hwPlatformPartItemProvider = new HWPlatformPartItemProvider(this);
		}

		return hwPlatformPartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.SensorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorInstanceItemProvider sensorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.SensorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorInstanceAdapter() {
		if (sensorInstanceItemProvider == null) {
			sensorInstanceItemProvider = new SensorInstanceItemProvider(this);
		}

		return sensorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ActuatorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorInstanceItemProvider actuatorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ActuatorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorInstanceAdapter() {
		if (actuatorInstanceItemProvider == null) {
			actuatorInstanceItemProvider = new ActuatorInstanceItemProvider(this);
		}

		return actuatorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.Bridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BridgeItemProvider bridgeItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.Bridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBridgeAdapter() {
		if (bridgeItemProvider == null) {
			bridgeItemProvider = new BridgeItemProvider(this);
		}

		return bridgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.BusPortInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusPortInstanceItemProvider busPortInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.BusPortInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusPortInstanceAdapter() {
		if (busPortInstanceItemProvider == null) {
			busPortInstanceItemProvider = new BusPortInstanceItemProvider(this);
		}

		return busPortInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.LinkPortInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkPortInstanceItemProvider linkPortInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.LinkPortInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkPortInstanceAdapter() {
		if (linkPortInstanceItemProvider == null) {
			linkPortInstanceItemProvider = new LinkPortInstanceItemProvider(this);
		}

		return linkPortInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ResourceInstanceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstanceRepositoryItemProvider resourceInstanceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ResourceInstanceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstanceRepositoryAdapter() {
		if (resourceInstanceRepositoryItemProvider == null) {
			resourceInstanceRepositoryItemProvider = new ResourceInstanceRepositoryItemProvider(this);
		}

		return resourceInstanceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.ResourceInstancePart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstancePartItemProvider resourceInstancePartItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.ResourceInstancePart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstancePartAdapter() {
		if (resourceInstancePartItemProvider == null) {
			resourceInstancePartItemProvider = new ResourceInstancePartItemProvider(this);
		}

		return resourceInstancePartItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.Delegation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelegationItemProvider delegationItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.Delegation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelegationAdapter() {
		if (delegationItemProvider == null) {
			delegationItemProvider = new DelegationItemProvider(this);
		}

		return delegationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPortPart} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWPortPartItemProvider hwPortPartItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.platform.HWPortPart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWPortPartAdapter() {
		if (hwPortPartItemProvider == null) {
			hwPortPartItemProvider = new HWPortPartItemProvider(this);
		}

		return hwPortPartItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hwPlatformConfigurationItemProvider != null) hwPlatformConfigurationItemProvider.dispose();
		if (storageMemoryInstanceItemProvider != null) storageMemoryInstanceItemProvider.dispose();
		if (processingMemoryInstanceItemProvider != null) processingMemoryInstanceItemProvider.dispose();
		if (cacheInstanceItemProvider != null) cacheInstanceItemProvider.dispose();
		if (programmableLogicDeviceInstanceItemProvider != null) programmableLogicDeviceInstanceItemProvider.dispose();
		if (processorInstanceItemProvider != null) processorInstanceItemProvider.dispose();
		if (structuredResourceInstanceItemProvider != null) structuredResourceInstanceItemProvider.dispose();
		if (busItemProvider != null) busItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (hwPlatformItemProvider != null) hwPlatformItemProvider.dispose();
		if (hwPlatformPartItemProvider != null) hwPlatformPartItemProvider.dispose();
		if (sensorInstanceItemProvider != null) sensorInstanceItemProvider.dispose();
		if (actuatorInstanceItemProvider != null) actuatorInstanceItemProvider.dispose();
		if (bridgeItemProvider != null) bridgeItemProvider.dispose();
		if (busPortInstanceItemProvider != null) busPortInstanceItemProvider.dispose();
		if (linkPortInstanceItemProvider != null) linkPortInstanceItemProvider.dispose();
		if (resourceInstanceRepositoryItemProvider != null) resourceInstanceRepositoryItemProvider.dispose();
		if (resourceInstancePartItemProvider != null) resourceInstancePartItemProvider.dispose();
		if (delegationItemProvider != null) delegationItemProvider.dispose();
		if (hwPortPartItemProvider != null) hwPortPartItemProvider.dispose();
	}

}
