/*
* generated by Xtext
*/
package de.uni_paderborn.fujaba.muml.allocation.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.examples.xtext.completeocl.services.CompleteOCLGrammarAccess;
import org.eclipse.ocl.examples.xtext.essentialocl.services.EssentialOCLGrammarAccess;

@Singleton
public class AllocationSpecificationLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cOwnedImportAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cOwnedImportImportCSParserRuleCall_3_0_0 = (RuleCall)cOwnedImportAssignment_3_0.eContents().get(0);
		private final Assignment cOwnedIncludeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cOwnedIncludeIncludeCSParserRuleCall_3_1_0 = (RuleCall)cOwnedIncludeAssignment_3_1.eContents().get(0);
		private final Assignment cContextsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cContextsClassifierContextDeclCSParserRuleCall_3_2_0 = (RuleCall)cContextsAssignment_3_2.eContents().get(0);
		private final Assignment cServicesAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cServicesServiceParserRuleCall_3_3_0 = (RuleCall)cServicesAssignment_3_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cConstraintsConstraintParserRuleCall_3_4_0 = (RuleCall)cConstraintsAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cGoalAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cGoalGoalEnumRuleCall_4_0_0 = (RuleCall)cGoalAssignment_4_0.eContents().get(0);
		private final Assignment cMeasureAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMeasureMeasureFunctionParserRuleCall_4_1_0 = (RuleCall)cMeasureAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////import "platform:/resource/de.uni_paderborn.fujaba.muml.allocation.language/model/LanguageSpecificationCS.ecore#/cs" as cs
		//Specification returns cs::SpecificationCS:
		//	{cs::SpecificationCS} name=ID "{" (ownedImport+=ImportCS | ownedInclude+=IncludeCS | contexts+=ClassifierContextDeclCS
		//	| services+=Service | constraints+=Constraint)* (goal=Goal measure=MeasureFunction)? "}";
		public ParserRule getRule() { return rule; }

		//{cs::SpecificationCS} name=ID "{" (ownedImport+=ImportCS | ownedInclude+=IncludeCS | contexts+=ClassifierContextDeclCS |
		//services+=Service | constraints+=Constraint)* (goal=Goal measure=MeasureFunction)? "}"
		public Group getGroup() { return cGroup; }

		//{cs::SpecificationCS}
		public Action getSpecificationCSAction_0() { return cSpecificationCSAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(ownedImport+=ImportCS | ownedInclude+=IncludeCS | contexts+=ClassifierContextDeclCS | services+=Service |
		//constraints+=Constraint)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//ownedImport+=ImportCS
		public Assignment getOwnedImportAssignment_3_0() { return cOwnedImportAssignment_3_0; }

		//ImportCS
		public RuleCall getOwnedImportImportCSParserRuleCall_3_0_0() { return cOwnedImportImportCSParserRuleCall_3_0_0; }

		//ownedInclude+=IncludeCS
		public Assignment getOwnedIncludeAssignment_3_1() { return cOwnedIncludeAssignment_3_1; }

		//IncludeCS
		public RuleCall getOwnedIncludeIncludeCSParserRuleCall_3_1_0() { return cOwnedIncludeIncludeCSParserRuleCall_3_1_0; }

		//contexts+=ClassifierContextDeclCS
		public Assignment getContextsAssignment_3_2() { return cContextsAssignment_3_2; }

		//ClassifierContextDeclCS
		public RuleCall getContextsClassifierContextDeclCSParserRuleCall_3_2_0() { return cContextsClassifierContextDeclCSParserRuleCall_3_2_0; }

		//services+=Service
		public Assignment getServicesAssignment_3_3() { return cServicesAssignment_3_3; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_3_3_0() { return cServicesServiceParserRuleCall_3_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_3_4() { return cConstraintsAssignment_3_4; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_3_4_0() { return cConstraintsConstraintParserRuleCall_3_4_0; }

		//(goal=Goal measure=MeasureFunction)?
		public Group getGroup_4() { return cGroup_4; }

		//goal=Goal
		public Assignment getGoalAssignment_4_0() { return cGoalAssignment_4_0; }

		//Goal
		public RuleCall getGoalGoalEnumRuleCall_4_0_0() { return cGoalGoalEnumRuleCall_4_0_0; }

		//measure=MeasureFunction
		public Assignment getMeasureAssignment_4_1() { return cMeasureAssignment_4_1; }

		//MeasureFunction
		public RuleCall getMeasureMeasureFunctionParserRuleCall_4_1_0() { return cMeasureMeasureFunctionParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDimensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDimensionsQosDimensionParserRuleCall_3_0 = (RuleCall)cDimensionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Service returns cs::ServiceCS:
		//	"service" name=ID "{" dimensions+=QosDimension* "}";
		public ParserRule getRule() { return rule; }

		//"service" name=ID "{" dimensions+=QosDimension* "}"
		public Group getGroup() { return cGroup; }

		//"service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//dimensions+=QosDimension*
		public Assignment getDimensionsAssignment_3() { return cDimensionsAssignment_3; }

		//QosDimension
		public RuleCall getDimensionsQosDimensionParserRuleCall_3_0() { return cDimensionsQosDimensionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class QosDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QosDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cValueKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWeightingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeightingValueTupleDescriptorParserRuleCall_4_0 = (RuleCall)cWeightingAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDescriptorsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTupleDescriptorsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_7_0 = (RuleCall)cTupleDescriptorsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTupleDescriptorsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_8_1_0 = (RuleCall)cTupleDescriptorsAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cOclKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExpressionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExpressionModelParserRuleCall_11_0 = (RuleCall)cExpressionAssignment_11.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//QosDimension returns cs::QoSDimensionCS:
		//	"qos" name=ID "{" "value" weighting=ValueTupleDescriptor ";" "descriptors"
		//	tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
		//	expression=Model ";" "}";
		public ParserRule getRule() { return rule; }

		//"qos" name=ID "{" "value" weighting=ValueTupleDescriptor ";" "descriptors"
		//tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
		//expression=Model ";" "}"
		public Group getGroup() { return cGroup; }

		//"qos"
		public Keyword getQosKeyword_0() { return cQosKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"value"
		public Keyword getValueKeyword_3() { return cValueKeyword_3; }

		//weighting=ValueTupleDescriptor
		public Assignment getWeightingAssignment_4() { return cWeightingAssignment_4; }

		//ValueTupleDescriptor
		public RuleCall getWeightingValueTupleDescriptorParserRuleCall_4_0() { return cWeightingValueTupleDescriptorParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"descriptors"
		public Keyword getDescriptorsKeyword_6() { return cDescriptorsKeyword_6; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_7() { return cTupleDescriptorsAssignment_7; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_7_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_7_0; }

		//("," tupleDescriptors+=ComponentResourceTupleDescriptor)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_8_1() { return cTupleDescriptorsAssignment_8_1; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_8_1_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_8_1_0; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//"ocl"
		public Keyword getOclKeyword_10() { return cOclKeyword_10; }

		//expression=Model
		public Assignment getExpressionAssignment_11() { return cExpressionAssignment_11; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_11_0() { return cExpressionModelParserRuleCall_11_0; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLocationConstraintParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cResourceConstraintParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Constraint returns cs::ConstraintCS:
		//	"constraint" (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint);
		public ParserRule getRule() { return rule; }

		//"constraint" (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
		public Group getGroup() { return cGroup; }

		//"constraint"
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//LocationConstraint
		public RuleCall getLocationConstraintParserRuleCall_1_0() { return cLocationConstraintParserRuleCall_1_0; }

		//ResourceConstraint
		public RuleCall getResourceConstraintParserRuleCall_1_1() { return cResourceConstraintParserRuleCall_1_1; }

		//RequiredHardwareResourceInstanceConstraint
		public RuleCall getRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2() { return cRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2; }
	}

	public class LocationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeLocationConstraintTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptorsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTupleDescriptorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTupleDescriptorLocationTupleDescriptorParserRuleCall_4_0 = (RuleCall)cTupleDescriptorAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOclKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionModelParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//LocationConstraint returns cs::LocationConstraintCS:
		//	type=LocationConstraintType name=ID? "{" "descriptors" tupleDescriptor=LocationTupleDescriptor ";" "ocl"
		//	expression=Model ";" "}";
		public ParserRule getRule() { return rule; }

		//type=LocationConstraintType name=ID? "{" "descriptors" tupleDescriptor=LocationTupleDescriptor ";" "ocl"
		//expression=Model ";" "}"
		public Group getGroup() { return cGroup; }

		//type=LocationConstraintType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//LocationConstraintType
		public RuleCall getTypeLocationConstraintTypeEnumRuleCall_0_0() { return cTypeLocationConstraintTypeEnumRuleCall_0_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"descriptors"
		public Keyword getDescriptorsKeyword_3() { return cDescriptorsKeyword_3; }

		//tupleDescriptor=LocationTupleDescriptor
		public Assignment getTupleDescriptorAssignment_4() { return cTupleDescriptorAssignment_4; }

		//LocationTupleDescriptor
		public RuleCall getTupleDescriptorLocationTupleDescriptorParserRuleCall_4_0() { return cTupleDescriptorLocationTupleDescriptorParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"ocl"
		public Keyword getOclKeyword_6() { return cOclKeyword_6; }

		//expression=Model
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_7_0() { return cExpressionModelParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ResourceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cResourceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiredResourceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLhsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWeightingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWeightingValueTupleDescriptorParserRuleCall_4_0 = (RuleCall)cWeightingAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRhsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRhsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRhsValueTupleDescriptorParserRuleCall_7_0 = (RuleCall)cRhsAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cDescriptorsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTupleDescriptorsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_10_0 = (RuleCall)cTupleDescriptorsAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTupleDescriptorsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_11_1_0 = (RuleCall)cTupleDescriptorsAssignment_11_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cOclKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cExpressionAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cExpressionModelParserRuleCall_14_0 = (RuleCall)cExpressionAssignment_14.eContents().get(0);
		private final Keyword cSemicolonKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cRightCurlyBracketKeyword_16 = (Keyword)cGroup.eContents().get(16);
		
		//ResourceConstraint returns cs::ResourceConstraintCS:
		//	("resource" | "requiredResource") name=ID? "{" "lhs" weighting=ValueTupleDescriptor ";" "rhs" rhs=ValueTupleDescriptor
		//	";" "descriptors" tupleDescriptors+=ComponentResourceTupleDescriptor (","
		//	tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl" expression=Model ";" "}";
		public ParserRule getRule() { return rule; }

		//("resource" | "requiredResource") name=ID? "{" "lhs" weighting=ValueTupleDescriptor ";" "rhs" rhs=ValueTupleDescriptor
		//";" "descriptors" tupleDescriptors+=ComponentResourceTupleDescriptor (","
		//tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl" expression=Model ";" "}"
		public Group getGroup() { return cGroup; }

		//"resource" | "requiredResource"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"resource"
		public Keyword getResourceKeyword_0_0() { return cResourceKeyword_0_0; }

		//"requiredResource"
		public Keyword getRequiredResourceKeyword_0_1() { return cRequiredResourceKeyword_0_1; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"lhs"
		public Keyword getLhsKeyword_3() { return cLhsKeyword_3; }

		//weighting=ValueTupleDescriptor
		public Assignment getWeightingAssignment_4() { return cWeightingAssignment_4; }

		//ValueTupleDescriptor
		public RuleCall getWeightingValueTupleDescriptorParserRuleCall_4_0() { return cWeightingValueTupleDescriptorParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//"rhs"
		public Keyword getRhsKeyword_6() { return cRhsKeyword_6; }

		//rhs=ValueTupleDescriptor
		public Assignment getRhsAssignment_7() { return cRhsAssignment_7; }

		//ValueTupleDescriptor
		public RuleCall getRhsValueTupleDescriptorParserRuleCall_7_0() { return cRhsValueTupleDescriptorParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//"descriptors"
		public Keyword getDescriptorsKeyword_9() { return cDescriptorsKeyword_9; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_10() { return cTupleDescriptorsAssignment_10; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_10_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_10_0; }

		//("," tupleDescriptors+=ComponentResourceTupleDescriptor)*
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_11_1() { return cTupleDescriptorsAssignment_11_1; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_11_1_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_11_1_0; }

		//";"
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }

		//"ocl"
		public Keyword getOclKeyword_13() { return cOclKeyword_13; }

		//expression=Model
		public Assignment getExpressionAssignment_14() { return cExpressionAssignment_14; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_14_0() { return cExpressionModelParserRuleCall_14_0; }

		//";"
		public Keyword getSemicolonKeyword_15() { return cSemicolonKeyword_15; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_16() { return cRightCurlyBracketKeyword_16; }
	}

	public class RequiredHardwareResourceInstanceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredHardwareResourceInstanceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRequiredHardwareResourceInstanceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiredLocationKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptorsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTupleDescriptorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_4_0 = (RuleCall)cTupleDescriptorsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTupleDescriptorsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_5_1_0 = (RuleCall)cTupleDescriptorsAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cOclKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionModelParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//RequiredHardwareResourceInstanceConstraint returns cs::RequiredHardwareResourceInstanceConstraintCS:
		//	("requiredHardwareResourceInstance" | "requiredLocation") name=ID? "{" "descriptors"
		//	tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
		//	expression=Model ";" "}";
		public ParserRule getRule() { return rule; }

		//("requiredHardwareResourceInstance" | "requiredLocation") name=ID? "{" "descriptors"
		//tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
		//expression=Model ";" "}"
		public Group getGroup() { return cGroup; }

		//"requiredHardwareResourceInstance" | "requiredLocation"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"requiredHardwareResourceInstance"
		public Keyword getRequiredHardwareResourceInstanceKeyword_0_0() { return cRequiredHardwareResourceInstanceKeyword_0_0; }

		//"requiredLocation"
		public Keyword getRequiredLocationKeyword_0_1() { return cRequiredLocationKeyword_0_1; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"descriptors"
		public Keyword getDescriptorsKeyword_3() { return cDescriptorsKeyword_3; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_4() { return cTupleDescriptorsAssignment_4; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_4_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_4_0; }

		//("," tupleDescriptors+=ComponentResourceTupleDescriptor)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//tupleDescriptors+=ComponentResourceTupleDescriptor
		public Assignment getTupleDescriptorsAssignment_5_1() { return cTupleDescriptorsAssignment_5_1; }

		//ComponentResourceTupleDescriptor
		public RuleCall getTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_5_1_0() { return cTupleDescriptorsComponentResourceTupleDescriptorParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//"ocl"
		public Keyword getOclKeyword_7() { return cOclKeyword_7; }

		//expression=Model
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_8_0() { return cExpressionModelParserRuleCall_8_0; }

		//";"
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class LocationTupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocationTupleDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceIDParserRuleCall_1_0 = (RuleCall)cInstanceAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondInstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondInstanceIDParserRuleCall_3_0 = (RuleCall)cSecondInstanceAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LocationTupleDescriptor returns cs::LocationTupleDescriptorCS:
		//	"(" instance=ID "," secondInstance=ID ")";
		public ParserRule getRule() { return rule; }

		//"(" instance=ID "," secondInstance=ID ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//instance=ID
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }

		//ID
		public RuleCall getInstanceIDParserRuleCall_1_0() { return cInstanceIDParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//secondInstance=ID
		public Assignment getSecondInstanceAssignment_3() { return cSecondInstanceAssignment_3; }

		//ID
		public RuleCall getSecondInstanceIDParserRuleCall_3_0() { return cSecondInstanceIDParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ValueTupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueTupleDescriptor");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ValueTupleDescriptor returns cs::ValueTupleDescriptorCS:
		//	value=ID;
		public ParserRule getRule() { return rule; }

		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID
		public RuleCall getValueIDParserRuleCall_0() { return cValueIDParserRuleCall_0; }
	}

	public class ComponentResourceTupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComponentResourceTupleDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstanceIDParserRuleCall_1_0 = (RuleCall)cInstanceAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHwresinstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHwresinstanceIDParserRuleCall_3_0 = (RuleCall)cHwresinstanceAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentResourceTupleDescriptor returns cs::ComponentResourceTupleDescriptorCS:
		//	"(" instance=ID "," hwresinstance=ID ")";
		public ParserRule getRule() { return rule; }

		//"(" instance=ID "," hwresinstance=ID ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//instance=ID
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }

		//ID
		public RuleCall getInstanceIDParserRuleCall_1_0() { return cInstanceIDParserRuleCall_1_0; }

		//","
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//hwresinstance=ID
		public Assignment getHwresinstanceAssignment_3() { return cHwresinstanceAssignment_3; }

		//ID
		public RuleCall getHwresinstanceIDParserRuleCall_3_0() { return cHwresinstanceIDParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MeasureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasureFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServicesServiceCSCrossReference_1_0 = (CrossReference)cServicesAssignment_1.eContents().get(0);
		private final RuleCall cServicesServiceCSIDParserRuleCall_1_0_1 = (RuleCall)cServicesServiceCSCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cServicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cServicesServiceCSCrossReference_2_1_0 = (CrossReference)cServicesAssignment_2_1.eContents().get(0);
		private final RuleCall cServicesServiceCSIDParserRuleCall_2_1_0_1 = (RuleCall)cServicesServiceCSCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MeasureFunction returns cs::MeasureFunctionCS:
		//	"measure" services+=[cs::ServiceCS] ("+" services+=[cs::ServiceCS])* ";";
		public ParserRule getRule() { return rule; }

		//"measure" services+=[cs::ServiceCS] ("+" services+=[cs::ServiceCS])* ";"
		public Group getGroup() { return cGroup; }

		//"measure"
		public Keyword getMeasureKeyword_0() { return cMeasureKeyword_0; }

		//services+=[cs::ServiceCS]
		public Assignment getServicesAssignment_1() { return cServicesAssignment_1; }

		//[cs::ServiceCS]
		public CrossReference getServicesServiceCSCrossReference_1_0() { return cServicesServiceCSCrossReference_1_0; }

		//ID
		public RuleCall getServicesServiceCSIDParserRuleCall_1_0_1() { return cServicesServiceCSIDParserRuleCall_1_0_1; }

		//("+" services+=[cs::ServiceCS])*
		public Group getGroup_2() { return cGroup_2; }

		//"+"
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }

		//services+=[cs::ServiceCS]
		public Assignment getServicesAssignment_2_1() { return cServicesAssignment_2_1; }

		//[cs::ServiceCS]
		public CrossReference getServicesServiceCSCrossReference_2_1_0() { return cServicesServiceCSCrossReference_2_1_0; }

		//ID
		public RuleCall getServicesServiceCSIDParserRuleCall_2_1_0_1() { return cServicesServiceCSIDParserRuleCall_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	public class LocationConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LocationConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSAME_LOCATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSAME_LOCATIONSameLocationKeyword_0_0 = (Keyword)cSAME_LOCATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSAME_LOCATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSAME_LOCATIONCollocationKeyword_1_0 = (Keyword)cSAME_LOCATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENT_LOCATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIFFERENT_LOCATIONDifferentLocationKeyword_2_0 = (Keyword)cDIFFERENT_LOCATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENT_LOCATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIFFERENT_LOCATIONSeparateLocationKeyword_3_0 = (Keyword)cDIFFERENT_LOCATIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LocationConstraintType returns cs::LocationConstraintTypes:
		//	SAME_LOCATION="sameLocation" | SAME_LOCATION="collocation" | DIFFERENT_LOCATION="differentLocation" |
		//	DIFFERENT_LOCATION="separateLocation";
		public EnumRule getRule() { return rule; }

		//SAME_LOCATION="sameLocation" | SAME_LOCATION="collocation" | DIFFERENT_LOCATION="differentLocation" |
		//DIFFERENT_LOCATION="separateLocation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SAME_LOCATION="sameLocation"
		public EnumLiteralDeclaration getSAME_LOCATIONEnumLiteralDeclaration_0() { return cSAME_LOCATIONEnumLiteralDeclaration_0; }

		//"sameLocation"
		public Keyword getSAME_LOCATIONSameLocationKeyword_0_0() { return cSAME_LOCATIONSameLocationKeyword_0_0; }

		//SAME_LOCATION="collocation"
		public EnumLiteralDeclaration getSAME_LOCATIONEnumLiteralDeclaration_1() { return cSAME_LOCATIONEnumLiteralDeclaration_1; }

		//"collocation"
		public Keyword getSAME_LOCATIONCollocationKeyword_1_0() { return cSAME_LOCATIONCollocationKeyword_1_0; }

		//DIFFERENT_LOCATION="differentLocation"
		public EnumLiteralDeclaration getDIFFERENT_LOCATIONEnumLiteralDeclaration_2() { return cDIFFERENT_LOCATIONEnumLiteralDeclaration_2; }

		//"differentLocation"
		public Keyword getDIFFERENT_LOCATIONDifferentLocationKeyword_2_0() { return cDIFFERENT_LOCATIONDifferentLocationKeyword_2_0; }

		//DIFFERENT_LOCATION="separateLocation"
		public EnumLiteralDeclaration getDIFFERENT_LOCATIONEnumLiteralDeclaration_3() { return cDIFFERENT_LOCATIONEnumLiteralDeclaration_3; }

		//"separateLocation"
		public Keyword getDIFFERENT_LOCATIONSeparateLocationKeyword_3_0() { return cDIFFERENT_LOCATIONSeparateLocationKeyword_3_0; }
	}

	public class GoalElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINMinKeyword_0_0 = (Keyword)cMINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAXMaxKeyword_1_0 = (Keyword)cMAXEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Goal returns cs::Goal:
		//	MIN="min" | MAX="max";
		public EnumRule getRule() { return rule; }

		//MIN="min" | MAX="max"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MIN="min"
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_0() { return cMINEnumLiteralDeclaration_0; }

		//"min"
		public Keyword getMINMinKeyword_0_0() { return cMINMinKeyword_0_0; }

		//MAX="max"
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_1() { return cMAXEnumLiteralDeclaration_1; }

		//"max"
		public Keyword getMAXMaxKeyword_1_0() { return cMAXMaxKeyword_1_0; }
	}
	
	private final SpecificationElements pSpecification;
	private final ServiceElements pService;
	private final QosDimensionElements pQosDimension;
	private final ConstraintElements pConstraint;
	private final LocationConstraintElements pLocationConstraint;
	private final ResourceConstraintElements pResourceConstraint;
	private final RequiredHardwareResourceInstanceConstraintElements pRequiredHardwareResourceInstanceConstraint;
	private final LocationConstraintTypeElements unknownRuleLocationConstraintType;
	private final LocationTupleDescriptorElements pLocationTupleDescriptor;
	private final ValueTupleDescriptorElements pValueTupleDescriptor;
	private final ComponentResourceTupleDescriptorElements pComponentResourceTupleDescriptor;
	private final MeasureFunctionElements pMeasureFunction;
	private final GoalElements unknownRuleGoal;
	
	private final Grammar grammar;

	private final CompleteOCLGrammarAccess gaCompleteOCL;

	@Inject
	public AllocationSpecificationLanguageGrammarAccess(GrammarProvider grammarProvider,
		CompleteOCLGrammarAccess gaCompleteOCL) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCompleteOCL = gaCompleteOCL;
		this.pSpecification = new SpecificationElements();
		this.pService = new ServiceElements();
		this.pQosDimension = new QosDimensionElements();
		this.pConstraint = new ConstraintElements();
		this.pLocationConstraint = new LocationConstraintElements();
		this.pResourceConstraint = new ResourceConstraintElements();
		this.pRequiredHardwareResourceInstanceConstraint = new RequiredHardwareResourceInstanceConstraintElements();
		this.unknownRuleLocationConstraintType = new LocationConstraintTypeElements();
		this.pLocationTupleDescriptor = new LocationTupleDescriptorElements();
		this.pValueTupleDescriptor = new ValueTupleDescriptorElements();
		this.pComponentResourceTupleDescriptor = new ComponentResourceTupleDescriptorElements();
		this.pMeasureFunction = new MeasureFunctionElements();
		this.unknownRuleGoal = new GoalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_paderborn.fujaba.muml.allocation.language.AllocationSpecificationLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CompleteOCLGrammarAccess getCompleteOCLGrammarAccess() {
		return gaCompleteOCL;
	}

	
	////import "platform:/resource/de.uni_paderborn.fujaba.muml.allocation.language/model/LanguageSpecificationCS.ecore#/cs" as cs
	//Specification returns cs::SpecificationCS:
	//	{cs::SpecificationCS} name=ID "{" (ownedImport+=ImportCS | ownedInclude+=IncludeCS | contexts+=ClassifierContextDeclCS
	//	| services+=Service | constraints+=Constraint)* (goal=Goal measure=MeasureFunction)? "}";
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//Service returns cs::ServiceCS:
	//	"service" name=ID "{" dimensions+=QosDimension* "}";
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//QosDimension returns cs::QoSDimensionCS:
	//	"qos" name=ID "{" "value" weighting=ValueTupleDescriptor ";" "descriptors"
	//	tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
	//	expression=Model ";" "}";
	public QosDimensionElements getQosDimensionAccess() {
		return pQosDimension;
	}
	
	public ParserRule getQosDimensionRule() {
		return getQosDimensionAccess().getRule();
	}

	//Constraint returns cs::ConstraintCS:
	//	"constraint" (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint);
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//LocationConstraint returns cs::LocationConstraintCS:
	//	type=LocationConstraintType name=ID? "{" "descriptors" tupleDescriptor=LocationTupleDescriptor ";" "ocl"
	//	expression=Model ";" "}";
	public LocationConstraintElements getLocationConstraintAccess() {
		return pLocationConstraint;
	}
	
	public ParserRule getLocationConstraintRule() {
		return getLocationConstraintAccess().getRule();
	}

	//ResourceConstraint returns cs::ResourceConstraintCS:
	//	("resource" | "requiredResource") name=ID? "{" "lhs" weighting=ValueTupleDescriptor ";" "rhs" rhs=ValueTupleDescriptor
	//	";" "descriptors" tupleDescriptors+=ComponentResourceTupleDescriptor (","
	//	tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl" expression=Model ";" "}";
	public ResourceConstraintElements getResourceConstraintAccess() {
		return pResourceConstraint;
	}
	
	public ParserRule getResourceConstraintRule() {
		return getResourceConstraintAccess().getRule();
	}

	//RequiredHardwareResourceInstanceConstraint returns cs::RequiredHardwareResourceInstanceConstraintCS:
	//	("requiredHardwareResourceInstance" | "requiredLocation") name=ID? "{" "descriptors"
	//	tupleDescriptors+=ComponentResourceTupleDescriptor ("," tupleDescriptors+=ComponentResourceTupleDescriptor)* ";" "ocl"
	//	expression=Model ";" "}";
	public RequiredHardwareResourceInstanceConstraintElements getRequiredHardwareResourceInstanceConstraintAccess() {
		return pRequiredHardwareResourceInstanceConstraint;
	}
	
	public ParserRule getRequiredHardwareResourceInstanceConstraintRule() {
		return getRequiredHardwareResourceInstanceConstraintAccess().getRule();
	}

	//enum LocationConstraintType returns cs::LocationConstraintTypes:
	//	SAME_LOCATION="sameLocation" | SAME_LOCATION="collocation" | DIFFERENT_LOCATION="differentLocation" |
	//	DIFFERENT_LOCATION="separateLocation";
	public LocationConstraintTypeElements getLocationConstraintTypeAccess() {
		return unknownRuleLocationConstraintType;
	}
	
	public EnumRule getLocationConstraintTypeRule() {
		return getLocationConstraintTypeAccess().getRule();
	}

	//LocationTupleDescriptor returns cs::LocationTupleDescriptorCS:
	//	"(" instance=ID "," secondInstance=ID ")";
	public LocationTupleDescriptorElements getLocationTupleDescriptorAccess() {
		return pLocationTupleDescriptor;
	}
	
	public ParserRule getLocationTupleDescriptorRule() {
		return getLocationTupleDescriptorAccess().getRule();
	}

	//ValueTupleDescriptor returns cs::ValueTupleDescriptorCS:
	//	value=ID;
	public ValueTupleDescriptorElements getValueTupleDescriptorAccess() {
		return pValueTupleDescriptor;
	}
	
	public ParserRule getValueTupleDescriptorRule() {
		return getValueTupleDescriptorAccess().getRule();
	}

	//ComponentResourceTupleDescriptor returns cs::ComponentResourceTupleDescriptorCS:
	//	"(" instance=ID "," hwresinstance=ID ")";
	public ComponentResourceTupleDescriptorElements getComponentResourceTupleDescriptorAccess() {
		return pComponentResourceTupleDescriptor;
	}
	
	public ParserRule getComponentResourceTupleDescriptorRule() {
		return getComponentResourceTupleDescriptorAccess().getRule();
	}

	//MeasureFunction returns cs::MeasureFunctionCS:
	//	"measure" services+=[cs::ServiceCS] ("+" services+=[cs::ServiceCS])* ";";
	public MeasureFunctionElements getMeasureFunctionAccess() {
		return pMeasureFunction;
	}
	
	public ParserRule getMeasureFunctionRule() {
		return getMeasureFunctionAccess().getRule();
	}

	//enum Goal returns cs::Goal:
	//	MIN="min" | MAX="max";
	public GoalElements getGoalAccess() {
		return unknownRuleGoal;
	}
	
	public EnumRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	////generate completeOCL "http://www.eclipse.org/ocl/examples/xtext/completeocl/CompleteOCL"
	//CompleteOCLDocumentCS:
	//	(ownedImport+=ImportCS | ownedInclude+=IncludeCS | ownedLibrary+=LibraryCS)* (packages+=PackageDeclarationCS |
	//	contexts+=ContextDeclCS)*;
	public CompleteOCLGrammarAccess.CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return gaCompleteOCL.getCompleteOCLDocumentCSAccess();
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}

	//// Never forward parsed; just provides a placeholder
	//terminal UNQUOTED_STRING: //  for reverse serialisation of embedded OCL 
	//	"£$%^£$%^";
	public TerminalRule getUNQUOTED_STRINGRule() {
		return gaCompleteOCL.getUNQUOTED_STRINGRule();
	} 

	//CompleteOCLNavigationOperatorCS returns essentialocl::NavigationOperatorCS:
	//	name=("^" | "^^");
	public CompleteOCLGrammarAccess.CompleteOCLNavigationOperatorCSElements getCompleteOCLNavigationOperatorCSAccess() {
		return gaCompleteOCL.getCompleteOCLNavigationOperatorCSAccess();
	}
	
	public ParserRule getCompleteOCLNavigationOperatorCSRule() {
		return getCompleteOCLNavigationOperatorCSAccess().getRule();
	}

	//NavigationOperatorCS returns essentialocl::NavigationOperatorCS:
	//	EssentialOCLNavigationOperatorCS | CompleteOCLNavigationOperatorCS;
	public CompleteOCLGrammarAccess.NavigationOperatorCSElements getNavigationOperatorCSAccess() {
		return gaCompleteOCL.getNavigationOperatorCSAccess();
	}
	
	public ParserRule getNavigationOperatorCSRule() {
		return getNavigationOperatorCSAccess().getRule();
	}

	////|	'package'
	////|	'post'
	////|	'pre'
	////|	'static'
	//UnrestrictedName returns ecore::EString:
	//	EssentialOCLUnrestrictedName //| 'body'
	//	//| 'context'
	//	//| 'def'
	//	//|	'endpackage'
	//	//| 'inv'
	//	| "derive" | "import" | "include" | "init" | "library";
	public CompleteOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaCompleteOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	//PrimitiveTypeIdentifier:
	//	"Boolean" | "Integer" | "Real" | "String" | "UnlimitedNatural" | "OclAny" | "OclInvalid" | "OclMessage" | "OclState" |
	//	"OclVoid";
	public CompleteOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaCompleteOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	//ClassifierContextDeclCS:
	//	"context" selfName=UnrestrictedName? pathName=PathNameCS ("inv" invariants+=ConstraintCS | definitions+=DefCS)+;
	public CompleteOCLGrammarAccess.ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return gaCompleteOCL.getClassifierContextDeclCSAccess();
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}

	//ConstraintCS returns base::ConstraintCS:
	//	(name=UnrestrictedName ("(" messageSpecification=SpecificationCS ")")?)? ":" specification=SpecificationCS;
	public CompleteOCLGrammarAccess.ConstraintCSElements getConstraintCSAccess() {
		return gaCompleteOCL.getConstraintCSAccess();
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}

	//ContextDeclCS:
	//	PropertyContextDeclCS | ClassifierContextDeclCS | OperationContextDeclCS;
	public CompleteOCLGrammarAccess.ContextDeclCSElements getContextDeclCSAccess() {
		return gaCompleteOCL.getContextDeclCSAccess();
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}

	//DefCS:
	//	DefOperationCS | DefPropertyCS;
	public CompleteOCLGrammarAccess.DefCSElements getDefCSAccess() {
		return gaCompleteOCL.getDefCSAccess();
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}

	//DefOperationCS:
	//	static?="static"? "def" UnrestrictedName? ":" name=UnrestrictedName "(" (parameters+=DefParameterCS (","
	//	parameters+=DefParameterCS)*)? ")" ":" ownedType=TypeExpCS? "=" specification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefOperationCSElements getDefOperationCSAccess() {
		return gaCompleteOCL.getDefOperationCSAccess();
	}
	
	public ParserRule getDefOperationCSRule() {
		return getDefOperationCSAccess().getRule();
	}

	//DefParameterCS returns base::ParameterCS:
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public CompleteOCLGrammarAccess.DefParameterCSElements getDefParameterCSAccess() {
		return gaCompleteOCL.getDefParameterCSAccess();
	}
	
	public ParserRule getDefParameterCSRule() {
		return getDefParameterCSAccess().getRule();
	}

	//DefPropertyCS:
	//	static?="static"? "def" UnrestrictedName? ":" name=UnrestrictedName ":" ownedType=TypeExpCS "="
	//	specification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefPropertyCSElements getDefPropertyCSAccess() {
		return gaCompleteOCL.getDefPropertyCSAccess();
	}
	
	public ParserRule getDefPropertyCSRule() {
		return getDefPropertyCSAccess().getRule();
	}

	//ImportCS returns base::ImportCS:
	//	"import" (name=Identifier ":")? pathName=URIPathNameCS (all?="::" "*")?;
	public CompleteOCLGrammarAccess.ImportCSElements getImportCSAccess() {
		return gaCompleteOCL.getImportCSAccess();
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	//IncludeCS:
	//	"include" namespace=[pivot::Namespace|URI];
	public CompleteOCLGrammarAccess.IncludeCSElements getIncludeCSAccess() {
		return gaCompleteOCL.getIncludeCSAccess();
	}
	
	public ParserRule getIncludeCSRule() {
		return getIncludeCSAccess().getRule();
	}

	//LibraryCS returns base::LibraryCS:
	//	"library" package=[pivot::Package|URI];
	public CompleteOCLGrammarAccess.LibraryCSElements getLibraryCSAccess() {
		return gaCompleteOCL.getLibraryCSAccess();
	}
	
	public ParserRule getLibraryCSRule() {
		return getLibraryCSAccess().getRule();
	}

	//OperationContextDeclCS:
	//	"context" pathName=PathNameCS "(" (parameters+=ParameterCS ("," parameters+=ParameterCS)*)? ")" ":"
	//	ownedType=TypeExpCS? ("pre" preconditions+=ConstraintCS | "post" postconditions+=ConstraintCS | "body"
	//	UnrestrictedName? ":" bodies+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return gaCompleteOCL.getOperationContextDeclCSAccess();
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}

	//PackageDeclarationCS:
	//	"package" pathName=PathNameCS contexts+=ContextDeclCS* "endpackage";
	public CompleteOCLGrammarAccess.PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return gaCompleteOCL.getPackageDeclarationCSAccess();
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}

	//ParameterCS returns base::ParameterCS:
	//	(name=UnrestrictedName ":")? ownedType=TypeExpCS;
	public CompleteOCLGrammarAccess.ParameterCSElements getParameterCSAccess() {
		return gaCompleteOCL.getParameterCSAccess();
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	//PropertyContextDeclCS:
	//	"context" pathName=PathNameCS ":" ownedType=TypeExpCS? ("derive" derivedInvariants+=ConstraintCS | "init" ":"
	//	defaultExpressions+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return gaCompleteOCL.getPropertyContextDeclCSAccess();
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}

	//SpecificationCS returns essentialocl::ExpSpecificationCS:
	//	ownedExpression=ExpCS | exprString=UNQUOTED_STRING;
	public CompleteOCLGrammarAccess.SpecificationCSElements getSpecificationCSAccess() {
		return gaCompleteOCL.getSpecificationCSAccess();
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	////	EssentialOCL overrides
	////---------------------------------------------------------------------------------
	//NavigatingArgExpCS returns essentialocl::ExpCS:
	//	{OCLMessageArgCS} "?" | ExpCS;
	public CompleteOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaCompleteOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//Model returns ContextCS:
	//	ownedExpression=ExpCS;
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaCompleteOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\");
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaCompleteOCL.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaCompleteOCL.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	"\"" (ESCAPED_CHARACTER | !("\\" | "\""))* "\"";
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaCompleteOCL.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"\'" (ESCAPED_CHARACTER | !("\\" | "\'"))* "\'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaCompleteOCL.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/\'"->"\'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaCompleteOCL.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | "0".."9")*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaCompleteOCL.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaCompleteOCL.getESCAPED_IDRule();
	} 

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public EssentialOCLGrammarAccess.IDElements getIDAccess() {
		return gaCompleteOCL.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//// String to allow diverse re-use
	//// multiple leading zeroes occur as floating point fractional part
	//terminal INT:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaCompleteOCL.getINTRule();
	} 

	//LOWER returns ecore::EInt:
	//	INT;
	public EssentialOCLGrammarAccess.LOWERElements getLOWERAccess() {
		return gaCompleteOCL.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	//UPPER returns ecore::EInt:
	//	INT | "*";
	public EssentialOCLGrammarAccess.UPPERElements getUPPERAccess() {
		return gaCompleteOCL.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//// Not terminal to allow parser backtracking to sort out "5..7"
	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//NUMBER_LITERAL returns BigNumber:
	//	INT;
	public EssentialOCLGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaCompleteOCL.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaCompleteOCL.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaCompleteOCL.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaCompleteOCL.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaCompleteOCL.getANY_OTHERRule();
	} 

	//URI:
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.URIElements getURIAccess() {
		return gaCompleteOCL.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//EssentialOCLReservedKeyword:
	//	"and" | "else" | "endif" | "if" | "implies" | "in" | "let" | "not" | "or" | "then" | "xor";
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaCompleteOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	//EssentialOCLUnaryOperatorCS returns UnaryOperatorCS:
	//	name=("-" | "not");
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorCSElements getEssentialOCLUnaryOperatorCSAccess() {
		return gaCompleteOCL.getEssentialOCLUnaryOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorCSRule() {
		return getEssentialOCLUnaryOperatorCSAccess().getRule();
	}

	//EssentialOCLInfixOperatorCS returns BinaryOperatorCS:
	//	name=("*" | "/" | "+" | "-" | ">" | "<" | ">=" | "<=" | "=" | "<>" | "and" | "or" | "xor" | "implies");
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorCSElements getEssentialOCLInfixOperatorCSAccess() {
		return gaCompleteOCL.getEssentialOCLInfixOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorCSRule() {
		return getEssentialOCLInfixOperatorCSAccess().getRule();
	}

	//EssentialOCLNavigationOperatorCS returns NavigationOperatorCS:
	//	name=("." | "->");
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorCSElements getEssentialOCLNavigationOperatorCSAccess() {
		return gaCompleteOCL.getEssentialOCLNavigationOperatorCSAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorCSRule() {
		return getEssentialOCLNavigationOperatorCSAccess().getRule();
	}

	//Identifier:
	//	ID;
	public EssentialOCLGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaCompleteOCL.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public EssentialOCLGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaCompleteOCL.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BinaryOperatorCS:
	//	InfixOperatorCS | NavigationOperatorCS;
	public EssentialOCLGrammarAccess.BinaryOperatorCSElements getBinaryOperatorCSAccess() {
		return gaCompleteOCL.getBinaryOperatorCSAccess();
	}
	
	public ParserRule getBinaryOperatorCSRule() {
		return getBinaryOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	//InfixOperatorCS returns BinaryOperatorCS:
	//	EssentialOCLInfixOperatorCS;
	public EssentialOCLGrammarAccess.InfixOperatorCSElements getInfixOperatorCSAccess() {
		return gaCompleteOCL.getInfixOperatorCSAccess();
	}
	
	public ParserRule getInfixOperatorCSRule() {
		return getInfixOperatorCSAccess().getRule();
	}

	//// Intended to be overrideable
	//UnaryOperatorCS:
	//	EssentialOCLUnaryOperatorCS;
	public EssentialOCLGrammarAccess.UnaryOperatorCSElements getUnaryOperatorCSAccess() {
		return gaCompleteOCL.getUnaryOperatorCSAccess();
	}
	
	public ParserRule getUnaryOperatorCSRule() {
		return getUnaryOperatorCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	//EssentialOCLUnrestrictedName returns ecore::EString:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaCompleteOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	//EssentialOCLUnreservedName returns ecore::EString:
	//	UnrestrictedName | CollectionTypeIdentifier | PrimitiveTypeIdentifier | "Tuple";
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaCompleteOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//// Intended to be overridden
	//UnreservedName returns ecore::EString:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaCompleteOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//PathNameCS returns base::PathNameCS:
	//	path+=FirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaCompleteOCL.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS returns base::PathElementCS:
	//	element=[pivot::NamedElement|UnrestrictedName];
	public EssentialOCLGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaCompleteOCL.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS returns base::PathElementCS:
	//	element=[pivot::NamedElement|UnreservedName];
	public EssentialOCLGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaCompleteOCL.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//URIPathNameCS returns base::PathNameCS:
	//	path+=URIFirstPathElementCS ("::" path+=NextPathElementCS)*;
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaCompleteOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS returns base::PathElementCS:
	//	element=[pivot::NamedElement|UnrestrictedName] | {base::PathElementWithURICS} element=[pivot::Namespace|URI];
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaCompleteOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	//PrimitiveTypeCS returns base::PrimitiveTypeRefCS:
	//	name=PrimitiveTypeIdentifier;
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaCompleteOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier returns ecore::EString:
	//	"Set" | "Bag" | "Sequence" | "Collection" | "OrderedSet";
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaCompleteOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ("(" ownedType=TypeExpCS ")")?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaCompleteOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MultiplicityBoundsCS returns base::MultiplicityBoundsCS:
	//	lowerBound=LOWER (".." upperBound=UPPER)?;
	public EssentialOCLGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaCompleteOCL.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS returns base::MultiplicityCS:
	//	"[" (MultiplicityBoundsCS | MultiplicityStringCS) "]";
	public EssentialOCLGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaCompleteOCL.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS returns base::MultiplicityStringCS:
	//	stringBounds=("*" | "+" | "?");
	public EssentialOCLGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaCompleteOCL.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//TupleTypeCS returns base::TupleTypeCS:
	//	name="Tuple" ("(" (ownedParts+=TuplePartCS ("," ownedParts+=TuplePartCS)*)? ")")?;
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaCompleteOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS returns base::TuplePartCS:
	//	name=UnrestrictedName ":" ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaCompleteOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS "{" (ownedParts+=CollectionLiteralPartCS ("," ownedParts+=CollectionLiteralPartCS)*)? "}";
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaCompleteOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	expressionCS=ExpCS (".." lastExpressionCS=ExpCS)?;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaCompleteOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//ConstructorPartCS:
	//	property=[pivot::Property|UnrestrictedName] "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.ConstructorPartCSElements getConstructorPartCSAccess() {
		return gaCompleteOCL.getConstructorPartCSAccess();
	}
	
	public ParserRule getConstructorPartCSRule() {
		return getConstructorPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS | UnlimitedNaturalLiteralExpCS | InvalidLiteralExpCS |
	//	NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaCompleteOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	"Tuple" "{" ownedParts+=TupleLiteralPartCS ("," ownedParts+=TupleLiteralPartCS)* "}";
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaCompleteOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaCompleteOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	name=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaCompleteOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	name+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaCompleteOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	name="true" | name="false";
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaCompleteOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} "*";
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaCompleteOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} "invalid";
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaCompleteOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} "null";
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaCompleteOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS returns base::TypedRefCS:
	//	PrimitiveTypeCS | CollectionTypeCS | TupleTypeCS;
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaCompleteOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS returns base::TypedRefCS:
	//	TypeLiteralCS multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaCompleteOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaCompleteOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	pathName=PathNameCS;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaCompleteOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS returns base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS) multiplicity=MultiplicityCS?;
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaCompleteOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Expressions
	////---------------------------------------------------------------------
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	////  that let is right associative, whereas infix operators are left associative.
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//// is
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	//ExpCS:
	//	PrefixedExpCS ({InfixExpCS.ownedExpression+=current} ownedOperator+=BinaryOperatorCS (ownedExpression+=PrefixedExpCS
	//	(ownedOperator+=BinaryOperatorCS ownedExpression+=PrefixedExpCS)* (ownedOperator+=BinaryOperatorCS
	//	ownedExpression+=LetExpCS)? | ownedExpression+=LetExpCS))? | {PrefixExpCS} ownedOperator+=UnaryOperatorCS+
	//	ownedExpression=LetExpCS | LetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaCompleteOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	//PrefixedExpCS returns ExpCS:
	//	{PrefixExpCS} ownedOperator+=UnaryOperatorCS+ ownedExpression=PrimaryExpCS | PrimaryExpCS;
	public EssentialOCLGrammarAccess.PrefixedExpCSElements getPrefixedExpCSAccess() {
		return gaCompleteOCL.getPrefixedExpCSAccess();
	}
	
	public ParserRule getPrefixedExpCSRule() {
		return getPrefixedExpCSAccess().getRule();
	}

	//PrimaryExpCS returns ExpCS:
	//	NestedExpCS | IfExpCS | SelfExpCS | PrimitiveLiteralExpCS | TupleLiteralExpCS | CollectionLiteralExpCS |
	//	TypeLiteralExpCS | {NameExpCS} pathName=PathNameCS ({IndexExpCS.nameExp=current} "[" firstIndexes+=ExpCS (","
	//	firstIndexes+=ExpCS)* "]" ("[" secondIndexes+=ExpCS ("," secondIndexes+=ExpCS)* "]")? (atPre?="@" "pre")? |
	//	{ConstructorExpCS.nameExp=current} "{" ((ownedParts+=ConstructorPartCS ("," ownedParts+=ConstructorPartCS)*)? |
	//	value=StringLiteral) "}" | (atPre?="@" "pre")? ({InvocationExpCS.nameExp=current} "(" (argument+=NavigatingArgCS
	//	argument+=NavigatingCommaArgCS* (argument+=NavigatingSemiArgCS argument+=NavigatingCommaArgCS*)?
	//	(argument+=NavigatingBarArgCS argument+=NavigatingCommaArgCS*)?)? ")")?);
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaCompleteOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingArgCS:
	//	name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaCompleteOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingBarArgCS returns NavigatingArgCS:
	//	prefix="|" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaCompleteOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingCommaArgCS returns NavigatingArgCS:
	//	prefix="," name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaCompleteOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	//NavigatingSemiArgCS returns NavigatingArgCS:
	//	prefix=";" name=NavigatingArgExpCS (":" ownedType=TypeExpCS ("=" init=ExpCS)?)?;
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaCompleteOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//IfExpCS:
	//	"if" condition=ExpCS "then" thenExpression=ExpCS "else" elseExpression=ExpCS "endif";
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaCompleteOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	//LetExpCS:
	//	"let" variable+=LetVariableCS ("," variable+=LetVariableCS)* "in" in=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaCompleteOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=UnrestrictedName (":" ownedType=TypeExpCS)? "=" initExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaCompleteOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	"(" source=ExpCS ")";
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaCompleteOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} "self";
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaCompleteOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}
}
