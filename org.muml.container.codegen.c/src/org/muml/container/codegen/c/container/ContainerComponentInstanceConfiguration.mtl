[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given Container.
 */]
[module ContainerComponentInstanceConfiguration('http://www.muml.org/pim/connector/1.0.0',
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/core/expressions/common/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0',
				'http://www.opendds.org/modeling/schemas/DCPS/1.0',
				'http://www.opendds.org/modeling/schemas/Core/1.0',
				'http://www.opendds.org/modeling/schemas/Application/1.0',
				'http://www.opendds.org/modeling/schemas/Topics/1.0')/]


[import org::muml::codegen::componenttype::c::queries::stringQueries/]
[import org::muml::codegen::componenttype::c::queries::modelQueries/]
[import org::muml::codegen::componenttype::c::queries::ContainerQueries/]

[import org::muml::container::codegen::c::queries::containerStringQueries/]
[import org::muml::container::codegen::c::container::local::LocalBuilder/]
[import org::muml::container::codegen::c::container::dds::DDSBuilder/]

[template public generateCreateMethodForComponentInstances(container:ComponentContainer, cicfgs:Collection(ContainerComponentInstanceConfiguration))]
	[container.componentType.getClassName()/]* [container.componentType.getContainerComponentCreateMethodName()/](uint8_T ID){
	struct [componentType.getBuilderStructName()/] b = INIT_BUILDER;
	switch(ID){
	[for (componentInstanceCfg : ContainerComponentInstanceConfiguration | cicfgs)]
		case [componentInstanceCfg.componentInstance.getIdentifierVariableName()/]:
			b.ID = ID;
			[for (cPort : ContinuousPort | container.componentType.ports->filter(ContinuousPort))]
				b.[getVariableName(cPort)/]AccessFunction=&[componentInstanceCfg.componentInstance.getIdentifierVariableName()/][getVariableName(cPort)/]accessCommand;
			[/for]
			[for (portCfg : PortInstanceConfiguration | componentInstanceCfg.portInstanceConfigurations)]
				[if (portCfg.oclIsKindOf(PortInstanceConfiguration_Local))]
					b.[portCfg.portInstance.portType.name.toUpper()/] = PORT_ACTIVE;
					b.create[portCfg.portInstance.portType.name.toUpper()/]Handle = &[portCfg.portInstance.portType.getMethodNameForLocalPortBuilder()/];
					b.[portCfg.portInstance.portType.name.toUpper()/]_op.local_option.pubID = [portCfg.oclAsType(PortInstanceConfiguration_Local).ownID/];
					b.[portCfg.portInstance.portType.name.toUpper()/]_op.local_option.subID = [portCfg.oclAsType(PortInstanceConfiguration_Local).writersID/];
				[/if]
				[if (portCfg.oclIsKindOf(PortInstanceConfiguration_DDS))]
					b.[portCfg.portInstance.portType.name.toUpper()/] = PORT_UNCONNECTED;
					b.create[portCfg.portInstance.portType.name.toUpper()/]Handle = &[portCfg.portInstance.portType.getMethodNameForDDSPortBuilder()/];
					b.[portCfg.portInstance.portType.name.toUpper()/]_op.dds_option.domainID = [portCfg.oclAsType(PortInstanceConfiguration_DDS).domainID/];
					b.[portCfg.portInstance.portType.name.toUpper()/]_op.dds_option.partition = [portCfg.oclAsType(PortInstanceConfiguration_DDS).partitionID/];
				[/if]
			[/for]
		break;
	[/for]	
	default:
		break;
	}
	return MCC_[container.componentType.getClassName()/]_Builder(&b);
	}
[/template]	


[template public generateAccessCommandStubs(container:ComponentContainer, cicfgs:Collection(ContainerComponentInstanceConfiguration))]
[for (componentInstanceCfg : ContainerComponentInstanceConfiguration | cicfgs)]
	[for (cPort : ContinuousPort | container.componentType.ports->filter(ContinuousPort))]
	[let filename : String = componentInstanceCfg.componentInstance.getIdentifierVariableName()+getVariableName(cPort)+'accessCommand']
	[file ('APImappings/'+filename+'.h', false, 'Utf8')]
		// [protected ('FORINCLUDES')]
 	
 		// [/protected]
		#include "../types/standardTypes.h"
		#include "../types/customTypes.h"
		void [componentInstanceCfg.componentInstance.getIdentifierVariableName()/][getVariableName(cPort)/]accessCommand([getTypeName(cPort.dataType)/]* [cPort.name/]);
		// [protected ('API')]
 	
 		// [/protected]
	[/file]	
	[file ('APImappings/'+filename+'.c', false, 'Cp1252')]
	#include "[filename+'.h'/]"
	void [componentInstanceCfg.componentInstance.getIdentifierVariableName()/][getVariableName(cPort)/]accessCommand([getTypeName(cPort.dataType)/]* [cPort.name/]){
		// [protected ('API')]
 	
 		// [/protected]
	}
	[/file]
	[/let]
	[/for]
[/for]

[/template]	


