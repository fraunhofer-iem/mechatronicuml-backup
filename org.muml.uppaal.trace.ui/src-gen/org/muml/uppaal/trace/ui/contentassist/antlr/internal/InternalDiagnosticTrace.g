/*
 * generated by Xtext
 */
grammar InternalDiagnosticTrace;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.muml.uppaal.trace.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.muml.uppaal.trace.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.muml.uppaal.trace.services.DiagnosticTraceGrammarAccess;

}

@parser::members {
 
 	private DiagnosticTraceGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DiagnosticTraceGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTraceRepository
entryRuleTraceRepository 
:
{ before(grammarAccess.getTraceRepositoryRule()); }
	 ruleTraceRepository
{ after(grammarAccess.getTraceRepositoryRule()); } 
	 EOF 
;

// Rule TraceRepository
ruleTraceRepository
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceRepositoryAccess().getGroup()); }
(rule__TraceRepository__Group__0)
{ after(grammarAccess.getTraceRepositoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrace
entryRuleTrace 
:
{ before(grammarAccess.getTraceRule()); }
	 ruleTrace
{ after(grammarAccess.getTraceRule()); } 
	 EOF 
;

// Rule Trace
ruleTrace
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceAccess().getGroup()); }
(rule__Trace__Group__0)
{ after(grammarAccess.getTraceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcessIdentifier
entryRuleProcessIdentifier 
:
{ before(grammarAccess.getProcessIdentifierRule()); }
	 ruleProcessIdentifier
{ after(grammarAccess.getProcessIdentifierRule()); } 
	 EOF 
;

// Rule ProcessIdentifier
ruleProcessIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessIdentifierAccess().getGroup()); }
(rule__ProcessIdentifier__Group__0)
{ after(grammarAccess.getProcessIdentifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocationActivity
entryRuleLocationActivity 
:
{ before(grammarAccess.getLocationActivityRule()); }
	 ruleLocationActivity
{ after(grammarAccess.getLocationActivityRule()); } 
	 EOF 
;

// Rule LocationActivity
ruleLocationActivity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocationActivityAccess().getGroup()); }
(rule__LocationActivity__Group__0)
{ after(grammarAccess.getLocationActivityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableValue
entryRuleVariableValue 
:
{ before(grammarAccess.getVariableValueRule()); }
	 ruleVariableValue
{ after(grammarAccess.getVariableValueRule()); } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableValueAccess().getGroup()); }
(rule__VariableValue__Group__0)
{ after(grammarAccess.getVariableValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleNamedElementReference
entryRuleSingleNamedElementReference 
:
{ before(grammarAccess.getSingleNamedElementReferenceRule()); }
	 ruleSingleNamedElementReference
{ after(grammarAccess.getSingleNamedElementReferenceRule()); } 
	 EOF 
;

// Rule SingleNamedElementReference
ruleSingleNamedElementReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getGroup()); }
(rule__SingleNamedElementReference__Group__0)
{ after(grammarAccess.getSingleNamedElementReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamedElementReference
entryRuleNamedElementReference 
:
{ before(grammarAccess.getNamedElementReferenceRule()); }
	 ruleNamedElementReference
{ after(grammarAccess.getNamedElementReferenceRule()); } 
	 EOF 
;

// Rule NamedElementReference
ruleNamedElementReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getGroup()); }
(rule__NamedElementReference__Group__0)
{ after(grammarAccess.getNamedElementReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceItem
entryRuleTraceItem 
:
{ before(grammarAccess.getTraceItemRule()); }
	 ruleTraceItem
{ after(grammarAccess.getTraceItemRule()); } 
	 EOF 
;

// Rule TraceItem
ruleTraceItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceItemAccess().getAlternatives()); }
(rule__TraceItem__Alternatives)
{ after(grammarAccess.getTraceItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleState
entryRuleState 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_DEPTH");
}
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule State
ruleState
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_DEPTH");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateAccess().getGroup()); }
(rule__State__Group__0)
{ after(grammarAccess.getStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleEdgeActivity
entryRuleEdgeActivity 
:
{ before(grammarAccess.getEdgeActivityRule()); }
	 ruleEdgeActivity
{ after(grammarAccess.getEdgeActivityRule()); } 
	 EOF 
;

// Rule EdgeActivity
ruleEdgeActivity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEdgeActivityAccess().getGroup()); }
(rule__EdgeActivity__Group__0)
{ after(grammarAccess.getEdgeActivityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleChannelSynchronization
entryRuleChannelSynchronization 
:
{ before(grammarAccess.getChannelSynchronizationRule()); }
	 ruleChannelSynchronization
{ after(grammarAccess.getChannelSynchronizationRule()); } 
	 EOF 
;

// Rule ChannelSynchronization
ruleChannelSynchronization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChannelSynchronizationAccess().getGroup()); }
(rule__ChannelSynchronization__Group__0)
{ after(grammarAccess.getChannelSynchronizationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTauSynchronization
entryRuleTauSynchronization 
:
{ before(grammarAccess.getTauSynchronizationRule()); }
	 ruleTauSynchronization
{ after(grammarAccess.getTauSynchronizationRule()); } 
	 EOF 
;

// Rule TauSynchronization
ruleTauSynchronization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTauSynchronizationAccess().getTauKeyword()); }

	'tau' 

{ after(grammarAccess.getTauSynchronizationAccess().getTauKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDelayTransition
entryRuleDelayTransition 
:
{ before(grammarAccess.getDelayTransitionRule()); }
	 ruleDelayTransition
{ after(grammarAccess.getDelayTransitionRule()); } 
	 EOF 
;

// Rule DelayTransition
ruleDelayTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDelayTransitionAccess().getGroup()); }
(rule__DelayTransition__Group__0)
{ after(grammarAccess.getDelayTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActionTransition
entryRuleActionTransition 
:
{ before(grammarAccess.getActionTransitionRule()); }
	 ruleActionTransition
{ after(grammarAccess.getActionTransitionRule()); } 
	 EOF 
;

// Rule ActionTransition
ruleActionTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActionTransitionAccess().getGroup()); }
(rule__ActionTransition__Group__0)
{ after(grammarAccess.getActionTransitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransition
entryRuleTransition 
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionAccess().getAlternatives()); }
(rule__Transition__Alternatives)
{ after(grammarAccess.getTransitionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Result
ruleResult
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultAccess().getAlternatives()); }
(rule__Result__Alternatives)
{ after(grammarAccess.getResultAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompareOperator
ruleCompareOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
(rule__CompareOperator__Alternatives)
{ after(grammarAccess.getCompareOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule SynchronizationKind
ruleSynchronizationKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationKindAccess().getAlternatives()); }
(rule__SynchronizationKind__Alternatives)
{ after(grammarAccess.getSynchronizationKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Trace__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getPropertyKeyword_1_0()); }

	'property' 

{ after(grammarAccess.getTraceAccess().getPropertyKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getTraceAccess().getFormulaKeyword_1_1()); }

	'formula' 

{ after(grammarAccess.getTraceAccess().getFormulaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Alternatives_6_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getShowingCounterExampleKeyword_6_0_0()); }

	'Showing counter example.' 

{ after(grammarAccess.getTraceAccess().getShowingCounterExampleKeyword_6_0_0()); }
)

    |(
{ before(grammarAccess.getTraceAccess().getShowingExampleTraceKeyword_6_0_1()); }

	'Showing example trace.' 

{ after(grammarAccess.getTraceAccess().getShowingExampleTraceKeyword_6_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceItemAccess().getStateParserRuleCall_0()); }
	ruleState
{ after(grammarAccess.getTraceItemAccess().getStateParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTraceItemAccess().getTransitionParserRuleCall_1()); }
	ruleTransition
{ after(grammarAccess.getTraceItemAccess().getTransitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionAccess().getActionTransitionParserRuleCall_0()); }
	ruleActionTransition
{ after(grammarAccess.getTransitionAccess().getActionTransitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTransitionAccess().getDelayTransitionParserRuleCall_1()); }
	ruleDelayTransition
{ after(grammarAccess.getTransitionAccess().getDelayTransitionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_0()); }
(	'-- Property is satisfied.' 
)
{ after(grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_1()); }
(	'-- Property is NOT satisfied.' 
)
{ after(grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_2()); }
(	'-- Formula is satisfied.' 
)
{ after(grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_3()); }
(	'-- Formula is NOT satisfied.' 
)
{ after(grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompareOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2()); }
(	'>=' 
)
{ after(grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_0()); }
(	'?' 
)
{ after(grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_1()); }
(	'!' 
)
{ after(grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TraceRepository__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceRepository__Group__0__Impl
	rule__TraceRepository__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceRepository__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceRepositoryAccess().getCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0()); }
(
	'Cannot reuse state space when trace length optimisation is used.' 
)?
{ after(grammarAccess.getTraceRepositoryAccess().getCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceRepository__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceRepository__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceRepository__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceRepositoryAccess().getTracesAssignment_1()); }
(rule__TraceRepository__TracesAssignment_1)*
{ after(grammarAccess.getTraceRepositoryAccess().getTracesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Trace__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__0__Impl
	rule__Trace__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getVerifyingKeyword_0()); }

	'Verifying' 

{ after(grammarAccess.getTraceAccess().getVerifyingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__1__Impl
	rule__Trace__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getAlternatives_1()); }
(rule__Trace__Alternatives_1)
{ after(grammarAccess.getTraceAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__2__Impl
	rule__Trace__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getPropertyAssignment_2()); }
(rule__Trace__PropertyAssignment_2)
{ after(grammarAccess.getTraceAccess().getPropertyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__3__Impl
	rule__Trace__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getAtLineKeyword_3()); }

	'at line' 

{ after(grammarAccess.getTraceAccess().getAtLineKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__4__Impl
	rule__Trace__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getLineAssignment_4()); }
(rule__Trace__LineAssignment_4)
{ after(grammarAccess.getTraceAccess().getLineAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__5__Impl
	rule__Trace__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getResultAssignment_5()); }
(rule__Trace__ResultAssignment_5)
{ after(grammarAccess.getTraceAccess().getResultAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getGroup_6()); }
(rule__Trace__Group_6__0)?
{ after(grammarAccess.getTraceAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Trace__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group_6__0__Impl
	rule__Trace__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getAlternatives_6_0()); }
(rule__Trace__Alternatives_6_0)
{ after(grammarAccess.getTraceAccess().getAlternatives_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Trace__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Trace__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTraceAccess().getTraceItemsAssignment_6_1()); }
(rule__Trace__TraceItemsAssignment_6_1)
{ after(grammarAccess.getTraceAccess().getTraceItemsAssignment_6_1()); }
)
(
{ before(grammarAccess.getTraceAccess().getTraceItemsAssignment_6_1()); }
(rule__Trace__TraceItemsAssignment_6_1)*
{ after(grammarAccess.getTraceAccess().getTraceItemsAssignment_6_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessIdentifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group__0__Impl
	rule__ProcessIdentifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getTemplateAssignment_0()); }
(rule__ProcessIdentifier__TemplateAssignment_0)
{ after(grammarAccess.getProcessIdentifierAccess().getTemplateAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessIdentifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getGroup_1()); }
(rule__ProcessIdentifier__Group_1__0)?
{ after(grammarAccess.getProcessIdentifierAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProcessIdentifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1__0__Impl
	rule__ProcessIdentifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getProcessIdentifierAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessIdentifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1__1__Impl
	rule__ProcessIdentifier__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getArgumentsAssignment_1_1()); }
(rule__ProcessIdentifier__ArgumentsAssignment_1_1)
{ after(grammarAccess.getProcessIdentifierAccess().getArgumentsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessIdentifier__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1__2__Impl
	rule__ProcessIdentifier__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getGroup_1_2()); }
(rule__ProcessIdentifier__Group_1_2__0)*
{ after(grammarAccess.getProcessIdentifierAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessIdentifier__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getProcessIdentifierAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProcessIdentifier__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1_2__0__Impl
	rule__ProcessIdentifier__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getProcessIdentifierAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProcessIdentifier__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProcessIdentifier__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getArgumentsAssignment_1_2_1()); }
(rule__ProcessIdentifier__ArgumentsAssignment_1_2_1)
{ after(grammarAccess.getProcessIdentifierAccess().getArgumentsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocationActivity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationActivity__Group__0__Impl
	rule__LocationActivity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationActivity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationActivityAccess().getProcessAssignment_0()); }
(rule__LocationActivity__ProcessAssignment_0)
{ after(grammarAccess.getLocationActivityAccess().getProcessAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationActivity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationActivity__Group__1__Impl
	rule__LocationActivity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationActivity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationActivityAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getLocationActivityAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocationActivity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocationActivity__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocationActivity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationActivityAccess().getLocationAssignment_2()); }
(rule__LocationActivity__LocationAssignment_2)
{ after(grammarAccess.getLocationActivityAccess().getLocationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariableValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__0__Impl
	rule__VariableValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getFirstNamedElementReferenceAssignment_0()); }
(rule__VariableValue__FirstNamedElementReferenceAssignment_0)
{ after(grammarAccess.getVariableValueAccess().getFirstNamedElementReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__1__Impl
	rule__VariableValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getGroup_1()); }
(rule__VariableValue__Group_1__0)?
{ after(grammarAccess.getVariableValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__2__Impl
	rule__VariableValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getOperatorAssignment_2()); }
(rule__VariableValue__OperatorAssignment_2)
{ after(grammarAccess.getVariableValueAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getValueAssignment_3()); }
(rule__VariableValue__ValueAssignment_3)
{ after(grammarAccess.getVariableValueAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group_1__0__Impl
	rule__VariableValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getHyphenMinusKeyword_1_0()); }

	'-' 

{ after(grammarAccess.getVariableValueAccess().getHyphenMinusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableValue__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getSecondNamedElementReferenceAssignment_1_1()); }
(rule__VariableValue__SecondNamedElementReferenceAssignment_1_1)
{ after(grammarAccess.getVariableValueAccess().getSecondNamedElementReferenceAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleNamedElementReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleNamedElementReference__Group__0__Impl
	rule__SingleNamedElementReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementAssignment_0()); }
(rule__SingleNamedElementReference__NamedElementAssignment_0)
{ after(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleNamedElementReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleNamedElementReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getGroup_1()); }
(rule__SingleNamedElementReference__Group_1__0)*
{ after(grammarAccess.getSingleNamedElementReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleNamedElementReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleNamedElementReference__Group_1__0__Impl
	rule__SingleNamedElementReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getSingleNamedElementReferenceAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleNamedElementReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleNamedElementReference__Group_1__1__Impl
	rule__SingleNamedElementReference__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getIndexesAssignment_1_1()); }
(rule__SingleNamedElementReference__IndexesAssignment_1_1)
{ after(grammarAccess.getSingleNamedElementReferenceAccess().getIndexesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleNamedElementReference__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleNamedElementReference__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getSingleNamedElementReferenceAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NamedElementReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementReference__Group__0__Impl
	rule__NamedElementReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getSingleNamedElementReferenceAssignment_0()); }
(rule__NamedElementReference__SingleNamedElementReferenceAssignment_0)
{ after(grammarAccess.getNamedElementReferenceAccess().getSingleNamedElementReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementReference__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getGroup_1()); }
(rule__NamedElementReference__Group_1__0)?
{ after(grammarAccess.getNamedElementReferenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamedElementReference__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementReference__Group_1__0__Impl
	rule__NamedElementReference__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getNamedElementReferenceAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamedElementReference__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamedElementReference__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getNamedElementReferenceAssignment_1_1()); }
(rule__NamedElementReference__NamedElementReferenceAssignment_1_1)
{ after(grammarAccess.getNamedElementReferenceAccess().getNamedElementReferenceAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__State__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getStateKeyword_0()); }

	'State' 

{ after(grammarAccess.getStateAccess().getStateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getColonKeyword_1()); }
(
	':' 
)?
{ after(grammarAccess.getStateAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getStateAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateAccess().getLocationActivitiesAssignment_3()); }
(rule__State__LocationActivitiesAssignment_3)
{ after(grammarAccess.getStateAccess().getLocationActivitiesAssignment_3()); }
)
(
{ before(grammarAccess.getStateAccess().getLocationActivitiesAssignment_3()); }
(rule__State__LocationActivitiesAssignment_3)*
{ after(grammarAccess.getStateAccess().getLocationActivitiesAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getStateAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_5()); }
(rule__State__Group_5__0)?
{ after(grammarAccess.getStateAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__State__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_5__0__Impl
	rule__State__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getVariableValuesAssignment_5_0()); }
(rule__State__VariableValuesAssignment_5_0)
{ after(grammarAccess.getStateAccess().getVariableValuesAssignment_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getGroup_5_1()); }
(rule__State__Group_5_1__0)*
{ after(grammarAccess.getStateAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__State__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_5_1__0__Impl
	rule__State__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getCommaKeyword_5_1_0()); }
(
	',' 
)?
{ after(grammarAccess.getStateAccess().getCommaKeyword_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__State__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getVariableValuesAssignment_5_1_1()); }
(rule__State__VariableValuesAssignment_5_1_1)
{ after(grammarAccess.getStateAccess().getVariableValuesAssignment_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EdgeActivity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeActivity__Group__0__Impl
	rule__EdgeActivity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getSourceAssignment_0()); }
(rule__EdgeActivity__SourceAssignment_0)
{ after(grammarAccess.getEdgeActivityAccess().getSourceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeActivity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeActivity__Group__1__Impl
	rule__EdgeActivity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getEdgeActivityAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeActivity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeActivity__Group__2__Impl
	rule__EdgeActivity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getTargetAssignment_2()); }
(rule__EdgeActivity__TargetAssignment_2)
{ after(grammarAccess.getEdgeActivityAccess().getTargetAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EdgeActivity__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EdgeActivity__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getDetailsAssignment_3()); }
(rule__EdgeActivity__DetailsAssignment_3)
{ after(grammarAccess.getEdgeActivityAccess().getDetailsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__ChannelSynchronization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelSynchronization__Group__0__Impl
	rule__ChannelSynchronization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelSynchronization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelSynchronizationAccess().getChannelAssignment_0()); }
(rule__ChannelSynchronization__ChannelAssignment_0)
{ after(grammarAccess.getChannelSynchronizationAccess().getChannelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChannelSynchronization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChannelSynchronization__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelSynchronization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelSynchronizationAccess().getKindAssignment_1()); }
(rule__ChannelSynchronization__KindAssignment_1)
{ after(grammarAccess.getChannelSynchronizationAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DelayTransition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DelayTransition__Group__0__Impl
	rule__DelayTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DelayTransition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayTransitionAccess().getDelayKeyword_0()); }

	'Delay:' 

{ after(grammarAccess.getDelayTransitionAccess().getDelayKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DelayTransition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DelayTransition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DelayTransition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayTransitionAccess().getDurationAssignment_1()); }
(rule__DelayTransition__DurationAssignment_1)
{ after(grammarAccess.getDelayTransitionAccess().getDurationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ActionTransition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionTransition__Group__0__Impl
	rule__ActionTransition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionTransition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTransitionAccess().getTransitionsKeyword_0()); }

	'Transitions:' 

{ after(grammarAccess.getActionTransitionAccess().getTransitionsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ActionTransition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ActionTransition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionTransition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getActionTransitionAccess().getEdgeActivitiesAssignment_1()); }
(rule__ActionTransition__EdgeActivitiesAssignment_1)
{ after(grammarAccess.getActionTransitionAccess().getEdgeActivitiesAssignment_1()); }
)
(
{ before(grammarAccess.getActionTransitionAccess().getEdgeActivitiesAssignment_1()); }
(rule__ActionTransition__EdgeActivitiesAssignment_1)*
{ after(grammarAccess.getActionTransitionAccess().getEdgeActivitiesAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}







rule__TraceRepository__TracesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceRepositoryAccess().getTracesTraceParserRuleCall_1_0()); }
	ruleTrace{ after(grammarAccess.getTraceRepositoryAccess().getTracesTraceParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__PropertyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getPropertyINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getTraceAccess().getPropertyINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__LineAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getLineINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getTraceAccess().getLineINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__ResultAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getResultResultEnumRuleCall_5_0()); }
	ruleResult{ after(grammarAccess.getTraceAccess().getResultResultEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Trace__TraceItemsAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceAccess().getTraceItemsTraceItemParserRuleCall_6_1_0()); }
	ruleTraceItem{ after(grammarAccess.getTraceAccess().getTraceItemsTraceItemParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__TemplateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getTemplateAbstractTemplateCrossReference_0_0()); }
(
{ before(grammarAccess.getProcessIdentifierAccess().getTemplateAbstractTemplateIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getProcessIdentifierAccess().getTemplateAbstractTemplateIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getProcessIdentifierAccess().getTemplateAbstractTemplateCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__ArgumentsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProcessIdentifier__ArgumentsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_2_1_0()); }
	RULE_INT{ after(grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationActivity__ProcessAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationActivityAccess().getProcessProcessIdentifierParserRuleCall_0_0()); }
	ruleProcessIdentifier{ after(grammarAccess.getLocationActivityAccess().getProcessProcessIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocationActivity__LocationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocationActivityAccess().getLocationLocationCrossReference_2_0()); }
(
{ before(grammarAccess.getLocationActivityAccess().getLocationLocationIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getLocationActivityAccess().getLocationLocationIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLocationActivityAccess().getLocationLocationCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__FirstNamedElementReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0()); }
	ruleNamedElementReference{ after(grammarAccess.getVariableValueAccess().getFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__SecondNamedElementReferenceAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); }
	ruleNamedElementReference{ after(grammarAccess.getVariableValueAccess().getSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getOperatorCompareOperatorEnumRuleCall_2_0()); }
	ruleCompareOperator{ after(grammarAccess.getVariableValueAccess().getOperatorCompareOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableValue__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableValueAccess().getValueINTTerminalRuleCall_3_0()); }
	RULE_INT{ after(grammarAccess.getVariableValueAccess().getValueINTTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__NamedElementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementNamedElementCrossReference_0_0()); }
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementNamedElementIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementNamedElementIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementNamedElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleNamedElementReference__IndexesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleNamedElementReferenceAccess().getIndexesINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getSingleNamedElementReferenceAccess().getIndexesINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__SingleNamedElementReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0()); }
	ruleSingleNamedElementReference{ after(grammarAccess.getNamedElementReferenceAccess().getSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamedElementReference__NamedElementReferenceAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamedElementReferenceAccess().getNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); }
	ruleNamedElementReference{ after(grammarAccess.getNamedElementReferenceAccess().getNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__LocationActivitiesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getLocationActivitiesLocationActivityParserRuleCall_3_0()); }
	ruleLocationActivity{ after(grammarAccess.getStateAccess().getLocationActivitiesLocationActivityParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__VariableValuesAssignment_5_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_0_0()); }
	ruleVariableValue{ after(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__State__VariableValuesAssignment_5_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_1_1_0()); }
	ruleVariableValue{ after(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__SourceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getSourceLocationActivityParserRuleCall_0_0()); }
	ruleLocationActivity{ after(grammarAccess.getEdgeActivityAccess().getSourceLocationActivityParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__TargetAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getTargetLocationActivityParserRuleCall_2_0()); }
	ruleLocationActivity{ after(grammarAccess.getEdgeActivityAccess().getTargetLocationActivityParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EdgeActivity__DetailsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEdgeActivityAccess().getDetailsEDGETerminalRuleCall_3_0()); }
	RULE_EDGE{ after(grammarAccess.getEdgeActivityAccess().getDetailsEDGETerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelSynchronization__ChannelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelSynchronizationAccess().getChannelVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getChannelSynchronizationAccess().getChannelVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getChannelSynchronizationAccess().getChannelVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getChannelSynchronizationAccess().getChannelVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChannelSynchronization__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChannelSynchronizationAccess().getKindSynchronizationKindEnumRuleCall_1_0()); }
	ruleSynchronizationKind{ after(grammarAccess.getChannelSynchronizationAccess().getKindSynchronizationKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DelayTransition__DurationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayTransitionAccess().getDurationINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getDelayTransitionAccess().getDurationINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ActionTransition__EdgeActivitiesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionTransitionAccess().getEdgeActivitiesEdgeActivityParserRuleCall_1_0()); }
	ruleEdgeActivity{ after(grammarAccess.getActionTransitionAccess().getEdgeActivitiesEdgeActivityParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DEPTH : '#depth=' RULE_INT;

RULE_EDGE : '{' ( options {greedy=false;} : . )*'}';

RULE_INT : '-'? ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


