/*
 * generated by Xtext
 */
grammar InternalOperatingSystemLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.muml.pm.software.oslanguage.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.muml.pm.software.oslanguage.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.muml.pm.software.oslanguage.xtext.services.OperatingSystemLanguageGrammarAccess;

}

@parser::members {
 
 	private OperatingSystemLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(OperatingSystemLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleOperatingSystem
entryRuleOperatingSystem 
:
{ before(grammarAccess.getOperatingSystemRule()); }
	 ruleOperatingSystem
{ after(grammarAccess.getOperatingSystemRule()); } 
	 EOF 
;

// Rule OperatingSystem
ruleOperatingSystem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatingSystemAccess().getGroup()); }
(rule__OperatingSystem__Group__0)
{ after(grammarAccess.getOperatingSystemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAPIRepository
entryRuleAPIRepository 
:
{ before(grammarAccess.getAPIRepositoryRule()); }
	 ruleAPIRepository
{ after(grammarAccess.getAPIRepositoryRule()); } 
	 EOF 
;

// Rule APIRepository
ruleAPIRepository
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAPIRepositoryAccess().getGroup()); }
(rule__APIRepository__Group__0)
{ after(grammarAccess.getAPIRepositoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationDataType
entryRuleEnumerationDataType 
:
{ before(grammarAccess.getEnumerationDataTypeRule()); }
	 ruleEnumerationDataType
{ after(grammarAccess.getEnumerationDataTypeRule()); } 
	 EOF 
;

// Rule EnumerationDataType
ruleEnumerationDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getGroup()); }
(rule__EnumerationDataType__Group__0)
{ after(grammarAccess.getEnumerationDataTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAPICommand
entryRuleAPICommand 
:
{ before(grammarAccess.getAPICommandRule()); }
	 ruleAPICommand
{ after(grammarAccess.getAPICommandRule()); } 
	 EOF 
;

// Rule APICommand
ruleAPICommand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAPICommandAccess().getGroup()); }
(rule__APICommand__Group__0)
{ after(grammarAccess.getAPICommandAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationValue
entryRuleEnumerationValue 
:
{ before(grammarAccess.getEnumerationValueRule()); }
	 ruleEnumerationValue
{ after(grammarAccess.getEnumerationValueRule()); } 
	 EOF 
;

// Rule EnumerationValue
ruleEnumerationValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationValueAccess().getValueAssignment()); }
(rule__EnumerationValue__ValueAssignment)
{ after(grammarAccess.getEnumerationValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeConstraint
entryRuleTimeConstraint 
:
{ before(grammarAccess.getTimeConstraintRule()); }
	 ruleTimeConstraint
{ after(grammarAccess.getTimeConstraintRule()); } 
	 EOF 
;

// Rule TimeConstraint
ruleTimeConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeConstraintAccess().getGroup()); }
(rule__TimeConstraint__Group__0)
{ after(grammarAccess.getTimeConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeValue
entryRuleTimeValue 
:
{ before(grammarAccess.getTimeValueRule()); }
	 ruleTimeValue
{ after(grammarAccess.getTimeValueRule()); } 
	 EOF 
;

// Rule TimeValue
ruleTimeValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeValueAccess().getGroup()); }
(rule__TimeValue__Group__0)
{ after(grammarAccess.getTimeValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleINTExpression
entryRuleINTExpression 
:
{ before(grammarAccess.getINTExpressionRule()); }
	 ruleINTExpression
{ after(grammarAccess.getINTExpressionRule()); } 
	 EOF 
;

// Rule INTExpression
ruleINTExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getINTExpressionAccess().getValueAssignment()); }
(rule__INTExpression__ValueAssignment)
{ after(grammarAccess.getINTExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeUnitExpr
entryRuleTimeUnitExpr 
:
{ before(grammarAccess.getTimeUnitExprRule()); }
	 ruleTimeUnitExpr
{ after(grammarAccess.getTimeUnitExprRule()); } 
	 EOF 
;

// Rule TimeUnitExpr
ruleTimeUnitExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeUnitExprAccess().getAlternatives()); }
(rule__TimeUnitExpr__Alternatives)
{ after(grammarAccess.getTimeUnitExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__OperatingSystem__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getApirepositoriesAssignment_4_0()); }
(rule__OperatingSystem__ApirepositoriesAssignment_4_0)
{ after(grammarAccess.getOperatingSystemAccess().getApirepositoriesAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getOperatingSystemAccess().getEnumerationDataTypesAssignment_4_1()); }
(rule__OperatingSystem__EnumerationDataTypesAssignment_4_1)
{ after(grammarAccess.getOperatingSystemAccess().getEnumerationDataTypesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnitExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitExprAccess().getDaysKeyword_0()); }

	'days' 

{ after(grammarAccess.getTimeUnitExprAccess().getDaysKeyword_0()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getHoursKeyword_1()); }

	'hours' 

{ after(grammarAccess.getTimeUnitExprAccess().getHoursKeyword_1()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getMinKeyword_2()); }

	'min' 

{ after(grammarAccess.getTimeUnitExprAccess().getMinKeyword_2()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getSecKeyword_3()); }

	'sec' 

{ after(grammarAccess.getTimeUnitExprAccess().getSecKeyword_3()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getMsKeyword_4()); }

	'ms' 

{ after(grammarAccess.getTimeUnitExprAccess().getMsKeyword_4()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getSKeyword_5()); }

	'\u00B5s' 

{ after(grammarAccess.getTimeUnitExprAccess().getSKeyword_5()); }
)

    |(
{ before(grammarAccess.getTimeUnitExprAccess().getNsKeyword_6()); }

	'ns' 

{ after(grammarAccess.getTimeUnitExprAccess().getNsKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__OperatingSystem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__0__Impl
	rule__OperatingSystem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getImportsAssignment_0()); }
(rule__OperatingSystem__ImportsAssignment_0)*
{ after(grammarAccess.getOperatingSystemAccess().getImportsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatingSystem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__1__Impl
	rule__OperatingSystem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getOperatingSystemKeyword_1()); }

	'OperatingSystem:' 

{ after(grammarAccess.getOperatingSystemAccess().getOperatingSystemKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatingSystem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__2__Impl
	rule__OperatingSystem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getNameAssignment_2()); }
(rule__OperatingSystem__NameAssignment_2)
{ after(grammarAccess.getOperatingSystemAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatingSystem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__3__Impl
	rule__OperatingSystem__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getOperatingSystemAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatingSystem__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__4__Impl
	rule__OperatingSystem__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getAlternatives_4()); }
(rule__OperatingSystem__Alternatives_4)*
{ after(grammarAccess.getOperatingSystemAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatingSystem__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatingSystem__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getOperatingSystemAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__APIRepository__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APIRepository__Group__0__Impl
	rule__APIRepository__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getDevice_API_CallsKeyword_0()); }

	'Device_API_Calls:' 

{ after(grammarAccess.getAPIRepositoryAccess().getDevice_API_CallsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APIRepository__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APIRepository__Group__1__Impl
	rule__APIRepository__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getNameAssignment_1()); }
(rule__APIRepository__NameAssignment_1)
{ after(grammarAccess.getAPIRepositoryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APIRepository__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APIRepository__Group__2__Impl
	rule__APIRepository__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getAPIRepositoryAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APIRepository__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APIRepository__Group__3__Impl
	rule__APIRepository__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getApiCommandsAssignment_3()); }
(rule__APIRepository__ApiCommandsAssignment_3)*
{ after(grammarAccess.getAPIRepositoryAccess().getApiCommandsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APIRepository__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APIRepository__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getAPIRepositoryAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationDataType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group__0__Impl
	rule__EnumerationDataType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getEnumKeyword_0()); }

	'enum:' 

{ after(grammarAccess.getEnumerationDataTypeAccess().getEnumKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group__1__Impl
	rule__EnumerationDataType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getNameAssignment_1()); }
(rule__EnumerationDataType__NameAssignment_1)
{ after(grammarAccess.getEnumerationDataTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group__2__Impl
	rule__EnumerationDataType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationDataTypeAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group__3__Impl
	rule__EnumerationDataType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getGroup_3()); }
(rule__EnumerationDataType__Group_3__0)?
{ after(grammarAccess.getEnumerationDataTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationDataTypeAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__EnumerationDataType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group_3__0__Impl
	rule__EnumerationDataType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesAssignment_3_0()); }
(rule__EnumerationDataType__EnumerationValuesAssignment_3_0)
{ after(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getGroup_3_1()); }
(rule__EnumerationDataType__Group_3_1__0)*
{ after(grammarAccess.getEnumerationDataTypeAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDataType__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group_3_1__0__Impl
	rule__EnumerationDataType__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getEnumerationDataTypeAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDataType__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDataType__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesAssignment_3_1_1()); }
(rule__EnumerationDataType__EnumerationValuesAssignment_3_1_1)
{ after(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__APICommand__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__0__Impl
	rule__APICommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getReturnDataTypeAssignment_0()); }
(rule__APICommand__ReturnDataTypeAssignment_0)
{ after(grammarAccess.getAPICommandAccess().getReturnDataTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__1__Impl
	rule__APICommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getNameAssignment_1()); }
(rule__APICommand__NameAssignment_1)
{ after(grammarAccess.getAPICommandAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__2__Impl
	rule__APICommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getAPICommandAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__3__Impl
	rule__APICommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getGroup_3()); }
(rule__APICommand__Group_3__0)?
{ after(grammarAccess.getAPICommandAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__4__Impl
	rule__APICommand__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getAPICommandAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__5__Impl
	rule__APICommand__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getConstraintsAssignment_5()); }
(rule__APICommand__ConstraintsAssignment_5)?
{ after(grammarAccess.getAPICommandAccess().getConstraintsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getAPICommandAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__APICommand__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group_3__0__Impl
	rule__APICommand__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getParametersAssignment_3_0()); }
(rule__APICommand__ParametersAssignment_3_0)
{ after(grammarAccess.getAPICommandAccess().getParametersAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getGroup_3_1()); }
(rule__APICommand__Group_3_1__0)*
{ after(grammarAccess.getAPICommandAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__APICommand__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group_3_1__0__Impl
	rule__APICommand__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getAPICommandAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__APICommand__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__APICommand__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getParametersAssignment_3_1_1()); }
(rule__APICommand__ParametersAssignment_3_1_1)
{ after(grammarAccess.getAPICommandAccess().getParametersAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDataTypeAssignment_0()); }
(rule__Parameter__DataTypeAssignment_0)
{ after(grammarAccess.getParameterAccess().getDataTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_1()); }
(rule__Parameter__NameAssignment_1)
{ after(grammarAccess.getParameterAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeConstraint__Group__0__Impl
	rule__TimeConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstraintAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getTimeConstraintAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeConstraint__Group__1__Impl
	rule__TimeConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstraintAccess().getSamplingTimeAssignment_1()); }
(rule__TimeConstraint__SamplingTimeAssignment_1)
{ after(grammarAccess.getTimeConstraintAccess().getSamplingTimeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeConstraint__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstraintAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getTimeConstraintAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TimeValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeValue__Group__0__Impl
	rule__TimeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getValueAssignment_0()); }
(rule__TimeValue__ValueAssignment_0)
{ after(grammarAccess.getTimeValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getUnitAssignment_1()); }
(rule__TimeValue__UnitAssignment_1)
{ after(grammarAccess.getTimeValueAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__OperatingSystem__ImportsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getImportsImportParserRuleCall_0_0()); }
	ruleImport{ after(grammarAccess.getOperatingSystemAccess().getImportsImportParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getOperatingSystemAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__ApirepositoriesAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getApirepositoriesAPIRepositoryParserRuleCall_4_0_0()); }
	ruleAPIRepository{ after(grammarAccess.getOperatingSystemAccess().getApirepositoriesAPIRepositoryParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatingSystem__EnumerationDataTypesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatingSystemAccess().getEnumerationDataTypesEnumerationDataTypeParserRuleCall_4_1_0()); }
	ruleEnumerationDataType{ after(grammarAccess.getOperatingSystemAccess().getEnumerationDataTypesEnumerationDataTypeParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getAPIRepositoryAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APIRepository__ApiCommandsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPIRepositoryAccess().getApiCommandsAPICommandParserRuleCall_3_0()); }
	ruleAPICommand{ after(grammarAccess.getAPIRepositoryAccess().getApiCommandsAPICommandParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getEnumerationDataTypeAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__EnumerationValuesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesEnumerationValueParserRuleCall_3_0_0()); }
	ruleEnumerationValue{ after(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesEnumerationValueParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDataType__EnumerationValuesAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesEnumerationValueParserRuleCall_3_1_1_0()); }
	ruleEnumerationValue{ after(grammarAccess.getEnumerationDataTypeAccess().getEnumerationValuesEnumerationValueParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__ReturnDataTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getReturnDataTypeDataTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getAPICommandAccess().getReturnDataTypeDataTypeEStringParserRuleCall_0_0_1()); }
	ruleEString{ after(grammarAccess.getAPICommandAccess().getReturnDataTypeDataTypeEStringParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAPICommandAccess().getReturnDataTypeDataTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getAPICommandAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__ParametersAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getParametersParameterParserRuleCall_3_0_0()); }
	ruleParameter{ after(grammarAccess.getAPICommandAccess().getParametersParameterParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__ParametersAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
	ruleParameter{ after(grammarAccess.getAPICommandAccess().getParametersParameterParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__APICommand__ConstraintsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAPICommandAccess().getConstraintsTimeConstraintParserRuleCall_5_0()); }
	ruleTimeConstraint{ after(grammarAccess.getAPICommandAccess().getConstraintsTimeConstraintParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__DataTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getDataTypeDataTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getParameterAccess().getDataTypeDataTypeEStringParserRuleCall_0_0_1()); }
	ruleEString{ after(grammarAccess.getParameterAccess().getDataTypeDataTypeEStringParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getParameterAccess().getDataTypeDataTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationValueAccess().getValueEStringParserRuleCall_0()); }
	ruleEString{ after(grammarAccess.getEnumerationValueAccess().getValueEStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeConstraint__SamplingTimeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeConstraintAccess().getSamplingTimeTimeValueParserRuleCall_1_0()); }
	ruleTimeValue{ after(grammarAccess.getTimeConstraintAccess().getSamplingTimeTimeValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getValueINTExpressionParserRuleCall_0_0()); }
	ruleINTExpression{ after(grammarAccess.getTimeValueAccess().getValueINTExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getUnitTimeUnitExprParserRuleCall_1_0()); }
	ruleTimeUnitExpr{ after(grammarAccess.getTimeValueAccess().getUnitTimeUnitExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__INTExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getINTExpressionAccess().getValueEStringParserRuleCall_0()); }
	ruleEString{ after(grammarAccess.getINTExpressionAccess().getValueEStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


