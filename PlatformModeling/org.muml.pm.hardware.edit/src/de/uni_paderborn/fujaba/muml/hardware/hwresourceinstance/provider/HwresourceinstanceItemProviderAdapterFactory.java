/**
 */
package de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.provider;

import de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.util.HwresourceinstanceAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HwresourceinstanceItemProviderAdapterFactory extends HwresourceinstanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HwresourceinstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.StorageMemoryInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StorageMemoryInstanceItemProvider storageMemoryInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.StorageMemoryInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStorageMemoryInstanceAdapter() {
		if (storageMemoryInstanceItemProvider == null) {
			storageMemoryInstanceItemProvider = new StorageMemoryInstanceItemProvider(this);
		}

		return storageMemoryInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProcessingMemoryInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessingMemoryInstanceItemProvider processingMemoryInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProcessingMemoryInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessingMemoryInstanceAdapter() {
		if (processingMemoryInstanceItemProvider == null) {
			processingMemoryInstanceItemProvider = new ProcessingMemoryInstanceItemProvider(this);
		}

		return processingMemoryInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.CacheInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheInstanceItemProvider cacheInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.CacheInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheInstanceAdapter() {
		if (cacheInstanceItemProvider == null) {
			cacheInstanceItemProvider = new CacheInstanceItemProvider(this);
		}

		return cacheInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProgrammableLogicDeviceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgrammableLogicDeviceInstanceItemProvider programmableLogicDeviceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProgrammableLogicDeviceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgrammableLogicDeviceInstanceAdapter() {
		if (programmableLogicDeviceInstanceItemProvider == null) {
			programmableLogicDeviceInstanceItemProvider = new ProgrammableLogicDeviceInstanceItemProvider(this);
		}

		return programmableLogicDeviceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProcessorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessorInstanceItemProvider processorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ProcessorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessorInstanceAdapter() {
		if (processorInstanceItemProvider == null) {
			processorInstanceItemProvider = new ProcessorInstanceItemProvider(this);
		}

		return processorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.StructuredResourceInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructuredResourceInstanceItemProvider structuredResourceInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.StructuredResourceInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructuredResourceInstanceAdapter() {
		if (structuredResourceInstanceItemProvider == null) {
			structuredResourceInstanceItemProvider = new StructuredResourceInstanceItemProvider(this);
		}

		return structuredResourceInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.SensorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorInstanceItemProvider sensorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.SensorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorInstanceAdapter() {
		if (sensorInstanceItemProvider == null) {
			sensorInstanceItemProvider = new SensorInstanceItemProvider(this);
		}

		return sensorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ActuatorInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorInstanceItemProvider actuatorInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ActuatorInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorInstanceAdapter() {
		if (actuatorInstanceItemProvider == null) {
			actuatorInstanceItemProvider = new ActuatorInstanceItemProvider(this);
		}

		return actuatorInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ResourceInstanceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceInstanceRepositoryItemProvider resourceInstanceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.ResourceInstanceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceInstanceRepositoryAdapter() {
		if (resourceInstanceRepositoryItemProvider == null) {
			resourceInstanceRepositoryItemProvider = new ResourceInstanceRepositoryItemProvider(this);
		}

		return resourceInstanceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.HWPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWPortItemProvider hwPortItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.hardware.hwresourceinstance.HWPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWPortAdapter() {
		if (hwPortItemProvider == null) {
			hwPortItemProvider = new HWPortItemProvider(this);
		}

		return hwPortItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (storageMemoryInstanceItemProvider != null) storageMemoryInstanceItemProvider.dispose();
		if (processingMemoryInstanceItemProvider != null) processingMemoryInstanceItemProvider.dispose();
		if (cacheInstanceItemProvider != null) cacheInstanceItemProvider.dispose();
		if (programmableLogicDeviceInstanceItemProvider != null) programmableLogicDeviceInstanceItemProvider.dispose();
		if (processorInstanceItemProvider != null) processorInstanceItemProvider.dispose();
		if (structuredResourceInstanceItemProvider != null) structuredResourceInstanceItemProvider.dispose();
		if (sensorInstanceItemProvider != null) sensorInstanceItemProvider.dispose();
		if (actuatorInstanceItemProvider != null) actuatorInstanceItemProvider.dispose();
		if (resourceInstanceRepositoryItemProvider != null) resourceInstanceRepositoryItemProvider.dispose();
		if (hwPortItemProvider != null) hwPortItemProvider.dispose();
	}

}
