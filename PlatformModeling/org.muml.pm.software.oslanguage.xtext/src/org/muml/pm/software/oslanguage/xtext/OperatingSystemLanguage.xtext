// automatically generated by Xtext
grammar org.muml.pm.software.oslanguage.xtext.OperatingSystemLanguage with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.muml.core/model/core.ecore#//modelinstance" as modelinstance
import "platform:/resource/org.muml.core/model/core.ecore" as core
import "platform:/resource/org.muml.core/model/core.ecore#//expressions" as expressions
import "platform:/resource/org.muml.core/model/core.ecore#//expressions/common" as common

import "platform:/resource/org.muml.pim/model/pim.ecore#//realtimestatechart" as realtimestatechart
import "platform:/resource/org.muml.pim/model/pim.ecore#//types" as types
import "platform:/resource/org.muml.pim/model/pim.ecore#//behavior" as behavior
import "platform:/resource/org.muml.pim/model/pim.ecore#//component" as component
import "platform:/resource/org.muml.pim/model/pim.ecore#//valuetype" as valuetype
import "platform:/resource/org.muml.pim/model/pim.ecore#//msgtype" as msgtype
import "platform:/resource/org.muml.pim/model/pim.ecore#//protocol" as protocol
import "platform:/resource/org.muml.pim/model/pim.ecore#//instance" as instance

import "platform:/resource/org.muml.pim.actionlanguage/model/actionlanguage.ecore" as actionlanguage

import "platform:/resource/org.muml.pm.software/model/software.ecore" as swplatform



OperatingSystem returns swplatform::OperatingSystem:
	(imports+=Import)* // allow imports
	'OperatingSystem:'
	name=EString
	'{'
	 (apirepositories+=APIRepository |
	 enumerationDataTypes+=EnumerationDataType)*
	'}';


 Import returns swplatform::Import:
    'import' importURI=STRING; // feature must be named importURI

EString returns ecore::EString:
	STRING | ID;

APIRepository returns swplatform::APIRepository:
	'Device_API_Calls:'
	name=EString
	'{'
	   (apiCommands+=APICommand)*
	'}';

EnumerationDataType returns swplatform::EnumerationDataType:
	'enum:'
	name=EString
	'{'
    (enumerationValues+=EnumerationValue (','enumerationValues+=EnumerationValue)*)?
	'}';


APICommand returns swplatform::APICommand:
	returnDataType=[types::DataType|EString]
	name=EString
	'('   (parameters+=Parameter (','parameters+=Parameter)*)? ')'(constraints+=TimeConstraint)?';';

Parameter returns behavior::Parameter:
	dataType=[types::DataType|EString]
	name=EString;



EnumerationValue returns swplatform::EnumerationValue:
	value=EString;

TimeConstraint returns swplatform::TimeConstraint:
	'[' samplingTime=TimeValue  ']';
	
TimeValue returns valuetype::TimeValue:
	value=INTExpression unit=TimeUnitExpr
;

INTExpression returns common::LiteralExpression:
	value=EString
;

TimeUnitExpr returns valuetype::TimeUnit:
	'days' | 'hours' | 'min' | 'sec' | 'ms' | 'Âµs' | 'ns'
;
