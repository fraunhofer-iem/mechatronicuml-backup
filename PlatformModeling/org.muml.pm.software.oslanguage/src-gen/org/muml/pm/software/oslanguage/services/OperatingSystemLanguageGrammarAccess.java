/*
 * generated by Xtext
 */
package org.muml.pm.software.oslanguage.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OperatingSystemLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class OperatingSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.OperatingSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cOperatingSystemKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cApirepositoriesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cApirepositoriesAPIRepositoryParserRuleCall_4_0_0 = (RuleCall)cApirepositoriesAssignment_4_0.eContents().get(0);
		private final Assignment cEnumerationDataTypesAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cEnumerationDataTypesEnumerationDataTypeParserRuleCall_4_1_0 = (RuleCall)cEnumerationDataTypesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//OperatingSystem swplatform::OperatingSystem:
		//	imports+=Import* // allow imports
		//	'OperatingSystem:'
		//	name=EString
		//	'{' (apirepositories+=APIRepository | enumerationDataTypes+=EnumerationDataType)*
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* // allow imports
		//'OperatingSystem:' name=EString '{' (apirepositories+=APIRepository | enumerationDataTypes+=EnumerationDataType)* '}'
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//// allow imports
		//'OperatingSystem:'
		public Keyword getOperatingSystemKeyword_1() { return cOperatingSystemKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(apirepositories+=APIRepository | enumerationDataTypes+=EnumerationDataType)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//apirepositories+=APIRepository
		public Assignment getApirepositoriesAssignment_4_0() { return cApirepositoriesAssignment_4_0; }

		//APIRepository
		public RuleCall getApirepositoriesAPIRepositoryParserRuleCall_4_0_0() { return cApirepositoriesAPIRepositoryParserRuleCall_4_0_0; }

		//enumerationDataTypes+=EnumerationDataType
		public Assignment getEnumerationDataTypesAssignment_4_1() { return cEnumerationDataTypesAssignment_4_1; }

		//EnumerationDataType
		public RuleCall getEnumerationDataTypesEnumerationDataTypeParserRuleCall_4_1_0() { return cEnumerationDataTypesEnumerationDataTypeParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Import swplatform::Import:
		//	'import' importURI=STRING
		@Override public ParserRule getRule() { return rule; }

		//'import' importURI=STRING
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// feature must be named importURI
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class APIRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.APIRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDevice_API_CallsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cApiCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cApiCommandsAPICommandParserRuleCall_3_0 = (RuleCall)cApiCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//APIRepository swplatform::APIRepository:
		//	'Device_API_Calls:'
		//	name=EString
		//	'{'
		//	apiCommands+=APICommand*
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'Device_API_Calls:' name=EString '{' apiCommands+=APICommand* '}'
		public Group getGroup() { return cGroup; }

		//'Device_API_Calls:'
		public Keyword getDevice_API_CallsKeyword_0() { return cDevice_API_CallsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//apiCommands+=APICommand*
		public Assignment getApiCommandsAssignment_3() { return cApiCommandsAssignment_3; }

		//APICommand
		public RuleCall getApiCommandsAPICommandParserRuleCall_3_0() { return cApiCommandsAPICommandParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumerationDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.EnumerationDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEnumerationValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEnumerationValuesEnumerationValueParserRuleCall_3_0_0 = (RuleCall)cEnumerationValuesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cEnumerationValuesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cEnumerationValuesEnumerationValueParserRuleCall_3_1_1_0 = (RuleCall)cEnumerationValuesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumerationDataType swplatform::EnumerationDataType:
		//	'enum:'
		//	name=EString
		//	'{' (enumerationValues+=EnumerationValue (',' enumerationValues+=EnumerationValue)*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'enum:' name=EString '{' (enumerationValues+=EnumerationValue (',' enumerationValues+=EnumerationValue)*)? '}'
		public Group getGroup() { return cGroup; }

		//'enum:'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(enumerationValues+=EnumerationValue (',' enumerationValues+=EnumerationValue)*)?
		public Group getGroup_3() { return cGroup_3; }

		//enumerationValues+=EnumerationValue
		public Assignment getEnumerationValuesAssignment_3_0() { return cEnumerationValuesAssignment_3_0; }

		//EnumerationValue
		public RuleCall getEnumerationValuesEnumerationValueParserRuleCall_3_0_0() { return cEnumerationValuesEnumerationValueParserRuleCall_3_0_0; }

		//(',' enumerationValues+=EnumerationValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//enumerationValues+=EnumerationValue
		public Assignment getEnumerationValuesAssignment_3_1_1() { return cEnumerationValuesAssignment_3_1_1; }

		//EnumerationValue
		public RuleCall getEnumerationValuesEnumerationValueParserRuleCall_3_1_1_0() { return cEnumerationValuesEnumerationValueParserRuleCall_3_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class APICommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.APICommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturnDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReturnDataTypeDataTypeCrossReference_0_0 = (CrossReference)cReturnDataTypeAssignment_0.eContents().get(0);
		private final RuleCall cReturnDataTypeDataTypeEStringParserRuleCall_0_0_1 = (RuleCall)cReturnDataTypeDataTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsTimeConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//APICommand swplatform::APICommand:
		//	returnDataType=[types::DataType|EString] name=EString
		//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' constraints+=TimeConstraint? ';'
		@Override public ParserRule getRule() { return rule; }

		//returnDataType=[types::DataType|EString] name=EString '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		//constraints+=TimeConstraint? ';'
		public Group getGroup() { return cGroup; }

		//returnDataType=[types::DataType|EString]
		public Assignment getReturnDataTypeAssignment_0() { return cReturnDataTypeAssignment_0; }

		//[types::DataType|EString]
		public CrossReference getReturnDataTypeDataTypeCrossReference_0_0() { return cReturnDataTypeDataTypeCrossReference_0_0; }

		//EString
		public RuleCall getReturnDataTypeDataTypeEStringParserRuleCall_0_0_1() { return cReturnDataTypeDataTypeEStringParserRuleCall_0_0_1; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_0_0() { return cParametersParameterParserRuleCall_3_0_0; }

		//(',' parameters+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_3_1_1_0() { return cParametersParameterParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//constraints+=TimeConstraint?
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }

		//TimeConstraint
		public RuleCall getConstraintsTimeConstraintParserRuleCall_5_0() { return cConstraintsTimeConstraintParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDataTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDataTypeDataTypeCrossReference_0_0 = (CrossReference)cDataTypeAssignment_0.eContents().get(0);
		private final RuleCall cDataTypeDataTypeEStringParserRuleCall_0_0_1 = (RuleCall)cDataTypeDataTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter behavior::Parameter:
		//	dataType=[types::DataType|EString] name=EString
		@Override public ParserRule getRule() { return rule; }

		//dataType=[types::DataType|EString] name=EString
		public Group getGroup() { return cGroup; }

		//dataType=[types::DataType|EString]
		public Assignment getDataTypeAssignment_0() { return cDataTypeAssignment_0; }

		//[types::DataType|EString]
		public CrossReference getDataTypeDataTypeCrossReference_0_0() { return cDataTypeDataTypeCrossReference_0_0; }

		//EString
		public RuleCall getDataTypeDataTypeEStringParserRuleCall_0_0_1() { return cDataTypeDataTypeEStringParserRuleCall_0_0_1; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class EnumerationValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.EnumerationValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//EnumerationValue swplatform::EnumerationValue:
		//	value=EString
		@Override public ParserRule getRule() { return rule; }

		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}

	public class TimeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.TimeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSamplingTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSamplingTimeTimeValueParserRuleCall_1_0 = (RuleCall)cSamplingTimeAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TimeConstraint swplatform::TimeConstraint:
		//	'[' samplingTime=TimeValue ']'
		@Override public ParserRule getRule() { return rule; }

		//'[' samplingTime=TimeValue ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//samplingTime=TimeValue
		public Assignment getSamplingTimeAssignment_1() { return cSamplingTimeAssignment_1; }

		//TimeValue
		public RuleCall getSamplingTimeTimeValueParserRuleCall_1_0() { return cSamplingTimeTimeValueParserRuleCall_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.TimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTExpressionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitExprParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//TimeValue valuetype::TimeValue:
		//	value=INTExpression unit=TimeUnitExpr
		@Override public ParserRule getRule() { return rule; }

		//value=INTExpression unit=TimeUnitExpr
		public Group getGroup() { return cGroup; }

		//value=INTExpression
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INTExpression
		public RuleCall getValueINTExpressionParserRuleCall_0_0() { return cValueINTExpressionParserRuleCall_0_0; }

		//unit=TimeUnitExpr
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnitExpr
		public RuleCall getUnitTimeUnitExprParserRuleCall_1_0() { return cUnitTimeUnitExprParserRuleCall_1_0; }
	}

	public class INTExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.INTExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//INTExpression common::LiteralExpression:
		//	value=EString
		@Override public ParserRule getRule() { return rule; }

		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}

	public class TimeUnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.pm.software.oslanguage.OperatingSystemLanguage.TimeUnitExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDaysKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHoursKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSecKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cSKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cNsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//TimeUnitExpr valuetype::TimeUnit:
		//	'days' | 'hours' | 'min' | 'sec' | 'ms' | 'µs' | 'ns'
		@Override public ParserRule getRule() { return rule; }

		//'days' | 'hours' | 'min' | 'sec' | 'ms' | 'µs' | 'ns'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'days'
		public Keyword getDaysKeyword_0() { return cDaysKeyword_0; }

		//'hours'
		public Keyword getHoursKeyword_1() { return cHoursKeyword_1; }

		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }

		//'sec'
		public Keyword getSecKeyword_3() { return cSecKeyword_3; }

		//'ms'
		public Keyword getMsKeyword_4() { return cMsKeyword_4; }

		//'µs'
		public Keyword getSKeyword_5() { return cSKeyword_5; }

		//'ns'
		public Keyword getNsKeyword_6() { return cNsKeyword_6; }
	}
	
	
	private final OperatingSystemElements pOperatingSystem;
	private final ImportElements pImport;
	private final EStringElements pEString;
	private final APIRepositoryElements pAPIRepository;
	private final EnumerationDataTypeElements pEnumerationDataType;
	private final APICommandElements pAPICommand;
	private final ParameterElements pParameter;
	private final EnumerationValueElements pEnumerationValue;
	private final TimeConstraintElements pTimeConstraint;
	private final TimeValueElements pTimeValue;
	private final INTExpressionElements pINTExpression;
	private final TimeUnitExprElements pTimeUnitExpr;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OperatingSystemLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pOperatingSystem = new OperatingSystemElements();
		this.pImport = new ImportElements();
		this.pEString = new EStringElements();
		this.pAPIRepository = new APIRepositoryElements();
		this.pEnumerationDataType = new EnumerationDataTypeElements();
		this.pAPICommand = new APICommandElements();
		this.pParameter = new ParameterElements();
		this.pEnumerationValue = new EnumerationValueElements();
		this.pTimeConstraint = new TimeConstraintElements();
		this.pTimeValue = new TimeValueElements();
		this.pINTExpression = new INTExpressionElements();
		this.pTimeUnitExpr = new TimeUnitExprElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.muml.pm.software.oslanguage.OperatingSystemLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//OperatingSystem swplatform::OperatingSystem:
	//	imports+=Import* // allow imports
	//	'OperatingSystem:'
	//	name=EString
	//	'{' (apirepositories+=APIRepository | enumerationDataTypes+=EnumerationDataType)*
	//	'}'
	public OperatingSystemElements getOperatingSystemAccess() {
		return pOperatingSystem;
	}
	
	public ParserRule getOperatingSystemRule() {
		return getOperatingSystemAccess().getRule();
	}

	//Import swplatform::Import:
	//	'import' importURI=STRING
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//// feature must be named importURI
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//APIRepository swplatform::APIRepository:
	//	'Device_API_Calls:'
	//	name=EString
	//	'{'
	//	apiCommands+=APICommand*
	//	'}'
	public APIRepositoryElements getAPIRepositoryAccess() {
		return pAPIRepository;
	}
	
	public ParserRule getAPIRepositoryRule() {
		return getAPIRepositoryAccess().getRule();
	}

	//EnumerationDataType swplatform::EnumerationDataType:
	//	'enum:'
	//	name=EString
	//	'{' (enumerationValues+=EnumerationValue (',' enumerationValues+=EnumerationValue)*)?
	//	'}'
	public EnumerationDataTypeElements getEnumerationDataTypeAccess() {
		return pEnumerationDataType;
	}
	
	public ParserRule getEnumerationDataTypeRule() {
		return getEnumerationDataTypeAccess().getRule();
	}

	//APICommand swplatform::APICommand:
	//	returnDataType=[types::DataType|EString] name=EString
	//	'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' constraints+=TimeConstraint? ';'
	public APICommandElements getAPICommandAccess() {
		return pAPICommand;
	}
	
	public ParserRule getAPICommandRule() {
		return getAPICommandAccess().getRule();
	}

	//Parameter behavior::Parameter:
	//	dataType=[types::DataType|EString] name=EString
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EnumerationValue swplatform::EnumerationValue:
	//	value=EString
	public EnumerationValueElements getEnumerationValueAccess() {
		return pEnumerationValue;
	}
	
	public ParserRule getEnumerationValueRule() {
		return getEnumerationValueAccess().getRule();
	}

	//TimeConstraint swplatform::TimeConstraint:
	//	'[' samplingTime=TimeValue ']'
	public TimeConstraintElements getTimeConstraintAccess() {
		return pTimeConstraint;
	}
	
	public ParserRule getTimeConstraintRule() {
		return getTimeConstraintAccess().getRule();
	}

	//TimeValue valuetype::TimeValue:
	//	value=INTExpression unit=TimeUnitExpr
	public TimeValueElements getTimeValueAccess() {
		return pTimeValue;
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}

	//INTExpression common::LiteralExpression:
	//	value=EString
	public INTExpressionElements getINTExpressionAccess() {
		return pINTExpression;
	}
	
	public ParserRule getINTExpressionRule() {
		return getINTExpressionAccess().getRule();
	}

	//TimeUnitExpr valuetype::TimeUnit:
	//	'days' | 'hours' | 'min' | 'sec' | 'ms' | 'µs' | 'ns'
	public TimeUnitExprElements getTimeUnitExprAccess() {
		return pTimeUnitExpr;
	}
	
	public ParserRule getTimeUnitExprRule() {
		return getTimeUnitExprAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
