/*
* generated by Xtext
*/
package de.uni_paderborn.fujaba.muml.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.uni_paderborn.fujaba.muml.services.DependencyModelLanguageGrammarAccess;

public class DependencyModelLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private DependencyModelLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal.InternalDependencyModelLanguageParser createParser() {
		de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal.InternalDependencyModelLanguageParser result = new de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal.InternalDependencyModelLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDependencyModelAccess().getCommentAlternatives_1_0(), "rule__DependencyModel__CommentAlternatives_1_0");
					put(grammarAccess.getDependencyAccess().getAlternatives_0(), "rule__Dependency__Alternatives_0");
					put(grammarAccess.getDependencyAccess().getCommentAlternatives_1_0(), "rule__Dependency__CommentAlternatives_1_0");
					put(grammarAccess.getSynchronizationAccess().getAlternatives_0(), "rule__Synchronization__Alternatives_0");
					put(grammarAccess.getConditionalDependencyAccess().getAlternatives(), "rule__ConditionalDependency__Alternatives");
					put(grammarAccess.getEffectAccess().getAlternatives(), "rule__Effect__Alternatives");
					put(grammarAccess.getLimitedEffectAccess().getAlternatives(), "rule__LimitedEffect__Alternatives");
					put(grammarAccess.getEnableDisableEffectAccess().getAlternatives_0(), "rule__EnableDisableEffect__Alternatives_0");
					put(grammarAccess.getDataAssignmentEffectAccess().getAlternatives_2(), "rule__DataAssignmentEffect__Alternatives_2");
					put(grammarAccess.getDataMergeAccess().getAlternatives(), "rule__DataMerge__Alternatives");
					put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
					put(grammarAccess.getComplexEventAccess().getAlternatives(), "rule__ComplexEvent__Alternatives");
					put(grammarAccess.getComplexEventAccess().getAlternatives_0_1(), "rule__ComplexEvent__Alternatives_0_1");
					put(grammarAccess.getConditionWithoutKeywordAccess().getAlternatives_1(), "rule__ConditionWithoutKeyword__Alternatives_1");
					put(grammarAccess.getStateStatusConditionAccess().getAlternatives_0(), "rule__StateStatusCondition__Alternatives_0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1(), "rule__EventConstrainedIntervalCondition__Alternatives_1");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1_2_2(), "rule__EventConstrainedIntervalCondition__Alternatives_1_2_2");
					put(grammarAccess.getClockConditionAccess().getAlternatives(), "rule__ClockCondition__Alternatives");
					put(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsAlternatives_1_0(), "rule__TypedNamedElementExpression__ElementAccessorsAlternatives_1_0");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
					put(grammarAccess.getEntryAccess().getAlternatives(), "rule__Entry__Alternatives");
					put(grammarAccess.getForLoopCountingExpressionAccess().getAlternatives_1(), "rule__ForLoopCountingExpression__Alternatives_1");
					put(grammarAccess.getExpressionStartRuleAccess().getAlternatives(), "rule__ExpressionStartRule__Alternatives");
					put(grammarAccess.getAssignmentAccess().getAlternatives_1(), "rule__Assignment__Alternatives_1");
					put(grammarAccess.getInitializeExpressionAccess().getAlternatives(), "rule__InitializeExpression__Alternatives");
					put(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAlternatives_0(), "rule__LocalVariableOrConstantDeclarationStatement__VariableAlternatives_0");
					put(grammarAccess.getMultiplicationExpressionAccess().getAlternatives(), "rule__MultiplicationExpression__Alternatives");
					put(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAlternatives_1_1_2_0(), "rule__MultiplicationExpression__RightExpressionAlternatives_1_1_2_0");
					put(grammarAccess.getOperandAccess().getAlternatives(), "rule__Operand__Alternatives");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAlternatives_1(), "rule__ExtendedTypedNamedElementExpression__Alternatives_1");
					put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
					put(grammarAccess.getComparingOperatorAccess().getAlternatives(), "rule__ComparingOperator__Alternatives");
					put(grammarAccess.getNaturalLanguageComparingOperatorAccess().getAlternatives(), "rule__NaturalLanguageComparingOperator__Alternatives");
					put(grammarAccess.getStateEventKindAccess().getAlternatives(), "rule__StateEventKind__Alternatives");
					put(grammarAccess.getStateStatusKindAccess().getAlternatives(), "rule__StateStatusKind__Alternatives");
					put(grammarAccess.getMessageEventKindAccess().getAlternatives(), "rule__MessageEventKind__Alternatives");
					put(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getAlternatives(), "rule__UnaryPostIncrementDecrementOperator__Alternatives");
					put(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getAlternatives(), "rule__IncrementDecrementOperatorExpression__Alternatives");
					put(grammarAccess.getAssignOperatorAccess().getAlternatives(), "rule__AssignOperator__Alternatives");
					put(grammarAccess.getComparingEQNEQOperatorAccess().getAlternatives(), "rule__ComparingEQNEQOperator__Alternatives");
					put(grammarAccess.getComparingRelOperatorAccess().getAlternatives(), "rule__ComparingRelOperator__Alternatives");
					put(grammarAccess.getAdditionOperatorAccess().getAlternatives(), "rule__AdditionOperator__Alternatives");
					put(grammarAccess.getMultiplicationOperatorAccess().getAlternatives(), "rule__MultiplicationOperator__Alternatives");
					put(grammarAccess.getUnaryPreOperatorAccess().getAlternatives(), "rule__UnaryPreOperator__Alternatives");
					put(grammarAccess.getPositionSelectorKindAccess().getAlternatives(), "rule__PositionSelectorKind__Alternatives");
					put(grammarAccess.getDependencyModelAccess().getGroup(), "rule__DependencyModel__Group__0");
					put(grammarAccess.getDependencyModelAccess().getGroup_2(), "rule__DependencyModel__Group_2__0");
					put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
					put(grammarAccess.getDependencyAccess().getGroup_0_0(), "rule__Dependency__Group_0_0__0");
					put(grammarAccess.getDependencyAccess().getGroup_0_1(), "rule__Dependency__Group_0_1__0");
					put(grammarAccess.getDependencyAccess().getGroup_0_3(), "rule__Dependency__Group_0_3__0");
					put(grammarAccess.getDependencyAccess().getGroup_0_4(), "rule__Dependency__Group_0_4__0");
					put(grammarAccess.getDependencyAccess().getGroup_0_5(), "rule__Dependency__Group_0_5__0");
					put(grammarAccess.getSynchronizationAccess().getGroup(), "rule__Synchronization__Group__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_0(), "rule__Synchronization__Group_0_0__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_0_2(), "rule__Synchronization__Group_0_0_2__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_0_5(), "rule__Synchronization__Group_0_0_5__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_1(), "rule__Synchronization__Group_0_1__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_1_2(), "rule__Synchronization__Group_0_1_2__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_0_1_5(), "rule__Synchronization__Group_0_1_5__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_1(), "rule__Synchronization__Group_1__0");
					put(grammarAccess.getSynchronizationAccess().getGroup_2(), "rule__Synchronization__Group_2__0");
					put(grammarAccess.getForbiddenStateCombinationAccess().getGroup(), "rule__ForbiddenStateCombination__Group__0");
					put(grammarAccess.getForbiddenStateCombinationAccess().getGroup_2(), "rule__ForbiddenStateCombination__Group_2__0");
					put(grammarAccess.getBoundedActiveStateAccess().getGroup(), "rule__BoundedActiveState__Group__0");
					put(grammarAccess.getBoundedActiveStateAccess().getGroup_2(), "rule__BoundedActiveState__Group_2__0");
					put(grammarAccess.getConditionalDependencyAccess().getGroup_0(), "rule__ConditionalDependency__Group_0__0");
					put(grammarAccess.getConditionalDependencyAccess().getGroup_0_4(), "rule__ConditionalDependency__Group_0_4__0");
					put(grammarAccess.getConditionalDependencyAccess().getGroup_1(), "rule__ConditionalDependency__Group_1__0");
					put(grammarAccess.getConditionalDependencyAccess().getGroup_1_6(), "rule__ConditionalDependency__Group_1_6__0");
					put(grammarAccess.getEnableDisableEffectAccess().getGroup(), "rule__EnableDisableEffect__Group__0");
					put(grammarAccess.getDataAssignmentEffectAccess().getGroup(), "rule__DataAssignmentEffect__Group__0");
					put(grammarAccess.getDataAssignmentEffectAccess().getGroup_2_0(), "rule__DataAssignmentEffect__Group_2_0__0");
					put(grammarAccess.getClockResetEffectAccess().getGroup(), "rule__ClockResetEffect__Group__0");
					put(grammarAccess.getClockResetEffectAccess().getGroup_2(), "rule__ClockResetEffect__Group_2__0");
					put(grammarAccess.getDataMergeAccess().getGroup_0(), "rule__DataMerge__Group_0__0");
					put(grammarAccess.getDataMergeAccess().getGroup_0_2(), "rule__DataMerge__Group_0_2__0");
					put(grammarAccess.getDataMergeAccess().getGroup_1(), "rule__DataMerge__Group_1__0");
					put(grammarAccess.getDataMergeAccess().getGroup_1_2(), "rule__DataMerge__Group_1_2__0");
					put(grammarAccess.getDataMergeAccess().getGroup_1_3(), "rule__DataMerge__Group_1_3__0");
					put(grammarAccess.getClockMergeAccess().getGroup(), "rule__ClockMerge__Group__0");
					put(grammarAccess.getClockMergeAccess().getGroup_2(), "rule__ClockMerge__Group_2__0");
					put(grammarAccess.getClockMergeAccess().getGroup_3(), "rule__ClockMerge__Group_3__0");
					put(grammarAccess.getMessageEventAccess().getGroup(), "rule__MessageEvent__Group__0");
					put(grammarAccess.getMessageEventAccess().getGroup_1(), "rule__MessageEvent__Group_1__0");
					put(grammarAccess.getTransitionEventAccess().getGroup(), "rule__TransitionEvent__Group__0");
					put(grammarAccess.getStateEventAccess().getGroup(), "rule__StateEvent__Group__0");
					put(grammarAccess.getStateCombinationEventAccess().getGroup(), "rule__StateCombinationEvent__Group__0");
					put(grammarAccess.getStateCombinationEventAccess().getGroup_3(), "rule__StateCombinationEvent__Group_3__0");
					put(grammarAccess.getSynchronizationEventAccess().getGroup(), "rule__SynchronizationEvent__Group__0");
					put(grammarAccess.getComplexEventAccess().getGroup_0(), "rule__ComplexEvent__Group_0__0");
					put(grammarAccess.getCompositionEventAccess().getGroup(), "rule__CompositionEvent__Group__0");
					put(grammarAccess.getCountedEventAccess().getGroup(), "rule__CountedEvent__Group__0");
					put(grammarAccess.getDelayedEventAccess().getGroup(), "rule__DelayedEvent__Group__0");
					put(grammarAccess.getCompositionOrConditionAccess().getGroup(), "rule__CompositionOrCondition__Group__0");
					put(grammarAccess.getCompositionOrConditionAccess().getGroup_1(), "rule__CompositionOrCondition__Group_1__0");
					put(grammarAccess.getCompositionAndConditionAccess().getGroup(), "rule__CompositionAndCondition__Group__0");
					put(grammarAccess.getCompositionAndConditionAccess().getGroup_1(), "rule__CompositionAndCondition__Group_1__0");
					put(grammarAccess.getConditionWithoutKeywordAccess().getGroup(), "rule__ConditionWithoutKeyword__Group__0");
					put(grammarAccess.getStateStatusConditionAccess().getGroup(), "rule__StateStatusCondition__Group__0");
					put(grammarAccess.getStateStatusConditionAccess().getGroup_0_1(), "rule__StateStatusCondition__Group_0_1__0");
					put(grammarAccess.getStateStatusConditionAccess().getGroup_0_1_2(), "rule__StateStatusCondition__Group_0_1_2__0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup(), "rule__EventConstrainedIntervalCondition__Group__0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_0(), "rule__EventConstrainedIntervalCondition__Group_1_0__0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_1(), "rule__EventConstrainedIntervalCondition__Group_1_1__0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_2(), "rule__EventConstrainedIntervalCondition__Group_1_2__0");
					put(grammarAccess.getAuxiliaryClockConditionAccess().getGroup(), "rule__AuxiliaryClockCondition__Group__0");
					put(grammarAccess.getHybridClockConditionAccess().getGroup(), "rule__HybridClockCondition__Group__0");
					put(grammarAccess.getBasicClockConditionAccess().getGroup(), "rule__BasicClockCondition__Group__0");
					put(grammarAccess.getTypedNamedElementExpressionAccess().getGroup(), "rule__TypedNamedElementExpression__Group__0");
					put(grammarAccess.getOperationCallAccess().getGroup(), "rule__OperationCall__Group__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2(), "rule__OperationCall__Group_2__0");
					put(grammarAccess.getOperationCallAccess().getGroup_2_1(), "rule__OperationCall__Group_2_1__0");
					put(grammarAccess.getTimeValueAccess().getGroup(), "rule__TimeValue__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
					put(grammarAccess.getForLoopCountingExpressionAccess().getGroup(), "rule__ForLoopCountingExpression__Group__0");
					put(grammarAccess.getForLoopCountingExpressionAccess().getGroup_1_1(), "rule__ForLoopCountingExpression__Group_1_1__0");
					put(grammarAccess.getWhileLoopAccess().getGroup(), "rule__WhileLoop__Group__0");
					put(grammarAccess.getDoWhileLoopAccess().getGroup(), "rule__DoWhileLoop__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getIfStatementAccess().getGroup_6(), "rule__IfStatement__Group_6__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getOperationCallStatementAccess().getGroup(), "rule__OperationCallStatement__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1_0(), "rule__Assignment__Group_1_0__0");
					put(grammarAccess.getArrayInitializeExpressionAccess().getGroup(), "rule__ArrayInitializeExpression__Group__0");
					put(grammarAccess.getArrayInitializeExpressionAccess().getGroup_2(), "rule__ArrayInitializeExpression__Group_2__0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getGroup(), "rule__LocalVariableDeclaration__Group__0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2(), "rule__LocalVariableDeclaration__Group_2__0");
					put(grammarAccess.getLocalConstantDeclarationAccess().getGroup(), "rule__LocalConstantDeclaration__Group__0");
					put(grammarAccess.getNondeterministicChoiceExpressionAccess().getGroup(), "rule__NondeterministicChoiceExpression__Group__0");
					put(grammarAccess.getRangeAccess().getGroup(), "rule__Range__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup(), "rule__LogicalOrExpression__Group__0");
					put(grammarAccess.getLogicalOrExpressionAccess().getGroup_1(), "rule__LogicalOrExpression__Group_1__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup(), "rule__LogicalAndExpression__Group__0");
					put(grammarAccess.getLogicalAndExpressionAccess().getGroup_1(), "rule__LogicalAndExpression__Group_1__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup(), "rule__ComparisonExpression__Group__0");
					put(grammarAccess.getComparisonExpressionAccess().getGroup_1(), "rule__ComparisonExpression__Group_1__0");
					put(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup(), "rule__ComparisonHigherOpExpression__Group__0");
					put(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup_1(), "rule__ComparisonHigherOpExpression__Group_1__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup(), "rule__AdditionExpression__Group__0");
					put(grammarAccess.getAdditionExpressionAccess().getGroup_1(), "rule__AdditionExpression__Group_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1(), "rule__MultiplicationExpression__Group_1__0");
					put(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_1(), "rule__MultiplicationExpression__Group_1_1__0");
					put(grammarAccess.getUnaryPreExpressionAccess().getGroup(), "rule__UnaryPreExpression__Group__0");
					put(grammarAccess.getTypeCastExpressionAccess().getGroup(), "rule__TypeCastExpression__Group__0");
					put(grammarAccess.getOperandAccess().getGroup_0(), "rule__Operand__Group_0__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup(), "rule__LiteralExpression__Group__0");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup(), "rule__ExtendedTypedNamedElementExpression__Group__0");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_0(), "rule__ExtendedTypedNamedElementExpression__Group_1_0__0");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_1(), "rule__ExtendedTypedNamedElementExpression__Group_1_1__0");
					put(grammarAccess.getArrayIndexExpressionAccess().getGroup(), "rule__ArrayIndexExpression__Group__0");
					put(grammarAccess.getAttributeAccessorExpressionAccess().getGroup(), "rule__AttributeAccessorExpression__Group__0");
					put(grammarAccess.getPositionSelectorExpressionAccess().getGroup(), "rule__PositionSelectorExpression__Group__0");
					put(grammarAccess.getPositionSelectorExpressionAccess().getGroup_1(), "rule__PositionSelectorExpression__Group_1__0");
					put(grammarAccess.getParamaterBindingAccess().getGroup(), "rule__ParamaterBinding__Group__0");
					put(grammarAccess.getTriggerMessageExpressionAccess().getGroup(), "rule__TriggerMessageExpression__Group__0");
					put(grammarAccess.getDATATYPEAccess().getGroup(), "rule__DATATYPE__Group__0");
					put(grammarAccess.getDATATYPEAccess().getGroup_1(), "rule__DATATYPE__Group_1__0");
					put(grammarAccess.getDependencyModelAccess().getCommentAssignment_1(), "rule__DependencyModel__CommentAssignment_1");
					put(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_0(), "rule__DependencyModel__DependenciesAssignment_2_0");
					put(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_1(), "rule__DependencyModel__DependenciesAssignment_2_1");
					put(grammarAccess.getDependencyAccess().getCommentAssignment_1(), "rule__Dependency__CommentAssignment_1");
					put(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_1(), "rule__Synchronization__SendingEventsAssignment_0_0_1");
					put(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_2_1(), "rule__Synchronization__SendingEventsAssignment_0_0_2_1");
					put(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_4(), "rule__Synchronization__ReceivingEventsAssignment_0_0_4");
					put(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_5_1(), "rule__Synchronization__ReceivingEventsAssignment_0_0_5_1");
					put(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_1(), "rule__Synchronization__SendingEventsAssignment_0_1_1");
					put(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_2_1(), "rule__Synchronization__SendingEventsAssignment_0_1_2_1");
					put(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_4(), "rule__Synchronization__ReceivingEventsAssignment_0_1_4");
					put(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_5_1(), "rule__Synchronization__ReceivingEventsAssignment_0_1_5_1");
					put(grammarAccess.getSynchronizationAccess().getChannelNameAssignment_1_1(), "rule__Synchronization__ChannelNameAssignment_1_1");
					put(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionAssignment_2_1(), "rule__Synchronization__GeneralSelectorExpressionAssignment_2_1");
					put(grammarAccess.getSynchronizationAccess().getSelectorTypeAssignment_2_4(), "rule__Synchronization__SelectorTypeAssignment_2_4");
					put(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_1(), "rule__ForbiddenStateCombination__StatesAssignment_1");
					put(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_2_1(), "rule__ForbiddenStateCombination__StatesAssignment_2_1");
					put(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_1(), "rule__BoundedActiveState__StatesAssignment_1");
					put(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_2_1(), "rule__BoundedActiveState__StatesAssignment_2_1");
					put(grammarAccess.getBoundedActiveStateAccess().getConstraintAssignment_5(), "rule__BoundedActiveState__ConstraintAssignment_5");
					put(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_0_1(), "rule__ConditionalDependency__ConditionAssignment_0_1");
					put(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_3(), "rule__ConditionalDependency__EffectsAssignment_0_3");
					put(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_4_1(), "rule__ConditionalDependency__EffectsAssignment_0_4_1");
					put(grammarAccess.getConditionalDependencyAccess().getEventAssignment_1_2(), "rule__ConditionalDependency__EventAssignment_1_2");
					put(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_5(), "rule__ConditionalDependency__EffectsAssignment_1_5");
					put(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_6_1(), "rule__ConditionalDependency__EffectsAssignment_1_6_1");
					put(grammarAccess.getEnableDisableEffectAccess().getIsEnableAssignment_0_0(), "rule__EnableDisableEffect__IsEnableAssignment_0_0");
					put(grammarAccess.getEnableDisableEffectAccess().getEventAssignment_1(), "rule__EnableDisableEffect__EventAssignment_1");
					put(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionAssignment_1(), "rule__DataAssignmentEffect__Lhs_typedNamedElementExpressionAssignment_1");
					put(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignment_2_0_0(), "rule__DataAssignmentEffect__AssignOperatorAssignment_2_0_0");
					put(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionAssignment_2_0_1(), "rule__DataAssignmentEffect__Rhs_assignExpressionAssignment_2_0_1");
					put(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorAssignment_2_1(), "rule__DataAssignmentEffect__IncrementDecrementOperatorAssignment_2_1");
					put(grammarAccess.getClockResetEffectAccess().getClocksAssignment_1(), "rule__ClockResetEffect__ClocksAssignment_1");
					put(grammarAccess.getClockResetEffectAccess().getClocksAssignment_2_1(), "rule__ClockResetEffect__ClocksAssignment_2_1");
					put(grammarAccess.getDataMergeAccess().getVariablesAssignment_0_1(), "rule__DataMerge__VariablesAssignment_0_1");
					put(grammarAccess.getDataMergeAccess().getVariableNameAssignment_0_2_1(), "rule__DataMerge__VariableNameAssignment_0_2_1");
					put(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_1(), "rule__DataMerge__VariablesAssignment_1_1");
					put(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_2_1(), "rule__DataMerge__VariablesAssignment_1_2_1");
					put(grammarAccess.getDataMergeAccess().getVariableNameAssignment_1_3_1(), "rule__DataMerge__VariableNameAssignment_1_3_1");
					put(grammarAccess.getClockMergeAccess().getClocksAssignment_1(), "rule__ClockMerge__ClocksAssignment_1");
					put(grammarAccess.getClockMergeAccess().getClocksAssignment_2_1(), "rule__ClockMerge__ClocksAssignment_2_1");
					put(grammarAccess.getClockMergeAccess().getClockNameAssignment_3_1(), "rule__ClockMerge__ClockNameAssignment_3_1");
					put(grammarAccess.getMessageEventAccess().getKindAssignment_0(), "rule__MessageEvent__KindAssignment_0");
					put(grammarAccess.getMessageEventAccess().getPortAssignment_1_0(), "rule__MessageEvent__PortAssignment_1_0");
					put(grammarAccess.getMessageEventAccess().getTypeAssignment_2(), "rule__MessageEvent__TypeAssignment_2");
					put(grammarAccess.getTransitionEventAccess().getTransitionAssignment_1(), "rule__TransitionEvent__TransitionAssignment_1");
					put(grammarAccess.getStateEventAccess().getKindAssignment_0(), "rule__StateEvent__KindAssignment_0");
					put(grammarAccess.getStateEventAccess().getStateAssignment_1(), "rule__StateEvent__StateAssignment_1");
					put(grammarAccess.getStateCombinationEventAccess().getKindAssignment_0(), "rule__StateCombinationEvent__KindAssignment_0");
					put(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_2(), "rule__StateCombinationEvent__StatesAssignment_2");
					put(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_3_1(), "rule__StateCombinationEvent__StatesAssignment_3_1");
					put(grammarAccess.getSynchronizationEventAccess().getEventAssignment_0(), "rule__SynchronizationEvent__EventAssignment_0");
					put(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionAssignment_2(), "rule__SynchronizationEvent__SelectorExpressionAssignment_2");
					put(grammarAccess.getCompositionEventAccess().getLeftEventAssignment_0(), "rule__CompositionEvent__LeftEventAssignment_0");
					put(grammarAccess.getCompositionEventAccess().getKindAssignment_1(), "rule__CompositionEvent__KindAssignment_1");
					put(grammarAccess.getCompositionEventAccess().getRightEventAssignment_2(), "rule__CompositionEvent__RightEventAssignment_2");
					put(grammarAccess.getCountedEventAccess().getEventAssignment_0(), "rule__CountedEvent__EventAssignment_0");
					put(grammarAccess.getCountedEventAccess().getCounterAssignment_2(), "rule__CountedEvent__CounterAssignment_2");
					put(grammarAccess.getDelayedEventAccess().getEventAssignment_0(), "rule__DelayedEvent__EventAssignment_0");
					put(grammarAccess.getDelayedEventAccess().getDelayAssignment_2(), "rule__DelayedEvent__DelayAssignment_2");
					put(grammarAccess.getCompositionOrConditionAccess().getKindAssignment_1_1(), "rule__CompositionOrCondition__KindAssignment_1_1");
					put(grammarAccess.getCompositionOrConditionAccess().getRightConditionAssignment_1_2(), "rule__CompositionOrCondition__RightConditionAssignment_1_2");
					put(grammarAccess.getCompositionAndConditionAccess().getKindAssignment_1_1(), "rule__CompositionAndCondition__KindAssignment_1_1");
					put(grammarAccess.getCompositionAndConditionAccess().getRightConditionAssignment_1_2(), "rule__CompositionAndCondition__RightConditionAssignment_1_2");
					put(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_0(), "rule__StateStatusCondition__StatesAssignment_0_0");
					put(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_1(), "rule__StateStatusCondition__StatesAssignment_0_1_1");
					put(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_2_1(), "rule__StateStatusCondition__StatesAssignment_0_1_2_1");
					put(grammarAccess.getStateStatusConditionAccess().getKindAssignment_1(), "rule__StateStatusCondition__KindAssignment_1");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_0_0(), "rule__EventConstrainedIntervalCondition__FromEventAssignment_1_0_0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_0_2(), "rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_0_2");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledAssignment_1_1_0(), "rule__EventConstrainedIntervalCondition__InitialEnabledAssignment_1_1_0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_1_2(), "rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_1_2");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_2_0(), "rule__EventConstrainedIntervalCondition__FromEventAssignment_1_2_0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_2_2_0(), "rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_2_2_0");
					put(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteAssignment_1_2_2_1(), "rule__EventConstrainedIntervalCondition__EnabledInfiteAssignment_1_2_2_1");
					put(grammarAccess.getAuxiliaryClockConditionAccess().getEventAssignment_0(), "rule__AuxiliaryClockCondition__EventAssignment_0");
					put(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorAssignment_1(), "rule__AuxiliaryClockCondition__OperatorAssignment_1");
					put(grammarAccess.getAuxiliaryClockConditionAccess().getBoundAssignment_2(), "rule__AuxiliaryClockCondition__BoundAssignment_2");
					put(grammarAccess.getHybridClockConditionAccess().getConditionAssignment_0(), "rule__HybridClockCondition__ConditionAssignment_0");
					put(grammarAccess.getHybridClockConditionAccess().getOperatorAssignment_1(), "rule__HybridClockCondition__OperatorAssignment_1");
					put(grammarAccess.getHybridClockConditionAccess().getBoundAssignment_2(), "rule__HybridClockCondition__BoundAssignment_2");
					put(grammarAccess.getBasicClockConditionAccess().getClockAssignment_1(), "rule__BasicClockCondition__ClockAssignment_1");
					put(grammarAccess.getBasicClockConditionAccess().getOperatorAssignment_2(), "rule__BasicClockCondition__OperatorAssignment_2");
					put(grammarAccess.getBasicClockConditionAccess().getBoundAssignment_3(), "rule__BasicClockCondition__BoundAssignment_3");
					put(grammarAccess.getDataConditionAccess().getExpressionAssignment(), "rule__DataCondition__ExpressionAssignment");
					put(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementAssignment_0(), "rule__TypedNamedElementExpression__TypedNamedElementAssignment_0");
					put(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsAssignment_1(), "rule__TypedNamedElementExpression__ElementAccessorsAssignment_1");
					put(grammarAccess.getOperationCallAccess().getOperationAssignment_0(), "rule__OperationCall__OperationAssignment_0");
					put(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_0(), "rule__OperationCall__ParameterBindingAssignment_2_0");
					put(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_1_1(), "rule__OperationCall__ParameterBindingAssignment_2_1_1");
					put(grammarAccess.getTimeValueAccess().getValueAssignment_0(), "rule__TimeValue__ValueAssignment_0");
					put(grammarAccess.getTimeValueAccess().getUnitAssignment_1(), "rule__TimeValue__UnitAssignment_1");
					put(grammarAccess.getBlockAccess().getExpressionsAssignment_2(), "rule__Block__ExpressionsAssignment_2");
					put(grammarAccess.getForLoopAccess().getInitializeExpressionAssignment_2(), "rule__ForLoop__InitializeExpressionAssignment_2");
					put(grammarAccess.getForLoopAccess().getLoopTestAssignment_3(), "rule__ForLoop__LoopTestAssignment_3");
					put(grammarAccess.getForLoopAccess().getCountingExpressionAssignment_5(), "rule__ForLoop__CountingExpressionAssignment_5");
					put(grammarAccess.getForLoopAccess().getBlockAssignment_7(), "rule__ForLoop__BlockAssignment_7");
					put(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionAssignment_0(), "rule__ForLoopCountingExpression__Lhs_typedNamedElementExpressionAssignment_0");
					put(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorAssignment_1_0(), "rule__ForLoopCountingExpression__IncrementDecrementOperatorAssignment_1_0");
					put(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignment_1_1_0(), "rule__ForLoopCountingExpression__AssignOperatorAssignment_1_1_0");
					put(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionAssignment_1_1_1(), "rule__ForLoopCountingExpression__Rhs_assignExpressionAssignment_1_1_1");
					put(grammarAccess.getWhileLoopAccess().getLoopTestAssignment_2(), "rule__WhileLoop__LoopTestAssignment_2");
					put(grammarAccess.getWhileLoopAccess().getBlockAssignment_4(), "rule__WhileLoop__BlockAssignment_4");
					put(grammarAccess.getDoWhileLoopAccess().getBlockAssignment_1(), "rule__DoWhileLoop__BlockAssignment_1");
					put(grammarAccess.getDoWhileLoopAccess().getLoopTestAssignment_4(), "rule__DoWhileLoop__LoopTestAssignment_4");
					put(grammarAccess.getIfStatementAccess().getIfConditionAssignment_2(), "rule__IfStatement__IfConditionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getIfBlockAssignment_4(), "rule__IfStatement__IfBlockAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElseIfConditionsAssignment_5_2(), "rule__IfStatement__ElseIfConditionsAssignment_5_2");
					put(grammarAccess.getIfStatementAccess().getElseIfBlocksAssignment_5_4(), "rule__IfStatement__ElseIfBlocksAssignment_5_4");
					put(grammarAccess.getIfStatementAccess().getElseBlockAssignment_6_1(), "rule__IfStatement__ElseBlockAssignment_6_1");
					put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2(), "rule__ReturnStatement__ExpressionAssignment_2");
					put(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionAssignment_0(), "rule__Assignment__Lhs_typedNamedElementExpressionAssignment_0");
					put(grammarAccess.getAssignmentAccess().getAssignOperatorAssignment_1_0_0(), "rule__Assignment__AssignOperatorAssignment_1_0_0");
					put(grammarAccess.getAssignmentAccess().getRhs_assignExpressionAssignment_1_0_1(), "rule__Assignment__Rhs_assignExpressionAssignment_1_0_1");
					put(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorAssignment_1_1(), "rule__Assignment__IncrementDecrementOperatorAssignment_1_1");
					put(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_1(), "rule__ArrayInitializeExpression__ExpressionsAssignment_1");
					put(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_2_1(), "rule__ArrayInitializeExpression__ExpressionsAssignment_2_1");
					put(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAssignment(), "rule__LocalVariableOrConstantDeclarationStatement__VariableAssignment");
					put(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeAssignment_0(), "rule__LocalVariableDeclaration__DataTypeAssignment_0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1(), "rule__LocalVariableDeclaration__NameAssignment_1");
					put(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionAssignment_2_1(), "rule__LocalVariableDeclaration__InitializeExpressionAssignment_2_1");
					put(grammarAccess.getLocalConstantDeclarationAccess().getConstantAssignment_0(), "rule__LocalConstantDeclaration__ConstantAssignment_0");
					put(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeAssignment_1(), "rule__LocalConstantDeclaration__DataTypeAssignment_1");
					put(grammarAccess.getLocalConstantDeclarationAccess().getNameAssignment_2(), "rule__LocalConstantDeclaration__NameAssignment_2");
					put(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionAssignment_4(), "rule__LocalConstantDeclaration__InitializeExpressionAssignment_4");
					put(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypeAssignment_0(), "rule__NondeterministicChoiceExpression__DataTypeAssignment_0");
					put(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeAssignment_1(), "rule__NondeterministicChoiceExpression__RangeAssignment_1");
					put(grammarAccess.getRangeAccess().getLowerBoundAssignment_1(), "rule__Range__LowerBoundAssignment_1");
					put(grammarAccess.getRangeAccess().getUpperBoundAssignment_3(), "rule__Range__UpperBoundAssignment_3");
					put(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1(), "rule__LogicalOrExpression__OperatorAssignment_1_1");
					put(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionAssignment_1_2(), "rule__LogicalOrExpression__RightExpressionAssignment_1_2");
					put(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1(), "rule__LogicalAndExpression__OperatorAssignment_1_1");
					put(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionAssignment_1_2(), "rule__LogicalAndExpression__RightExpressionAssignment_1_2");
					put(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonExpression__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonExpressionAccess().getRightExpressionAssignment_1_2(), "rule__ComparisonExpression__RightExpressionAssignment_1_2");
					put(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorAssignment_1_1(), "rule__ComparisonHigherOpExpression__OperatorAssignment_1_1");
					put(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionAssignment_1_2(), "rule__ComparisonHigherOpExpression__RightExpressionAssignment_1_2");
					put(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1(), "rule__AdditionExpression__OperatorAssignment_1_1");
					put(grammarAccess.getAdditionExpressionAccess().getRightExpressionAssignment_1_2(), "rule__AdditionExpression__RightExpressionAssignment_1_2");
					put(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1_1(), "rule__MultiplicationExpression__OperatorAssignment_1_1_1");
					put(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAssignment_1_1_2(), "rule__MultiplicationExpression__RightExpressionAssignment_1_1_2");
					put(grammarAccess.getUnaryPreExpressionAccess().getOperatorAssignment_1(), "rule__UnaryPreExpression__OperatorAssignment_1");
					put(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionAssignment_2(), "rule__UnaryPreExpression__EnclosedExpressionAssignment_2");
					put(grammarAccess.getTypeCastExpressionAccess().getDataTypeAssignment_2(), "rule__TypeCastExpression__DataTypeAssignment_2");
					put(grammarAccess.getTypeCastExpressionAccess().getEnclosedExpressionAssignment_4(), "rule__TypeCastExpression__EnclosedExpressionAssignment_4");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1(), "rule__LiteralExpression__ValueAssignment_1");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionAssignment_1_0_2(), "rule__ExtendedTypedNamedElementExpression__PositionAssignment_1_0_2");
					put(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorAssignment_1_1_1(), "rule__ExtendedTypedNamedElementExpression__IncrementDecrementOperatorAssignment_1_1_1");
					put(grammarAccess.getArrayIndexExpressionAccess().getIndexAssignment_1(), "rule__ArrayIndexExpression__IndexAssignment_1");
					put(grammarAccess.getAttributeAccessorExpressionAccess().getAttributeAssignment_1(), "rule__AttributeAccessorExpression__AttributeAssignment_1");
					put(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionAssignment(), "rule__NoAttributeSelectorExpression__PositionAssignment");
					put(grammarAccess.getPositionSelectorExpressionAccess().getKindAssignment_0(), "rule__PositionSelectorExpression__KindAssignment_0");
					put(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorAssignment_1_1(), "rule__PositionSelectorExpression__SuccessorAssignment_1_1");
					put(grammarAccess.getParamaterBindingAccess().getParameterAssignment_1(), "rule__ParamaterBinding__ParameterAssignment_1");
					put(grammarAccess.getParamaterBindingAccess().getValueAssignment_3(), "rule__ParamaterBinding__ValueAssignment_3");
					put(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeAssignment_0(), "rule__TriggerMessageExpression__MessageTypeAssignment_0");
					put(grammarAccess.getTriggerMessageExpressionAccess().getParameterAssignment_2(), "rule__TriggerMessageExpression__ParameterAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal.InternalDependencyModelLanguageParser typedParser = (de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal.InternalDependencyModelLanguageParser) parser;
			typedParser.entryRuleDependencyModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public DependencyModelLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DependencyModelLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
