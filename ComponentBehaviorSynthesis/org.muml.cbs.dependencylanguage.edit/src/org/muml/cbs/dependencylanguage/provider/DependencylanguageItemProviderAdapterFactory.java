/**
 */
package org.muml.cbs.dependencylanguage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.muml.cbs.dependencylanguage.util.DependencylanguageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DependencylanguageItemProviderAdapterFactory extends DependencylanguageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DependencylanguageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.SynthesizableBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynthesizableBehaviorItemProvider synthesizableBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.SynthesizableBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynthesizableBehaviorAdapter() {
		if (synthesizableBehaviorItemProvider == null) {
			synthesizableBehaviorItemProvider = new SynthesizableBehaviorItemProvider(this);
		}

		return synthesizableBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.DependencyModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyModelItemProvider dependencyModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.DependencyModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyModelAdapter() {
		if (dependencyModelItemProvider == null) {
			dependencyModelItemProvider = new DependencyModelItemProvider(this);
		}

		return dependencyModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.Synchronization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationItemProvider synchronizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.Synchronization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizationAdapter() {
		if (synchronizationItemProvider == null) {
			synchronizationItemProvider = new SynchronizationItemProvider(this);
		}

		return synchronizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.ForbiddenStateCombination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForbiddenStateCombinationItemProvider forbiddenStateCombinationItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.ForbiddenStateCombination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForbiddenStateCombinationAdapter() {
		if (forbiddenStateCombinationItemProvider == null) {
			forbiddenStateCombinationItemProvider = new ForbiddenStateCombinationItemProvider(this);
		}

		return forbiddenStateCombinationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.ClockMerge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockMergeItemProvider clockMergeItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.ClockMerge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockMergeAdapter() {
		if (clockMergeItemProvider == null) {
			clockMergeItemProvider = new ClockMergeItemProvider(this);
		}

		return clockMergeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.DataMerge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataMergeItemProvider dataMergeItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.DataMerge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataMergeAdapter() {
		if (dataMergeItemProvider == null) {
			dataMergeItemProvider = new DataMergeItemProvider(this);
		}

		return dataMergeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.ConditionalDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalDependencyItemProvider conditionalDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.ConditionalDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalDependencyAdapter() {
		if (conditionalDependencyItemProvider == null) {
			conditionalDependencyItemProvider = new ConditionalDependencyItemProvider(this);
		}

		return conditionalDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.EnableDisableEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnableDisableEffectItemProvider enableDisableEffectItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.EnableDisableEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnableDisableEffectAdapter() {
		if (enableDisableEffectItemProvider == null) {
			enableDisableEffectItemProvider = new EnableDisableEffectItemProvider(this);
		}

		return enableDisableEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.ClockResetEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockResetEffectItemProvider clockResetEffectItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.ClockResetEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockResetEffectAdapter() {
		if (clockResetEffectItemProvider == null) {
			clockResetEffectItemProvider = new ClockResetEffectItemProvider(this);
		}

		return clockResetEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.DataAssignmentEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAssignmentEffectItemProvider dataAssignmentEffectItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.DataAssignmentEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAssignmentEffectAdapter() {
		if (dataAssignmentEffectItemProvider == null) {
			dataAssignmentEffectItemProvider = new DataAssignmentEffectItemProvider(this);
		}

		return dataAssignmentEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.BoundedActiveState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundedActiveStateItemProvider boundedActiveStateItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.BoundedActiveState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundedActiveStateAdapter() {
		if (boundedActiveStateItemProvider == null) {
			boundedActiveStateItemProvider = new BoundedActiveStateItemProvider(this);
		}

		return boundedActiveStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.StateStatusCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateStatusConditionItemProvider stateStatusConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.StateStatusCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateStatusConditionAdapter() {
		if (stateStatusConditionItemProvider == null) {
			stateStatusConditionItemProvider = new StateStatusConditionItemProvider(this);
		}

		return stateStatusConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.EventConstrainedIntervalCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventConstrainedIntervalConditionItemProvider eventConstrainedIntervalConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.EventConstrainedIntervalCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventConstrainedIntervalConditionAdapter() {
		if (eventConstrainedIntervalConditionItemProvider == null) {
			eventConstrainedIntervalConditionItemProvider = new EventConstrainedIntervalConditionItemProvider(this);
		}

		return eventConstrainedIntervalConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.ClockCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockConditionItemProvider clockConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.ClockCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockConditionAdapter() {
		if (clockConditionItemProvider == null) {
			clockConditionItemProvider = new ClockConditionItemProvider(this);
		}

		return clockConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.AuxiliaryClockCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuxiliaryClockConditionItemProvider auxiliaryClockConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.AuxiliaryClockCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuxiliaryClockConditionAdapter() {
		if (auxiliaryClockConditionItemProvider == null) {
			auxiliaryClockConditionItemProvider = new AuxiliaryClockConditionItemProvider(this);
		}

		return auxiliaryClockConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.HybridClockCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HybridClockConditionItemProvider hybridClockConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.HybridClockCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHybridClockConditionAdapter() {
		if (hybridClockConditionItemProvider == null) {
			hybridClockConditionItemProvider = new HybridClockConditionItemProvider(this);
		}

		return hybridClockConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.BasicClockCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicClockConditionItemProvider basicClockConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.BasicClockCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicClockConditionAdapter() {
		if (basicClockConditionItemProvider == null) {
			basicClockConditionItemProvider = new BasicClockConditionItemProvider(this);
		}

		return basicClockConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.DataCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataConditionItemProvider dataConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.DataCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataConditionAdapter() {
		if (dataConditionItemProvider == null) {
			dataConditionItemProvider = new DataConditionItemProvider(this);
		}

		return dataConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.CompositionCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionConditionItemProvider compositionConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.CompositionCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionConditionAdapter() {
		if (compositionConditionItemProvider == null) {
			compositionConditionItemProvider = new CompositionConditionItemProvider(this);
		}

		return compositionConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.CompositionEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionEventItemProvider compositionEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.CompositionEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionEventAdapter() {
		if (compositionEventItemProvider == null) {
			compositionEventItemProvider = new CompositionEventItemProvider(this);
		}

		return compositionEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.CountedEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountedEventItemProvider countedEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.CountedEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountedEventAdapter() {
		if (countedEventItemProvider == null) {
			countedEventItemProvider = new CountedEventItemProvider(this);
		}

		return countedEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.DelayedEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelayedEventItemProvider delayedEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.DelayedEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelayedEventAdapter() {
		if (delayedEventItemProvider == null) {
			delayedEventItemProvider = new DelayedEventItemProvider(this);
		}

		return delayedEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.SynchronizationEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationEventItemProvider synchronizationEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.SynchronizationEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizationEventAdapter() {
		if (synchronizationEventItemProvider == null) {
			synchronizationEventItemProvider = new SynchronizationEventItemProvider(this);
		}

		return synchronizationEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.TransitionEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionEventItemProvider transitionEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.TransitionEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionEventAdapter() {
		if (transitionEventItemProvider == null) {
			transitionEventItemProvider = new TransitionEventItemProvider(this);
		}

		return transitionEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.StateEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateEventItemProvider stateEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.StateEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateEventAdapter() {
		if (stateEventItemProvider == null) {
			stateEventItemProvider = new StateEventItemProvider(this);
		}

		return stateEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.StateCombinationEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateCombinationEventItemProvider stateCombinationEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.StateCombinationEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateCombinationEventAdapter() {
		if (stateCombinationEventItemProvider == null) {
			stateCombinationEventItemProvider = new StateCombinationEventItemProvider(this);
		}

		return stateCombinationEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.MessageEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageEventItemProvider messageEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.MessageEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageEventAdapter() {
		if (messageEventItemProvider == null) {
			messageEventItemProvider = new MessageEventItemProvider(this);
		}

		return messageEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.cbs.dependencylanguage.TriggerMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerMessageItemProvider triggerMessageItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.cbs.dependencylanguage.TriggerMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerMessageAdapter() {
		if (triggerMessageItemProvider == null) {
			triggerMessageItemProvider = new TriggerMessageItemProvider(this);
		}

		return triggerMessageItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (synthesizableBehaviorItemProvider != null) synthesizableBehaviorItemProvider.dispose();
		if (dependencyModelItemProvider != null) dependencyModelItemProvider.dispose();
		if (synchronizationItemProvider != null) synchronizationItemProvider.dispose();
		if (forbiddenStateCombinationItemProvider != null) forbiddenStateCombinationItemProvider.dispose();
		if (clockMergeItemProvider != null) clockMergeItemProvider.dispose();
		if (dataMergeItemProvider != null) dataMergeItemProvider.dispose();
		if (conditionalDependencyItemProvider != null) conditionalDependencyItemProvider.dispose();
		if (enableDisableEffectItemProvider != null) enableDisableEffectItemProvider.dispose();
		if (clockResetEffectItemProvider != null) clockResetEffectItemProvider.dispose();
		if (dataAssignmentEffectItemProvider != null) dataAssignmentEffectItemProvider.dispose();
		if (boundedActiveStateItemProvider != null) boundedActiveStateItemProvider.dispose();
		if (stateStatusConditionItemProvider != null) stateStatusConditionItemProvider.dispose();
		if (eventConstrainedIntervalConditionItemProvider != null) eventConstrainedIntervalConditionItemProvider.dispose();
		if (clockConditionItemProvider != null) clockConditionItemProvider.dispose();
		if (auxiliaryClockConditionItemProvider != null) auxiliaryClockConditionItemProvider.dispose();
		if (hybridClockConditionItemProvider != null) hybridClockConditionItemProvider.dispose();
		if (basicClockConditionItemProvider != null) basicClockConditionItemProvider.dispose();
		if (dataConditionItemProvider != null) dataConditionItemProvider.dispose();
		if (compositionConditionItemProvider != null) compositionConditionItemProvider.dispose();
		if (compositionEventItemProvider != null) compositionEventItemProvider.dispose();
		if (countedEventItemProvider != null) countedEventItemProvider.dispose();
		if (delayedEventItemProvider != null) delayedEventItemProvider.dispose();
		if (synchronizationEventItemProvider != null) synchronizationEventItemProvider.dispose();
		if (transitionEventItemProvider != null) transitionEventItemProvider.dispose();
		if (stateEventItemProvider != null) stateEventItemProvider.dispose();
		if (stateCombinationEventItemProvider != null) stateCombinationEventItemProvider.dispose();
		if (messageEventItemProvider != null) messageEventItemProvider.dispose();
		if (triggerMessageItemProvider != null) triggerMessageItemProvider.dispose();
	}

}
