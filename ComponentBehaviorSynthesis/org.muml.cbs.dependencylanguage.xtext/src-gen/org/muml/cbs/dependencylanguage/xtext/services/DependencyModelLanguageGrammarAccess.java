/*
 * generated by Xtext
 */
package org.muml.cbs.dependencylanguage.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;
import org.muml.pim.actionlanguage.xtext.services.ActionLanguageGrammarAccess;

@Singleton
public class DependencyModelLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DependencyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependencyModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDependenciesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDependenciesDependencyParserRuleCall_2_0_0 = (RuleCall)cDependenciesAssignment_2_0.eContents().get(0);
		private final Assignment cDependenciesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDependenciesDependencyParserRuleCall_2_1_0 = (RuleCall)cDependenciesAssignment_2_1.eContents().get(0);
		
		//DependencyModel:
		//	{DependencyModel} comment=(ML_COMMENT | SL_COMMENT)? (dependencies+=Dependency dependencies+=Dependency*)?;
		@Override public ParserRule getRule() { return rule; }

		//{DependencyModel} comment=(ML_COMMENT | SL_COMMENT)? (dependencies+=Dependency dependencies+=Dependency*)?
		public Group getGroup() { return cGroup; }

		//{DependencyModel}
		public Action getDependencyModelAction_0() { return cDependencyModelAction_0; }

		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT | SL_COMMENT
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }

		//(dependencies+=Dependency dependencies+=Dependency*)?
		public Group getGroup_2() { return cGroup_2; }

		//dependencies+=Dependency
		public Assignment getDependenciesAssignment_2_0() { return cDependenciesAssignment_2_0; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_2_0_0() { return cDependenciesDependencyParserRuleCall_2_0_0; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_2_1() { return cDependenciesAssignment_2_1; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_2_1_0() { return cDependenciesDependencyParserRuleCall_2_1_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cSynchronizationParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cForbiddenStateCombinationParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final RuleCall cConditionalDependencyParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cTriggerMessageParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final RuleCall cBoundedActiveStateParserRuleCall_0_4_0 = (RuleCall)cGroup_0_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Group cGroup_0_5 = (Group)cAlternatives_0.eContents().get(5);
		private final RuleCall cDataMergeParserRuleCall_0_5_0 = (RuleCall)cGroup_0_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5_1 = (Keyword)cGroup_0_5.eContents().get(1);
		private final Group cGroup_0_6 = (Group)cAlternatives_0.eContents().get(6);
		private final RuleCall cClockMergeParserRuleCall_0_6_0 = (RuleCall)cGroup_0_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_6_1 = (Keyword)cGroup_0_6.eContents().get(1);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		
		/////////////////////////////////////////
		//// Dependencies
		/////////////////////////////////////////
		//Dependency:
		//	(Synchronization ";" | ForbiddenStateCombination ";" | ConditionalDependency | TriggerMessage | BoundedActiveState ";"
		//	| DataMerge ";" | ClockMerge ";") comment=(ML_COMMENT | SL_COMMENT)?;
		@Override public ParserRule getRule() { return rule; }

		//(Synchronization ";" | ForbiddenStateCombination ";" | ConditionalDependency | TriggerMessage | BoundedActiveState ";" |
		//DataMerge ";" | ClockMerge ";") comment=(ML_COMMENT | SL_COMMENT)?
		public Group getGroup() { return cGroup; }

		//Synchronization ";" | ForbiddenStateCombination ";" | ConditionalDependency | TriggerMessage | BoundedActiveState ";" |
		//DataMerge ";" | ClockMerge ";"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Synchronization ";"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//Synchronization
		public RuleCall getSynchronizationParserRuleCall_0_0_0() { return cSynchronizationParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_0_1() { return cSemicolonKeyword_0_0_1; }

		//ForbiddenStateCombination ";"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//ForbiddenStateCombination
		public RuleCall getForbiddenStateCombinationParserRuleCall_0_1_0() { return cForbiddenStateCombinationParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }

		//ConditionalDependency
		public RuleCall getConditionalDependencyParserRuleCall_0_2() { return cConditionalDependencyParserRuleCall_0_2; }

		//TriggerMessage
		public RuleCall getTriggerMessageParserRuleCall_0_3() { return cTriggerMessageParserRuleCall_0_3; }

		//BoundedActiveState ";"
		public Group getGroup_0_4() { return cGroup_0_4; }

		//BoundedActiveState
		public RuleCall getBoundedActiveStateParserRuleCall_0_4_0() { return cBoundedActiveStateParserRuleCall_0_4_0; }

		//";"
		public Keyword getSemicolonKeyword_0_4_1() { return cSemicolonKeyword_0_4_1; }

		//DataMerge ";"
		public Group getGroup_0_5() { return cGroup_0_5; }

		//DataMerge
		public RuleCall getDataMergeParserRuleCall_0_5_0() { return cDataMergeParserRuleCall_0_5_0; }

		//";"
		public Keyword getSemicolonKeyword_0_5_1() { return cSemicolonKeyword_0_5_1; }

		//ClockMerge ";"
		public Group getGroup_0_6() { return cGroup_0_6; }

		//ClockMerge
		public RuleCall getClockMergeParserRuleCall_0_6_0() { return cClockMergeParserRuleCall_0_6_0; }

		//";"
		public Keyword getSemicolonKeyword_0_6_1() { return cSemicolonKeyword_0_6_1; }

		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT | SL_COMMENT
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
	}

	public class SynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Synchronization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cSynchronizeKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cSendingEventsAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cSendingEventsEventParserRuleCall_0_0_1_0 = (RuleCall)cSendingEventsAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final Assignment cSendingEventsAssignment_0_0_2_1 = (Assignment)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cSendingEventsEventParserRuleCall_0_0_2_1_0 = (RuleCall)cSendingEventsAssignment_0_0_2_1.eContents().get(0);
		private final Keyword cWithKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cReceivingEventsAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cReceivingEventsEventParserRuleCall_0_0_4_0 = (RuleCall)cReceivingEventsAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_0_5 = (Group)cGroup_0_0.eContents().get(5);
		private final Keyword cCommaKeyword_0_0_5_0 = (Keyword)cGroup_0_0_5.eContents().get(0);
		private final Assignment cReceivingEventsAssignment_0_0_5_1 = (Assignment)cGroup_0_0_5.eContents().get(1);
		private final RuleCall cReceivingEventsEventParserRuleCall_0_0_5_1_0 = (RuleCall)cReceivingEventsAssignment_0_0_5_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cSynchronizeKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cSendingEventsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSendingEventsSynchronizationEventParserRuleCall_0_1_1_0 = (RuleCall)cSendingEventsAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cSendingEventsAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0 = (RuleCall)cSendingEventsAssignment_0_1_2_1.eContents().get(0);
		private final Keyword cWithKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cReceivingEventsAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0 = (RuleCall)cReceivingEventsAssignment_0_1_4.eContents().get(0);
		private final Group cGroup_0_1_5 = (Group)cGroup_0_1.eContents().get(5);
		private final Keyword cCommaKeyword_0_1_5_0 = (Keyword)cGroup_0_1_5.eContents().get(0);
		private final Assignment cReceivingEventsAssignment_0_1_5_1 = (Assignment)cGroup_0_1_5.eContents().get(1);
		private final RuleCall cReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0 = (RuleCall)cReceivingEventsAssignment_0_1_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cUsingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cChannelNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChannelNameEStringParserRuleCall_1_1_0 = (RuleCall)cChannelNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGeneralSelectorExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGeneralSelectorExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cGeneralSelectorExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cOfTypeKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cSelectorTypeAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final CrossReference cSelectorTypeDataTypeCrossReference_2_4_0 = (CrossReference)cSelectorTypeAssignment_2_4.eContents().get(0);
		private final RuleCall cSelectorTypeDataTypeIDTerminalRuleCall_2_4_0_1 = (RuleCall)cSelectorTypeDataTypeCrossReference_2_4_0.eContents().get(1);
		
		//Synchronization:
		//	("synchronize" sendingEvents+=Event ("," sendingEvents+=Event)* "with" receivingEvents+=Event (","
		//	receivingEvents+=Event)* | "synchronize" sendingEvents+=SynchronizationEvent (","
		//	sendingEvents+=SynchronizationEvent)* "with" receivingEvents+=SynchronizationEvent (","
		//	receivingEvents+=SynchronizationEvent)*) ("using" channelName=EString)? ("[" generalSelectorExpression=Expression "]"
		//	"of type" selectorType=[types::DataType])?;
		@Override public ParserRule getRule() { return rule; }

		//("synchronize" sendingEvents+=Event ("," sendingEvents+=Event)* "with" receivingEvents+=Event (","
		//receivingEvents+=Event)* | "synchronize" sendingEvents+=SynchronizationEvent ("," sendingEvents+=SynchronizationEvent)*
		//"with" receivingEvents+=SynchronizationEvent ("," receivingEvents+=SynchronizationEvent)*) ("using"
		//channelName=EString)? ("[" generalSelectorExpression=Expression "]" "of type" selectorType=[types::DataType])?
		public Group getGroup() { return cGroup; }

		//"synchronize" sendingEvents+=Event ("," sendingEvents+=Event)* "with" receivingEvents+=Event (","
		//receivingEvents+=Event)* | "synchronize" sendingEvents+=SynchronizationEvent ("," sendingEvents+=SynchronizationEvent)*
		//"with" receivingEvents+=SynchronizationEvent ("," receivingEvents+=SynchronizationEvent)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"synchronize" sendingEvents+=Event ("," sendingEvents+=Event)* "with" receivingEvents+=Event (","
		//receivingEvents+=Event)*
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"synchronize"
		public Keyword getSynchronizeKeyword_0_0_0() { return cSynchronizeKeyword_0_0_0; }

		//sendingEvents+=Event
		public Assignment getSendingEventsAssignment_0_0_1() { return cSendingEventsAssignment_0_0_1; }

		//Event
		public RuleCall getSendingEventsEventParserRuleCall_0_0_1_0() { return cSendingEventsEventParserRuleCall_0_0_1_0; }

		//("," sendingEvents+=Event)*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//","
		public Keyword getCommaKeyword_0_0_2_0() { return cCommaKeyword_0_0_2_0; }

		//sendingEvents+=Event
		public Assignment getSendingEventsAssignment_0_0_2_1() { return cSendingEventsAssignment_0_0_2_1; }

		//Event
		public RuleCall getSendingEventsEventParserRuleCall_0_0_2_1_0() { return cSendingEventsEventParserRuleCall_0_0_2_1_0; }

		//"with"
		public Keyword getWithKeyword_0_0_3() { return cWithKeyword_0_0_3; }

		//receivingEvents+=Event
		public Assignment getReceivingEventsAssignment_0_0_4() { return cReceivingEventsAssignment_0_0_4; }

		//Event
		public RuleCall getReceivingEventsEventParserRuleCall_0_0_4_0() { return cReceivingEventsEventParserRuleCall_0_0_4_0; }

		//("," receivingEvents+=Event)*
		public Group getGroup_0_0_5() { return cGroup_0_0_5; }

		//","
		public Keyword getCommaKeyword_0_0_5_0() { return cCommaKeyword_0_0_5_0; }

		//receivingEvents+=Event
		public Assignment getReceivingEventsAssignment_0_0_5_1() { return cReceivingEventsAssignment_0_0_5_1; }

		//Event
		public RuleCall getReceivingEventsEventParserRuleCall_0_0_5_1_0() { return cReceivingEventsEventParserRuleCall_0_0_5_1_0; }

		//"synchronize" sendingEvents+=SynchronizationEvent ("," sendingEvents+=SynchronizationEvent)* "with"
		//receivingEvents+=SynchronizationEvent ("," receivingEvents+=SynchronizationEvent)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"synchronize"
		public Keyword getSynchronizeKeyword_0_1_0() { return cSynchronizeKeyword_0_1_0; }

		//sendingEvents+=SynchronizationEvent
		public Assignment getSendingEventsAssignment_0_1_1() { return cSendingEventsAssignment_0_1_1; }

		//SynchronizationEvent
		public RuleCall getSendingEventsSynchronizationEventParserRuleCall_0_1_1_0() { return cSendingEventsSynchronizationEventParserRuleCall_0_1_1_0; }

		//("," sendingEvents+=SynchronizationEvent)*
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }

		//sendingEvents+=SynchronizationEvent
		public Assignment getSendingEventsAssignment_0_1_2_1() { return cSendingEventsAssignment_0_1_2_1; }

		//SynchronizationEvent
		public RuleCall getSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0() { return cSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0; }

		//"with"
		public Keyword getWithKeyword_0_1_3() { return cWithKeyword_0_1_3; }

		//receivingEvents+=SynchronizationEvent
		public Assignment getReceivingEventsAssignment_0_1_4() { return cReceivingEventsAssignment_0_1_4; }

		//SynchronizationEvent
		public RuleCall getReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0() { return cReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0; }

		//("," receivingEvents+=SynchronizationEvent)*
		public Group getGroup_0_1_5() { return cGroup_0_1_5; }

		//","
		public Keyword getCommaKeyword_0_1_5_0() { return cCommaKeyword_0_1_5_0; }

		//receivingEvents+=SynchronizationEvent
		public Assignment getReceivingEventsAssignment_0_1_5_1() { return cReceivingEventsAssignment_0_1_5_1; }

		//SynchronizationEvent
		public RuleCall getReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0() { return cReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0; }

		//("using" channelName=EString)?
		public Group getGroup_1() { return cGroup_1; }

		//"using"
		public Keyword getUsingKeyword_1_0() { return cUsingKeyword_1_0; }

		//channelName=EString
		public Assignment getChannelNameAssignment_1_1() { return cChannelNameAssignment_1_1; }

		//EString
		public RuleCall getChannelNameEStringParserRuleCall_1_1_0() { return cChannelNameEStringParserRuleCall_1_1_0; }

		//("[" generalSelectorExpression=Expression "]" "of type" selectorType=[types::DataType])?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//generalSelectorExpression=Expression
		public Assignment getGeneralSelectorExpressionAssignment_2_1() { return cGeneralSelectorExpressionAssignment_2_1; }

		//Expression
		public RuleCall getGeneralSelectorExpressionExpressionParserRuleCall_2_1_0() { return cGeneralSelectorExpressionExpressionParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//"of type"
		public Keyword getOfTypeKeyword_2_3() { return cOfTypeKeyword_2_3; }

		//selectorType=[types::DataType]
		public Assignment getSelectorTypeAssignment_2_4() { return cSelectorTypeAssignment_2_4; }

		//[types::DataType]
		public CrossReference getSelectorTypeDataTypeCrossReference_2_4_0() { return cSelectorTypeDataTypeCrossReference_2_4_0; }

		//ID
		public RuleCall getSelectorTypeDataTypeIDTerminalRuleCall_2_4_0_1() { return cSelectorTypeDataTypeIDTerminalRuleCall_2_4_0_1; }
	}

	public class ForbiddenStateCombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForbiddenStateCombination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForbidStateCombinationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_1_0 = (CrossReference)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cStatesStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_2_1_0 = (CrossReference)cStatesAssignment_2_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cStatesStateCrossReference_2_1_0.eContents().get(1);
		
		//ForbiddenStateCombination:
		//	"forbid state combination" states+=[realtimestatechart::State|QualifiedName] (","
		//	states+=[realtimestatechart::State|QualifiedName])+;
		@Override public ParserRule getRule() { return rule; }

		//"forbid state combination" states+=[realtimestatechart::State|QualifiedName] (","
		//states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup() { return cGroup; }

		//"forbid state combination"
		public Keyword getForbidStateCombinationKeyword_0() { return cForbidStateCombinationKeyword_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_1_0() { return cStatesStateCrossReference_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_1_0_1; }

		//("," states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_2_1_0() { return cStatesStateCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_2_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class BoundedActiveStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoundedActiveState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoundStatesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_1_0 = (CrossReference)cStatesAssignment_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cStatesStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_2_1_0 = (CrossReference)cStatesAssignment_2_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cStatesStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstraintAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintClockConditionParserRuleCall_5_0 = (RuleCall)cConstraintAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//BoundedActiveState:
		//	"bound states" states+=[realtimestatechart::State|QualifiedName] (","
		//	states+=[realtimestatechart::State|QualifiedName])* "by" "[" constraint=ClockCondition "]";
		@Override public ParserRule getRule() { return rule; }

		//"bound states" states+=[realtimestatechart::State|QualifiedName] (","
		//states+=[realtimestatechart::State|QualifiedName])* "by" "[" constraint=ClockCondition "]"
		public Group getGroup() { return cGroup; }

		//"bound states"
		public Keyword getBoundStatesKeyword_0() { return cBoundStatesKeyword_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_1() { return cStatesAssignment_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_1_0() { return cStatesStateCrossReference_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_1_0_1; }

		//("," states+=[realtimestatechart::State|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_2_1() { return cStatesAssignment_2_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_2_1_0() { return cStatesStateCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_2_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_2_1_0_1; }

		//"by"
		public Keyword getByKeyword_3() { return cByKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//constraint=ClockCondition
		public Assignment getConstraintAssignment_5() { return cConstraintAssignment_5; }

		//ClockCondition
		public RuleCall getConstraintClockConditionParserRuleCall_5_0() { return cConstraintClockConditionParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class TriggerMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessageEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessageEventMessageEventParserRuleCall_1_0 = (RuleCall)cMessageEventAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffectsDataAssignmentEffectParserRuleCall_3_0 = (RuleCall)cEffectsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEffectsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEffectsDataAssignmentEffectParserRuleCall_4_1_0 = (RuleCall)cEffectsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TriggerMessage:
		//	"on" messageEvent=MessageEvent "{" effects+=DataAssignmentEffect (";" effects+=DataAssignmentEffect)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"on" messageEvent=MessageEvent "{" effects+=DataAssignmentEffect (";" effects+=DataAssignmentEffect)* "}"
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//messageEvent=MessageEvent
		public Assignment getMessageEventAssignment_1() { return cMessageEventAssignment_1; }

		//MessageEvent
		public RuleCall getMessageEventMessageEventParserRuleCall_1_0() { return cMessageEventMessageEventParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//effects+=DataAssignmentEffect
		public Assignment getEffectsAssignment_3() { return cEffectsAssignment_3; }

		//DataAssignmentEffect
		public RuleCall getEffectsDataAssignmentEffectParserRuleCall_3_0() { return cEffectsDataAssignmentEffectParserRuleCall_3_0; }

		//(";" effects+=DataAssignmentEffect)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//effects+=DataAssignmentEffect
		public Assignment getEffectsAssignment_4_1() { return cEffectsAssignment_4_1; }

		//DataAssignmentEffect
		public RuleCall getEffectsDataAssignmentEffectParserRuleCall_4_1_0() { return cEffectsDataAssignmentEffectParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConditionalDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalDependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cConditionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_0_1_0 = (RuleCall)cConditionAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEffectsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEffectsEffectParserRuleCall_0_3_0 = (RuleCall)cEffectsAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cEffectsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cEffectsEffectParserRuleCall_0_4_1_0 = (RuleCall)cEffectsAssignment_0_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEventComplexEventParserRuleCall_1_2_0 = (RuleCall)cEventAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cEffectsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cEffectsLimitedEffectParserRuleCall_1_5_0 = (RuleCall)cEffectsAssignment_1_5.eContents().get(0);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cSemicolonKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Assignment cEffectsAssignment_1_6_1 = (Assignment)cGroup_1_6.eContents().get(1);
		private final RuleCall cEffectsLimitedEffectParserRuleCall_1_6_1_0 = (RuleCall)cEffectsAssignment_1_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		
		//ConditionalDependency:
		//	"if" condition=Condition "{" effects+=Effect (";" effects+=Effect)* ";"? "}" | "if" "[" event=ComplexEvent "]" "{"
		//	effects+=LimitedEffect (";" effects+=LimitedEffect)* ";"? "}";
		@Override public ParserRule getRule() { return rule; }

		//"if" condition=Condition "{" effects+=Effect (";" effects+=Effect)* ";"? "}" | "if" "[" event=ComplexEvent "]" "{"
		//effects+=LimitedEffect (";" effects+=LimitedEffect)* ";"? "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"if" condition=Condition "{" effects+=Effect (";" effects+=Effect)* ";"? "}"
		public Group getGroup_0() { return cGroup_0; }

		//"if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//condition=Condition
		public Assignment getConditionAssignment_0_1() { return cConditionAssignment_0_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_0_1_0() { return cConditionConditionParserRuleCall_0_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//effects+=Effect
		public Assignment getEffectsAssignment_0_3() { return cEffectsAssignment_0_3; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_0_3_0() { return cEffectsEffectParserRuleCall_0_3_0; }

		//(";" effects+=Effect)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//";"
		public Keyword getSemicolonKeyword_0_4_0() { return cSemicolonKeyword_0_4_0; }

		//effects+=Effect
		public Assignment getEffectsAssignment_0_4_1() { return cEffectsAssignment_0_4_1; }

		//Effect
		public RuleCall getEffectsEffectParserRuleCall_0_4_1_0() { return cEffectsEffectParserRuleCall_0_4_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//"if" "[" event=ComplexEvent "]" "{" effects+=LimitedEffect (";" effects+=LimitedEffect)* ";"? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//event=ComplexEvent
		public Assignment getEventAssignment_1_2() { return cEventAssignment_1_2; }

		//ComplexEvent
		public RuleCall getEventComplexEventParserRuleCall_1_2_0() { return cEventComplexEventParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }

		//effects+=LimitedEffect
		public Assignment getEffectsAssignment_1_5() { return cEffectsAssignment_1_5; }

		//LimitedEffect
		public RuleCall getEffectsLimitedEffectParserRuleCall_1_5_0() { return cEffectsLimitedEffectParserRuleCall_1_5_0; }

		//(";" effects+=LimitedEffect)*
		public Group getGroup_1_6() { return cGroup_1_6; }

		//";"
		public Keyword getSemicolonKeyword_1_6_0() { return cSemicolonKeyword_1_6_0; }

		//effects+=LimitedEffect
		public Assignment getEffectsAssignment_1_6_1() { return cEffectsAssignment_1_6_1; }

		//LimitedEffect
		public RuleCall getEffectsLimitedEffectParserRuleCall_1_6_1_0() { return cEffectsLimitedEffectParserRuleCall_1_6_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_7() { return cSemicolonKeyword_1_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_8() { return cRightCurlyBracketKeyword_1_8; }
	}

	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnableDisableEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataAssignmentEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClockResetEffectParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Effect:
		//	EnableDisableEffect | DataAssignmentEffect | ClockResetEffect;
		@Override public ParserRule getRule() { return rule; }

		//EnableDisableEffect | DataAssignmentEffect | ClockResetEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnableDisableEffect
		public RuleCall getEnableDisableEffectParserRuleCall_0() { return cEnableDisableEffectParserRuleCall_0; }

		//DataAssignmentEffect
		public RuleCall getDataAssignmentEffectParserRuleCall_1() { return cDataAssignmentEffectParserRuleCall_1; }

		//ClockResetEffect
		public RuleCall getClockResetEffectParserRuleCall_2() { return cClockResetEffectParserRuleCall_2; }
	}

	public class LimitedEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LimitedEffect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataAssignmentEffectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClockResetEffectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LimitedEffect returns Effect:
		//	DataAssignmentEffect | ClockResetEffect;
		@Override public ParserRule getRule() { return rule; }

		//DataAssignmentEffect | ClockResetEffect
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataAssignmentEffect
		public RuleCall getDataAssignmentEffectParserRuleCall_0() { return cDataAssignmentEffectParserRuleCall_0; }

		//ClockResetEffect
		public RuleCall getClockResetEffectParserRuleCall_1() { return cClockResetEffectParserRuleCall_1; }
	}

	public class EnableDisableEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnableDisableEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIsEnableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIsEnableEnableKeyword_0_0_0 = (Keyword)cIsEnableAssignment_0_0.eContents().get(0);
		private final Keyword cDisableKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		
		//EnableDisableEffect:
		//	(isEnable?="enable" | "disable") event=Event;
		@Override public ParserRule getRule() { return rule; }

		//(isEnable?="enable" | "disable") event=Event
		public Group getGroup() { return cGroup; }

		//isEnable?="enable" | "disable"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//isEnable?="enable"
		public Assignment getIsEnableAssignment_0_0() { return cIsEnableAssignment_0_0; }

		//"enable"
		public Keyword getIsEnableEnableKeyword_0_0_0() { return cIsEnableEnableKeyword_0_0_0; }

		//"disable"
		public Keyword getDisableKeyword_0_1() { return cDisableKeyword_0_1; }

		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }
	}

	public class DataAssignmentEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataAssignmentEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLhs_typedNamedElementExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0 = (RuleCall)cLhs_typedNamedElementExpressionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cAssignOperatorAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0 = (RuleCall)cAssignOperatorAssignment_2_0_0.eContents().get(0);
		private final Assignment cRhs_assignExpressionAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0 = (RuleCall)cRhs_assignExpressionAssignment_2_0_1.eContents().get(0);
		private final Assignment cIncrementDecrementOperatorAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0 = (RuleCall)cIncrementDecrementOperatorAssignment_2_1.eContents().get(0);
		
		//DataAssignmentEffect:
		//	"assign" lhs_typedNamedElementExpression=TypedNamedElementExpression (assignOperator=AssignOperator
		//	rhs_assignExpression=InitializeExpression | incrementDecrementOperator=IncrementDecrementOperatorExpression);
		@Override public ParserRule getRule() { return rule; }

		//"assign" lhs_typedNamedElementExpression=TypedNamedElementExpression (assignOperator=AssignOperator
		//rhs_assignExpression=InitializeExpression | incrementDecrementOperator=IncrementDecrementOperatorExpression)
		public Group getGroup() { return cGroup; }

		//"assign"
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }

		//lhs_typedNamedElementExpression=TypedNamedElementExpression
		public Assignment getLhs_typedNamedElementExpressionAssignment_1() { return cLhs_typedNamedElementExpressionAssignment_1; }

		//TypedNamedElementExpression
		public RuleCall getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0() { return cLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0; }

		//assignOperator=AssignOperator rhs_assignExpression=InitializeExpression |
		//incrementDecrementOperator=IncrementDecrementOperatorExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//assignOperator=AssignOperator rhs_assignExpression=InitializeExpression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//assignOperator=AssignOperator
		public Assignment getAssignOperatorAssignment_2_0_0() { return cAssignOperatorAssignment_2_0_0; }

		//AssignOperator
		public RuleCall getAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0() { return cAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0; }

		//rhs_assignExpression=InitializeExpression
		public Assignment getRhs_assignExpressionAssignment_2_0_1() { return cRhs_assignExpressionAssignment_2_0_1; }

		//InitializeExpression
		public RuleCall getRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0() { return cRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0; }

		//incrementDecrementOperator=IncrementDecrementOperatorExpression
		public Assignment getIncrementDecrementOperatorAssignment_2_1() { return cIncrementDecrementOperatorAssignment_2_1; }

		//IncrementDecrementOperatorExpression
		public RuleCall getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0() { return cIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0; }
	}

	public class ClockResetEffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockResetEffect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResetClocksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClocksClockCrossReference_1_0 = (CrossReference)cClocksAssignment_1.eContents().get(0);
		private final RuleCall cClocksClockQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cClocksClockCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAndKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClocksAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cClocksClockCrossReference_2_1_0 = (CrossReference)cClocksAssignment_2_1.eContents().get(0);
		private final RuleCall cClocksClockQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cClocksClockCrossReference_2_1_0.eContents().get(1);
		
		//// reset without an blank does not parse correctly, maybe it is a xtext keyword
		//ClockResetEffect:
		//	"reset clocks" clocks+=[realtimestatechart::Clock|QualifiedName] ("and"
		//	clocks+=[realtimestatechart::Clock|QualifiedName])*;
		@Override public ParserRule getRule() { return rule; }

		//"reset clocks" clocks+=[realtimestatechart::Clock|QualifiedName] ("and"
		//clocks+=[realtimestatechart::Clock|QualifiedName])*
		public Group getGroup() { return cGroup; }

		//"reset clocks"
		public Keyword getResetClocksKeyword_0() { return cResetClocksKeyword_0; }

		//clocks+=[realtimestatechart::Clock|QualifiedName]
		public Assignment getClocksAssignment_1() { return cClocksAssignment_1; }

		//[realtimestatechart::Clock|QualifiedName]
		public CrossReference getClocksClockCrossReference_1_0() { return cClocksClockCrossReference_1_0; }

		//QualifiedName
		public RuleCall getClocksClockQualifiedNameParserRuleCall_1_0_1() { return cClocksClockQualifiedNameParserRuleCall_1_0_1; }

		//("and" clocks+=[realtimestatechart::Clock|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//"and"
		public Keyword getAndKeyword_2_0() { return cAndKeyword_2_0; }

		//clocks+=[realtimestatechart::Clock|QualifiedName]
		public Assignment getClocksAssignment_2_1() { return cClocksAssignment_2_1; }

		//[realtimestatechart::Clock|QualifiedName]
		public CrossReference getClocksClockCrossReference_2_1_0() { return cClocksClockCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getClocksClockQualifiedNameParserRuleCall_2_1_0_1() { return cClocksClockQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class DataMergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataMerge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cMergeVariableKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cVariablesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_0_1_0 = (CrossReference)cVariablesAssignment_0_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_0_1_0_1 = (RuleCall)cVariablesVariableCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cIntoVariableKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cVariableNameAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cVariableNameEStringParserRuleCall_0_2_1_0 = (RuleCall)cVariableNameAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cMergeVariablesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_1_1_0 = (CrossReference)cVariablesAssignment_1_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cVariablesVariableCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVariablesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_1_2_1_0 = (CrossReference)cVariablesAssignment_1_2_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_1_2_1_0_1 = (RuleCall)cVariablesVariableCrossReference_1_2_1_0.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cIntoVariableKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cVariableNameAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cVariableNameEStringParserRuleCall_1_3_1_0 = (RuleCall)cVariableNameAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cMergeVariableKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_2_1_0 = (CrossReference)cVariablesAssignment_2_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cVariablesVariableCrossReference_2_1_0.eContents().get(1);
		private final Keyword cIntoHybridportKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPortAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cPortHybridPortCrossReference_2_3_0 = (CrossReference)cPortAssignment_2_3.eContents().get(0);
		private final RuleCall cPortHybridPortQualifiedNameParserRuleCall_2_3_0_1 = (RuleCall)cPortHybridPortCrossReference_2_3_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMergeVariablesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_3_1_0 = (CrossReference)cVariablesAssignment_3_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cVariablesVariableCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cVariablesVariableCrossReference_3_2_1_0 = (CrossReference)cVariablesAssignment_3_2_1.eContents().get(0);
		private final RuleCall cVariablesVariableQualifiedNameParserRuleCall_3_2_1_0_1 = (RuleCall)cVariablesVariableCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cIntoHybridportKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cPortAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cPortHybridPortCrossReference_3_4_0 = (CrossReference)cPortAssignment_3_4.eContents().get(0);
		private final RuleCall cPortHybridPortQualifiedNameParserRuleCall_3_4_0_1 = (RuleCall)cPortHybridPortCrossReference_3_4_0.eContents().get(1);
		
		//DataMerge:
		//	"merge variable" variables+=[behavior::Variable|QualifiedName] ("into variable" variableName=EString)? |
		//	"merge variables" variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+
		//	("into variable" variableName=EString)? | "merge variable" variables+=[behavior::Variable|QualifiedName]
		//	"into hybridport" port=[component::HybridPort|QualifiedName] | "merge variables"
		//	variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+ "into hybridport"
		//	port=[component::HybridPort|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"merge variable" variables+=[behavior::Variable|QualifiedName] ("into variable" variableName=EString)? |
		//"merge variables" variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+
		//("into variable" variableName=EString)? | "merge variable" variables+=[behavior::Variable|QualifiedName]
		//"into hybridport" port=[component::HybridPort|QualifiedName] | "merge variables"
		//variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+ "into hybridport"
		//port=[component::HybridPort|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"merge variable" variables+=[behavior::Variable|QualifiedName] ("into variable" variableName=EString)?
		public Group getGroup_0() { return cGroup_0; }

		//"merge variable"
		public Keyword getMergeVariableKeyword_0_0() { return cMergeVariableKeyword_0_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_0_1() { return cVariablesAssignment_0_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_0_1_0() { return cVariablesVariableCrossReference_0_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_0_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_0_1_0_1; }

		//("into variable" variableName=EString)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"into variable"
		public Keyword getIntoVariableKeyword_0_2_0() { return cIntoVariableKeyword_0_2_0; }

		//variableName=EString
		public Assignment getVariableNameAssignment_0_2_1() { return cVariableNameAssignment_0_2_1; }

		//EString
		public RuleCall getVariableNameEStringParserRuleCall_0_2_1_0() { return cVariableNameEStringParserRuleCall_0_2_1_0; }

		//"merge variables" variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+
		//("into variable" variableName=EString)?
		public Group getGroup_1() { return cGroup_1; }

		//"merge variables"
		public Keyword getMergeVariablesKeyword_1_0() { return cMergeVariablesKeyword_1_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_1_1_0() { return cVariablesVariableCrossReference_1_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_1_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_1_1_0_1; }

		//("," variables+=[behavior::Variable|QualifiedName])+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_1_2_1() { return cVariablesAssignment_1_2_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_1_2_1_0() { return cVariablesVariableCrossReference_1_2_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_1_2_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_1_2_1_0_1; }

		//("into variable" variableName=EString)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"into variable"
		public Keyword getIntoVariableKeyword_1_3_0() { return cIntoVariableKeyword_1_3_0; }

		//variableName=EString
		public Assignment getVariableNameAssignment_1_3_1() { return cVariableNameAssignment_1_3_1; }

		//EString
		public RuleCall getVariableNameEStringParserRuleCall_1_3_1_0() { return cVariableNameEStringParserRuleCall_1_3_1_0; }

		//"merge variable" variables+=[behavior::Variable|QualifiedName] "into hybridport"
		//port=[component::HybridPort|QualifiedName]
		public Group getGroup_2() { return cGroup_2; }

		//"merge variable"
		public Keyword getMergeVariableKeyword_2_0() { return cMergeVariableKeyword_2_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_2_1_0() { return cVariablesVariableCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_2_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_2_1_0_1; }

		//"into hybridport"
		public Keyword getIntoHybridportKeyword_2_2() { return cIntoHybridportKeyword_2_2; }

		//port=[component::HybridPort|QualifiedName]
		public Assignment getPortAssignment_2_3() { return cPortAssignment_2_3; }

		//[component::HybridPort|QualifiedName]
		public CrossReference getPortHybridPortCrossReference_2_3_0() { return cPortHybridPortCrossReference_2_3_0; }

		//QualifiedName
		public RuleCall getPortHybridPortQualifiedNameParserRuleCall_2_3_0_1() { return cPortHybridPortQualifiedNameParserRuleCall_2_3_0_1; }

		//"merge variables" variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+
		//"into hybridport" port=[component::HybridPort|QualifiedName]
		public Group getGroup_3() { return cGroup_3; }

		//"merge variables"
		public Keyword getMergeVariablesKeyword_3_0() { return cMergeVariablesKeyword_3_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_3_1_0() { return cVariablesVariableCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_3_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_3_1_0_1; }

		//("," variables+=[behavior::Variable|QualifiedName])+
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//variables+=[behavior::Variable|QualifiedName]
		public Assignment getVariablesAssignment_3_2_1() { return cVariablesAssignment_3_2_1; }

		//[behavior::Variable|QualifiedName]
		public CrossReference getVariablesVariableCrossReference_3_2_1_0() { return cVariablesVariableCrossReference_3_2_1_0; }

		//QualifiedName
		public RuleCall getVariablesVariableQualifiedNameParserRuleCall_3_2_1_0_1() { return cVariablesVariableQualifiedNameParserRuleCall_3_2_1_0_1; }

		//"into hybridport"
		public Keyword getIntoHybridportKeyword_3_3() { return cIntoHybridportKeyword_3_3; }

		//port=[component::HybridPort|QualifiedName]
		public Assignment getPortAssignment_3_4() { return cPortAssignment_3_4; }

		//[component::HybridPort|QualifiedName]
		public CrossReference getPortHybridPortCrossReference_3_4_0() { return cPortHybridPortCrossReference_3_4_0; }

		//QualifiedName
		public RuleCall getPortHybridPortQualifiedNameParserRuleCall_3_4_0_1() { return cPortHybridPortQualifiedNameParserRuleCall_3_4_0_1; }
	}

	public class ClockMergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockMerge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMergeClocksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClocksAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClocksClockCrossReference_1_0 = (CrossReference)cClocksAssignment_1.eContents().get(0);
		private final RuleCall cClocksClockQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cClocksClockCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cClocksAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cClocksClockCrossReference_2_1_0 = (CrossReference)cClocksAssignment_2_1.eContents().get(0);
		private final RuleCall cClocksClockQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cClocksClockCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIntoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClockNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cClockNameEStringParserRuleCall_3_1_0 = (RuleCall)cClockNameAssignment_3_1.eContents().get(0);
		
		//ClockMerge:
		//	"merge clocks" clocks+=[realtimestatechart::Clock|QualifiedName] (","
		//	clocks+=[realtimestatechart::Clock|QualifiedName])+ ("into" clockName=EString)?;
		@Override public ParserRule getRule() { return rule; }

		//"merge clocks" clocks+=[realtimestatechart::Clock|QualifiedName] (","
		//clocks+=[realtimestatechart::Clock|QualifiedName])+ ("into" clockName=EString)?
		public Group getGroup() { return cGroup; }

		//"merge clocks"
		public Keyword getMergeClocksKeyword_0() { return cMergeClocksKeyword_0; }

		//clocks+=[realtimestatechart::Clock|QualifiedName]
		public Assignment getClocksAssignment_1() { return cClocksAssignment_1; }

		//[realtimestatechart::Clock|QualifiedName]
		public CrossReference getClocksClockCrossReference_1_0() { return cClocksClockCrossReference_1_0; }

		//QualifiedName
		public RuleCall getClocksClockQualifiedNameParserRuleCall_1_0_1() { return cClocksClockQualifiedNameParserRuleCall_1_0_1; }

		//("," clocks+=[realtimestatechart::Clock|QualifiedName])+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//clocks+=[realtimestatechart::Clock|QualifiedName]
		public Assignment getClocksAssignment_2_1() { return cClocksAssignment_2_1; }

		//[realtimestatechart::Clock|QualifiedName]
		public CrossReference getClocksClockCrossReference_2_1_0() { return cClocksClockCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getClocksClockQualifiedNameParserRuleCall_2_1_0_1() { return cClocksClockQualifiedNameParserRuleCall_2_1_0_1; }

		//("into" clockName=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"into"
		public Keyword getIntoKeyword_3_0() { return cIntoKeyword_3_0; }

		//clockName=EString
		public Assignment getClockNameAssignment_3_1() { return cClockNameAssignment_3_1; }

		//EString
		public RuleCall getClockNameEStringParserRuleCall_3_1_0() { return cClockNameEStringParserRuleCall_3_1_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransitionEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStateEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateCombinationEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMessageEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/////////////////////////////////////////
		//// Events
		/////////////////////////////////////////
		//Event:
		//	TransitionEvent | StateEvent | StateCombinationEvent | MessageEvent;
		@Override public ParserRule getRule() { return rule; }

		//TransitionEvent | StateEvent | StateCombinationEvent | MessageEvent
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransitionEvent
		public RuleCall getTransitionEventParserRuleCall_0() { return cTransitionEventParserRuleCall_0; }

		//StateEvent
		public RuleCall getStateEventParserRuleCall_1() { return cStateEventParserRuleCall_1; }

		//StateCombinationEvent
		public RuleCall getStateCombinationEventParserRuleCall_2() { return cStateCombinationEventParserRuleCall_2; }

		//MessageEvent
		public RuleCall getMessageEventParserRuleCall_3() { return cMessageEventParserRuleCall_3; }
	}

	public class MessageEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindMessageEventKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPortAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPortDiscretePortCrossReference_1_0_0 = (CrossReference)cPortAssignment_1_0.eContents().get(0);
		private final RuleCall cPortDiscretePortIDTerminalRuleCall_1_0_0_1 = (RuleCall)cPortDiscretePortCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeMessageTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeMessageTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeMessageTypeCrossReference_2_0.eContents().get(1);
		
		//MessageEvent:
		//	kind=MessageEventKind (port=[component::DiscretePort] ".")? type=[msgtype::MessageType];
		@Override public ParserRule getRule() { return rule; }

		//kind=MessageEventKind (port=[component::DiscretePort] ".")? type=[msgtype::MessageType]
		public Group getGroup() { return cGroup; }

		//kind=MessageEventKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//MessageEventKind
		public RuleCall getKindMessageEventKindEnumRuleCall_0_0() { return cKindMessageEventKindEnumRuleCall_0_0; }

		//(port=[component::DiscretePort] ".")?
		public Group getGroup_1() { return cGroup_1; }

		//port=[component::DiscretePort]
		public Assignment getPortAssignment_1_0() { return cPortAssignment_1_0; }

		//[component::DiscretePort]
		public CrossReference getPortDiscretePortCrossReference_1_0_0() { return cPortDiscretePortCrossReference_1_0_0; }

		//ID
		public RuleCall getPortDiscretePortIDTerminalRuleCall_1_0_0_1() { return cPortDiscretePortIDTerminalRuleCall_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//type=[msgtype::MessageType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[msgtype::MessageType]
		public CrossReference getTypeMessageTypeCrossReference_2_0() { return cTypeMessageTypeCrossReference_2_0; }

		//ID
		public RuleCall getTypeMessageTypeIDTerminalRuleCall_2_0_1() { return cTypeMessageTypeIDTerminalRuleCall_2_0_1; }
	}

	public class TransitionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTransitionTransitionCrossReference_1_0 = (CrossReference)cTransitionAssignment_1.eContents().get(0);
		private final RuleCall cTransitionTransitionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTransitionTransitionCrossReference_1_0.eContents().get(1);
		
		//TransitionEvent:
		//	"transition" transition=[realtimestatechart::Transition|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//"transition" transition=[realtimestatechart::Transition|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"transition"
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }

		//transition=[realtimestatechart::Transition|QualifiedName]
		public Assignment getTransitionAssignment_1() { return cTransitionAssignment_1; }

		//[realtimestatechart::Transition|QualifiedName]
		public CrossReference getTransitionTransitionCrossReference_1_0() { return cTransitionTransitionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTransitionTransitionQualifiedNameParserRuleCall_1_0_1() { return cTransitionTransitionQualifiedNameParserRuleCall_1_0_1; }
	}

	public class StateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindStateEventKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateStateQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cStateStateCrossReference_1_0.eContents().get(1);
		
		//StateEvent:
		//	kind=StateEventKind state=[realtimestatechart::State|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//kind=StateEventKind state=[realtimestatechart::State|QualifiedName]
		public Group getGroup() { return cGroup; }

		//kind=StateEventKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//StateEventKind
		public RuleCall getKindStateEventKindEnumRuleCall_0_0() { return cKindStateEventKindEnumRuleCall_0_0; }

		//state=[realtimestatechart::State|QualifiedName]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStateStateCrossReference_1_0() { return cStateStateCrossReference_1_0; }

		//QualifiedName
		public RuleCall getStateStateQualifiedNameParserRuleCall_1_0_1() { return cStateStateQualifiedNameParserRuleCall_1_0_1; }
	}

	public class StateCombinationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateCombinationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindStateEventKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Keyword cCombinationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStatesStateCrossReference_2_0 = (CrossReference)cStatesAssignment_2.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cStatesStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_3_1_0 = (CrossReference)cStatesAssignment_3_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cStatesStateCrossReference_3_1_0.eContents().get(1);
		
		//StateCombinationEvent:
		//	kind=StateEventKind "combination" states+=[realtimestatechart::State|QualifiedName] (","
		//	states+=[realtimestatechart::State|QualifiedName])+;
		@Override public ParserRule getRule() { return rule; }

		//kind=StateEventKind "combination" states+=[realtimestatechart::State|QualifiedName] (","
		//states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup() { return cGroup; }

		//kind=StateEventKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//StateEventKind
		public RuleCall getKindStateEventKindEnumRuleCall_0_0() { return cKindStateEventKindEnumRuleCall_0_0; }

		//"combination"
		public Keyword getCombinationKeyword_1() { return cCombinationKeyword_1; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_2_0() { return cStatesStateCrossReference_2_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_2_0_1() { return cStatesStateQualifiedNameParserRuleCall_2_0_1; }

		//("," states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_3_1_0() { return cStatesStateCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_3_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_3_1_0_1; }
	}

	public class SynchronizationEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynchronizationEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSelectorExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSelectorExpressionExpressionParserRuleCall_2_0 = (RuleCall)cSelectorExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SynchronizationEvent:
		//	event=Event "[" selectorExpression=Expression "]";
		@Override public ParserRule getRule() { return rule; }

		//event=Event "[" selectorExpression=Expression "]"
		public Group getGroup() { return cGroup; }

		//event=Event
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//Event
		public RuleCall getEventEventParserRuleCall_0_0() { return cEventEventParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//selectorExpression=Expression
		public Assignment getSelectorExpressionAssignment_2() { return cSelectorExpressionAssignment_2; }

		//Expression
		public RuleCall getSelectorExpressionExpressionParserRuleCall_2_0() { return cSelectorExpressionExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ComplexEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cCompositionEventParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cCountedEventParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cDelayedEventParserRuleCall_0_1_2 = (RuleCall)cAlternatives_0_1.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexEvent returns Event:
		//	"(" (CompositionEvent | CountedEvent | DelayedEvent) ")" | Event;
		@Override public ParserRule getRule() { return rule; }

		//"(" (CompositionEvent | CountedEvent | DelayedEvent) ")" | Event
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" (CompositionEvent | CountedEvent | DelayedEvent) ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//CompositionEvent | CountedEvent | DelayedEvent
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//CompositionEvent
		public RuleCall getCompositionEventParserRuleCall_0_1_0() { return cCompositionEventParserRuleCall_0_1_0; }

		//CountedEvent
		public RuleCall getCountedEventParserRuleCall_0_1_1() { return cCountedEventParserRuleCall_0_1_1; }

		//DelayedEvent
		public RuleCall getDelayedEventParserRuleCall_0_1_2() { return cDelayedEventParserRuleCall_0_1_2; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
	}

	public class CompositionEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEventComplexEventParserRuleCall_0_0 = (RuleCall)cLeftEventAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindLogicOperatorEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Assignment cRightEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightEventComplexEventParserRuleCall_2_0 = (RuleCall)cRightEventAssignment_2.eContents().get(0);
		
		//CompositionEvent:
		//	leftEvent=ComplexEvent kind=LogicOperator rightEvent=ComplexEvent;
		@Override public ParserRule getRule() { return rule; }

		//leftEvent=ComplexEvent kind=LogicOperator rightEvent=ComplexEvent
		public Group getGroup() { return cGroup; }

		//leftEvent=ComplexEvent
		public Assignment getLeftEventAssignment_0() { return cLeftEventAssignment_0; }

		//ComplexEvent
		public RuleCall getLeftEventComplexEventParserRuleCall_0_0() { return cLeftEventComplexEventParserRuleCall_0_0; }

		//kind=LogicOperator
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }

		//LogicOperator
		public RuleCall getKindLogicOperatorEnumRuleCall_1_0() { return cKindLogicOperatorEnumRuleCall_1_0; }

		//rightEvent=ComplexEvent
		public Assignment getRightEventAssignment_2() { return cRightEventAssignment_2; }

		//ComplexEvent
		public RuleCall getRightEventComplexEventParserRuleCall_2_0() { return cRightEventComplexEventParserRuleCall_2_0; }
	}

	public class CountedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CountedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventComplexEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Keyword cWhenCountedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCounterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCounterEIntParserRuleCall_2_0 = (RuleCall)cCounterAssignment_2.eContents().get(0);
		private final Keyword cTimesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CountedEvent:
		//	event=ComplexEvent "when counted" counter=EInt "times";
		@Override public ParserRule getRule() { return rule; }

		//event=ComplexEvent "when counted" counter=EInt "times"
		public Group getGroup() { return cGroup; }

		//event=ComplexEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//ComplexEvent
		public RuleCall getEventComplexEventParserRuleCall_0_0() { return cEventComplexEventParserRuleCall_0_0; }

		//"when counted"
		public Keyword getWhenCountedKeyword_1() { return cWhenCountedKeyword_1; }

		//counter=EInt
		public Assignment getCounterAssignment_2() { return cCounterAssignment_2; }

		//EInt
		public RuleCall getCounterEIntParserRuleCall_2_0() { return cCounterEIntParserRuleCall_2_0; }

		//"times"
		public Keyword getTimesKeyword_3() { return cTimesKeyword_3; }
	}

	public class DelayedEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelayedEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventComplexEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Keyword cDelayedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDelayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDelayTimeValueParserRuleCall_2_0 = (RuleCall)cDelayAssignment_2.eContents().get(0);
		
		//DelayedEvent:
		//	event=ComplexEvent "delayed by" delay=TimeValue;
		@Override public ParserRule getRule() { return rule; }

		//event=ComplexEvent "delayed by" delay=TimeValue
		public Group getGroup() { return cGroup; }

		//event=ComplexEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//ComplexEvent
		public RuleCall getEventComplexEventParserRuleCall_0_0() { return cEventComplexEventParserRuleCall_0_0; }

		//"delayed by"
		public Keyword getDelayedByKeyword_1() { return cDelayedByKeyword_1; }

		//delay=TimeValue
		public Assignment getDelayAssignment_2() { return cDelayAssignment_2; }

		//TimeValue
		public RuleCall getDelayTimeValueParserRuleCall_2_0() { return cDelayTimeValueParserRuleCall_2_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final RuleCall cCompositionOrConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////////////////////////////////
		//// Dependency Conditions
		/////////////////////////////////////////
		//Condition:
		//	CompositionOrCondition;
		@Override public ParserRule getRule() { return rule; }

		//CompositionOrCondition
		public RuleCall getCompositionOrConditionParserRuleCall() { return cCompositionOrConditionParserRuleCall; }
	}

	public class CompositionOrConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionOrCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompositionAndConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositionConditionLeftConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cKindAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKindOrOperatorEnumRuleCall_1_1_0 = (RuleCall)cKindAssignment_1_1.eContents().get(0);
		private final Assignment cRightConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionCompositionOrConditionParserRuleCall_1_2_0 = (RuleCall)cRightConditionAssignment_1_2.eContents().get(0);
		
		//CompositionOrCondition returns Condition:
		//	CompositionAndCondition ({CompositionCondition.leftCondition=current} kind=OrOperator
		//	rightCondition=CompositionOrCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//CompositionAndCondition ({CompositionCondition.leftCondition=current} kind=OrOperator
		//rightCondition=CompositionOrCondition)?
		public Group getGroup() { return cGroup; }

		//CompositionAndCondition
		public RuleCall getCompositionAndConditionParserRuleCall_0() { return cCompositionAndConditionParserRuleCall_0; }

		//({CompositionCondition.leftCondition=current} kind=OrOperator rightCondition=CompositionOrCondition)?
		public Group getGroup_1() { return cGroup_1; }

		//{CompositionCondition.leftCondition=current}
		public Action getCompositionConditionLeftConditionAction_1_0() { return cCompositionConditionLeftConditionAction_1_0; }

		//kind=OrOperator
		public Assignment getKindAssignment_1_1() { return cKindAssignment_1_1; }

		//OrOperator
		public RuleCall getKindOrOperatorEnumRuleCall_1_1_0() { return cKindOrOperatorEnumRuleCall_1_1_0; }

		//rightCondition=CompositionOrCondition
		public Assignment getRightConditionAssignment_1_2() { return cRightConditionAssignment_1_2; }

		//CompositionOrCondition
		public RuleCall getRightConditionCompositionOrConditionParserRuleCall_1_2_0() { return cRightConditionCompositionOrConditionParserRuleCall_1_2_0; }
	}

	public class CompositionAndConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositionAndCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionWithoutKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositionConditionLeftConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cKindAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKindAndOperatorEnumRuleCall_1_1_0 = (RuleCall)cKindAssignment_1_1.eContents().get(0);
		private final Assignment cRightConditionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionCompositionAndConditionParserRuleCall_1_2_0 = (RuleCall)cRightConditionAssignment_1_2.eContents().get(0);
		
		//CompositionAndCondition returns Condition:
		//	ConditionWithoutKeyword ({CompositionCondition.leftCondition=current} kind=AndOperator
		//	rightCondition=CompositionAndCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//ConditionWithoutKeyword ({CompositionCondition.leftCondition=current} kind=AndOperator
		//rightCondition=CompositionAndCondition)?
		public Group getGroup() { return cGroup; }

		//ConditionWithoutKeyword
		public RuleCall getConditionWithoutKeywordParserRuleCall_0() { return cConditionWithoutKeywordParserRuleCall_0; }

		//({CompositionCondition.leftCondition=current} kind=AndOperator rightCondition=CompositionAndCondition)?
		public Group getGroup_1() { return cGroup_1; }

		//{CompositionCondition.leftCondition=current}
		public Action getCompositionConditionLeftConditionAction_1_0() { return cCompositionConditionLeftConditionAction_1_0; }

		//kind=AndOperator
		public Assignment getKindAssignment_1_1() { return cKindAssignment_1_1; }

		//AndOperator
		public RuleCall getKindAndOperatorEnumRuleCall_1_1_0() { return cKindAndOperatorEnumRuleCall_1_1_0; }

		//rightCondition=CompositionAndCondition
		public Assignment getRightConditionAssignment_1_2() { return cRightConditionAssignment_1_2; }

		//CompositionAndCondition
		public RuleCall getRightConditionCompositionAndConditionParserRuleCall_1_2_0() { return cRightConditionCompositionAndConditionParserRuleCall_1_2_0; }
	}

	public class ConditionWithoutKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionWithoutKeyword");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cClockConditionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cStateStatusConditionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cEventConstrainedIntervalConditionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cDataConditionParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cCompositionOrConditionParserRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ConditionWithoutKeyword returns Condition:
		//	"[" (ClockCondition | StateStatusCondition | EventConstrainedIntervalCondition | DataCondition |
		//	CompositionOrCondition) "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" (ClockCondition | StateStatusCondition | EventConstrainedIntervalCondition | DataCondition | CompositionOrCondition)
		//"]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//ClockCondition | StateStatusCondition | EventConstrainedIntervalCondition | DataCondition | CompositionOrCondition
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ClockCondition
		public RuleCall getClockConditionParserRuleCall_1_0() { return cClockConditionParserRuleCall_1_0; }

		//StateStatusCondition
		public RuleCall getStateStatusConditionParserRuleCall_1_1() { return cStateStatusConditionParserRuleCall_1_1; }

		//EventConstrainedIntervalCondition
		public RuleCall getEventConstrainedIntervalConditionParserRuleCall_1_2() { return cEventConstrainedIntervalConditionParserRuleCall_1_2; }

		//DataCondition
		public RuleCall getDataConditionParserRuleCall_1_3() { return cDataConditionParserRuleCall_1_3; }

		//CompositionOrCondition
		public RuleCall getCompositionOrConditionParserRuleCall_1_4() { return cCompositionOrConditionParserRuleCall_1_4; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class StateStatusConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateStatusCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStatesAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cStatesStateCrossReference_0_0_0 = (CrossReference)cStatesAssignment_0_0.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cStatesStateCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cStateCombinationKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cStatesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_0_1_1_0 = (CrossReference)cStatesAssignment_0_1_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_0_1_1_0_1 = (RuleCall)cStatesStateCrossReference_0_1_1_0.eContents().get(1);
		private final Group cGroup_0_1_2 = (Group)cGroup_0_1.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_2_0 = (Keyword)cGroup_0_1_2.eContents().get(0);
		private final Assignment cStatesAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final CrossReference cStatesStateCrossReference_0_1_2_1_0 = (CrossReference)cStatesAssignment_0_1_2_1.eContents().get(0);
		private final RuleCall cStatesStateQualifiedNameParserRuleCall_0_1_2_1_0_1 = (RuleCall)cStatesStateCrossReference_0_1_2_1_0.eContents().get(1);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindStateStatusKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//StateStatusCondition:
		//	(states+=[realtimestatechart::State|QualifiedName] | "state combination"
		//	states+=[realtimestatechart::State|QualifiedName] ("," states+=[realtimestatechart::State|QualifiedName])+)
		//	kind=StateStatusKind;
		@Override public ParserRule getRule() { return rule; }

		//(states+=[realtimestatechart::State|QualifiedName] | "state combination"
		//states+=[realtimestatechart::State|QualifiedName] ("," states+=[realtimestatechart::State|QualifiedName])+)
		//kind=StateStatusKind
		public Group getGroup() { return cGroup; }

		//states+=[realtimestatechart::State|QualifiedName] | "state combination"
		//states+=[realtimestatechart::State|QualifiedName] ("," states+=[realtimestatechart::State|QualifiedName])+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_0_0() { return cStatesAssignment_0_0; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_0_0_0() { return cStatesStateCrossReference_0_0_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_0_0_0_1() { return cStatesStateQualifiedNameParserRuleCall_0_0_0_1; }

		//"state combination" states+=[realtimestatechart::State|QualifiedName] (","
		//states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"state combination"
		public Keyword getStateCombinationKeyword_0_1_0() { return cStateCombinationKeyword_0_1_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_0_1_1() { return cStatesAssignment_0_1_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_0_1_1_0() { return cStatesStateCrossReference_0_1_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_0_1_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_0_1_1_0_1; }

		//("," states+=[realtimestatechart::State|QualifiedName])+
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//","
		public Keyword getCommaKeyword_0_1_2_0() { return cCommaKeyword_0_1_2_0; }

		//states+=[realtimestatechart::State|QualifiedName]
		public Assignment getStatesAssignment_0_1_2_1() { return cStatesAssignment_0_1_2_1; }

		//[realtimestatechart::State|QualifiedName]
		public CrossReference getStatesStateCrossReference_0_1_2_1_0() { return cStatesStateCrossReference_0_1_2_1_0; }

		//QualifiedName
		public RuleCall getStatesStateQualifiedNameParserRuleCall_0_1_2_1_0_1() { return cStatesStateQualifiedNameParserRuleCall_0_1_2_1_0_1; }

		//kind=StateStatusKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }

		//StateStatusKind
		public RuleCall getKindStateStatusKindEnumRuleCall_1_0() { return cKindStateStatusKindEnumRuleCall_1_0; }
	}

	public class EventConstrainedIntervalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventConstrainedIntervalCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBetweenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cFromEventAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cFromEventComplexEventParserRuleCall_1_0_0_0 = (RuleCall)cFromEventAssignment_1_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cUntilEventAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cUntilEventComplexEventParserRuleCall_1_0_2_0 = (RuleCall)cUntilEventAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cInitialEnabledAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cInitialEnabledINITKeyword_1_1_0_0 = (Keyword)cInitialEnabledAssignment_1_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cUntilEventAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cUntilEventComplexEventParserRuleCall_1_1_2_0 = (RuleCall)cUntilEventAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cFromEventAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cFromEventComplexEventParserRuleCall_1_2_0_0 = (RuleCall)cFromEventAssignment_1_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Alternatives cAlternatives_1_2_2 = (Alternatives)cGroup_1_2.eContents().get(2);
		private final Assignment cUntilEventAssignment_1_2_2_0 = (Assignment)cAlternatives_1_2_2.eContents().get(0);
		private final RuleCall cUntilEventComplexEventParserRuleCall_1_2_2_0_0 = (RuleCall)cUntilEventAssignment_1_2_2_0.eContents().get(0);
		private final Assignment cEnabledInfiteAssignment_1_2_2_1 = (Assignment)cAlternatives_1_2_2.eContents().get(1);
		private final Keyword cEnabledInfiteINFINITEKeyword_1_2_2_1_0 = (Keyword)cEnabledInfiteAssignment_1_2_2_1.eContents().get(0);
		
		//EventConstrainedIntervalCondition:
		//	"between" (fromEvent=ComplexEvent "," untilEvent=ComplexEvent // ((initialEnabled?='INIT' 'or') fromEvent=ComplexEvent 'and' untilEvent=ComplexEvent )	
		//	| initialEnabled?="INIT" "," untilEvent=ComplexEvent | fromEvent=ComplexEvent "," (untilEvent=ComplexEvent |
		//	enabledInfite?="INFINITE"));
		@Override public ParserRule getRule() { return rule; }

		//"between" (fromEvent=ComplexEvent "," untilEvent=ComplexEvent // ((initialEnabled?='INIT' 'or') fromEvent=ComplexEvent 'and' untilEvent=ComplexEvent )	
		//| initialEnabled?="INIT" "," untilEvent=ComplexEvent | fromEvent=ComplexEvent "," (untilEvent=ComplexEvent |
		//enabledInfite?="INFINITE"))
		public Group getGroup() { return cGroup; }

		//"between"
		public Keyword getBetweenKeyword_0() { return cBetweenKeyword_0; }

		//fromEvent=ComplexEvent "," untilEvent=ComplexEvent // ((initialEnabled?='INIT' 'or') fromEvent=ComplexEvent 'and' untilEvent=ComplexEvent )	
		//| initialEnabled?="INIT" "," untilEvent=ComplexEvent | fromEvent=ComplexEvent "," (untilEvent=ComplexEvent |
		//enabledInfite?="INFINITE")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//fromEvent=ComplexEvent "," untilEvent=ComplexEvent
		public Group getGroup_1_0() { return cGroup_1_0; }

		//fromEvent=ComplexEvent
		public Assignment getFromEventAssignment_1_0_0() { return cFromEventAssignment_1_0_0; }

		//ComplexEvent
		public RuleCall getFromEventComplexEventParserRuleCall_1_0_0_0() { return cFromEventComplexEventParserRuleCall_1_0_0_0; }

		//","
		public Keyword getCommaKeyword_1_0_1() { return cCommaKeyword_1_0_1; }

		//untilEvent=ComplexEvent
		public Assignment getUntilEventAssignment_1_0_2() { return cUntilEventAssignment_1_0_2; }

		//ComplexEvent
		public RuleCall getUntilEventComplexEventParserRuleCall_1_0_2_0() { return cUntilEventComplexEventParserRuleCall_1_0_2_0; }

		//initialEnabled?="INIT" "," untilEvent=ComplexEvent
		public Group getGroup_1_1() { return cGroup_1_1; }

		//initialEnabled?="INIT"
		public Assignment getInitialEnabledAssignment_1_1_0() { return cInitialEnabledAssignment_1_1_0; }

		//"INIT"
		public Keyword getInitialEnabledINITKeyword_1_1_0_0() { return cInitialEnabledINITKeyword_1_1_0_0; }

		//","
		public Keyword getCommaKeyword_1_1_1() { return cCommaKeyword_1_1_1; }

		//untilEvent=ComplexEvent
		public Assignment getUntilEventAssignment_1_1_2() { return cUntilEventAssignment_1_1_2; }

		//ComplexEvent
		public RuleCall getUntilEventComplexEventParserRuleCall_1_1_2_0() { return cUntilEventComplexEventParserRuleCall_1_1_2_0; }

		//fromEvent=ComplexEvent "," (untilEvent=ComplexEvent | enabledInfite?="INFINITE")
		public Group getGroup_1_2() { return cGroup_1_2; }

		//fromEvent=ComplexEvent
		public Assignment getFromEventAssignment_1_2_0() { return cFromEventAssignment_1_2_0; }

		//ComplexEvent
		public RuleCall getFromEventComplexEventParserRuleCall_1_2_0_0() { return cFromEventComplexEventParserRuleCall_1_2_0_0; }

		//","
		public Keyword getCommaKeyword_1_2_1() { return cCommaKeyword_1_2_1; }

		//untilEvent=ComplexEvent | enabledInfite?="INFINITE"
		public Alternatives getAlternatives_1_2_2() { return cAlternatives_1_2_2; }

		//untilEvent=ComplexEvent
		public Assignment getUntilEventAssignment_1_2_2_0() { return cUntilEventAssignment_1_2_2_0; }

		//ComplexEvent
		public RuleCall getUntilEventComplexEventParserRuleCall_1_2_2_0_0() { return cUntilEventComplexEventParserRuleCall_1_2_2_0_0; }

		//enabledInfite?="INFINITE"
		public Assignment getEnabledInfiteAssignment_1_2_2_1() { return cEnabledInfiteAssignment_1_2_2_1; }

		//"INFINITE"
		public Keyword getEnabledInfiteINFINITEKeyword_1_2_2_1_0() { return cEnabledInfiteINFINITEKeyword_1_2_2_1_0; }
	}

	public class ClockConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClockCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicClockConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAuxiliaryClockConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHybridClockConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ClockCondition:
		//	BasicClockCondition | AuxiliaryClockCondition | HybridClockCondition;
		@Override public ParserRule getRule() { return rule; }

		//BasicClockCondition | AuxiliaryClockCondition | HybridClockCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicClockCondition
		public RuleCall getBasicClockConditionParserRuleCall_0() { return cBasicClockConditionParserRuleCall_0; }

		//AuxiliaryClockCondition
		public RuleCall getAuxiliaryClockConditionParserRuleCall_1() { return cAuxiliaryClockConditionParserRuleCall_1; }

		//HybridClockCondition
		public RuleCall getHybridClockConditionParserRuleCall_2() { return cHybridClockConditionParserRuleCall_2; }
	}

	public class AuxiliaryClockConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuxiliaryClockCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventComplexEventParserRuleCall_0_0 = (RuleCall)cEventAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoundTimeValueParserRuleCall_2_0 = (RuleCall)cBoundAssignment_2.eContents().get(0);
		
		//AuxiliaryClockCondition:
		//	event=ComplexEvent operator=NaturalLanguageComparingOperator bound=TimeValue;
		@Override public ParserRule getRule() { return rule; }

		//event=ComplexEvent operator=NaturalLanguageComparingOperator bound=TimeValue
		public Group getGroup() { return cGroup; }

		//event=ComplexEvent
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }

		//ComplexEvent
		public RuleCall getEventComplexEventParserRuleCall_0_0() { return cEventComplexEventParserRuleCall_0_0; }

		//operator=NaturalLanguageComparingOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//NaturalLanguageComparingOperator
		public RuleCall getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0() { return cOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0; }

		//bound=TimeValue
		public Assignment getBoundAssignment_2() { return cBoundAssignment_2; }

		//TimeValue
		public RuleCall getBoundTimeValueParserRuleCall_2_0() { return cBoundTimeValueParserRuleCall_2_0; }
	}

	public class HybridClockConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HybridClockCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionStateStatusConditionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBoundTimeValueParserRuleCall_2_0 = (RuleCall)cBoundAssignment_2.eContents().get(0);
		
		//HybridClockCondition:
		//	condition=StateStatusCondition operator=NaturalLanguageComparingOperator bound=TimeValue;
		@Override public ParserRule getRule() { return rule; }

		//condition=StateStatusCondition operator=NaturalLanguageComparingOperator bound=TimeValue
		public Group getGroup() { return cGroup; }

		//condition=StateStatusCondition
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }

		//StateStatusCondition
		public RuleCall getConditionStateStatusConditionParserRuleCall_0_0() { return cConditionStateStatusConditionParserRuleCall_0_0; }

		//operator=NaturalLanguageComparingOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//NaturalLanguageComparingOperator
		public RuleCall getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0() { return cOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0; }

		//bound=TimeValue
		public Assignment getBoundAssignment_2() { return cBoundAssignment_2; }

		//TimeValue
		public RuleCall getBoundTimeValueParserRuleCall_2_0() { return cBoundTimeValueParserRuleCall_2_0; }
	}

	public class BasicClockConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicClockCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClockKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cClockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cClockClockCrossReference_1_0 = (CrossReference)cClockAssignment_1.eContents().get(0);
		private final RuleCall cClockClockQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cClockClockCrossReference_1_0.eContents().get(1);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorComparingOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoundTimeValueParserRuleCall_3_0 = (RuleCall)cBoundAssignment_3.eContents().get(0);
		
		//BasicClockCondition:
		//	"clock" clock=[realtimestatechart::Clock|QualifiedName] operator=ComparingOperator bound=TimeValue;
		@Override public ParserRule getRule() { return rule; }

		//"clock" clock=[realtimestatechart::Clock|QualifiedName] operator=ComparingOperator bound=TimeValue
		public Group getGroup() { return cGroup; }

		//"clock"
		public Keyword getClockKeyword_0() { return cClockKeyword_0; }

		//clock=[realtimestatechart::Clock|QualifiedName]
		public Assignment getClockAssignment_1() { return cClockAssignment_1; }

		//[realtimestatechart::Clock|QualifiedName]
		public CrossReference getClockClockCrossReference_1_0() { return cClockClockCrossReference_1_0; }

		//QualifiedName
		public RuleCall getClockClockQualifiedNameParserRuleCall_1_0_1() { return cClockClockQualifiedNameParserRuleCall_1_0_1; }

		//operator=ComparingOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//ComparingOperator
		public RuleCall getOperatorComparingOperatorEnumRuleCall_2_0() { return cOperatorComparingOperatorEnumRuleCall_2_0; }

		//bound=TimeValue
		public Assignment getBoundAssignment_3() { return cBoundAssignment_3; }

		//TimeValue
		public RuleCall getBoundTimeValueParserRuleCall_3_0() { return cBoundTimeValueParserRuleCall_3_0; }
	}

	public class DataConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataCondition");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//DataCondition:
		//	expression=LogicalExpression;
		@Override public ParserRule getRule() { return rule; }

		//expression=LogicalExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_0() { return cExpressionLogicalExpressionParserRuleCall_0; }
	}

	public class TypedNamedElementExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedNamedElementExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypedNamedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypedNamedElementTypedNamedElementCrossReference_0_0 = (CrossReference)cTypedNamedElementAssignment_0.eContents().get(0);
		private final RuleCall cTypedNamedElementTypedNamedElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypedNamedElementTypedNamedElementCrossReference_0_0.eContents().get(1);
		private final Assignment cElementAccessorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cElementAccessorsAlternatives_1_0 = (Alternatives)cElementAccessorsAssignment_1.eContents().get(0);
		private final RuleCall cElementAccessorsArrayIndexExpressionParserRuleCall_1_0_0 = (RuleCall)cElementAccessorsAlternatives_1_0.eContents().get(0);
		private final RuleCall cElementAccessorsAttributeAccessorExpressionParserRuleCall_1_0_1 = (RuleCall)cElementAccessorsAlternatives_1_0.eContents().get(1);
		
		/////////////////////////////////////////
		//// Reused Expressions of ActionLanguage only extended by QualifiedName References
		/////////////////////////////////////////
		////TypedNamedElementExpression returns actionlanguage::TypedNamedElementExpression:
		////	typedNamedElement=[behavior::TypedNamedElement|QualifiedName]('['indices+=ArithmeticExpression']')*
		////;
		//TypedNamedElementExpression returns actionlanguage::TypedNamedElementExpression:
		//	typedNamedElement=[behavior::TypedNamedElement|QualifiedName] elementAccessors+=(ArrayIndexExpression |
		//	AttributeAccessorExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//typedNamedElement=[behavior::TypedNamedElement|QualifiedName] elementAccessors+=(ArrayIndexExpression |
		//AttributeAccessorExpression)*
		public Group getGroup() { return cGroup; }

		//typedNamedElement=[behavior::TypedNamedElement|QualifiedName]
		public Assignment getTypedNamedElementAssignment_0() { return cTypedNamedElementAssignment_0; }

		//[behavior::TypedNamedElement|QualifiedName]
		public CrossReference getTypedNamedElementTypedNamedElementCrossReference_0_0() { return cTypedNamedElementTypedNamedElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypedNamedElementTypedNamedElementQualifiedNameParserRuleCall_0_0_1() { return cTypedNamedElementTypedNamedElementQualifiedNameParserRuleCall_0_0_1; }

		//elementAccessors+=(ArrayIndexExpression | AttributeAccessorExpression)*
		public Assignment getElementAccessorsAssignment_1() { return cElementAccessorsAssignment_1; }

		//ArrayIndexExpression | AttributeAccessorExpression
		public Alternatives getElementAccessorsAlternatives_1_0() { return cElementAccessorsAlternatives_1_0; }

		//ArrayIndexExpression
		public RuleCall getElementAccessorsArrayIndexExpressionParserRuleCall_1_0_0() { return cElementAccessorsArrayIndexExpressionParserRuleCall_1_0_0; }

		//AttributeAccessorExpression
		public RuleCall getElementAccessorsAttributeAccessorExpressionParserRuleCall_1_0_1() { return cElementAccessorsAttributeAccessorExpressionParserRuleCall_1_0_1; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperationOperationCrossReference_0_0 = (CrossReference)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationOperationQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cOperationOperationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterBindingAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterBindingParamaterBindingParserRuleCall_2_0_0 = (RuleCall)cParameterBindingAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParameterBindingAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParameterBindingParamaterBindingParserRuleCall_2_1_1_0 = (RuleCall)cParameterBindingAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationCall returns actionlanguage::OperationCall:
		//	operation=[behavior::Operation|QualifiedName] "(" (parameterBinding+=ParamaterBinding (","
		//	parameterBinding+=ParamaterBinding)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//operation=[behavior::Operation|QualifiedName] "(" (parameterBinding+=ParamaterBinding (","
		//parameterBinding+=ParamaterBinding)*)? ")"
		public Group getGroup() { return cGroup; }

		//operation=[behavior::Operation|QualifiedName]
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//[behavior::Operation|QualifiedName]
		public CrossReference getOperationOperationCrossReference_0_0() { return cOperationOperationCrossReference_0_0; }

		//QualifiedName
		public RuleCall getOperationOperationQualifiedNameParserRuleCall_0_0_1() { return cOperationOperationQualifiedNameParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameterBinding+=ParamaterBinding ("," parameterBinding+=ParamaterBinding)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameterBinding+=ParamaterBinding
		public Assignment getParameterBindingAssignment_2_0() { return cParameterBindingAssignment_2_0; }

		//ParamaterBinding
		public RuleCall getParameterBindingParamaterBindingParserRuleCall_2_0_0() { return cParameterBindingParamaterBindingParserRuleCall_2_0_0; }

		//("," parameterBinding+=ParamaterBinding)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameterBinding+=ParamaterBinding
		public Assignment getParameterBindingAssignment_2_1_1() { return cParameterBindingAssignment_2_1_1; }

		//ParamaterBinding
		public RuleCall getParameterBindingParamaterBindingParserRuleCall_2_1_1_0() { return cParameterBindingParamaterBindingParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitParserRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		/////////////////////////////////////////
		//// Other Rules
		/////////////////////////////////////////
		//TimeValue returns valuetype::TimeValue:
		//	value=Expression unit=TimeUnit;
		@Override public ParserRule getRule() { return rule; }

		//value=Expression unit=TimeUnit
		public Group getGroup() { return cGroup; }

		//value=Expression
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_0() { return cValueExpressionParserRuleCall_0_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_1_0() { return cUnitTimeUnitParserRuleCall_1_0; }
	}

	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LONG");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LONG returns ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		@Override public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBOOLEANTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Keyword cNullKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Literal returns ecore::EString:
		//	NUMBER | BOOLEAN | INT | STRING | "null";
		@Override public ParserRule getRule() { return rule; }

		//NUMBER | BOOLEAN | INT | STRING | "null"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_0() { return cNUMBERTerminalRuleCall_0; }

		//BOOLEAN
		public RuleCall getBOOLEANTerminalRuleCall_1() { return cBOOLEANTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }

		//"null"
		public Keyword getNullKeyword_4() { return cNullKeyword_4; }
	}

	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMinKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cHKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		////TODO Check if microseconds works under linux.
		//TimeUnit returns valuetype::TimeUnit:
		//	"ns" | "µs" | "ms" | "s" | "min" | "h" | "D";
		@Override public ParserRule getRule() { return rule; }

		//"ns" | "µs" | "ms" | "s" | "min" | "h" | "D"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"ns"
		public Keyword getNsKeyword_0() { return cNsKeyword_0; }

		//"µs"
		public Keyword getSKeyword_1() { return cSKeyword_1; }

		//"ms"
		public Keyword getMsKeyword_2() { return cMsKeyword_2; }

		//"s"
		public Keyword getSKeyword_3() { return cSKeyword_3; }

		//"min"
		public Keyword getMinKeyword_4() { return cMinKeyword_4; }

		//"h"
		public Keyword getHKeyword_5() { return cHKeyword_5; }

		//"D"
		public Keyword getDKeyword_6() { return cDKeyword_6; }
	}
	
	
	public class OrOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OrOperator");
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cOROrKeyword_0 = (Keyword)cOREnumLiteralDeclaration.eContents().get(0);
		
		/////////////////////////////////////////
		//// Enumerations
		/////////////////////////////////////////
		//enum OrOperator returns commonExpressions::LogicOperator:
		//	OR="or";
		public EnumRule getRule() { return rule; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration() { return cOREnumLiteralDeclaration; }

		//"or"
		public Keyword getOROrKeyword_0() { return cOROrKeyword_0; }
	}

	public class AndOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AndOperator");
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cANDAndKeyword_0 = (Keyword)cANDEnumLiteralDeclaration.eContents().get(0);
		
		//enum AndOperator returns commonExpressions::LogicOperator:
		//	AND="and";
		public EnumRule getRule() { return rule; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration() { return cANDEnumLiteralDeclaration; }

		//"and"
		public Keyword getANDAndKeyword_0() { return cANDAndKeyword_0; }
	}

	public class LogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOROrKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAndKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LogicOperator returns commonExpressions::LogicOperator:
		//	OR="or" | AND="and";
		public EnumRule getRule() { return rule; }

		//OR="or" | AND="and"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"or"
		public Keyword getOROrKeyword_0_0() { return cOROrKeyword_0_0; }

		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }

		//"and"
		public Keyword getANDAndKeyword_1_0() { return cANDAndKeyword_1_0; }
	}

	public class ComparingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNEQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cUNEQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLessThanSignKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATERGreaterThanSignKeyword_5_0 = (Keyword)cGREATEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ComparingOperator returns commonExpressions::ComparingOperator:
		//	EQUAL="==" | UNEQUAL="<>" | LESS="<" | LESS_OR_EQUAL="<=" | GREATER_OR_EQUAL=">=" | GREATER=">";
		public EnumRule getRule() { return rule; }

		//EQUAL="==" | UNEQUAL="<>" | LESS="<" | LESS_OR_EQUAL="<=" | GREATER_OR_EQUAL=">=" | GREATER=">"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }

		//UNEQUAL="<>"
		public EnumLiteralDeclaration getUNEQUALEnumLiteralDeclaration_1() { return cUNEQUALEnumLiteralDeclaration_1; }

		//"<>"
		public Keyword getUNEQUALLessThanSignGreaterThanSignKeyword_1_0() { return cUNEQUALLessThanSignGreaterThanSignKeyword_1_0; }

		//LESS="<"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLESSLessThanSignKeyword_2_0() { return cLESSLessThanSignKeyword_2_0; }

		//LESS_OR_EQUAL="<="
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_3() { return cLESS_OR_EQUALEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_3_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_3_0; }

		//GREATER_OR_EQUAL=">="
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_OR_EQUALEnumLiteralDeclaration_4; }

		//">="
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0; }

		//GREATER=">"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_5() { return cGREATEREnumLiteralDeclaration_5; }

		//">"
		public Keyword getGREATERGreaterThanSignKeyword_5_0() { return cGREATERGreaterThanSignKeyword_5_0; }
	}

	public class NaturalLanguageComparingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NaturalLanguageComparingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSinceExactlyKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESSStrictlyShortThanKeyword_1_0 = (Keyword)cLESSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_OR_EQUALShorterThanKeyword_2_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATERStrictlyLongerThanKeyword_3_0 = (Keyword)cGREATEREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_OR_EQUALLongerThanKeyword_4_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum NaturalLanguageComparingOperator returns commonExpressions::ComparingOperator:
		//	EQUAL="since exactly" | LESS="strictly short than" | LESS_OR_EQUAL="shorter than" | GREATER="strictly longer than" |
		//	GREATER_OR_EQUAL="longer than";
		public EnumRule getRule() { return rule; }

		//EQUAL="since exactly" | LESS="strictly short than" | LESS_OR_EQUAL="shorter than" | GREATER="strictly longer than" |
		//GREATER_OR_EQUAL="longer than"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL="since exactly"
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//"since exactly"
		public Keyword getEQUALSinceExactlyKeyword_0_0() { return cEQUALSinceExactlyKeyword_0_0; }

		//LESS="strictly short than"
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_1() { return cLESSEnumLiteralDeclaration_1; }

		//"strictly short than"
		public Keyword getLESSStrictlyShortThanKeyword_1_0() { return cLESSStrictlyShortThanKeyword_1_0; }

		//LESS_OR_EQUAL="shorter than"
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_2() { return cLESS_OR_EQUALEnumLiteralDeclaration_2; }

		//"shorter than"
		public Keyword getLESS_OR_EQUALShorterThanKeyword_2_0() { return cLESS_OR_EQUALShorterThanKeyword_2_0; }

		//GREATER="strictly longer than"
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_3() { return cGREATEREnumLiteralDeclaration_3; }

		//"strictly longer than"
		public Keyword getGREATERStrictlyLongerThanKeyword_3_0() { return cGREATERStrictlyLongerThanKeyword_3_0; }

		//GREATER_OR_EQUAL="longer than"
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_OR_EQUALEnumLiteralDeclaration_4; }

		//"longer than"
		public Keyword getGREATER_OR_EQUALLongerThanKeyword_4_0() { return cGREATER_OR_EQUALLongerThanKeyword_4_0; }
	}

	public class StateEventKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateEventKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cENTRYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cENTRYEnteringStateKeyword_0_0 = (Keyword)cENTRYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEXITEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEXITLeavingStateKeyword_1_0 = (Keyword)cEXITEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StateEventKind:
		//	ENTRY="entering state" | EXIT="leaving state";
		public EnumRule getRule() { return rule; }

		//ENTRY="entering state" | EXIT="leaving state"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ENTRY="entering state"
		public EnumLiteralDeclaration getENTRYEnumLiteralDeclaration_0() { return cENTRYEnumLiteralDeclaration_0; }

		//"entering state"
		public Keyword getENTRYEnteringStateKeyword_0_0() { return cENTRYEnteringStateKeyword_0_0; }

		//EXIT="leaving state"
		public EnumLiteralDeclaration getEXITEnumLiteralDeclaration_1() { return cEXITEnumLiteralDeclaration_1; }

		//"leaving state"
		public Keyword getEXITLeavingStateKeyword_1_0() { return cEXITLeavingStateKeyword_1_0; }
	}

	public class StateStatusKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StateStatusKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cACTIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cACTIVEIsActiveKeyword_0_0 = (Keyword)cACTIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINACTIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINACTIVEIsInactiveKeyword_1_0 = (Keyword)cINACTIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StateStatusKind:
		//	ACTIVE="is active" | INACTIVE="is inactive";
		public EnumRule getRule() { return rule; }

		//ACTIVE="is active" | INACTIVE="is inactive"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ACTIVE="is active"
		public EnumLiteralDeclaration getACTIVEEnumLiteralDeclaration_0() { return cACTIVEEnumLiteralDeclaration_0; }

		//"is active"
		public Keyword getACTIVEIsActiveKeyword_0_0() { return cACTIVEIsActiveKeyword_0_0; }

		//INACTIVE="is inactive"
		public EnumLiteralDeclaration getINACTIVEEnumLiteralDeclaration_1() { return cINACTIVEEnumLiteralDeclaration_1; }

		//"is inactive"
		public Keyword getINACTIVEIsInactiveKeyword_1_0() { return cINACTIVEIsInactiveKeyword_1_0; }
	}

	public class MessageEventKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MessageEventKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCONSUMINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCONSUMINGConsumingKeyword_0_0 = (Keyword)cCONSUMINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSENDINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSENDINGSendingKeyword_1_0 = (Keyword)cSENDINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MessageEventKind:
		//	CONSUMING="consuming" | SENDING="sending";
		public EnumRule getRule() { return rule; }

		//CONSUMING="consuming" | SENDING="sending"
		public Alternatives getAlternatives() { return cAlternatives; }

		//CONSUMING="consuming"
		public EnumLiteralDeclaration getCONSUMINGEnumLiteralDeclaration_0() { return cCONSUMINGEnumLiteralDeclaration_0; }

		//"consuming"
		public Keyword getCONSUMINGConsumingKeyword_0_0() { return cCONSUMINGConsumingKeyword_0_0; }

		//SENDING="sending"
		public EnumLiteralDeclaration getSENDINGEnumLiteralDeclaration_1() { return cSENDINGEnumLiteralDeclaration_1; }

		//"sending"
		public Keyword getSENDINGSendingKeyword_1_0() { return cSENDINGSendingKeyword_1_0; }
	}
	
	private final DependencyModelElements pDependencyModel;
	private final DependencyElements pDependency;
	private final SynchronizationElements pSynchronization;
	private final ForbiddenStateCombinationElements pForbiddenStateCombination;
	private final BoundedActiveStateElements pBoundedActiveState;
	private final TriggerMessageElements pTriggerMessage;
	private final ConditionalDependencyElements pConditionalDependency;
	private final EffectElements pEffect;
	private final LimitedEffectElements pLimitedEffect;
	private final EnableDisableEffectElements pEnableDisableEffect;
	private final DataAssignmentEffectElements pDataAssignmentEffect;
	private final ClockResetEffectElements pClockResetEffect;
	private final DataMergeElements pDataMerge;
	private final ClockMergeElements pClockMerge;
	private final EventElements pEvent;
	private final MessageEventElements pMessageEvent;
	private final TransitionEventElements pTransitionEvent;
	private final StateEventElements pStateEvent;
	private final StateCombinationEventElements pStateCombinationEvent;
	private final SynchronizationEventElements pSynchronizationEvent;
	private final ComplexEventElements pComplexEvent;
	private final CompositionEventElements pCompositionEvent;
	private final CountedEventElements pCountedEvent;
	private final DelayedEventElements pDelayedEvent;
	private final ConditionElements pCondition;
	private final CompositionOrConditionElements pCompositionOrCondition;
	private final CompositionAndConditionElements pCompositionAndCondition;
	private final ConditionWithoutKeywordElements pConditionWithoutKeyword;
	private final StateStatusConditionElements pStateStatusCondition;
	private final EventConstrainedIntervalConditionElements pEventConstrainedIntervalCondition;
	private final ClockConditionElements pClockCondition;
	private final AuxiliaryClockConditionElements pAuxiliaryClockCondition;
	private final HybridClockConditionElements pHybridClockCondition;
	private final BasicClockConditionElements pBasicClockCondition;
	private final DataConditionElements pDataCondition;
	private final TypedNamedElementExpressionElements pTypedNamedElementExpression;
	private final OperationCallElements pOperationCall;
	private final TimeValueElements pTimeValue;
	private final TerminalRule tNUMBER;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tID;
	private final LONGElements pLONG;
	private final QualifiedNameElements pQualifiedName;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final LiteralElements pLiteral;
	private final TimeUnitElements pTimeUnit;
	private final OrOperatorElements unknownRuleOrOperator;
	private final AndOperatorElements unknownRuleAndOperator;
	private final LogicOperatorElements unknownRuleLogicOperator;
	private final ComparingOperatorElements unknownRuleComparingOperator;
	private final NaturalLanguageComparingOperatorElements unknownRuleNaturalLanguageComparingOperator;
	private final StateEventKindElements unknownRuleStateEventKind;
	private final StateStatusKindElements unknownRuleStateStatusKind;
	private final MessageEventKindElements unknownRuleMessageEventKind;
	
	private final Grammar grammar;

	private final ActionLanguageGrammarAccess gaActionLanguage;

	@Inject
	public DependencyModelLanguageGrammarAccess(GrammarProvider grammarProvider,
		ActionLanguageGrammarAccess gaActionLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaActionLanguage = gaActionLanguage;
		this.pDependencyModel = new DependencyModelElements();
		this.pDependency = new DependencyElements();
		this.pSynchronization = new SynchronizationElements();
		this.pForbiddenStateCombination = new ForbiddenStateCombinationElements();
		this.pBoundedActiveState = new BoundedActiveStateElements();
		this.pTriggerMessage = new TriggerMessageElements();
		this.pConditionalDependency = new ConditionalDependencyElements();
		this.pEffect = new EffectElements();
		this.pLimitedEffect = new LimitedEffectElements();
		this.pEnableDisableEffect = new EnableDisableEffectElements();
		this.pDataAssignmentEffect = new DataAssignmentEffectElements();
		this.pClockResetEffect = new ClockResetEffectElements();
		this.pDataMerge = new DataMergeElements();
		this.pClockMerge = new ClockMergeElements();
		this.pEvent = new EventElements();
		this.pMessageEvent = new MessageEventElements();
		this.pTransitionEvent = new TransitionEventElements();
		this.pStateEvent = new StateEventElements();
		this.pStateCombinationEvent = new StateCombinationEventElements();
		this.pSynchronizationEvent = new SynchronizationEventElements();
		this.pComplexEvent = new ComplexEventElements();
		this.pCompositionEvent = new CompositionEventElements();
		this.pCountedEvent = new CountedEventElements();
		this.pDelayedEvent = new DelayedEventElements();
		this.pCondition = new ConditionElements();
		this.pCompositionOrCondition = new CompositionOrConditionElements();
		this.pCompositionAndCondition = new CompositionAndConditionElements();
		this.pConditionWithoutKeyword = new ConditionWithoutKeywordElements();
		this.pStateStatusCondition = new StateStatusConditionElements();
		this.pEventConstrainedIntervalCondition = new EventConstrainedIntervalConditionElements();
		this.pClockCondition = new ClockConditionElements();
		this.pAuxiliaryClockCondition = new AuxiliaryClockConditionElements();
		this.pHybridClockCondition = new HybridClockConditionElements();
		this.pBasicClockCondition = new BasicClockConditionElements();
		this.pDataCondition = new DataConditionElements();
		this.pTypedNamedElementExpression = new TypedNamedElementExpressionElements();
		this.pOperationCall = new OperationCallElements();
		this.pTimeValue = new TimeValueElements();
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.pLONG = new LONGElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pLiteral = new LiteralElements();
		this.pTimeUnit = new TimeUnitElements();
		this.unknownRuleOrOperator = new OrOperatorElements();
		this.unknownRuleAndOperator = new AndOperatorElements();
		this.unknownRuleLogicOperator = new LogicOperatorElements();
		this.unknownRuleComparingOperator = new ComparingOperatorElements();
		this.unknownRuleNaturalLanguageComparingOperator = new NaturalLanguageComparingOperatorElements();
		this.unknownRuleStateEventKind = new StateEventKindElements();
		this.unknownRuleStateStatusKind = new StateStatusKindElements();
		this.unknownRuleMessageEventKind = new MessageEventKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_paderborn.fujaba.muml.DependencyModelLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ActionLanguageGrammarAccess getActionLanguageGrammarAccess() {
		return gaActionLanguage;
	}

	
	//DependencyModel:
	//	{DependencyModel} comment=(ML_COMMENT | SL_COMMENT)? (dependencies+=Dependency dependencies+=Dependency*)?;
	public DependencyModelElements getDependencyModelAccess() {
		return pDependencyModel;
	}
	
	public ParserRule getDependencyModelRule() {
		return getDependencyModelAccess().getRule();
	}

	/////////////////////////////////////////
	//// Dependencies
	/////////////////////////////////////////
	//Dependency:
	//	(Synchronization ";" | ForbiddenStateCombination ";" | ConditionalDependency | TriggerMessage | BoundedActiveState ";"
	//	| DataMerge ";" | ClockMerge ";") comment=(ML_COMMENT | SL_COMMENT)?;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Synchronization:
	//	("synchronize" sendingEvents+=Event ("," sendingEvents+=Event)* "with" receivingEvents+=Event (","
	//	receivingEvents+=Event)* | "synchronize" sendingEvents+=SynchronizationEvent (","
	//	sendingEvents+=SynchronizationEvent)* "with" receivingEvents+=SynchronizationEvent (","
	//	receivingEvents+=SynchronizationEvent)*) ("using" channelName=EString)? ("[" generalSelectorExpression=Expression "]"
	//	"of type" selectorType=[types::DataType])?;
	public SynchronizationElements getSynchronizationAccess() {
		return pSynchronization;
	}
	
	public ParserRule getSynchronizationRule() {
		return getSynchronizationAccess().getRule();
	}

	//ForbiddenStateCombination:
	//	"forbid state combination" states+=[realtimestatechart::State|QualifiedName] (","
	//	states+=[realtimestatechart::State|QualifiedName])+;
	public ForbiddenStateCombinationElements getForbiddenStateCombinationAccess() {
		return pForbiddenStateCombination;
	}
	
	public ParserRule getForbiddenStateCombinationRule() {
		return getForbiddenStateCombinationAccess().getRule();
	}

	//BoundedActiveState:
	//	"bound states" states+=[realtimestatechart::State|QualifiedName] (","
	//	states+=[realtimestatechart::State|QualifiedName])* "by" "[" constraint=ClockCondition "]";
	public BoundedActiveStateElements getBoundedActiveStateAccess() {
		return pBoundedActiveState;
	}
	
	public ParserRule getBoundedActiveStateRule() {
		return getBoundedActiveStateAccess().getRule();
	}

	//TriggerMessage:
	//	"on" messageEvent=MessageEvent "{" effects+=DataAssignmentEffect (";" effects+=DataAssignmentEffect)* "}";
	public TriggerMessageElements getTriggerMessageAccess() {
		return pTriggerMessage;
	}
	
	public ParserRule getTriggerMessageRule() {
		return getTriggerMessageAccess().getRule();
	}

	//ConditionalDependency:
	//	"if" condition=Condition "{" effects+=Effect (";" effects+=Effect)* ";"? "}" | "if" "[" event=ComplexEvent "]" "{"
	//	effects+=LimitedEffect (";" effects+=LimitedEffect)* ";"? "}";
	public ConditionalDependencyElements getConditionalDependencyAccess() {
		return pConditionalDependency;
	}
	
	public ParserRule getConditionalDependencyRule() {
		return getConditionalDependencyAccess().getRule();
	}

	//Effect:
	//	EnableDisableEffect | DataAssignmentEffect | ClockResetEffect;
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}

	//LimitedEffect returns Effect:
	//	DataAssignmentEffect | ClockResetEffect;
	public LimitedEffectElements getLimitedEffectAccess() {
		return pLimitedEffect;
	}
	
	public ParserRule getLimitedEffectRule() {
		return getLimitedEffectAccess().getRule();
	}

	//EnableDisableEffect:
	//	(isEnable?="enable" | "disable") event=Event;
	public EnableDisableEffectElements getEnableDisableEffectAccess() {
		return pEnableDisableEffect;
	}
	
	public ParserRule getEnableDisableEffectRule() {
		return getEnableDisableEffectAccess().getRule();
	}

	//DataAssignmentEffect:
	//	"assign" lhs_typedNamedElementExpression=TypedNamedElementExpression (assignOperator=AssignOperator
	//	rhs_assignExpression=InitializeExpression | incrementDecrementOperator=IncrementDecrementOperatorExpression);
	public DataAssignmentEffectElements getDataAssignmentEffectAccess() {
		return pDataAssignmentEffect;
	}
	
	public ParserRule getDataAssignmentEffectRule() {
		return getDataAssignmentEffectAccess().getRule();
	}

	//// reset without an blank does not parse correctly, maybe it is a xtext keyword
	//ClockResetEffect:
	//	"reset clocks" clocks+=[realtimestatechart::Clock|QualifiedName] ("and"
	//	clocks+=[realtimestatechart::Clock|QualifiedName])*;
	public ClockResetEffectElements getClockResetEffectAccess() {
		return pClockResetEffect;
	}
	
	public ParserRule getClockResetEffectRule() {
		return getClockResetEffectAccess().getRule();
	}

	//DataMerge:
	//	"merge variable" variables+=[behavior::Variable|QualifiedName] ("into variable" variableName=EString)? |
	//	"merge variables" variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+
	//	("into variable" variableName=EString)? | "merge variable" variables+=[behavior::Variable|QualifiedName]
	//	"into hybridport" port=[component::HybridPort|QualifiedName] | "merge variables"
	//	variables+=[behavior::Variable|QualifiedName] ("," variables+=[behavior::Variable|QualifiedName])+ "into hybridport"
	//	port=[component::HybridPort|QualifiedName];
	public DataMergeElements getDataMergeAccess() {
		return pDataMerge;
	}
	
	public ParserRule getDataMergeRule() {
		return getDataMergeAccess().getRule();
	}

	//ClockMerge:
	//	"merge clocks" clocks+=[realtimestatechart::Clock|QualifiedName] (","
	//	clocks+=[realtimestatechart::Clock|QualifiedName])+ ("into" clockName=EString)?;
	public ClockMergeElements getClockMergeAccess() {
		return pClockMerge;
	}
	
	public ParserRule getClockMergeRule() {
		return getClockMergeAccess().getRule();
	}

	/////////////////////////////////////////
	//// Events
	/////////////////////////////////////////
	//Event:
	//	TransitionEvent | StateEvent | StateCombinationEvent | MessageEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//MessageEvent:
	//	kind=MessageEventKind (port=[component::DiscretePort] ".")? type=[msgtype::MessageType];
	public MessageEventElements getMessageEventAccess() {
		return pMessageEvent;
	}
	
	public ParserRule getMessageEventRule() {
		return getMessageEventAccess().getRule();
	}

	//TransitionEvent:
	//	"transition" transition=[realtimestatechart::Transition|QualifiedName];
	public TransitionEventElements getTransitionEventAccess() {
		return pTransitionEvent;
	}
	
	public ParserRule getTransitionEventRule() {
		return getTransitionEventAccess().getRule();
	}

	//StateEvent:
	//	kind=StateEventKind state=[realtimestatechart::State|QualifiedName];
	public StateEventElements getStateEventAccess() {
		return pStateEvent;
	}
	
	public ParserRule getStateEventRule() {
		return getStateEventAccess().getRule();
	}

	//StateCombinationEvent:
	//	kind=StateEventKind "combination" states+=[realtimestatechart::State|QualifiedName] (","
	//	states+=[realtimestatechart::State|QualifiedName])+;
	public StateCombinationEventElements getStateCombinationEventAccess() {
		return pStateCombinationEvent;
	}
	
	public ParserRule getStateCombinationEventRule() {
		return getStateCombinationEventAccess().getRule();
	}

	//SynchronizationEvent:
	//	event=Event "[" selectorExpression=Expression "]";
	public SynchronizationEventElements getSynchronizationEventAccess() {
		return pSynchronizationEvent;
	}
	
	public ParserRule getSynchronizationEventRule() {
		return getSynchronizationEventAccess().getRule();
	}

	//ComplexEvent returns Event:
	//	"(" (CompositionEvent | CountedEvent | DelayedEvent) ")" | Event;
	public ComplexEventElements getComplexEventAccess() {
		return pComplexEvent;
	}
	
	public ParserRule getComplexEventRule() {
		return getComplexEventAccess().getRule();
	}

	//CompositionEvent:
	//	leftEvent=ComplexEvent kind=LogicOperator rightEvent=ComplexEvent;
	public CompositionEventElements getCompositionEventAccess() {
		return pCompositionEvent;
	}
	
	public ParserRule getCompositionEventRule() {
		return getCompositionEventAccess().getRule();
	}

	//CountedEvent:
	//	event=ComplexEvent "when counted" counter=EInt "times";
	public CountedEventElements getCountedEventAccess() {
		return pCountedEvent;
	}
	
	public ParserRule getCountedEventRule() {
		return getCountedEventAccess().getRule();
	}

	//DelayedEvent:
	//	event=ComplexEvent "delayed by" delay=TimeValue;
	public DelayedEventElements getDelayedEventAccess() {
		return pDelayedEvent;
	}
	
	public ParserRule getDelayedEventRule() {
		return getDelayedEventAccess().getRule();
	}

	/////////////////////////////////////////
	//// Dependency Conditions
	/////////////////////////////////////////
	//Condition:
	//	CompositionOrCondition;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//CompositionOrCondition returns Condition:
	//	CompositionAndCondition ({CompositionCondition.leftCondition=current} kind=OrOperator
	//	rightCondition=CompositionOrCondition)?;
	public CompositionOrConditionElements getCompositionOrConditionAccess() {
		return pCompositionOrCondition;
	}
	
	public ParserRule getCompositionOrConditionRule() {
		return getCompositionOrConditionAccess().getRule();
	}

	//CompositionAndCondition returns Condition:
	//	ConditionWithoutKeyword ({CompositionCondition.leftCondition=current} kind=AndOperator
	//	rightCondition=CompositionAndCondition)?;
	public CompositionAndConditionElements getCompositionAndConditionAccess() {
		return pCompositionAndCondition;
	}
	
	public ParserRule getCompositionAndConditionRule() {
		return getCompositionAndConditionAccess().getRule();
	}

	//ConditionWithoutKeyword returns Condition:
	//	"[" (ClockCondition | StateStatusCondition | EventConstrainedIntervalCondition | DataCondition |
	//	CompositionOrCondition) "]";
	public ConditionWithoutKeywordElements getConditionWithoutKeywordAccess() {
		return pConditionWithoutKeyword;
	}
	
	public ParserRule getConditionWithoutKeywordRule() {
		return getConditionWithoutKeywordAccess().getRule();
	}

	//StateStatusCondition:
	//	(states+=[realtimestatechart::State|QualifiedName] | "state combination"
	//	states+=[realtimestatechart::State|QualifiedName] ("," states+=[realtimestatechart::State|QualifiedName])+)
	//	kind=StateStatusKind;
	public StateStatusConditionElements getStateStatusConditionAccess() {
		return pStateStatusCondition;
	}
	
	public ParserRule getStateStatusConditionRule() {
		return getStateStatusConditionAccess().getRule();
	}

	//EventConstrainedIntervalCondition:
	//	"between" (fromEvent=ComplexEvent "," untilEvent=ComplexEvent // ((initialEnabled?='INIT' 'or') fromEvent=ComplexEvent 'and' untilEvent=ComplexEvent )	
	//	| initialEnabled?="INIT" "," untilEvent=ComplexEvent | fromEvent=ComplexEvent "," (untilEvent=ComplexEvent |
	//	enabledInfite?="INFINITE"));
	public EventConstrainedIntervalConditionElements getEventConstrainedIntervalConditionAccess() {
		return pEventConstrainedIntervalCondition;
	}
	
	public ParserRule getEventConstrainedIntervalConditionRule() {
		return getEventConstrainedIntervalConditionAccess().getRule();
	}

	//ClockCondition:
	//	BasicClockCondition | AuxiliaryClockCondition | HybridClockCondition;
	public ClockConditionElements getClockConditionAccess() {
		return pClockCondition;
	}
	
	public ParserRule getClockConditionRule() {
		return getClockConditionAccess().getRule();
	}

	//AuxiliaryClockCondition:
	//	event=ComplexEvent operator=NaturalLanguageComparingOperator bound=TimeValue;
	public AuxiliaryClockConditionElements getAuxiliaryClockConditionAccess() {
		return pAuxiliaryClockCondition;
	}
	
	public ParserRule getAuxiliaryClockConditionRule() {
		return getAuxiliaryClockConditionAccess().getRule();
	}

	//HybridClockCondition:
	//	condition=StateStatusCondition operator=NaturalLanguageComparingOperator bound=TimeValue;
	public HybridClockConditionElements getHybridClockConditionAccess() {
		return pHybridClockCondition;
	}
	
	public ParserRule getHybridClockConditionRule() {
		return getHybridClockConditionAccess().getRule();
	}

	//BasicClockCondition:
	//	"clock" clock=[realtimestatechart::Clock|QualifiedName] operator=ComparingOperator bound=TimeValue;
	public BasicClockConditionElements getBasicClockConditionAccess() {
		return pBasicClockCondition;
	}
	
	public ParserRule getBasicClockConditionRule() {
		return getBasicClockConditionAccess().getRule();
	}

	//DataCondition:
	//	expression=LogicalExpression;
	public DataConditionElements getDataConditionAccess() {
		return pDataCondition;
	}
	
	public ParserRule getDataConditionRule() {
		return getDataConditionAccess().getRule();
	}

	/////////////////////////////////////////
	//// Reused Expressions of ActionLanguage only extended by QualifiedName References
	/////////////////////////////////////////
	////TypedNamedElementExpression returns actionlanguage::TypedNamedElementExpression:
	////	typedNamedElement=[behavior::TypedNamedElement|QualifiedName]('['indices+=ArithmeticExpression']')*
	////;
	//TypedNamedElementExpression returns actionlanguage::TypedNamedElementExpression:
	//	typedNamedElement=[behavior::TypedNamedElement|QualifiedName] elementAccessors+=(ArrayIndexExpression |
	//	AttributeAccessorExpression)*;
	public TypedNamedElementExpressionElements getTypedNamedElementExpressionAccess() {
		return pTypedNamedElementExpression;
	}
	
	public ParserRule getTypedNamedElementExpressionRule() {
		return getTypedNamedElementExpressionAccess().getRule();
	}

	//OperationCall returns actionlanguage::OperationCall:
	//	operation=[behavior::Operation|QualifiedName] "(" (parameterBinding+=ParamaterBinding (","
	//	parameterBinding+=ParamaterBinding)*)? ")";
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	/////////////////////////////////////////
	//// Other Rules
	/////////////////////////////////////////
	//TimeValue returns valuetype::TimeValue:
	//	value=Expression unit=TimeUnit;
	public TimeValueElements getTimeValueAccess() {
		return pTimeValue;
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}

	/////////////////////////////////////////
	//// Terminals
	/////////////////////////////////////////
	//terminal NUMBER returns ecore::EBigDecimal:
	//	INT "." INT;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	} 

	//// DO NOT REMOVE THIS TERMINAL AND DO NOT CHANGE ORDER!!! IT COULD CREATE AN ERROR WHILE GENERATING.
	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") (("a".."z" | "A".."Z" | "_" | "0".."9")+ (("(" "0".."9"+ ")-->") ("a".."z" | "A".."Z"
	//	| "_" | "0".."9")+)?)?;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//LONG returns ecore::ELong:
	//	INT;
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Literal returns ecore::EString:
	//	NUMBER | BOOLEAN | INT | STRING | "null";
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	////TODO Check if microseconds works under linux.
	//TimeUnit returns valuetype::TimeUnit:
	//	"ns" | "µs" | "ms" | "s" | "min" | "h" | "D";
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	/////////////////////////////////////////
	//// Enumerations
	/////////////////////////////////////////
	//enum OrOperator returns commonExpressions::LogicOperator:
	//	OR="or";
	public OrOperatorElements getOrOperatorAccess() {
		return unknownRuleOrOperator;
	}
	
	public EnumRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//enum AndOperator returns commonExpressions::LogicOperator:
	//	AND="and";
	public AndOperatorElements getAndOperatorAccess() {
		return unknownRuleAndOperator;
	}
	
	public EnumRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//enum LogicOperator returns commonExpressions::LogicOperator:
	//	OR="or" | AND="and";
	public LogicOperatorElements getLogicOperatorAccess() {
		return unknownRuleLogicOperator;
	}
	
	public EnumRule getLogicOperatorRule() {
		return getLogicOperatorAccess().getRule();
	}

	//enum ComparingOperator returns commonExpressions::ComparingOperator:
	//	EQUAL="==" | UNEQUAL="<>" | LESS="<" | LESS_OR_EQUAL="<=" | GREATER_OR_EQUAL=">=" | GREATER=">";
	public ComparingOperatorElements getComparingOperatorAccess() {
		return unknownRuleComparingOperator;
	}
	
	public EnumRule getComparingOperatorRule() {
		return getComparingOperatorAccess().getRule();
	}

	//enum NaturalLanguageComparingOperator returns commonExpressions::ComparingOperator:
	//	EQUAL="since exactly" | LESS="strictly short than" | LESS_OR_EQUAL="shorter than" | GREATER="strictly longer than" |
	//	GREATER_OR_EQUAL="longer than";
	public NaturalLanguageComparingOperatorElements getNaturalLanguageComparingOperatorAccess() {
		return unknownRuleNaturalLanguageComparingOperator;
	}
	
	public EnumRule getNaturalLanguageComparingOperatorRule() {
		return getNaturalLanguageComparingOperatorAccess().getRule();
	}

	//enum StateEventKind:
	//	ENTRY="entering state" | EXIT="leaving state";
	public StateEventKindElements getStateEventKindAccess() {
		return unknownRuleStateEventKind;
	}
	
	public EnumRule getStateEventKindRule() {
		return getStateEventKindAccess().getRule();
	}

	//enum StateStatusKind:
	//	ACTIVE="is active" | INACTIVE="is inactive";
	public StateStatusKindElements getStateStatusKindAccess() {
		return unknownRuleStateStatusKind;
	}
	
	public EnumRule getStateStatusKindRule() {
		return getStateStatusKindAccess().getRule();
	}

	//enum MessageEventKind:
	//	CONSUMING="consuming" | SENDING="sending";
	public MessageEventKindElements getMessageEventKindAccess() {
		return unknownRuleMessageEventKind;
	}
	
	public EnumRule getMessageEventKindRule() {
		return getMessageEventKindAccess().getRule();
	}

	//Entry returns expressions::Expression:
	//	Block | Expression | ArrayInitializeExpression;
	public ActionLanguageGrammarAccess.EntryElements getEntryAccess() {
		return gaActionLanguage.getEntryAccess();
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Block returns actionlanguage::Block hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{actionlanguage::Block} "{" expressions+=ExpressionStartRule* "}";
	public ActionLanguageGrammarAccess.BlockElements getBlockAccess() {
		return gaActionLanguage.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// TODO: clarify if it makes sense to allow arbitrary expressions for
	//// the initializeExpression and countingExpression
	//ForLoop returns actionlanguage::ForLoop:
	//	"for" "(" initializeExpression=Assignment loopTest=Expression ";" countingExpression=ForLoopCountingExpression ")"
	//	block=Block;
	public ActionLanguageGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaActionLanguage.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}

	//ForLoopCountingExpression returns actionlanguage::Assignment:
	//	lhs_typedNamedElementExpression=TypedNamedElementExpression
	//	(incrementDecrementOperator=UnaryPostIncrementDecrementOperator | assignOperator=AssignOperator
	//	rhs_assignExpression=Expression);
	public ActionLanguageGrammarAccess.ForLoopCountingExpressionElements getForLoopCountingExpressionAccess() {
		return gaActionLanguage.getForLoopCountingExpressionAccess();
	}
	
	public ParserRule getForLoopCountingExpressionRule() {
		return getForLoopCountingExpressionAccess().getRule();
	}

	//WhileLoop returns actionlanguage::WhileLoop:
	//	"while" "(" loopTest=Expression ")" block=Block;
	public ActionLanguageGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaActionLanguage.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}

	//DoWhileLoop returns actionlanguage::DoWhileLoop:
	//	"do" block=Block "while" "(" loopTest=Expression ");";
	public ActionLanguageGrammarAccess.DoWhileLoopElements getDoWhileLoopAccess() {
		return gaActionLanguage.getDoWhileLoopAccess();
	}
	
	public ParserRule getDoWhileLoopRule() {
		return getDoWhileLoopAccess().getRule();
	}

	//IfStatement returns actionlanguage::IfStatement:
	//	"if" "(" ifCondition=Expression ")" ifBlock=Block elseIfStatements+=ElseIfStatement* ("else" elseBlock=Block)?;
	public ActionLanguageGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaActionLanguage.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ElseIfStatement returns actionlanguage::ElseIfStatement:
	//	"elseif" "(" elseIfCondition=Expression ")" elseIfBlock=Block;
	public ActionLanguageGrammarAccess.ElseIfStatementElements getElseIfStatementAccess() {
		return gaActionLanguage.getElseIfStatementAccess();
	}
	
	public ParserRule getElseIfStatementRule() {
		return getElseIfStatementAccess().getRule();
	}

	//ReturnStatement returns actionlanguage::ReturnStatement:
	//	{actionlanguage::ReturnStatement} "return" expression=Expression ";";
	public ActionLanguageGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaActionLanguage.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//OperationCallStatement returns actionlanguage::OperationCall:
	//	OperationCall ";";
	public ActionLanguageGrammarAccess.OperationCallStatementElements getOperationCallStatementAccess() {
		return gaActionLanguage.getOperationCallStatementAccess();
	}
	
	public ParserRule getOperationCallStatementRule() {
		return getOperationCallStatementAccess().getRule();
	}

	//ExpressionStartRule returns expressions::Expression:
	//	Assignment | ForLoop | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
	//	LocalVariableOrConstantDeclarationStatement | OperationCallStatement;
	public ActionLanguageGrammarAccess.ExpressionStartRuleElements getExpressionStartRuleAccess() {
		return gaActionLanguage.getExpressionStartRuleAccess();
	}
	
	public ParserRule getExpressionStartRuleRule() {
		return getExpressionStartRuleAccess().getRule();
	}

	//enum UnaryPostIncrementDecrementOperator returns actionlanguage::IncrementDecrementOperator:
	//	INCREMENT="++" | DECREMENT="--";
	public ActionLanguageGrammarAccess.UnaryPostIncrementDecrementOperatorElements getUnaryPostIncrementDecrementOperatorAccess() {
		return gaActionLanguage.getUnaryPostIncrementDecrementOperatorAccess();
	}
	
	public EnumRule getUnaryPostIncrementDecrementOperatorRule() {
		return getUnaryPostIncrementDecrementOperatorAccess().getRule();
	}

	//// Assignment
	//Assignment returns actionlanguage::Assignment:
	//	lhs_typedNamedElementExpression=TypedNamedElementExpression (assignOperator=AssignOperator
	//	rhs_assignExpression=InitializeExpression | incrementDecrementOperator=UnaryPostIncrementDecrementOperator) ";";
	public ActionLanguageGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActionLanguage.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//enum IncrementDecrementOperatorExpression returns actionlanguage::IncrementDecrementOperator:
	//	INCREMENT="++" | DECREMENT="--";
	public ActionLanguageGrammarAccess.IncrementDecrementOperatorExpressionElements getIncrementDecrementOperatorExpressionAccess() {
		return gaActionLanguage.getIncrementDecrementOperatorExpressionAccess();
	}
	
	public EnumRule getIncrementDecrementOperatorExpressionRule() {
		return getIncrementDecrementOperatorExpressionAccess().getRule();
	}

	//enum AssignOperator returns actionlanguage::AssignOperator:
	//	ASSIGN=":=" | PLUS_EQUAL="+=" | MINUS_EQUAL="-=";
	public ActionLanguageGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaActionLanguage.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//// end of assignment
	//// initialize expression
	//InitializeExpression returns expressions::Expression:
	//	ArrayInitializeExpression | NondeterministicChoiceExpression | Expression;
	public ActionLanguageGrammarAccess.InitializeExpressionElements getInitializeExpressionAccess() {
		return gaActionLanguage.getInitializeExpressionAccess();
	}
	
	public ParserRule getInitializeExpressionRule() {
		return getInitializeExpressionAccess().getRule();
	}

	//// end of initialize expression
	//// array initialization
	//ArrayInitializeExpression returns actionlanguage::ArrayInitializeExpression:
	//	"[" expressions+=InitializeExpression ("," expressions+=InitializeExpression)* "]";
	public ActionLanguageGrammarAccess.ArrayInitializeExpressionElements getArrayInitializeExpressionAccess() {
		return gaActionLanguage.getArrayInitializeExpressionAccess();
	}
	
	public ParserRule getArrayInitializeExpressionRule() {
		return getArrayInitializeExpressionAccess().getRule();
	}

	//// end of array initialization
	//// local variable declaration
	//LocalVariableOrConstantDeclarationStatement returns actionlanguage::LocalVariableDeclarationStatement:
	//	variable=(LocalVariableDeclaration | LocalConstantDeclaration);
	public ActionLanguageGrammarAccess.LocalVariableOrConstantDeclarationStatementElements getLocalVariableOrConstantDeclarationStatementAccess() {
		return gaActionLanguage.getLocalVariableOrConstantDeclarationStatementAccess();
	}
	
	public ParserRule getLocalVariableOrConstantDeclarationStatementRule() {
		return getLocalVariableOrConstantDeclarationStatementAccess().getRule();
	}

	//LocalVariableDeclaration returns behavior::Variable:
	//	dataType=[types::DataType|DATATYPE] name=ID (":=" initializeExpression=InitializeExpression)? ";";
	public ActionLanguageGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaActionLanguage.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//LocalConstantDeclaration returns behavior::Variable:
	//	constant?="const" dataType=[types::DataType|DATATYPE] name=ID ":=" initializeExpression=InitializeExpression ";";
	public ActionLanguageGrammarAccess.LocalConstantDeclarationElements getLocalConstantDeclarationAccess() {
		return gaActionLanguage.getLocalConstantDeclarationAccess();
	}
	
	public ParserRule getLocalConstantDeclarationRule() {
		return getLocalConstantDeclarationAccess().getRule();
	}

	//// end of local variable declaration
	//// nondeterministic choice expression
	//NondeterministicChoiceExpression returns actionlanguage::NondeterministicChoiceExpression:
	//	dataType=[types::PrimitiveDataType] range=Range;
	public ActionLanguageGrammarAccess.NondeterministicChoiceExpressionElements getNondeterministicChoiceExpressionAccess() {
		return gaActionLanguage.getNondeterministicChoiceExpressionAccess();
	}
	
	public ParserRule getNondeterministicChoiceExpressionRule() {
		return getNondeterministicChoiceExpressionAccess().getRule();
	}

	//Range returns valuetype::Range:
	//	"<" lowerBound=LONG "," upperBound=LONG ">";
	public ActionLanguageGrammarAccess.RangeElements getRangeAccess() {
		return gaActionLanguage.getRangeAccess();
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//// end of nondeterministic choice expression
	//Expression returns expressions::Expression:
	//	LogicalExpression;
	public ActionLanguageGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaActionLanguage.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// LogicalExpression
	//LogicalExpression returns expressions::Expression:
	//	LogicalOrExpression;
	public ActionLanguageGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaActionLanguage.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns expressions::Expression:
	//	LogicalAndExpression ({commonExpressions::LogicalExpression.leftExpression=current} operator=LogicalOrOperator
	//	rightExpression=LogicalAndExpression)*;
	public ActionLanguageGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaActionLanguage.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//enum LogicalOrOperator returns commonExpressions::LogicOperator:
	//	OR="||";
	public ActionLanguageGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaActionLanguage.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalAndExpression returns expressions::Expression:
	//	ComparisonExpression ({commonExpressions::LogicalExpression.leftExpression=current} operator=LogicalAndOperator
	//	rightExpression=ComparisonExpression)*;
	public ActionLanguageGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaActionLanguage.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//enum LogicalAndOperator returns commonExpressions::LogicOperator:
	//	AND="&&";
	public ActionLanguageGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaActionLanguage.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//// end of LogicalExpression
	//// ComparisonExpression
	//ComparisonExpression returns expressions::Expression:
	//	ComparisonHigherOpExpression ({commonExpressions::ComparisonExpression.leftExpression=current}
	//	operator=ComparingEQNEQOperator rightExpression=ComparisonHigherOpExpression)?;
	public ActionLanguageGrammarAccess.ComparisonExpressionElements getComparisonExpressionAccess() {
		return gaActionLanguage.getComparisonExpressionAccess();
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//ComparisonHigherOpExpression returns expressions::Expression:
	//	ArithmeticExpression ({commonExpressions::ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
	//	rightExpression=ArithmeticExpression)?;
	public ActionLanguageGrammarAccess.ComparisonHigherOpExpressionElements getComparisonHigherOpExpressionAccess() {
		return gaActionLanguage.getComparisonHigherOpExpressionAccess();
	}
	
	public ParserRule getComparisonHigherOpExpressionRule() {
		return getComparisonHigherOpExpressionAccess().getRule();
	}

	//enum ComparingEQNEQOperator returns commonExpressions::ComparingOperator:
	//	EQUAL="==" | UNEQUAL="<>";
	public ActionLanguageGrammarAccess.ComparingEQNEQOperatorElements getComparingEQNEQOperatorAccess() {
		return gaActionLanguage.getComparingEQNEQOperatorAccess();
	}
	
	public EnumRule getComparingEQNEQOperatorRule() {
		return getComparingEQNEQOperatorAccess().getRule();
	}

	//enum ComparingRelOperator returns commonExpressions::ComparingOperator:
	//	LESS="<" | LESS_OR_EQUAL="<=" | GREATER_OR_EQUAL=">=" | GREATER=">";
	public ActionLanguageGrammarAccess.ComparingRelOperatorElements getComparingRelOperatorAccess() {
		return gaActionLanguage.getComparingRelOperatorAccess();
	}
	
	public EnumRule getComparingRelOperatorRule() {
		return getComparingRelOperatorAccess().getRule();
	}

	//// end of ComparisonExpression
	//// ArithmeticExpression	
	//ArithmeticExpression returns expressions::Expression:
	//	AdditionExpression;
	public ActionLanguageGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaActionLanguage.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditionExpression returns expressions::Expression:
	//	MultiplicationExpression ({commonExpressions::ArithmeticExpression.leftExpression=current} operator=AdditionOperator
	//	rightExpression=MultiplicationExpression)*;
	public ActionLanguageGrammarAccess.AdditionExpressionElements getAdditionExpressionAccess() {
		return gaActionLanguage.getAdditionExpressionAccess();
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}

	//enum AdditionOperator returns commonExpressions::ArithmeticOperator:
	//	PLUS="+" | MINUS="-";
	public ActionLanguageGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaActionLanguage.getAdditionOperatorAccess();
	}
	
	public EnumRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//MultiplicationExpression returns expressions::Expression:
	//	UnaryPreExpression | TypeCastExpression ({commonExpressions::ArithmeticExpression.leftExpression=current}
	//	operator=MultiplicationOperator rightExpression=(UnaryPreExpression | TypeCastExpression))*;
	public ActionLanguageGrammarAccess.MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return gaActionLanguage.getMultiplicationExpressionAccess();
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}

	//enum MultiplicationOperator returns commonExpressions::ArithmeticOperator:
	//	TIMES="*" | DIVIDE="/" | MODULO="%";
	public ActionLanguageGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaActionLanguage.getMultiplicationOperatorAccess();
	}
	
	public EnumRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//// end of ArithmeticExpression
	//// UnaryPreExpression
	//UnaryPreExpression returns expressions::Expression:
	//	{commonExpressions::UnaryExpression} operator=UnaryPreOperator enclosedExpression=TypeCastExpression;
	public ActionLanguageGrammarAccess.UnaryPreExpressionElements getUnaryPreExpressionAccess() {
		return gaActionLanguage.getUnaryPreExpressionAccess();
	}
	
	public ParserRule getUnaryPreExpressionRule() {
		return getUnaryPreExpressionAccess().getRule();
	}

	//enum UnaryPreOperator returns commonExpressions::UnaryOperator:
	//	NOT="not" | MINUS="-";
	public ActionLanguageGrammarAccess.UnaryPreOperatorElements getUnaryPreOperatorAccess() {
		return gaActionLanguage.getUnaryPreOperatorAccess();
	}
	
	public EnumRule getUnaryPreOperatorRule() {
		return getUnaryPreOperatorAccess().getRule();
	}

	//// end of UnaryPreExpression
	//TypeCastExpression returns expressions::Expression:
	//	Operand | {actionlanguage::TypeCastExpression} "(" dataType=[types::DataType|DATATYPE] ")" enclosedExpression=Operand;
	public ActionLanguageGrammarAccess.TypeCastExpressionElements getTypeCastExpressionAccess() {
		return gaActionLanguage.getTypeCastExpressionAccess();
	}
	
	public ParserRule getTypeCastExpressionRule() {
		return getTypeCastExpressionAccess().getRule();
	}

	//// Operand
	//Operand returns expressions::Expression:
	//	"(" Expression ")" | LiteralExpression | ExtendedTypedNamedElementExpression | TimeValueExpression | OperationCall |
	//	TriggerMessageExpression | NoAttributeSelectorExpression;
	public ActionLanguageGrammarAccess.OperandElements getOperandAccess() {
		return gaActionLanguage.getOperandAccess();
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//// end of Operand
	//LiteralExpression returns commonExpressions::LiteralExpression:
	//	{commonExpressions::LiteralExpression} value=Literal;
	public ActionLanguageGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaActionLanguage.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//TimeValueExpression returns actionlanguage::TimeValueExpression:
	//	timeValue=[valuetype::TimeValue|MINORMAXKEYWORD];
	public ActionLanguageGrammarAccess.TimeValueExpressionElements getTimeValueExpressionAccess() {
		return gaActionLanguage.getTimeValueExpressionAccess();
	}
	
	public ParserRule getTimeValueExpressionRule() {
		return getTimeValueExpressionAccess().getRule();
	}

	//terminal MINORMAXKEYWORD:
	//	"maxMessageDelay" | "minMessageDelay";
	public TerminalRule getMINORMAXKEYWORDRule() {
		return gaActionLanguage.getMINORMAXKEYWORDRule();
	} 

	//ExtendedTypedNamedElementExpression returns expressions::Expression:
	//	TypedNamedElementExpression
	//	({actionlanguage::DiscreteInteractionEndpointReference.typedNamedElementExpression=current} "->"
	//	position=PositionSelectorExpression | // unary post increment/decrement			
	//	{actionlanguage::Assignment.lhs_typedNamedElementExpression=current}
	//	incrementDecrementOperator=IncrementDecrementOperatorExpression)?;
	public ActionLanguageGrammarAccess.ExtendedTypedNamedElementExpressionElements getExtendedTypedNamedElementExpressionAccess() {
		return gaActionLanguage.getExtendedTypedNamedElementExpressionAccess();
	}
	
	public ParserRule getExtendedTypedNamedElementExpressionRule() {
		return getExtendedTypedNamedElementExpressionAccess().getRule();
	}

	//ArrayIndexExpression returns actionlanguage::ArrayIndexExpression:
	//	"[" index=ArithmeticExpression "]";
	public ActionLanguageGrammarAccess.ArrayIndexExpressionElements getArrayIndexExpressionAccess() {
		return gaActionLanguage.getArrayIndexExpressionAccess();
	}
	
	public ParserRule getArrayIndexExpressionRule() {
		return getArrayIndexExpressionAccess().getRule();
	}

	//AttributeAccessorExpression returns actionlanguage::AttributeAccessorExpression:
	//	"." attribute=[types::Attribute];
	public ActionLanguageGrammarAccess.AttributeAccessorExpressionElements getAttributeAccessorExpressionAccess() {
		return gaActionLanguage.getAttributeAccessorExpressionAccess();
	}
	
	public ParserRule getAttributeAccessorExpressionRule() {
		return getAttributeAccessorExpressionAccess().getRule();
	}

	//NoAttributeSelectorExpression returns actionlanguage::DiscreteInteractionEndpointReference:
	//	position=PositionSelectorExpression;
	public ActionLanguageGrammarAccess.NoAttributeSelectorExpressionElements getNoAttributeSelectorExpressionAccess() {
		return gaActionLanguage.getNoAttributeSelectorExpressionAccess();
	}
	
	public ParserRule getNoAttributeSelectorExpressionRule() {
		return getNoAttributeSelectorExpressionAccess().getRule();
	}

	//PositionSelectorExpression returns actionlanguage::PositionSelector:
	//	kind=PositionSelectorKind ("->" successor=PositionSelectorExpression)?;
	public ActionLanguageGrammarAccess.PositionSelectorExpressionElements getPositionSelectorExpressionAccess() {
		return gaActionLanguage.getPositionSelectorExpressionAccess();
	}
	
	public ParserRule getPositionSelectorExpressionRule() {
		return getPositionSelectorExpressionAccess().getRule();
	}

	//enum PositionSelectorKind returns actionlanguage::PositionSelectorKind:
	//	SELF="self" | FIRST="first" | LAST="last" | PREV="prev" | NEXT="next";
	public ActionLanguageGrammarAccess.PositionSelectorKindElements getPositionSelectorKindAccess() {
		return gaActionLanguage.getPositionSelectorKindAccess();
	}
	
	public EnumRule getPositionSelectorKindRule() {
		return getPositionSelectorKindAccess().getRule();
	}

	//ParamaterBinding returns behavior::ParameterBinding:
	//	{behavior::ParameterBinding} parameter=[behavior::Parameter] ":=" value=Expression;
	public ActionLanguageGrammarAccess.ParamaterBindingElements getParamaterBindingAccess() {
		return gaActionLanguage.getParamaterBindingAccess();
	}
	
	public ParserRule getParamaterBindingRule() {
		return getParamaterBindingAccess().getRule();
	}

	//// TriggerMessageExpression
	//TriggerMessageExpression returns actionlanguage::TriggerMessageExpression:
	//	messageType=[msgtype::MessageType] "->" parameter=[behavior::Parameter];
	public ActionLanguageGrammarAccess.TriggerMessageExpressionElements getTriggerMessageExpressionAccess() {
		return gaActionLanguage.getTriggerMessageExpressionAccess();
	}
	
	public ParserRule getTriggerMessageExpressionRule() {
		return getTriggerMessageExpressionAccess().getRule();
	}

	//DATATYPE returns ecore::EString:
	//	ID ("[" INT "]")*;
	public ActionLanguageGrammarAccess.DATATYPEElements getDATATYPEAccess() {
		return gaActionLanguage.getDATATYPEAccess();
	}
	
	public ParserRule getDATATYPERule() {
		return getDATATYPEAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaActionLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaActionLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActionLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActionLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActionLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActionLanguage.getANY_OTHERRule();
	} 
}
