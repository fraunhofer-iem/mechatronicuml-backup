/*
* generated by Xtext
*/
grammar InternalDependencyModelLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.fujaba.muml.services.DependencyModelLanguageGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private DependencyModelLanguageGrammarAccess grammarAccess;
 	
    public InternalDependencyModelLanguageParser(TokenStream input, DependencyModelLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DependencyModel";	
   	}
   	
   	@Override
   	protected DependencyModelLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDependencyModel
entryRuleDependencyModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependencyModelRule()); }
	 iv_ruleDependencyModel=ruleDependencyModel 
	 { $current=$iv_ruleDependencyModel.current; } 
	 EOF 
;

// Rule DependencyModel
ruleDependencyModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDependencyModelAccess().getDependencyModelAction_0(),
            $current);
    }
)(
(
(
		lv_comment_1_1=RULE_ML_COMMENT
		{
			newLeafNode(lv_comment_1_1, grammarAccess.getDependencyModelAccess().getCommentML_COMMENTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependencyModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_1_1, 
        		"ML_COMMENT");
	    }

    |		lv_comment_1_2=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_1_2, grammarAccess.getDependencyModelAccess().getCommentSL_COMMENTTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependencyModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_1_2, 
        		"SL_COMMENT");
	    }

)

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_0_0()); 
	    }
		lv_dependencies_2_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDependencyModelRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_2_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_1_0()); 
	    }
		lv_dependencies_3_0=ruleDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDependencyModelRule());
	        }
       		add(
       			$current, 
       			"dependencies",
        		lv_dependencies_3_0, 
        		"Dependency");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	 iv_ruleDependency=ruleDependency 
	 { $current=$iv_ruleDependency.current; } 
	 EOF 
;

// Rule Dependency
ruleDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getSynchronizationParserRuleCall_0_0_0()); 
    }
    this_Synchronization_0=ruleSynchronization
    { 
        $current = $this_Synchronization_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getSemicolonKeyword_0_0_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getForbiddenStateCombinationParserRuleCall_0_1_0()); 
    }
    this_ForbiddenStateCombination_2=ruleForbiddenStateCombination
    { 
        $current = $this_ForbiddenStateCombination_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDependencyAccess().getSemicolonKeyword_0_1_1());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getConditionalDependencyParserRuleCall_0_2()); 
    }
    this_ConditionalDependency_4=ruleConditionalDependency
    { 
        $current = $this_ConditionalDependency_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getTriggerMessageParserRuleCall_0_3()); 
    }
    this_TriggerMessage_5=ruleTriggerMessage
    { 
        $current = $this_TriggerMessage_5.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getBoundedActiveStateParserRuleCall_0_4_0()); 
    }
    this_BoundedActiveState_6=ruleBoundedActiveState
    { 
        $current = $this_BoundedActiveState_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDependencyAccess().getSemicolonKeyword_0_4_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getDataMergeParserRuleCall_0_5_0()); 
    }
    this_DataMerge_8=ruleDataMerge
    { 
        $current = $this_DataMerge_8.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDependencyAccess().getSemicolonKeyword_0_5_1());
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDependencyAccess().getClockMergeParserRuleCall_0_6_0()); 
    }
    this_ClockMerge_10=ruleClockMerge
    { 
        $current = $this_ClockMerge_10.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDependencyAccess().getSemicolonKeyword_0_6_1());
    }
))(
(
(
		lv_comment_12_1=RULE_ML_COMMENT
		{
			newLeafNode(lv_comment_12_1, grammarAccess.getDependencyAccess().getCommentML_COMMENTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependencyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_12_1, 
        		"ML_COMMENT");
	    }

    |		lv_comment_12_2=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_12_2, grammarAccess.getDependencyAccess().getCommentSL_COMMENTTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDependencyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_12_2, 
        		"SL_COMMENT");
	    }

)

)
)?)
;





// Entry rule entryRuleSynchronization
entryRuleSynchronization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynchronizationRule()); }
	 iv_ruleSynchronization=ruleSynchronization 
	 { $current=$iv_ruleSynchronization.current; } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='synchronize' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_1_0()); 
	    }
		lv_sendingEvents_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"sendingEvents",
        		lv_sendingEvents_1_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_2_1_0()); 
	    }
		lv_sendingEvents_3_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"sendingEvents",
        		lv_sendingEvents_3_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSynchronizationAccess().getWithKeyword_0_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_4_0()); 
	    }
		lv_receivingEvents_5_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"receivingEvents",
        		lv_receivingEvents_5_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_5_1_0()); 
	    }
		lv_receivingEvents_7_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"receivingEvents",
        		lv_receivingEvents_7_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(	otherlv_8='synchronize' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_1_0()); 
	    }
		lv_sendingEvents_9_0=ruleSynchronizationEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"sendingEvents",
        		lv_sendingEvents_9_0, 
        		"SynchronizationEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0()); 
	    }
		lv_sendingEvents_11_0=ruleSynchronizationEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"sendingEvents",
        		lv_sendingEvents_11_0, 
        		"SynchronizationEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12='with' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSynchronizationAccess().getWithKeyword_0_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0()); 
	    }
		lv_receivingEvents_13_0=ruleSynchronizationEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"receivingEvents",
        		lv_receivingEvents_13_0, 
        		"SynchronizationEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0()); 
	    }
		lv_receivingEvents_15_0=ruleSynchronizationEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		add(
       			$current, 
       			"receivingEvents",
        		lv_receivingEvents_15_0, 
        		"SynchronizationEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))*))(	otherlv_16='using' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSynchronizationAccess().getUsingKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getChannelNameEStringParserRuleCall_1_1_0()); 
	    }
		lv_channelName_17_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		set(
       			$current, 
       			"channelName",
        		lv_channelName_17_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_18='[' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSynchronizationAccess().getLeftSquareBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionExpressionParserRuleCall_2_1_0()); 
	    }
		lv_generalSelectorExpression_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationRule());
	        }
       		set(
       			$current, 
       			"generalSelectorExpression",
        		lv_generalSelectorExpression_19_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20=']' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getSynchronizationAccess().getRightSquareBracketKeyword_2_2());
    }
	otherlv_21='of type' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getSynchronizationAccess().getOfTypeKeyword_2_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSynchronizationRule());
	        }
        }
	otherlv_22=RULE_ID
	{
		newLeafNode(otherlv_22, grammarAccess.getSynchronizationAccess().getSelectorTypeDataTypeCrossReference_2_4_0()); 
	}

)
))?)
;





// Entry rule entryRuleForbiddenStateCombination
entryRuleForbiddenStateCombination returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForbiddenStateCombinationRule()); }
	 iv_ruleForbiddenStateCombination=ruleForbiddenStateCombination 
	 { $current=$iv_ruleForbiddenStateCombination.current; } 
	 EOF 
;

// Rule ForbiddenStateCombination
ruleForbiddenStateCombination returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='forbid state combination' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForbiddenStateCombinationAccess().getForbidStateCombinationKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForbiddenStateCombinationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForbiddenStateCombinationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForbiddenStateCombinationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleBoundedActiveState
entryRuleBoundedActiveState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoundedActiveStateRule()); }
	 iv_ruleBoundedActiveState=ruleBoundedActiveState 
	 { $current=$iv_ruleBoundedActiveState.current; } 
	 EOF 
;

// Rule BoundedActiveState
ruleBoundedActiveState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bound states' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBoundedActiveStateAccess().getBoundStatesKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoundedActiveStateRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoundedActiveStateAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoundedActiveStateRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='by' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBoundedActiveStateAccess().getByKeyword_3());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBoundedActiveStateAccess().getLeftSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoundedActiveStateAccess().getConstraintClockConditionParserRuleCall_5_0()); 
	    }
		lv_constraint_6_0=ruleClockCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoundedActiveStateRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_6_0, 
        		"ClockCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBoundedActiveStateAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTriggerMessage
entryRuleTriggerMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerMessageRule()); }
	 iv_ruleTriggerMessage=ruleTriggerMessage 
	 { $current=$iv_ruleTriggerMessage.current; } 
	 EOF 
;

// Rule TriggerMessage
ruleTriggerMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTriggerMessageAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerMessageAccess().getMessageEventMessageEventParserRuleCall_1_0()); 
	    }
		lv_messageEvent_1_0=ruleMessageEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerMessageRule());
	        }
       		set(
       			$current, 
       			"messageEvent",
        		lv_messageEvent_1_0, 
        		"MessageEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTriggerMessageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerMessageAccess().getEffectsDataAssignmentEffectParserRuleCall_3_0()); 
	    }
		lv_effects_3_0=ruleDataAssignmentEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerMessageRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_3_0, 
        		"DataAssignmentEffect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTriggerMessageAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTriggerMessageAccess().getEffectsDataAssignmentEffectParserRuleCall_4_1_0()); 
	    }
		lv_effects_5_0=ruleDataAssignmentEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTriggerMessageRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_5_0, 
        		"DataAssignmentEffect");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTriggerMessageAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionalDependencyRule()); }
	 iv_ruleConditionalDependency=ruleConditionalDependency 
	 { $current=$iv_ruleConditionalDependency.current; } 
	 EOF 
;

// Rule ConditionalDependency
ruleConditionalDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionalDependencyAccess().getIfKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getConditionConditionParserRuleCall_0_1_0()); 
	    }
		lv_condition_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_3_0()); 
	    }
		lv_effects_3_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_3_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_4_1_0()); 
	    }
		lv_effects_5_0=ruleEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_5_0, 
        		"Effect");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_5());
    }
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_0_6());
    }
)
    |(	otherlv_8='if' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getConditionalDependencyAccess().getIfKeyword_1_0());
    }
	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getConditionalDependencyAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getEventComplexEventParserRuleCall_1_2_0()); 
	    }
		lv_event_10_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_10_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getConditionalDependencyAccess().getRightSquareBracketKeyword_1_3());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_5_0()); 
	    }
		lv_effects_13_0=ruleLimitedEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_13_0, 
        		"LimitedEffect");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_6_1_0()); 
	    }
		lv_effects_15_0=ruleLimitedEffect		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionalDependencyRule());
	        }
       		add(
       			$current, 
       			"effects",
        		lv_effects_15_0, 
        		"LimitedEffect");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_7());
    }
)?	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_1_8());
    }
))
;





// Entry rule entryRuleEffect
entryRuleEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEffectRule()); }
	 iv_ruleEffect=ruleEffect 
	 { $current=$iv_ruleEffect.current; } 
	 EOF 
;

// Rule Effect
ruleEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getEnableDisableEffectParserRuleCall_0()); 
    }
    this_EnableDisableEffect_0=ruleEnableDisableEffect
    { 
        $current = $this_EnableDisableEffect_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getDataAssignmentEffectParserRuleCall_1()); 
    }
    this_DataAssignmentEffect_1=ruleDataAssignmentEffect
    { 
        $current = $this_DataAssignmentEffect_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEffectAccess().getClockResetEffectParserRuleCall_2()); 
    }
    this_ClockResetEffect_2=ruleClockResetEffect
    { 
        $current = $this_ClockResetEffect_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLimitedEffect
entryRuleLimitedEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLimitedEffectRule()); }
	 iv_ruleLimitedEffect=ruleLimitedEffect 
	 { $current=$iv_ruleLimitedEffect.current; } 
	 EOF 
;

// Rule LimitedEffect
ruleLimitedEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLimitedEffectAccess().getDataAssignmentEffectParserRuleCall_0()); 
    }
    this_DataAssignmentEffect_0=ruleDataAssignmentEffect
    { 
        $current = $this_DataAssignmentEffect_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLimitedEffectAccess().getClockResetEffectParserRuleCall_1()); 
    }
    this_ClockResetEffect_1=ruleClockResetEffect
    { 
        $current = $this_ClockResetEffect_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnableDisableEffect
entryRuleEnableDisableEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnableDisableEffectRule()); }
	 iv_ruleEnableDisableEffect=ruleEnableDisableEffect 
	 { $current=$iv_ruleEnableDisableEffect.current; } 
	 EOF 
;

// Rule EnableDisableEffect
ruleEnableDisableEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_isEnable_0_0=	'enable' 
    {
        newLeafNode(lv_isEnable_0_0, grammarAccess.getEnableDisableEffectAccess().getIsEnableEnableKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnableDisableEffectRule());
	        }
       		setWithLastConsumed($current, "isEnable", true, "enable");
	    }

)
)
    |	otherlv_1='disable' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnableDisableEffectAccess().getDisableKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEnableDisableEffectAccess().getEventEventParserRuleCall_1_0()); 
	    }
		lv_event_2_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnableDisableEffectRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_2_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataAssignmentEffect
entryRuleDataAssignmentEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataAssignmentEffectRule()); }
	 iv_ruleDataAssignmentEffect=ruleDataAssignmentEffect 
	 { $current=$iv_ruleDataAssignmentEffect.current; } 
	 EOF 
;

// Rule DataAssignmentEffect
ruleDataAssignmentEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataAssignmentEffectAccess().getAssignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0()); 
	    }
		lv_lhs_typedNamedElementExpression_1_0=ruleTypedNamedElementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataAssignmentEffectRule());
	        }
       		set(
       			$current, 
       			"lhs_typedNamedElementExpression",
        		lv_lhs_typedNamedElementExpression_1_0, 
        		"TypedNamedElementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0()); 
	    }
		lv_assignOperator_2_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataAssignmentEffectRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_2_0, 
        		"AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_rhs_assignExpression_3_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataAssignmentEffectRule());
	        }
       		set(
       			$current, 
       			"rhs_assignExpression",
        		lv_rhs_assignExpression_3_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0()); 
	    }
		lv_incrementDecrementOperator_4_0=ruleIncrementDecrementOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataAssignmentEffectRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_4_0, 
        		"IncrementDecrementOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleClockResetEffect
entryRuleClockResetEffect returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockResetEffectRule()); }
	 iv_ruleClockResetEffect=ruleClockResetEffect 
	 { $current=$iv_ruleClockResetEffect.current; } 
	 EOF 
;

// Rule ClockResetEffect
ruleClockResetEffect returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='reset clocks' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClockResetEffectAccess().getResetClocksKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockResetEffectRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClockResetEffectAccess().getAndKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockResetEffectRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDataMerge
entryRuleDataMerge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataMergeRule()); }
	 iv_ruleDataMerge=ruleDataMerge 
	 { $current=$iv_ruleDataMerge.current; } 
	 EOF 
;

// Rule DataMerge
ruleDataMerge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='merge variable' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataMergeAccess().getMergeVariableKeyword_0_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_0_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='into variable' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataMergeAccess().getIntoVariableKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_0_2_1_0()); 
	    }
		lv_variableName_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataMergeRule());
	        }
       		set(
       			$current, 
       			"variableName",
        		lv_variableName_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_4='merge variables' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataMergeAccess().getMergeVariablesKeyword_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataMergeAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+(	otherlv_8='into variable' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataMergeAccess().getIntoVariableKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_1_3_1_0()); 
	    }
		lv_variableName_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataMergeRule());
	        }
       		set(
       			$current, 
       			"variableName",
        		lv_variableName_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_10='merge variable' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDataMergeAccess().getMergeVariableKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='into hybridport' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDataMergeAccess().getIntoHybridportKeyword_2_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getPortHybridPortCrossReference_2_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_14='merge variables' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getDataMergeAccess().getMergeVariablesKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getDataMergeAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_3_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_18='into hybridport' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getDataMergeAccess().getIntoHybridportKeyword_3_3());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getDataMergeAccess().getPortHybridPortCrossReference_3_4_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleClockMerge
entryRuleClockMerge returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockMergeRule()); }
	 iv_ruleClockMerge=ruleClockMerge 
	 { $current=$iv_ruleClockMerge.current; } 
	 EOF 
;

// Rule ClockMerge
ruleClockMerge returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='merge clocks' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClockMergeAccess().getMergeClocksKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClockMergeAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClockMergeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+(	otherlv_4='into' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClockMergeAccess().getIntoKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClockMergeAccess().getClockNameEStringParserRuleCall_3_1_0()); 
	    }
		lv_clockName_5_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClockMergeRule());
	        }
       		set(
       			$current, 
       			"clockName",
        		lv_clockName_5_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEventAccess().getTransitionEventParserRuleCall_0()); 
    }
    this_TransitionEvent_0=ruleTransitionEvent
    { 
        $current = $this_TransitionEvent_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEventAccess().getStateEventParserRuleCall_1()); 
    }
    this_StateEvent_1=ruleStateEvent
    { 
        $current = $this_StateEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEventAccess().getStateCombinationEventParserRuleCall_2()); 
    }
    this_StateCombinationEvent_2=ruleStateCombinationEvent
    { 
        $current = $this_StateCombinationEvent_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getEventAccess().getMessageEventParserRuleCall_3()); 
    }
    this_MessageEvent_3=ruleMessageEvent
    { 
        $current = $this_MessageEvent_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMessageEvent
entryRuleMessageEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageEventRule()); }
	 iv_ruleMessageEvent=ruleMessageEvent 
	 { $current=$iv_ruleMessageEvent.current; } 
	 EOF 
;

// Rule MessageEvent
ruleMessageEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMessageEventAccess().getKindMessageEventKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleMessageEventKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageEventRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"MessageEventKind");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageEventRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getMessageEventAccess().getPortDiscretePortCrossReference_1_0_0()); 
	}

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageEventAccess().getFullStopKeyword_1_1());
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageEventRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMessageEventAccess().getTypeMessageTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleTransitionEvent
entryRuleTransitionEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionEventRule()); }
	 iv_ruleTransitionEvent=ruleTransitionEvent 
	 { $current=$iv_ruleTransitionEvent.current; } 
	 EOF 
;

// Rule TransitionEvent
ruleTransitionEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionEventAccess().getTransitionKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransitionEventAccess().getTransitionTransitionCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateEvent
entryRuleStateEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateEventRule()); }
	 iv_ruleStateEvent=ruleStateEvent 
	 { $current=$iv_ruleStateEvent.current; } 
	 EOF 
;

// Rule StateEvent
ruleStateEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateEventAccess().getKindStateEventKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleStateEventKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateEventRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"StateEventKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateEventAccess().getStateStateCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateCombinationEvent
entryRuleStateCombinationEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateCombinationEventRule()); }
	 iv_ruleStateCombinationEvent=ruleStateCombinationEvent 
	 { $current=$iv_ruleStateCombinationEvent.current; } 
	 EOF 
;

// Rule StateCombinationEvent
ruleStateCombinationEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateCombinationEventAccess().getKindStateEventKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleStateEventKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateCombinationEventRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"StateEventKind");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='combination' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateCombinationEventAccess().getCombinationKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateCombinationEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateCombinationEventAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateCombinationEventRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_3_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+)
;





// Entry rule entryRuleSynchronizationEvent
entryRuleSynchronizationEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSynchronizationEventRule()); }
	 iv_ruleSynchronizationEvent=ruleSynchronizationEvent 
	 { $current=$iv_ruleSynchronizationEvent.current; } 
	 EOF 
;

// Rule SynchronizationEvent
ruleSynchronizationEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationEventAccess().getEventEventParserRuleCall_0_0()); 
	    }
		lv_event_0_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationEventRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSynchronizationEventAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_selectorExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSynchronizationEventRule());
	        }
       		set(
       			$current, 
       			"selectorExpression",
        		lv_selectorExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSynchronizationEventAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleComplexEvent
entryRuleComplexEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexEventRule()); }
	 iv_ruleComplexEvent=ruleComplexEvent 
	 { $current=$iv_ruleComplexEvent.current; } 
	 EOF 
;

// Rule ComplexEvent
ruleComplexEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getComplexEventAccess().getLeftParenthesisKeyword_0_0());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComplexEventAccess().getCompositionEventParserRuleCall_0_1_0()); 
    }
    this_CompositionEvent_1=ruleCompositionEvent
    { 
        $current = $this_CompositionEvent_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComplexEventAccess().getCountedEventParserRuleCall_0_1_1()); 
    }
    this_CountedEvent_2=ruleCountedEvent
    { 
        $current = $this_CountedEvent_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComplexEventAccess().getDelayedEventParserRuleCall_0_1_2()); 
    }
    this_DelayedEvent_3=ruleDelayedEvent
    { 
        $current = $this_DelayedEvent_3.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getComplexEventAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComplexEventAccess().getEventParserRuleCall_1()); 
    }
    this_Event_5=ruleEvent
    { 
        $current = $this_Event_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCompositionEvent
entryRuleCompositionEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositionEventRule()); }
	 iv_ruleCompositionEvent=ruleCompositionEvent 
	 { $current=$iv_ruleCompositionEvent.current; } 
	 EOF 
;

// Rule CompositionEvent
ruleCompositionEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionEventAccess().getLeftEventComplexEventParserRuleCall_0_0()); 
	    }
		lv_leftEvent_0_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionEventRule());
	        }
       		set(
       			$current, 
       			"leftEvent",
        		lv_leftEvent_0_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionEventAccess().getKindLogicOperatorEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionEventRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionEventAccess().getRightEventComplexEventParserRuleCall_2_0()); 
	    }
		lv_rightEvent_2_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionEventRule());
	        }
       		set(
       			$current, 
       			"rightEvent",
        		lv_rightEvent_2_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCountedEvent
entryRuleCountedEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCountedEventRule()); }
	 iv_ruleCountedEvent=ruleCountedEvent 
	 { $current=$iv_ruleCountedEvent.current; } 
	 EOF 
;

// Rule CountedEvent
ruleCountedEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCountedEventAccess().getEventComplexEventParserRuleCall_0_0()); 
	    }
		lv_event_0_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCountedEventRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='when counted' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCountedEventAccess().getWhenCountedKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCountedEventAccess().getCounterEIntParserRuleCall_2_0()); 
	    }
		lv_counter_2_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCountedEventRule());
	        }
       		set(
       			$current, 
       			"counter",
        		lv_counter_2_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='times' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCountedEventAccess().getTimesKeyword_3());
    }
)
;





// Entry rule entryRuleDelayedEvent
entryRuleDelayedEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayedEventRule()); }
	 iv_ruleDelayedEvent=ruleDelayedEvent 
	 { $current=$iv_ruleDelayedEvent.current; } 
	 EOF 
;

// Rule DelayedEvent
ruleDelayedEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDelayedEventAccess().getEventComplexEventParserRuleCall_0_0()); 
	    }
		lv_event_0_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayedEventRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='delayed by' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDelayedEventAccess().getDelayedByKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelayedEventAccess().getDelayTimeValueParserRuleCall_2_0()); 
	    }
		lv_delay_2_0=ruleTimeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelayedEventRule());
	        }
       		set(
       			$current, 
       			"delay",
        		lv_delay_2_0, 
        		"TimeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getCompositionOrConditionParserRuleCall()); 
    }
    this_CompositionOrCondition_0=ruleCompositionOrCondition
    { 
        $current = $this_CompositionOrCondition_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCompositionOrCondition
entryRuleCompositionOrCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositionOrConditionRule()); }
	 iv_ruleCompositionOrCondition=ruleCompositionOrCondition 
	 { $current=$iv_ruleCompositionOrCondition.current; } 
	 EOF 
;

// Rule CompositionOrCondition
ruleCompositionOrCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositionOrConditionAccess().getCompositionAndConditionParserRuleCall_0()); 
    }
    this_CompositionAndCondition_0=ruleCompositionAndCondition
    { 
        $current = $this_CompositionAndCondition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompositionOrConditionAccess().getCompositionConditionLeftConditionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionOrConditionAccess().getKindOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_kind_2_0=ruleOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionOrConditionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"OrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionOrConditionAccess().getRightConditionCompositionOrConditionParserRuleCall_1_2_0()); 
	    }
		lv_rightCondition_3_0=ruleCompositionOrCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionOrConditionRule());
	        }
       		set(
       			$current, 
       			"rightCondition",
        		lv_rightCondition_3_0, 
        		"CompositionOrCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleCompositionAndCondition
entryRuleCompositionAndCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositionAndConditionRule()); }
	 iv_ruleCompositionAndCondition=ruleCompositionAndCondition 
	 { $current=$iv_ruleCompositionAndCondition.current; } 
	 EOF 
;

// Rule CompositionAndCondition
ruleCompositionAndCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCompositionAndConditionAccess().getConditionWithoutKeywordParserRuleCall_0()); 
    }
    this_ConditionWithoutKeyword_0=ruleConditionWithoutKeyword
    { 
        $current = $this_ConditionWithoutKeyword_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCompositionAndConditionAccess().getCompositionConditionLeftConditionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionAndConditionAccess().getKindAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_kind_2_0=ruleAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionAndConditionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_2_0, 
        		"AndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositionAndConditionAccess().getRightConditionCompositionAndConditionParserRuleCall_1_2_0()); 
	    }
		lv_rightCondition_3_0=ruleCompositionAndCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositionAndConditionRule());
	        }
       		set(
       			$current, 
       			"rightCondition",
        		lv_rightCondition_3_0, 
        		"CompositionAndCondition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionWithoutKeyword
entryRuleConditionWithoutKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionWithoutKeywordRule()); }
	 iv_ruleConditionWithoutKeyword=ruleConditionWithoutKeyword 
	 { $current=$iv_ruleConditionWithoutKeyword.current; } 
	 EOF 
;

// Rule ConditionWithoutKeyword
ruleConditionWithoutKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionWithoutKeywordAccess().getLeftSquareBracketKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionWithoutKeywordAccess().getClockConditionParserRuleCall_1_0()); 
    }
    this_ClockCondition_1=ruleClockCondition
    { 
        $current = $this_ClockCondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionWithoutKeywordAccess().getStateStatusConditionParserRuleCall_1_1()); 
    }
    this_StateStatusCondition_2=ruleStateStatusCondition
    { 
        $current = $this_StateStatusCondition_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionWithoutKeywordAccess().getEventConstrainedIntervalConditionParserRuleCall_1_2()); 
    }
    this_EventConstrainedIntervalCondition_3=ruleEventConstrainedIntervalCondition
    { 
        $current = $this_EventConstrainedIntervalCondition_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionWithoutKeywordAccess().getDataConditionParserRuleCall_1_3()); 
    }
    this_DataCondition_4=ruleDataCondition
    { 
        $current = $this_DataCondition_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConditionWithoutKeywordAccess().getCompositionOrConditionParserRuleCall_1_4()); 
    }
    this_CompositionOrCondition_5=ruleCompositionOrCondition
    { 
        $current = $this_CompositionOrCondition_5.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getConditionWithoutKeywordAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleStateStatusCondition
entryRuleStateStatusCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateStatusConditionRule()); }
	 iv_ruleStateStatusCondition=ruleStateStatusCondition 
	 { $current=$iv_ruleStateStatusCondition.current; } 
	 EOF 
;

// Rule StateStatusCondition
ruleStateStatusCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateStatusConditionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='state combination' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateStatusConditionAccess().getStateCombinationKeyword_0_1_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateStatusConditionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateStatusConditionAccess().getCommaKeyword_0_1_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateStatusConditionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))+))(
(
		{ 
	        newCompositeNode(grammarAccess.getStateStatusConditionAccess().getKindStateStatusKindEnumRuleCall_1_0()); 
	    }
		lv_kind_5_0=ruleStateStatusKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateStatusConditionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_5_0, 
        		"StateStatusKind");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEventConstrainedIntervalCondition
entryRuleEventConstrainedIntervalCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionRule()); }
	 iv_ruleEventConstrainedIntervalCondition=ruleEventConstrainedIntervalCondition 
	 { $current=$iv_ruleEventConstrainedIntervalCondition.current; } 
	 EOF 
;

// Rule EventConstrainedIntervalCondition
ruleEventConstrainedIntervalCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='between' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEventConstrainedIntervalConditionAccess().getBetweenKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_0_0_0()); 
	    }
		lv_fromEvent_1_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		set(
       			$current, 
       			"fromEvent",
        		lv_fromEvent_1_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_0_2_0()); 
	    }
		lv_untilEvent_3_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		set(
       			$current, 
       			"untilEvent",
        		lv_untilEvent_3_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_initialEnabled_4_0=	'INIT' 
    {
        newLeafNode(lv_initialEnabled_4_0, grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledINITKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		setWithLastConsumed($current, "initialEnabled", true, "INIT");
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_1_2_0()); 
	    }
		lv_untilEvent_6_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		set(
       			$current, 
       			"untilEvent",
        		lv_untilEvent_6_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_2_0_0()); 
	    }
		lv_fromEvent_7_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		set(
       			$current, 
       			"fromEvent",
        		lv_fromEvent_7_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_2_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_2_2_0_0()); 
	    }
		lv_untilEvent_9_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		set(
       			$current, 
       			"untilEvent",
        		lv_untilEvent_9_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_enabledInfite_10_0=	'INFINITE' 
    {
        newLeafNode(lv_enabledInfite_10_0, grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteINFINITEKeyword_1_2_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventConstrainedIntervalConditionRule());
	        }
       		setWithLastConsumed($current, "enabledInfite", true, "INFINITE");
	    }

)
)))))
;





// Entry rule entryRuleClockCondition
entryRuleClockCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClockConditionRule()); }
	 iv_ruleClockCondition=ruleClockCondition 
	 { $current=$iv_ruleClockCondition.current; } 
	 EOF 
;

// Rule ClockCondition
ruleClockCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClockConditionAccess().getBasicClockConditionParserRuleCall_0()); 
    }
    this_BasicClockCondition_0=ruleBasicClockCondition
    { 
        $current = $this_BasicClockCondition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClockConditionAccess().getAuxiliaryClockConditionParserRuleCall_1()); 
    }
    this_AuxiliaryClockCondition_1=ruleAuxiliaryClockCondition
    { 
        $current = $this_AuxiliaryClockCondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClockConditionAccess().getHybridClockConditionParserRuleCall_2()); 
    }
    this_HybridClockCondition_2=ruleHybridClockCondition
    { 
        $current = $this_HybridClockCondition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAuxiliaryClockCondition
entryRuleAuxiliaryClockCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAuxiliaryClockConditionRule()); }
	 iv_ruleAuxiliaryClockCondition=ruleAuxiliaryClockCondition 
	 { $current=$iv_ruleAuxiliaryClockCondition.current; } 
	 EOF 
;

// Rule AuxiliaryClockCondition
ruleAuxiliaryClockCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryClockConditionAccess().getEventComplexEventParserRuleCall_0_0()); 
	    }
		lv_event_0_0=ruleComplexEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryClockConditionRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"ComplexEvent");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleNaturalLanguageComparingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryClockConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NaturalLanguageComparingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); 
	    }
		lv_bound_2_0=ruleTimeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryClockConditionRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_2_0, 
        		"TimeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleHybridClockCondition
entryRuleHybridClockCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHybridClockConditionRule()); }
	 iv_ruleHybridClockCondition=ruleHybridClockCondition 
	 { $current=$iv_ruleHybridClockCondition.current; } 
	 EOF 
;

// Rule HybridClockCondition
ruleHybridClockCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getHybridClockConditionAccess().getConditionStateStatusConditionParserRuleCall_0_0()); 
	    }
		lv_condition_0_0=ruleStateStatusCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridClockConditionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_0_0, 
        		"StateStatusCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleNaturalLanguageComparingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridClockConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"NaturalLanguageComparingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getHybridClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); 
	    }
		lv_bound_2_0=ruleTimeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHybridClockConditionRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_2_0, 
        		"TimeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBasicClockCondition
entryRuleBasicClockCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicClockConditionRule()); }
	 iv_ruleBasicClockCondition=ruleBasicClockCondition 
	 { $current=$iv_ruleBasicClockCondition.current; } 
	 EOF 
;

// Rule BasicClockCondition
ruleBasicClockCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='clock' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBasicClockConditionAccess().getClockKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicClockConditionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBasicClockConditionAccess().getClockClockCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicClockConditionAccess().getOperatorComparingOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_2_0=ruleComparingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicClockConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicClockConditionAccess().getBoundTimeValueParserRuleCall_3_0()); 
	    }
		lv_bound_3_0=ruleTimeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicClockConditionRule());
	        }
       		set(
       			$current, 
       			"bound",
        		lv_bound_3_0, 
        		"TimeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataCondition
entryRuleDataCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataConditionRule()); }
	 iv_ruleDataCondition=ruleDataCondition 
	 { $current=$iv_ruleDataCondition.current; } 
	 EOF 
;

// Rule DataCondition
ruleDataCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataConditionAccess().getExpressionLogicalExpressionParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataConditionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTypedNamedElementExpression
entryRuleTypedNamedElementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedNamedElementExpressionRule()); }
	 iv_ruleTypedNamedElementExpression=ruleTypedNamedElementExpression 
	 { $current=$iv_ruleTypedNamedElementExpression.current; } 
	 EOF 
;

// Rule TypedNamedElementExpression
ruleTypedNamedElementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedNamedElementExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsArrayIndexExpressionParserRuleCall_1_0_0()); 
	    }
		lv_elementAccessors_1_1=ruleArrayIndexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNamedElementExpressionRule());
	        }
       		add(
       			$current, 
       			"elementAccessors",
        		lv_elementAccessors_1_1, 
        		"ArrayIndexExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsAttributeAccessorExpressionParserRuleCall_1_0_1()); 
	    }
		lv_elementAccessors_1_2=ruleAttributeAccessorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNamedElementExpressionRule());
	        }
       		add(
       			$current, 
       			"elementAccessors",
        		lv_elementAccessors_1_2, 
        		"AttributeAccessorExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_0_0()); 
	    }
		lv_parameterBinding_2_0=ruleParamaterBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterBinding",
        		lv_parameterBinding_2_0, 
        		"ParamaterBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterBinding_4_0=ruleParamaterBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterBinding",
        		lv_parameterBinding_4_0, 
        		"ParamaterBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTimeValue
entryRuleTimeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeValueRule()); }
	 iv_ruleTimeValue=ruleTimeValue 
	 { $current=$iv_ruleTimeValue.current; } 
	 EOF 
;

// Rule TimeValue
ruleTimeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTimeValueAccess().getValueExpressionParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTimeValueAccess().getUnitTimeUnitParserRuleCall_1_0()); 
	    }
		lv_unit_1_0=ruleTimeUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimeValueRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"TimeUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLONG
entryRuleLONG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLONGRule()); } 
	 iv_ruleLONG=ruleLONG 
	 { $current=$iv_ruleLONG.current.getText(); }  
	 EOF 
;

// Rule LONG
ruleLONG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLONGAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0()); 
    }

    |    this_BOOLEAN_1=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_1);
    }

    { 
    newLeafNode(this_BOOLEAN_1, grammarAccess.getLiteralAccess().getBOOLEANTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleTimeUnit
entryRuleTimeUnit returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeUnitRule()); } 
	 iv_ruleTimeUnit=ruleTimeUnit 
	 { $current=$iv_ruleTimeUnit.current.getText(); }  
	 EOF 
;

// Rule TimeUnit
ruleTimeUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ns' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getNsKeyword_0()); 
    }

    |
	kw='\u00B5s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getSKeyword_1()); 
    }

    |
	kw='ms' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMsKeyword_2()); 
    }

    |
	kw='s' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getSKeyword_3()); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMinKeyword_4()); 
    }

    |
	kw='h' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getHKeyword_5()); 
    }

    |
	kw='D' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitAccess().getDKeyword_6()); 
    }
)
    ;







// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpressionStartRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"ExpressionStartRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	 iv_ruleForLoop=ruleForLoop 
	 { $current=$iv_ruleForLoop.current; } 
	 EOF 
;

// Rule ForLoop
ruleForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getInitializeExpressionAssignmentParserRuleCall_2_0()); 
	    }
		lv_initializeExpression_2_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_2_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); 
	    }
		lv_loopTest_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); 
	    }
		lv_countingExpression_5_0=ruleForLoopCountingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"countingExpression",
        		lv_countingExpression_5_0, 
        		"ForLoopCountingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForLoopCountingExpression
entryRuleForLoopCountingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopCountingExpressionRule()); }
	 iv_ruleForLoopCountingExpression=ruleForLoopCountingExpression 
	 { $current=$iv_ruleForLoopCountingExpression.current; } 
	 EOF 
;

// Rule ForLoopCountingExpression
ruleForLoopCountingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_typedNamedElementExpression_0_0=ruleTypedNamedElementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs_typedNamedElementExpression",
        		lv_lhs_typedNamedElementExpression_0_0, 
        		"TypedNamedElementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_incrementDecrementOperator_1_0=ruleUnaryPostIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_1_0, 
        		"UnaryPostIncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_assignOperator_2_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_2_0, 
        		"AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rhs_assignExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs_assignExpression",
        		lv_rhs_assignExpression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	 iv_ruleWhileLoop=ruleWhileLoop 
	 { $current=$iv_ruleWhileLoop.current; } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); 
	    }
		lv_loopTest_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	 iv_ruleDoWhileLoop=ruleDoWhileLoop 
	 { $current=$iv_ruleDoWhileLoop.current; } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileLoopAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); 
	    }
		lv_loopTest_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=');' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileLoopAccess().getRightParenthesisSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_ifCondition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifCondition",
        		lv_ifCondition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); 
	    }
		lv_ifBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifBlock",
        		lv_ifBlock_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='elseif' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseifKeyword_5_0());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); 
	    }
		lv_elseIfConditions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfConditions",
        		lv_elseIfConditions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); 
	    }
		lv_elseIfBlocks_9_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfBlocks",
        		lv_elseIfBlocks_9_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_10='else' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); 
	    }
		lv_elseBlock_11_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_11_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleOperationCallStatement
entryRuleOperationCallStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallStatementRule()); }
	 iv_ruleOperationCallStatement=ruleOperationCallStatement 
	 { $current=$iv_ruleOperationCallStatement.current; } 
	 EOF 
;

// Rule OperationCallStatement
ruleOperationCallStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperationCallStatementAccess().getOperationCallParserRuleCall_0()); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleExpressionStartRule
entryRuleExpressionStartRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStartRuleRule()); }
	 iv_ruleExpressionStartRule=ruleExpressionStartRule 
	 { $current=$iv_ruleExpressionStartRule.current; } 
	 EOF 
;

// Rule ExpressionStartRule
ruleExpressionStartRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); 
    }
    this_ForLoop_1=ruleForLoop
    { 
        $current = $this_ForLoop_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); 
    }
    this_WhileLoop_2=ruleWhileLoop
    { 
        $current = $this_WhileLoop_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); 
    }
    this_DoWhileLoop_3=ruleDoWhileLoop
    { 
        $current = $this_DoWhileLoop_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); 
    }
    this_IfStatement_4=ruleIfStatement
    { 
        $current = $this_IfStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getReturnStatementParserRuleCall_5()); 
    }
    this_ReturnStatement_5=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getLocalVariableOrConstantDeclarationStatementParserRuleCall_6()); 
    }
    this_LocalVariableOrConstantDeclarationStatement_6=ruleLocalVariableOrConstantDeclarationStatement
    { 
        $current = $this_LocalVariableOrConstantDeclarationStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getOperationCallStatementParserRuleCall_7()); 
    }
    this_OperationCallStatement_7=ruleOperationCallStatement
    { 
        $current = $this_OperationCallStatement_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_typedNamedElementExpression_0_0=ruleTypedNamedElementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"lhs_typedNamedElementExpression",
        		lv_lhs_typedNamedElementExpression_0_0, 
        		"TypedNamedElementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); 
	    }
		lv_assignOperator_1_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_1_0, 
        		"AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_rhs_assignExpression_2_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"rhs_assignExpression",
        		lv_rhs_assignExpression_2_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_incrementDecrementOperator_3_0=ruleUnaryPostIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_3_0, 
        		"UnaryPostIncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInitializeExpression
entryRuleInitializeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializeExpressionRule()); }
	 iv_ruleInitializeExpression=ruleInitializeExpression 
	 { $current=$iv_ruleInitializeExpression.current; } 
	 EOF 
;

// Rule InitializeExpression
ruleInitializeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getArrayInitializeExpressionParserRuleCall_0()); 
    }
    this_ArrayInitializeExpression_0=ruleArrayInitializeExpression
    { 
        $current = $this_ArrayInitializeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getNondeterministicChoiceExpressionParserRuleCall_1()); 
    }
    this_NondeterministicChoiceExpression_1=ruleNondeterministicChoiceExpression
    { 
        $current = $this_NondeterministicChoiceExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayInitializeExpression
entryRuleArrayInitializeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializeExpressionRule()); }
	 iv_ruleArrayInitializeExpression=ruleArrayInitializeExpression 
	 { $current=$iv_ruleArrayInitializeExpression.current; } 
	 EOF 
;

// Rule ArrayInitializeExpression
ruleArrayInitializeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayInitializeExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializeExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayInitializeExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializeExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitializeExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLocalVariableOrConstantDeclarationStatement
entryRuleLocalVariableOrConstantDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule()); }
	 iv_ruleLocalVariableOrConstantDeclarationStatement=ruleLocalVariableOrConstantDeclarationStatement 
	 { $current=$iv_ruleLocalVariableOrConstantDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalVariableOrConstantDeclarationStatement
ruleLocalVariableOrConstantDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_variable_0_1=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_1, 
        		"LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalConstantDeclarationParserRuleCall_0_1()); 
	    }
		lv_variable_0_2=ruleLocalConstantDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_2, 
        		"LocalConstantDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeCrossReference_0_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getColonEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_2_1_0()); 
	    }
		lv_initializeExpression_3_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_3_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleLocalConstantDeclaration
entryRuleLocalConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalConstantDeclarationRule()); }
	 iv_ruleLocalConstantDeclaration=ruleLocalConstantDeclaration 
	 { $current=$iv_ruleLocalConstantDeclaration.current; } 
	 EOF 
;

// Rule LocalConstantDeclaration
ruleLocalConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constant_0_0=	'const' 
    {
        newLeafNode(lv_constant_0_0, grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "const");
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeCrossReference_1_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLocalConstantDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalConstantDeclarationAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_4_0()); 
	    }
		lv_initializeExpression_4_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_4_0, 
        		"InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalConstantDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleNondeterministicChoiceExpression
entryRuleNondeterministicChoiceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNondeterministicChoiceExpressionRule()); }
	 iv_ruleNondeterministicChoiceExpression=ruleNondeterministicChoiceExpression 
	 { $current=$iv_ruleNondeterministicChoiceExpression.current; } 
	 EOF 
;

// Rule NondeterministicChoiceExpression
ruleNondeterministicChoiceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNondeterministicChoiceExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeRangeParserRuleCall_1_0()); 
	    }
		lv_range_1_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNondeterministicChoiceExpressionRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLowerBoundLONGParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleLONG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"LONG");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getUpperBoundLONGParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleLONG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"LONG");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); 
    }
    this_LogicalExpression_0=ruleLogicalExpression
    { 
        $current = $this_LogicalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLogicalOrExpressionParserRuleCall()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); 
    }
    this_ComparisonExpression_0=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"LogicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleComparisonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"ComparisonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getComparisonHigherOpExpressionParserRuleCall_0()); 
    }
    this_ComparisonHigherOpExpression_0=ruleComparisonHigherOpExpression
    { 
        $current = $this_ComparisonHigherOpExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparingEQNEQOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparingEQNEQOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparingEQNEQOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleComparisonHigherOpExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"ComparisonHigherOpExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleComparisonHigherOpExpression
entryRuleComparisonHigherOpExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonHigherOpExpressionRule()); }
	 iv_ruleComparisonHigherOpExpression=ruleComparisonHigherOpExpression 
	 { $current=$iv_ruleComparisonHigherOpExpression.current; } 
	 EOF 
;

// Rule ComparisonHigherOpExpression
ruleComparisonHigherOpExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getArithmeticExpressionParserRuleCall_0()); 
    }
    this_ArithmeticExpression_0=ruleArithmeticExpression
    { 
        $current = $this_ArithmeticExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonHigherOpExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorComparingRelOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparingRelOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparingRelOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionArithmeticExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleArithmeticExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"ArithmeticExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	 iv_ruleArithmeticExpression=ruleArithmeticExpression 
	 { $current=$iv_ruleArithmeticExpression.current; } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAdditionExpressionParserRuleCall()); 
    }
    this_AdditionExpression_0=ruleAdditionExpression
    { 
        $current = $this_AdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	 iv_ruleAdditionExpression=ruleAdditionExpression 
	 { $current=$iv_ruleAdditionExpression.current; } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); 
    }
    this_MultiplicationExpression_0=ruleMultiplicationExpression
    { 
        $current = $this_MultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleMultiplicationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"MultiplicationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	 iv_ruleMultiplicationExpression=ruleMultiplicationExpression 
	 { $current=$iv_ruleMultiplicationExpression.current; } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getUnaryPreExpressionParserRuleCall_0()); 
    }
    this_UnaryPreExpression_0=ruleUnaryPreExpression
    { 
        $current = $this_UnaryPreExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getTypeCastExpressionParserRuleCall_1_0()); 
    }
    this_TypeCastExpression_1=ruleTypeCastExpression
    { 
        $current = $this_TypeCastExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_1_0()); 
	    }
		lv_operator_3_0=ruleMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"MultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionUnaryPreExpressionParserRuleCall_1_1_2_0_0()); 
	    }
		lv_rightExpression_4_1=ruleUnaryPreExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_1, 
        		"UnaryPreExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionTypeCastExpressionParserRuleCall_1_1_2_0_1()); 
	    }
		lv_rightExpression_4_2=ruleTypeCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_2, 
        		"TypeCastExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*))
;





// Entry rule entryRuleUnaryPreExpression
entryRuleUnaryPreExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryPreExpressionRule()); }
	 iv_ruleUnaryPreExpression=ruleUnaryPreExpression 
	 { $current=$iv_ruleUnaryPreExpression.current; } 
	 EOF 
;

// Rule UnaryPreExpression
ruleUnaryPreExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryPreExpressionAccess().getUnaryExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getOperatorUnaryPreOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleUnaryPreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"UnaryPreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionTypeCastExpressionParserRuleCall_2_0()); 
	    }
		lv_enclosedExpression_2_0=ruleTypeCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
	        }
       		set(
       			$current, 
       			"enclosedExpression",
        		lv_enclosedExpression_2_0, 
        		"TypeCastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeCastExpression
entryRuleTypeCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeCastExpressionRule()); }
	 iv_ruleTypeCastExpression=ruleTypeCastExpression 
	 { $current=$iv_ruleTypeCastExpression.current; } 
	 EOF 
;

// Rule TypeCastExpression
ruleTypeCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getOperandParserRuleCall_0()); 
    }
    this_Operand_0=ruleOperand
    { 
        $current = $this_Operand_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeCastExpressionAccess().getTypeCastExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeCastExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeCastExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getDataTypeDataTypeCrossReference_1_2_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeCastExpressionAccess().getRightParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getEnclosedExpressionOperandParserRuleCall_1_4_0()); 
	    }
		lv_enclosedExpression_5_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeCastExpressionRule());
	        }
       		set(
       			$current, 
       			"enclosedExpression",
        		lv_enclosedExpression_5_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getLiteralExpressionParserRuleCall_1()); 
    }
    this_LiteralExpression_3=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getExtendedTypedNamedElementExpressionParserRuleCall_2()); 
    }
    this_ExtendedTypedNamedElementExpression_4=ruleExtendedTypedNamedElementExpression
    { 
        $current = $this_ExtendedTypedNamedElementExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getTimeValueExpressionParserRuleCall_3()); 
    }
    this_TimeValueExpression_5=ruleTimeValueExpression
    { 
        $current = $this_TimeValueExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getOperationCallParserRuleCall_4()); 
    }
    this_OperationCall_6=ruleOperationCall
    { 
        $current = $this_OperationCall_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getTriggerMessageExpressionParserRuleCall_5()); 
    }
    this_TriggerMessageExpression_7=ruleTriggerMessageExpression
    { 
        $current = $this_TriggerMessageExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getNoAttributeSelectorExpressionParserRuleCall_6()); 
    }
    this_NoAttributeSelectorExpression_8=ruleNoAttributeSelectorExpression
    { 
        $current = $this_NoAttributeSelectorExpression_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueLiteralParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTimeValueExpression
entryRuleTimeValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeValueExpressionRule()); }
	 iv_ruleTimeValueExpression=ruleTimeValueExpression 
	 { $current=$iv_ruleTimeValueExpression.current; } 
	 EOF 
;

// Rule TimeValueExpression
ruleTimeValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeValueExpressionRule());
	        }
        }
	otherlv_0=RULE_MINORMAXKEYWORD
	{
		newLeafNode(otherlv_0, grammarAccess.getTimeValueExpressionAccess().getTimeValueTimeValueCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleExtendedTypedNamedElementExpression
entryRuleExtendedTypedNamedElementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionRule()); }
	 iv_ruleExtendedTypedNamedElementExpression=ruleExtendedTypedNamedElementExpression 
	 { $current=$iv_ruleExtendedTypedNamedElementExpression.current; } 
	 EOF 
;

// Rule ExtendedTypedNamedElementExpression
ruleExtendedTypedNamedElementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getTypedNamedElementExpressionParserRuleCall_0()); 
    }
    this_TypedNamedElementExpression_0=ruleTypedNamedElementExpression
    { 
        $current = $this_TypedNamedElementExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExtendedTypedNamedElementExpressionAccess().getDiscreteInteractionEndpointReferenceTypedNamedElementExpressionAction_1_0_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendedTypedNamedElementExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_position_3_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedTypedNamedElementExpressionRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_3_0, 
        		"PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAssignmentLhs_typedNamedElementExpressionAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_1_1_1_0()); 
	    }
		lv_incrementDecrementOperator_5_0=ruleIncrementDecrementOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedTypedNamedElementExpressionRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_5_0, 
        		"IncrementDecrementOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleArrayIndexExpression
entryRuleArrayIndexExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayIndexExpressionRule()); }
	 iv_ruleArrayIndexExpression=ruleArrayIndexExpression 
	 { $current=$iv_ruleArrayIndexExpression.current; } 
	 EOF 
;

// Rule ArrayIndexExpression
ruleArrayIndexExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayIndexExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayIndexExpressionAccess().getIndexArithmeticExpressionParserRuleCall_1_0()); 
	    }
		lv_index_1_0=ruleArithmeticExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayIndexExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"ArithmeticExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayIndexExpressionAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAttributeAccessorExpression
entryRuleAttributeAccessorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeAccessorExpressionRule()); }
	 iv_ruleAttributeAccessorExpression=ruleAttributeAccessorExpression 
	 { $current=$iv_ruleAttributeAccessorExpression.current; } 
	 EOF 
;

// Rule AttributeAccessorExpression
ruleAttributeAccessorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccessorExpressionAccess().getFullStopKeyword_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeAccessorExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAttributeAccessorExpressionAccess().getAttributeAttributeCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleNoAttributeSelectorExpression
entryRuleNoAttributeSelectorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoAttributeSelectorExpressionRule()); }
	 iv_ruleNoAttributeSelectorExpression=ruleNoAttributeSelectorExpression 
	 { $current=$iv_ruleNoAttributeSelectorExpression.current; } 
	 EOF 
;

// Rule NoAttributeSelectorExpression
ruleNoAttributeSelectorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_0()); 
	    }
		lv_position_0_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoAttributeSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_0_0, 
        		"PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePositionSelectorExpression
entryRulePositionSelectorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionSelectorExpressionRule()); }
	 iv_rulePositionSelectorExpression=rulePositionSelectorExpression 
	 { $current=$iv_rulePositionSelectorExpression.current; } 
	 EOF 
;

// Rule PositionSelectorExpression
rulePositionSelectorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPositionSelectorExpressionAccess().getKindPositionSelectorKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=rulePositionSelectorKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"PositionSelectorKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPositionSelectorExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorPositionSelectorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_successor_2_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"successor",
        		lv_successor_2_0, 
        		"PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleParamaterBinding
entryRuleParamaterBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamaterBindingRule()); }
	 iv_ruleParamaterBinding=ruleParamaterBinding 
	 { $current=$iv_ruleParamaterBinding.current; } 
	 EOF 
;

// Rule ParamaterBinding
ruleParamaterBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParamaterBindingAccess().getParameterBindingAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamaterBindingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getParamaterBindingAccess().getParameterParameterCrossReference_1_0()); 
	}

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParamaterBindingAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamaterBindingAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamaterBindingRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTriggerMessageExpression
entryRuleTriggerMessageExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerMessageExpressionRule()); }
	 iv_ruleTriggerMessageExpression=ruleTriggerMessageExpression 
	 { $current=$iv_ruleTriggerMessageExpression.current; } 
	 EOF 
;

// Rule TriggerMessageExpression
ruleTriggerMessageExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerMessageExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeCrossReference_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggerMessageExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerMessageExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleDATATYPE
entryRuleDATATYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDATATYPERule()); } 
	 iv_ruleDATATYPE=ruleDATATYPE 
	 { $current=$iv_ruleDATATYPE.current.getText(); }  
	 EOF 
;

// Rule DATATYPE
ruleDATATYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getDATATYPEAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDATATYPEAccess().getLeftSquareBracketKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDATATYPEAccess().getINTTerminalRuleCall_1_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDATATYPEAccess().getRightSquareBracketKeyword_1_2()); 
    }
)*)
    ;





// Rule OrOperator
ruleOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='or' 
	{
        $current = grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule AndOperator
ruleAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='and' 
	{
        $current = grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule LogicOperator
ruleLogicOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='or' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='and' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparingOperator
ruleComparingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='>' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_5()); 
    }
));



// Rule NaturalLanguageComparingOperator
ruleNaturalLanguageComparingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='since exactly' 
	{
        $current = grammarAccess.getNaturalLanguageComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNaturalLanguageComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='strictly short than' 
	{
        $current = grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='shorter than' 
	{
        $current = grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='strictly longer than' 
	{
        $current = grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATEREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='longer than' 
	{
        $current = grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); 
    }
));



// Rule StateEventKind
ruleStateEventKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='entering state' 
	{
        $current = grammarAccess.getStateEventKindAccess().getENTRYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStateEventKindAccess().getENTRYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='leaving state' 
	{
        $current = grammarAccess.getStateEventKindAccess().getEXITEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStateEventKindAccess().getEXITEnumLiteralDeclaration_1()); 
    }
));



// Rule StateStatusKind
ruleStateStatusKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='is active' 
	{
        $current = grammarAccess.getStateStatusKindAccess().getACTIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getStateStatusKindAccess().getACTIVEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='is inactive' 
	{
        $current = grammarAccess.getStateStatusKindAccess().getINACTIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getStateStatusKindAccess().getINACTIVEEnumLiteralDeclaration_1()); 
    }
));



// Rule MessageEventKind
ruleMessageEventKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='consuming' 
	{
        $current = grammarAccess.getMessageEventKindAccess().getCONSUMINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMessageEventKindAccess().getCONSUMINGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='sending' 
	{
        $current = grammarAccess.getMessageEventKindAccess().getSENDINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMessageEventKindAccess().getSENDINGEnumLiteralDeclaration_1()); 
    }
));



// Rule UnaryPostIncrementDecrementOperator
ruleUnaryPostIncrementDecrementOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



// Rule IncrementDecrementOperatorExpression
ruleIncrementDecrementOperatorExpression returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



// Rule AssignOperator
ruleAssignOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0=':=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2()); 
    }
));



// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule ComparingEQNEQOperator
ruleComparingEQNEQOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparingRelOperator
ruleComparingRelOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3()); 
    }
));



// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicationOperator
ruleMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getMODULOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicationOperatorAccess().getMODULOEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryPreOperator
ruleUnaryPreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule PositionSelectorKind
rulePositionSelectorKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='self' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='first' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='last' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='prev' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='next' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4()); 
    }
));



RULE_NUMBER : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') (('a'..'z'|'A'..'Z'|'_'|'0'..'9')+ ('(' ('0'..'9')+ ')-->' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+)?)?;

RULE_MINORMAXKEYWORD : ('maxMsgDelay'|'minMsgDelay');

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


