// Dependency Test
forbid inner.init, port.init;
if [ port.b == 1 ] {
	enable port.init(1)-->s2;
	disable port.init(1)-->s2 };
datamerge port.b, port2.baz2 to bbaz;
clockmerge port.c1, port2.c1;
if [ port.b < 5 ] {
	enable entering inner.init };
if [ between port.init(1)-->s2, INFINITE ] {
	assign port.multArray [ first ] := port2.baz2;
	clockreset port2.c1 };
sync port.init(1)-->s2 with port2.init(1)-->s2 using test [ true ] of type
BOOLEAN;
if [ port.b <> 1 ] and [ [ port.b < 5 ] or [ port.b > 15 ] ] {
	clockreset port.c1 };
bound port.s2 by [ clock port2.c1 > 5 s ];
if [ port2.init active ] {
	enable leaving inner.init };
bound port.init by [ inner.init active holds since < 5 s ];
if [ between (consuming m1 or (entering port.init  delayed by 3 ms)) , sending port . m1 ] {
	enable sending port . m1 };
if [ between INIT OR port2.init(1)-->s2, (port.init(1)-->s2 counted 2 times) ] {
	disable entering port2.s2 };