/*
 * generated by Xtext
 */
package org.muml.psm.allocation.language.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.ocl.xtext.completeocl.services.CompleteOCLGrammarAccess;
import org.eclipse.ocl.xtext.essentialocl.services.EssentialOCLGrammarAccess;
import org.eclipse.ocl.xtext.base.services.BaseGrammarAccess;

@Singleton
public class AllocationSpecificationLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSpecificationCSAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cOwnedImportsAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cOwnedImportsImportCSParserRuleCall_3_0_0 = (RuleCall)cOwnedImportsAssignment_3_0.eContents().get(0);
		private final Assignment cNameProviderImplementationClassAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cNameProviderImplementationClassNameProviderImplementationClassParserRuleCall_3_1_0 = (RuleCall)cNameProviderImplementationClassAssignment_3_1.eContents().get(0);
		private final Assignment cStorageProviderImplementationClassAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cStorageProviderImplementationClassStorageProviderImplementationClassParserRuleCall_3_2_0 = (RuleCall)cStorageProviderImplementationClassAssignment_3_2.eContents().get(0);
		private final Assignment cOclContextAssignment_3_3 = (Assignment)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cOclContextOCLContextParserRuleCall_3_3_0 = (RuleCall)cOclContextAssignment_3_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cOwnedImportsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cOwnedImportsImportCSParserRuleCall_4_0_0 = (RuleCall)cOwnedImportsAssignment_4_0.eContents().get(0);
		private final Assignment cOwnedContextsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cOwnedContextsClassifierContextDeclCSParserRuleCall_4_1_0 = (RuleCall)cOwnedContextsAssignment_4_1.eContents().get(0);
		private final Assignment cRelationsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cRelationsRelationParserRuleCall_4_2_0 = (RuleCall)cRelationsAssignment_4_2.eContents().get(0);
		private final Assignment cServicesAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cServicesServiceParserRuleCall_4_3_0 = (RuleCall)cServicesAssignment_4_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_4 = (Assignment)cAlternatives_4.eContents().get(4);
		private final RuleCall cConstraintsConstraintParserRuleCall_4_4_0 = (RuleCall)cConstraintsAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cGoalAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cGoalGoalEnumRuleCall_5_0_0 = (RuleCall)cGoalAssignment_5_0.eContents().get(0);
		private final Assignment cMeasureAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMeasureMeasureFunctionParserRuleCall_5_1_0 = (RuleCall)cMeasureAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Specification cs::SpecificationCS:
		//	{cs::SpecificationCS} name=ID '{' (ownedImports+=ImportCS*
		//	& nameProviderImplementationClass=NameProviderImplementationClass
		//	& storageProviderImplementationClass=StorageProviderImplementationClass
		//	& oclContext=OCLContext) (ownedImports+=ImportCS
		//	| ownedContexts+=ClassifierContextDeclCS
		//	| relations+=Relation | services+=Service | constraints+=Constraint)* (goal=Goal measure=MeasureFunction)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{cs::SpecificationCS} name=ID '{' (ownedImports+=ImportCS* &
		//nameProviderImplementationClass=NameProviderImplementationClass &
		//storageProviderImplementationClass=StorageProviderImplementationClass & oclContext=OCLContext) (ownedImports+=ImportCS
		//| ownedContexts+=ClassifierContextDeclCS | relations+=Relation | services+=Service | constraints+=Constraint)*
		//(goal=Goal measure=MeasureFunction)? '}'
		public Group getGroup() { return cGroup; }

		//{cs::SpecificationCS}
		public Action getSpecificationCSAction_0() { return cSpecificationCSAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(ownedImports+=ImportCS* & nameProviderImplementationClass=NameProviderImplementationClass &
		//storageProviderImplementationClass=StorageProviderImplementationClass & oclContext=OCLContext)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//ownedImports+=ImportCS*
		public Assignment getOwnedImportsAssignment_3_0() { return cOwnedImportsAssignment_3_0; }

		//ImportCS
		public RuleCall getOwnedImportsImportCSParserRuleCall_3_0_0() { return cOwnedImportsImportCSParserRuleCall_3_0_0; }

		//nameProviderImplementationClass=NameProviderImplementationClass
		public Assignment getNameProviderImplementationClassAssignment_3_1() { return cNameProviderImplementationClassAssignment_3_1; }

		//NameProviderImplementationClass
		public RuleCall getNameProviderImplementationClassNameProviderImplementationClassParserRuleCall_3_1_0() { return cNameProviderImplementationClassNameProviderImplementationClassParserRuleCall_3_1_0; }

		//storageProviderImplementationClass=StorageProviderImplementationClass
		public Assignment getStorageProviderImplementationClassAssignment_3_2() { return cStorageProviderImplementationClassAssignment_3_2; }

		//StorageProviderImplementationClass
		public RuleCall getStorageProviderImplementationClassStorageProviderImplementationClassParserRuleCall_3_2_0() { return cStorageProviderImplementationClassStorageProviderImplementationClassParserRuleCall_3_2_0; }

		//oclContext=OCLContext
		public Assignment getOclContextAssignment_3_3() { return cOclContextAssignment_3_3; }

		//OCLContext
		public RuleCall getOclContextOCLContextParserRuleCall_3_3_0() { return cOclContextOCLContextParserRuleCall_3_3_0; }

		//(ownedImports+=ImportCS | ownedContexts+=ClassifierContextDeclCS | relations+=Relation | services+=Service |
		//constraints+=Constraint)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//ownedImports+=ImportCS
		public Assignment getOwnedImportsAssignment_4_0() { return cOwnedImportsAssignment_4_0; }

		//ImportCS
		public RuleCall getOwnedImportsImportCSParserRuleCall_4_0_0() { return cOwnedImportsImportCSParserRuleCall_4_0_0; }

		//ownedContexts+=ClassifierContextDeclCS
		public Assignment getOwnedContextsAssignment_4_1() { return cOwnedContextsAssignment_4_1; }

		//ClassifierContextDeclCS
		public RuleCall getOwnedContextsClassifierContextDeclCSParserRuleCall_4_1_0() { return cOwnedContextsClassifierContextDeclCSParserRuleCall_4_1_0; }

		//relations+=Relation
		public Assignment getRelationsAssignment_4_2() { return cRelationsAssignment_4_2; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_4_2_0() { return cRelationsRelationParserRuleCall_4_2_0; }

		//services+=Service
		public Assignment getServicesAssignment_4_3() { return cServicesAssignment_4_3; }

		//Service
		public RuleCall getServicesServiceParserRuleCall_4_3_0() { return cServicesServiceParserRuleCall_4_3_0; }

		//constraints+=Constraint
		public Assignment getConstraintsAssignment_4_4() { return cConstraintsAssignment_4_4; }

		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_4_4_0() { return cConstraintsConstraintParserRuleCall_4_4_0; }

		//(goal=Goal measure=MeasureFunction)?
		public Group getGroup_5() { return cGroup_5; }

		//goal=Goal
		public Assignment getGoalAssignment_5_0() { return cGoalAssignment_5_0; }

		//Goal
		public RuleCall getGoalGoalEnumRuleCall_5_0_0() { return cGoalGoalEnumRuleCall_5_0_0; }

		//measure=MeasureFunction
		public Assignment getMeasureAssignment_5_1() { return cMeasureAssignment_5_1; }

		//MeasureFunction
		public RuleCall getMeasureMeasureFunctionParserRuleCall_5_1_0() { return cMeasureMeasureFunctionParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NameProviderImplementationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.NameProviderImplementationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplementationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplementationJavaClassCSCrossReference_1_0 = (CrossReference)cImplementationAssignment_1.eContents().get(0);
		private final RuleCall cImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1 = (RuleCall)cImplementationJavaClassCSCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NameProviderImplementationClass cs::JavaImplementationProviderCS:
		//	'nameProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
		@Override public ParserRule getRule() { return rule; }

		//'nameProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
		public Group getGroup() { return cGroup; }

		//'nameProvider'
		public Keyword getNameProviderKeyword_0() { return cNameProviderKeyword_0; }

		//implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING]
		public Assignment getImplementationAssignment_1() { return cImplementationAssignment_1; }

		//[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING]
		public CrossReference getImplementationJavaClassCSCrossReference_1_0() { return cImplementationJavaClassCSCrossReference_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1() { return cImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class StorageProviderImplementationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.StorageProviderImplementationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStorageProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplementationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplementationJavaClassCSCrossReference_1_0 = (CrossReference)cImplementationAssignment_1.eContents().get(0);
		private final RuleCall cImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1 = (RuleCall)cImplementationJavaClassCSCrossReference_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//StorageProviderImplementationClass cs::JavaImplementationProviderCS:
		//	'storageProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
		@Override public ParserRule getRule() { return rule; }

		//'storageProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
		public Group getGroup() { return cGroup; }

		//'storageProvider'
		public Keyword getStorageProviderKeyword_0() { return cStorageProviderKeyword_0; }

		//implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING]
		public Assignment getImplementationAssignment_1() { return cImplementationAssignment_1; }

		//[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING]
		public CrossReference getImplementationJavaClassCSCrossReference_1_0() { return cImplementationJavaClassCSCrossReference_1_0; }

		//SINGLE_QUOTED_STRING
		public RuleCall getImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1() { return cImplementationJavaClassCSSINGLE_QUOTED_STRINGTerminalRuleCall_1_0_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class OCLContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.OCLContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOclContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOwnedTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_1_0 = (RuleCall)cOwnedTypeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OCLContext cs::OCLContextCS:
		//	'oclContext' ownedType=TypedRefCS ';'
		@Override public ParserRule getRule() { return rule; }

		//'oclContext' ownedType=TypedRefCS ';'
		public Group getGroup() { return cGroup; }

		//'oclContext'
		public Keyword getOclContextKeyword_0() { return cOclContextKeyword_0; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_1() { return cOwnedTypeAssignment_1; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_1_0() { return cOwnedTypeTypedRefCSParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDimensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDimensionsQosDimensionParserRuleCall_3_0 = (RuleCall)cDimensionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Service cs::ServiceCS:
		//	'service' name=ID '{'
		//	dimensions+=QosDimension*
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'service' name=ID '{' dimensions+=QosDimension* '}'
		public Group getGroup() { return cGroup; }

		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//dimensions+=QosDimension*
		public Assignment getDimensionsAssignment_3() { return cDimensionsAssignment_3; }

		//QosDimension
		public RuleCall getDimensionsQosDimensionParserRuleCall_3_0() { return cDimensionsQosDimensionParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleDescriptorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleDescriptorTupleDescriptorParserRuleCall_3_0 = (RuleCall)cTupleDescriptorAssignment_3.eContents().get(0);
		private final Assignment cLowerBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerBoundLowerBoundParserRuleCall_4_0 = (RuleCall)cLowerBoundAssignment_4.eContents().get(0);
		private final Assignment cUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpperBoundUpperBoundParserRuleCall_5_0 = (RuleCall)cUpperBoundAssignment_5.eContents().get(0);
		private final Keyword cOclKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExpressionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExpressionModelParserRuleCall_7_0 = (RuleCall)cExpressionAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Relation cs::RelationCS:
		//	'relation' name=ID? '{'
		//	tupleDescriptor=TupleDescriptor
		//	lowerBound=LowerBound
		//	upperBound=UpperBound
		//	'ocl' expression=Model ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'relation' name=ID? '{' tupleDescriptor=TupleDescriptor lowerBound=LowerBound upperBound=UpperBound 'ocl'
		//expression=Model ';' '}'
		public Group getGroup() { return cGroup; }

		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tupleDescriptor=TupleDescriptor
		public Assignment getTupleDescriptorAssignment_3() { return cTupleDescriptorAssignment_3; }

		//TupleDescriptor
		public RuleCall getTupleDescriptorTupleDescriptorParserRuleCall_3_0() { return cTupleDescriptorTupleDescriptorParserRuleCall_3_0; }

		//lowerBound=LowerBound
		public Assignment getLowerBoundAssignment_4() { return cLowerBoundAssignment_4; }

		//LowerBound
		public RuleCall getLowerBoundLowerBoundParserRuleCall_4_0() { return cLowerBoundLowerBoundParserRuleCall_4_0; }

		//upperBound=UpperBound
		public Assignment getUpperBoundAssignment_5() { return cUpperBoundAssignment_5; }

		//UpperBound
		public RuleCall getUpperBoundUpperBoundParserRuleCall_5_0() { return cUpperBoundUpperBoundParserRuleCall_5_0; }

		//'ocl'
		public Keyword getOclKeyword_6() { return cOclKeyword_6; }

		//expression=Model
		public Assignment getExpressionAssignment_7() { return cExpressionAssignment_7; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_7_0() { return cExpressionModelParserRuleCall_7_0; }

		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class LowerBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.LowerBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLowerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionModelParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LowerBound cs::BoundCS:
		//	'lower' expression=Model ';'
		@Override public ParserRule getRule() { return rule; }

		//'lower' expression=Model ';'
		public Group getGroup() { return cGroup; }

		//'lower'
		public Keyword getLowerKeyword_0() { return cLowerKeyword_0; }

		//expression=Model
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_1_0() { return cExpressionModelParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class UpperBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.UpperBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionModelParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UpperBound cs::BoundCS:
		//	'upper' expression=Model ';'
		@Override public ParserRule getRule() { return rule; }

		//'upper' expression=Model ';'
		public Group getGroup() { return cGroup; }

		//'upper'
		public Keyword getUpperKeyword_0() { return cUpperKeyword_0; }

		//expression=Model
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_1_0() { return cExpressionModelParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class QosDimensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.QosDimension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQosKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleDescriptorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleDescriptorWeightTupleDescriptorParserRuleCall_3_0 = (RuleCall)cTupleDescriptorAssignment_3.eContents().get(0);
		private final Keyword cOclKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionModelParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//QosDimension cs::QoSDimensionCS:
		//	'qos' name=ID '{'
		//	tupleDescriptor=WeightTupleDescriptor
		//	'ocl' expression=Model ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'qos' name=ID '{' tupleDescriptor=WeightTupleDescriptor 'ocl' expression=Model ';' '}'
		public Group getGroup() { return cGroup; }

		//'qos'
		public Keyword getQosKeyword_0() { return cQosKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tupleDescriptor=WeightTupleDescriptor
		public Assignment getTupleDescriptorAssignment_3() { return cTupleDescriptorAssignment_3; }

		//WeightTupleDescriptor
		public RuleCall getTupleDescriptorWeightTupleDescriptorParserRuleCall_3_0() { return cTupleDescriptorWeightTupleDescriptorParserRuleCall_3_0; }

		//'ocl'
		public Keyword getOclKeyword_4() { return cOclKeyword_4; }

		//expression=Model
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_5_0() { return cExpressionModelParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypedPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.TypedPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstTypedNamedPartParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSecondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondTypedNamedPartParserRuleCall_3_0 = (RuleCall)cSecondAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TypedPair cs::TypedPairCS:
		//	'(' first=TypedNamedPart ',' second=TypedNamedPart ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' first=TypedNamedPart ',' second=TypedNamedPart ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//first=TypedNamedPart
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }

		//TypedNamedPart
		public RuleCall getFirstTypedNamedPartParserRuleCall_1_0() { return cFirstTypedNamedPartParserRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//second=TypedNamedPart
		public Assignment getSecondAssignment_3() { return cSecondAssignment_3; }

		//TypedNamedPart
		public RuleCall getSecondTypedNamedPartParserRuleCall_3_0() { return cSecondTypedNamedPartParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TypedNamedPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.TypedNamedPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOwnedTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOwnedTypeTypedRefCSParserRuleCall_2_0 = (RuleCall)cOwnedTypeAssignment_2.eContents().get(0);
		
		//TypedNamedPart cs::TypedNamedPartCS:
		//	name=ID ':' ownedType=TypedRefCS
		@Override public ParserRule getRule() { return rule; }

		//name=ID ':' ownedType=TypedRefCS
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDParserRuleCall_0_0() { return cNameIDParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ownedType=TypedRefCS
		public Assignment getOwnedTypeAssignment_2() { return cOwnedTypeAssignment_2; }

		//TypedRefCS
		public RuleCall getOwnedTypeTypedRefCSParserRuleCall_2_0() { return cOwnedTypeTypedRefCSParserRuleCall_2_0; }
	}

	public class TupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.TupleDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDescriptorsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypedPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_1_0 = (RuleCall)cTypedPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypedPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_2_1_0 = (RuleCall)cTypedPairsAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TupleDescriptor cs::TupleDescriptorCS:
		//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		@Override public ParserRule getRule() { return rule; }

		//'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		public Group getGroup() { return cGroup; }

		//'descriptors'
		public Keyword getDescriptorsKeyword_0() { return cDescriptorsKeyword_0; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_1() { return cTypedPairsAssignment_1; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_1_0() { return cTypedPairsTypedPairParserRuleCall_1_0; }

		//(',' typedPairs+=TypedPair)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_2_1() { return cTypedPairsAssignment_2_1; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_2_1_0() { return cTypedPairsTypedPairParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class WeightTupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.WeightTupleDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWeightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWeightIDParserRuleCall_1_0 = (RuleCall)cWeightAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDescriptorsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypedPairsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_4_0 = (RuleCall)cTypedPairsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cTypedPairsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_5_1_0 = (RuleCall)cTypedPairsAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WeightTupleDescriptor cs::WeightTupleDescriptorCS:
		//	'weight' weight=ID ';'
		//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		@Override public ParserRule getRule() { return rule; }

		//'weight' weight=ID ';' 'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		public Group getGroup() { return cGroup; }

		//'weight'
		public Keyword getWeightKeyword_0() { return cWeightKeyword_0; }

		//weight=ID
		public Assignment getWeightAssignment_1() { return cWeightAssignment_1; }

		//ID
		public RuleCall getWeightIDParserRuleCall_1_0() { return cWeightIDParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//'descriptors'
		public Keyword getDescriptorsKeyword_3() { return cDescriptorsKeyword_3; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_4() { return cTypedPairsAssignment_4; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_4_0() { return cTypedPairsTypedPairParserRuleCall_4_0; }

		//(',' typedPairs+=TypedPair)*
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_5_1() { return cTypedPairsAssignment_5_1; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_5_1_0() { return cTypedPairsTypedPairParserRuleCall_5_1_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class BoundWeightTupleDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.BoundWeightTupleDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWeightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWeightIDParserRuleCall_1_0 = (RuleCall)cWeightAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBoundKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBoundIDParserRuleCall_4_0 = (RuleCall)cBoundAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDescriptorsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypedPairsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_7_0 = (RuleCall)cTypedPairsAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cTypedPairsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTypedPairsTypedPairParserRuleCall_8_1_0 = (RuleCall)cTypedPairsAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//BoundWeightTupleDescriptor cs::BoundWeightTupleDescriptorCS:
		//	'weight' weight=ID ';'
		//	'bound' bound=ID ';'
		//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		@Override public ParserRule getRule() { return rule; }

		//'weight' weight=ID ';' 'bound' bound=ID ';' 'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
		public Group getGroup() { return cGroup; }

		//'weight'
		public Keyword getWeightKeyword_0() { return cWeightKeyword_0; }

		//weight=ID
		public Assignment getWeightAssignment_1() { return cWeightAssignment_1; }

		//ID
		public RuleCall getWeightIDParserRuleCall_1_0() { return cWeightIDParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//'bound'
		public Keyword getBoundKeyword_3() { return cBoundKeyword_3; }

		//bound=ID
		public Assignment getBoundAssignment_4() { return cBoundAssignment_4; }

		//ID
		public RuleCall getBoundIDParserRuleCall_4_0() { return cBoundIDParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }

		//'descriptors'
		public Keyword getDescriptorsKeyword_6() { return cDescriptorsKeyword_6; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_7() { return cTypedPairsAssignment_7; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_7_0() { return cTypedPairsTypedPairParserRuleCall_7_0; }

		//(',' typedPairs+=TypedPair)*
		public Group getGroup_8() { return cGroup_8; }

		//','
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//typedPairs+=TypedPair
		public Assignment getTypedPairsAssignment_8_1() { return cTypedPairsAssignment_8_1; }

		//TypedPair
		public RuleCall getTypedPairsTypedPairParserRuleCall_8_1_0() { return cTypedPairsTypedPairParserRuleCall_8_1_0; }

		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cLocationConstraintParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cResourceConstraintParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Constraint cs::ConstraintCS:
		//	'constraint' (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
		@Override public ParserRule getRule() { return rule; }

		//'constraint' (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
		public Group getGroup() { return cGroup; }

		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }

		//(LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//LocationConstraint
		public RuleCall getLocationConstraintParserRuleCall_1_0() { return cLocationConstraintParserRuleCall_1_0; }

		//ResourceConstraint
		public RuleCall getResourceConstraintParserRuleCall_1_1() { return cResourceConstraintParserRuleCall_1_1; }

		//RequiredHardwareResourceInstanceConstraint
		public RuleCall getRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2() { return cRequiredHardwareResourceInstanceConstraintParserRuleCall_1_2; }
	}

	public class LocationConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.LocationConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeLocationConstraintTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleDescriptorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleDescriptorTupleDescriptorParserRuleCall_3_0 = (RuleCall)cTupleDescriptorAssignment_3.eContents().get(0);
		private final Keyword cOclKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionModelParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LocationConstraint cs::LocationConstraintCS:
		//	type=LocationConstraintType name=ID? '{'
		//	tupleDescriptor=TupleDescriptor
		//	'ocl' expression=Model ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//type=LocationConstraintType name=ID? '{' tupleDescriptor=TupleDescriptor 'ocl' expression=Model ';' '}'
		public Group getGroup() { return cGroup; }

		//type=LocationConstraintType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//LocationConstraintType
		public RuleCall getTypeLocationConstraintTypeEnumRuleCall_0_0() { return cTypeLocationConstraintTypeEnumRuleCall_0_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tupleDescriptor=TupleDescriptor
		public Assignment getTupleDescriptorAssignment_3() { return cTupleDescriptorAssignment_3; }

		//TupleDescriptor
		public RuleCall getTupleDescriptorTupleDescriptorParserRuleCall_3_0() { return cTupleDescriptorTupleDescriptorParserRuleCall_3_0; }

		//'ocl'
		public Keyword getOclKeyword_4() { return cOclKeyword_4; }

		//expression=Model
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_5_0() { return cExpressionModelParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ResourceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.ResourceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cResourceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiredResourceKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleDescriptorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleDescriptorBoundWeightTupleDescriptorParserRuleCall_3_0 = (RuleCall)cTupleDescriptorAssignment_3.eContents().get(0);
		private final Keyword cOclKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionModelParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ResourceConstraint cs::ResourceConstraintCS:
		//	('resource' | 'requiredResource') name=ID? '{'
		//	tupleDescriptor=BoundWeightTupleDescriptor
		//	'ocl' expression=Model ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//('resource' | 'requiredResource') name=ID? '{' tupleDescriptor=BoundWeightTupleDescriptor 'ocl' expression=Model ';' '}'
		public Group getGroup() { return cGroup; }

		//('resource' | 'requiredResource')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'resource'
		public Keyword getResourceKeyword_0_0() { return cResourceKeyword_0_0; }

		//'requiredResource'
		public Keyword getRequiredResourceKeyword_0_1() { return cRequiredResourceKeyword_0_1; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tupleDescriptor=BoundWeightTupleDescriptor
		public Assignment getTupleDescriptorAssignment_3() { return cTupleDescriptorAssignment_3; }

		//BoundWeightTupleDescriptor
		public RuleCall getTupleDescriptorBoundWeightTupleDescriptorParserRuleCall_3_0() { return cTupleDescriptorBoundWeightTupleDescriptorParserRuleCall_3_0; }

		//'ocl'
		public Keyword getOclKeyword_4() { return cOclKeyword_4; }

		//expression=Model
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_5_0() { return cExpressionModelParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class RequiredHardwareResourceInstanceConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.RequiredHardwareResourceInstanceConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRequiredHardwareResourceInstanceKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRequiredLocationKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTupleDescriptorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTupleDescriptorTupleDescriptorParserRuleCall_3_0 = (RuleCall)cTupleDescriptorAssignment_3.eContents().get(0);
		private final Keyword cOclKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionModelParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//RequiredHardwareResourceInstanceConstraint cs::RequiredHardwareResourceInstanceConstraintCS:
		//	('requiredHardwareResourceInstance' | 'requiredLocation') name=ID? '{'
		//	tupleDescriptor=TupleDescriptor
		//	'ocl' expression=Model ';'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//('requiredHardwareResourceInstance' | 'requiredLocation') name=ID? '{' tupleDescriptor=TupleDescriptor 'ocl'
		//expression=Model ';' '}'
		public Group getGroup() { return cGroup; }

		//('requiredHardwareResourceInstance' | 'requiredLocation')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'requiredHardwareResourceInstance'
		public Keyword getRequiredHardwareResourceInstanceKeyword_0_0() { return cRequiredHardwareResourceInstanceKeyword_0_0; }

		//'requiredLocation'
		public Keyword getRequiredLocationKeyword_0_1() { return cRequiredLocationKeyword_0_1; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tupleDescriptor=TupleDescriptor
		public Assignment getTupleDescriptorAssignment_3() { return cTupleDescriptorAssignment_3; }

		//TupleDescriptor
		public RuleCall getTupleDescriptorTupleDescriptorParserRuleCall_3_0() { return cTupleDescriptorTupleDescriptorParserRuleCall_3_0; }

		//'ocl'
		public Keyword getOclKeyword_4() { return cOclKeyword_4; }

		//expression=Model
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//Model
		public RuleCall getExpressionModelParserRuleCall_5_0() { return cExpressionModelParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class MeasureFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.MeasureFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cServicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cServicesServiceCSCrossReference_1_0 = (CrossReference)cServicesAssignment_1.eContents().get(0);
		private final RuleCall cServicesServiceCSIDParserRuleCall_1_0_1 = (RuleCall)cServicesServiceCSCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cServicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cServicesServiceCSCrossReference_2_1_0 = (CrossReference)cServicesAssignment_2_1.eContents().get(0);
		private final RuleCall cServicesServiceCSIDParserRuleCall_2_1_0_1 = (RuleCall)cServicesServiceCSCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MeasureFunction cs::MeasureFunctionCS:
		//	'measure' services+=[cs::ServiceCS] ('+' services+=[cs::ServiceCS])* ';'
		@Override public ParserRule getRule() { return rule; }

		//'measure' services+=[cs::ServiceCS] ('+' services+=[cs::ServiceCS])* ';'
		public Group getGroup() { return cGroup; }

		//'measure'
		public Keyword getMeasureKeyword_0() { return cMeasureKeyword_0; }

		//services+=[cs::ServiceCS]
		public Assignment getServicesAssignment_1() { return cServicesAssignment_1; }

		//[cs::ServiceCS]
		public CrossReference getServicesServiceCSCrossReference_1_0() { return cServicesServiceCSCrossReference_1_0; }

		//ID
		public RuleCall getServicesServiceCSIDParserRuleCall_1_0_1() { return cServicesServiceCSIDParserRuleCall_1_0_1; }

		//('+' services+=[cs::ServiceCS])*
		public Group getGroup_2() { return cGroup_2; }

		//'+'
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }

		//services+=[cs::ServiceCS]
		public Assignment getServicesAssignment_2_1() { return cServicesAssignment_2_1; }

		//[cs::ServiceCS]
		public CrossReference getServicesServiceCSCrossReference_2_1_0() { return cServicesServiceCSCrossReference_2_1_0; }

		//ID
		public RuleCall getServicesServiceCSIDParserRuleCall_2_1_0_1() { return cServicesServiceCSIDParserRuleCall_2_1_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	
	
	public class LocationConstraintTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.LocationConstraintType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSAME_LOCATIONEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSAME_LOCATIONSameLocationKeyword_0_0 = (Keyword)cSAME_LOCATIONEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSAME_LOCATIONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSAME_LOCATIONCollocationKeyword_1_0 = (Keyword)cSAME_LOCATIONEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENT_LOCATIONEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDIFFERENT_LOCATIONDifferentLocationKeyword_2_0 = (Keyword)cDIFFERENT_LOCATIONEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIFFERENT_LOCATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIFFERENT_LOCATIONSeparateLocationKeyword_3_0 = (Keyword)cDIFFERENT_LOCATIONEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LocationConstraintType returns cs::LocationConstraintTypes:
		//	SAME_LOCATION='sameLocation' | SAME_LOCATION='collocation'
		//	| DIFFERENT_LOCATION='differentLocation' | DIFFERENT_LOCATION='separateLocation';
		public EnumRule getRule() { return rule; }

		//SAME_LOCATION='sameLocation' | SAME_LOCATION='collocation' | DIFFERENT_LOCATION='differentLocation' |
		//DIFFERENT_LOCATION='separateLocation'
		public Alternatives getAlternatives() { return cAlternatives; }

		//SAME_LOCATION='sameLocation'
		public EnumLiteralDeclaration getSAME_LOCATIONEnumLiteralDeclaration_0() { return cSAME_LOCATIONEnumLiteralDeclaration_0; }

		//'sameLocation'
		public Keyword getSAME_LOCATIONSameLocationKeyword_0_0() { return cSAME_LOCATIONSameLocationKeyword_0_0; }

		//SAME_LOCATION='collocation'
		public EnumLiteralDeclaration getSAME_LOCATIONEnumLiteralDeclaration_1() { return cSAME_LOCATIONEnumLiteralDeclaration_1; }

		//'collocation'
		public Keyword getSAME_LOCATIONCollocationKeyword_1_0() { return cSAME_LOCATIONCollocationKeyword_1_0; }

		//DIFFERENT_LOCATION='differentLocation'
		public EnumLiteralDeclaration getDIFFERENT_LOCATIONEnumLiteralDeclaration_2() { return cDIFFERENT_LOCATIONEnumLiteralDeclaration_2; }

		//'differentLocation'
		public Keyword getDIFFERENT_LOCATIONDifferentLocationKeyword_2_0() { return cDIFFERENT_LOCATIONDifferentLocationKeyword_2_0; }

		//DIFFERENT_LOCATION='separateLocation'
		public EnumLiteralDeclaration getDIFFERENT_LOCATIONEnumLiteralDeclaration_3() { return cDIFFERENT_LOCATIONEnumLiteralDeclaration_3; }

		//'separateLocation'
		public Keyword getDIFFERENT_LOCATIONSeparateLocationKeyword_3_0() { return cDIFFERENT_LOCATIONSeparateLocationKeyword_3_0; }
	}

	public class GoalElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage.Goal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINMinKeyword_0_0 = (Keyword)cMINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMAXEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMAXMaxKeyword_1_0 = (Keyword)cMAXEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Goal returns cs::Goal:
		//	MIN='min' | MAX='max';
		public EnumRule getRule() { return rule; }

		//MIN='min' | MAX='max'
		public Alternatives getAlternatives() { return cAlternatives; }

		//MIN='min'
		public EnumLiteralDeclaration getMINEnumLiteralDeclaration_0() { return cMINEnumLiteralDeclaration_0; }

		//'min'
		public Keyword getMINMinKeyword_0_0() { return cMINMinKeyword_0_0; }

		//MAX='max'
		public EnumLiteralDeclaration getMAXEnumLiteralDeclaration_1() { return cMAXEnumLiteralDeclaration_1; }

		//'max'
		public Keyword getMAXMaxKeyword_1_0() { return cMAXMaxKeyword_1_0; }
	}
	
	private final SpecificationElements pSpecification;
	private final NameProviderImplementationClassElements pNameProviderImplementationClass;
	private final StorageProviderImplementationClassElements pStorageProviderImplementationClass;
	private final OCLContextElements pOCLContext;
	private final ServiceElements pService;
	private final RelationElements pRelation;
	private final LowerBoundElements pLowerBound;
	private final UpperBoundElements pUpperBound;
	private final QosDimensionElements pQosDimension;
	private final TypedPairElements pTypedPair;
	private final TypedNamedPartElements pTypedNamedPart;
	private final TupleDescriptorElements pTupleDescriptor;
	private final WeightTupleDescriptorElements pWeightTupleDescriptor;
	private final BoundWeightTupleDescriptorElements pBoundWeightTupleDescriptor;
	private final ConstraintElements pConstraint;
	private final LocationConstraintElements pLocationConstraint;
	private final ResourceConstraintElements pResourceConstraint;
	private final RequiredHardwareResourceInstanceConstraintElements pRequiredHardwareResourceInstanceConstraint;
	private final LocationConstraintTypeElements eLocationConstraintType;
	private final MeasureFunctionElements pMeasureFunction;
	private final GoalElements eGoal;
	
	private final Grammar grammar;

	private final CompleteOCLGrammarAccess gaCompleteOCL;

	private final EssentialOCLGrammarAccess gaEssentialOCL;

	private final BaseGrammarAccess gaBase;

	@Inject
	public AllocationSpecificationLanguageGrammarAccess(GrammarProvider grammarProvider,
		CompleteOCLGrammarAccess gaCompleteOCL,
		EssentialOCLGrammarAccess gaEssentialOCL,
		BaseGrammarAccess gaBase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaCompleteOCL = gaCompleteOCL;
		this.gaEssentialOCL = gaEssentialOCL;
		this.gaBase = gaBase;
		this.pSpecification = new SpecificationElements();
		this.pNameProviderImplementationClass = new NameProviderImplementationClassElements();
		this.pStorageProviderImplementationClass = new StorageProviderImplementationClassElements();
		this.pOCLContext = new OCLContextElements();
		this.pService = new ServiceElements();
		this.pRelation = new RelationElements();
		this.pLowerBound = new LowerBoundElements();
		this.pUpperBound = new UpperBoundElements();
		this.pQosDimension = new QosDimensionElements();
		this.pTypedPair = new TypedPairElements();
		this.pTypedNamedPart = new TypedNamedPartElements();
		this.pTupleDescriptor = new TupleDescriptorElements();
		this.pWeightTupleDescriptor = new WeightTupleDescriptorElements();
		this.pBoundWeightTupleDescriptor = new BoundWeightTupleDescriptorElements();
		this.pConstraint = new ConstraintElements();
		this.pLocationConstraint = new LocationConstraintElements();
		this.pResourceConstraint = new ResourceConstraintElements();
		this.pRequiredHardwareResourceInstanceConstraint = new RequiredHardwareResourceInstanceConstraintElements();
		this.eLocationConstraintType = new LocationConstraintTypeElements();
		this.pMeasureFunction = new MeasureFunctionElements();
		this.eGoal = new GoalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.muml.psm.allocation.language.xtext.AllocationSpecificationLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public CompleteOCLGrammarAccess getCompleteOCLGrammarAccess() {
		return gaCompleteOCL;
	}

	public EssentialOCLGrammarAccess getEssentialOCLGrammarAccess() {
		return gaEssentialOCL;
	}

	public BaseGrammarAccess getBaseGrammarAccess() {
		return gaBase;
	}

	
	//Specification cs::SpecificationCS:
	//	{cs::SpecificationCS} name=ID '{' (ownedImports+=ImportCS*
	//	& nameProviderImplementationClass=NameProviderImplementationClass
	//	& storageProviderImplementationClass=StorageProviderImplementationClass
	//	& oclContext=OCLContext) (ownedImports+=ImportCS
	//	| ownedContexts+=ClassifierContextDeclCS
	//	| relations+=Relation | services+=Service | constraints+=Constraint)* (goal=Goal measure=MeasureFunction)?
	//	'}'
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}

	//NameProviderImplementationClass cs::JavaImplementationProviderCS:
	//	'nameProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
	public NameProviderImplementationClassElements getNameProviderImplementationClassAccess() {
		return pNameProviderImplementationClass;
	}
	
	public ParserRule getNameProviderImplementationClassRule() {
		return getNameProviderImplementationClassAccess().getRule();
	}

	//StorageProviderImplementationClass cs::JavaImplementationProviderCS:
	//	'storageProvider' implementation=[oclstdlib::JavaClassCS|SINGLE_QUOTED_STRING] ';'
	public StorageProviderImplementationClassElements getStorageProviderImplementationClassAccess() {
		return pStorageProviderImplementationClass;
	}
	
	public ParserRule getStorageProviderImplementationClassRule() {
		return getStorageProviderImplementationClassAccess().getRule();
	}

	//OCLContext cs::OCLContextCS:
	//	'oclContext' ownedType=TypedRefCS ';'
	public OCLContextElements getOCLContextAccess() {
		return pOCLContext;
	}
	
	public ParserRule getOCLContextRule() {
		return getOCLContextAccess().getRule();
	}

	//Service cs::ServiceCS:
	//	'service' name=ID '{'
	//	dimensions+=QosDimension*
	//	'}'
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//Relation cs::RelationCS:
	//	'relation' name=ID? '{'
	//	tupleDescriptor=TupleDescriptor
	//	lowerBound=LowerBound
	//	upperBound=UpperBound
	//	'ocl' expression=Model ';'
	//	'}'
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//LowerBound cs::BoundCS:
	//	'lower' expression=Model ';'
	public LowerBoundElements getLowerBoundAccess() {
		return pLowerBound;
	}
	
	public ParserRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}

	//UpperBound cs::BoundCS:
	//	'upper' expression=Model ';'
	public UpperBoundElements getUpperBoundAccess() {
		return pUpperBound;
	}
	
	public ParserRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}

	//QosDimension cs::QoSDimensionCS:
	//	'qos' name=ID '{'
	//	tupleDescriptor=WeightTupleDescriptor
	//	'ocl' expression=Model ';'
	//	'}'
	public QosDimensionElements getQosDimensionAccess() {
		return pQosDimension;
	}
	
	public ParserRule getQosDimensionRule() {
		return getQosDimensionAccess().getRule();
	}

	//TypedPair cs::TypedPairCS:
	//	'(' first=TypedNamedPart ',' second=TypedNamedPart ')'
	public TypedPairElements getTypedPairAccess() {
		return pTypedPair;
	}
	
	public ParserRule getTypedPairRule() {
		return getTypedPairAccess().getRule();
	}

	//TypedNamedPart cs::TypedNamedPartCS:
	//	name=ID ':' ownedType=TypedRefCS
	public TypedNamedPartElements getTypedNamedPartAccess() {
		return pTypedNamedPart;
	}
	
	public ParserRule getTypedNamedPartRule() {
		return getTypedNamedPartAccess().getRule();
	}

	//TupleDescriptor cs::TupleDescriptorCS:
	//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
	public TupleDescriptorElements getTupleDescriptorAccess() {
		return pTupleDescriptor;
	}
	
	public ParserRule getTupleDescriptorRule() {
		return getTupleDescriptorAccess().getRule();
	}

	//WeightTupleDescriptor cs::WeightTupleDescriptorCS:
	//	'weight' weight=ID ';'
	//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
	public WeightTupleDescriptorElements getWeightTupleDescriptorAccess() {
		return pWeightTupleDescriptor;
	}
	
	public ParserRule getWeightTupleDescriptorRule() {
		return getWeightTupleDescriptorAccess().getRule();
	}

	//BoundWeightTupleDescriptor cs::BoundWeightTupleDescriptorCS:
	//	'weight' weight=ID ';'
	//	'bound' bound=ID ';'
	//	'descriptors' typedPairs+=TypedPair (',' typedPairs+=TypedPair)* ';'
	public BoundWeightTupleDescriptorElements getBoundWeightTupleDescriptorAccess() {
		return pBoundWeightTupleDescriptor;
	}
	
	public ParserRule getBoundWeightTupleDescriptorRule() {
		return getBoundWeightTupleDescriptorAccess().getRule();
	}

	//Constraint cs::ConstraintCS:
	//	'constraint' (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//LocationConstraint cs::LocationConstraintCS:
	//	type=LocationConstraintType name=ID? '{'
	//	tupleDescriptor=TupleDescriptor
	//	'ocl' expression=Model ';'
	//	'}'
	public LocationConstraintElements getLocationConstraintAccess() {
		return pLocationConstraint;
	}
	
	public ParserRule getLocationConstraintRule() {
		return getLocationConstraintAccess().getRule();
	}

	//ResourceConstraint cs::ResourceConstraintCS:
	//	('resource' | 'requiredResource') name=ID? '{'
	//	tupleDescriptor=BoundWeightTupleDescriptor
	//	'ocl' expression=Model ';'
	//	'}'
	public ResourceConstraintElements getResourceConstraintAccess() {
		return pResourceConstraint;
	}
	
	public ParserRule getResourceConstraintRule() {
		return getResourceConstraintAccess().getRule();
	}

	//RequiredHardwareResourceInstanceConstraint cs::RequiredHardwareResourceInstanceConstraintCS:
	//	('requiredHardwareResourceInstance' | 'requiredLocation') name=ID? '{'
	//	tupleDescriptor=TupleDescriptor
	//	'ocl' expression=Model ';'
	//	'}'
	public RequiredHardwareResourceInstanceConstraintElements getRequiredHardwareResourceInstanceConstraintAccess() {
		return pRequiredHardwareResourceInstanceConstraint;
	}
	
	public ParserRule getRequiredHardwareResourceInstanceConstraintRule() {
		return getRequiredHardwareResourceInstanceConstraintAccess().getRule();
	}

	//enum LocationConstraintType returns cs::LocationConstraintTypes:
	//	SAME_LOCATION='sameLocation' | SAME_LOCATION='collocation'
	//	| DIFFERENT_LOCATION='differentLocation' | DIFFERENT_LOCATION='separateLocation';
	public LocationConstraintTypeElements getLocationConstraintTypeAccess() {
		return eLocationConstraintType;
	}
	
	public EnumRule getLocationConstraintTypeRule() {
		return getLocationConstraintTypeAccess().getRule();
	}

	//MeasureFunction cs::MeasureFunctionCS:
	//	'measure' services+=[cs::ServiceCS] ('+' services+=[cs::ServiceCS])* ';'
	public MeasureFunctionElements getMeasureFunctionAccess() {
		return pMeasureFunction;
	}
	
	public ParserRule getMeasureFunctionRule() {
		return getMeasureFunctionAccess().getRule();
	}

	//enum Goal returns cs::Goal:
	//	MIN='min' | MAX='max';
	public GoalElements getGoalAccess() {
		return eGoal;
	}
	
	public EnumRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	/// *
	// * A Complete OCL document comprises
	// * bullet[model imports for referenced and complemented models]
	// * bullet[includes for additional Complete OCL documents]
	// * bullet[libraries to augment or override the OCL Standard Library]
	// * bullet[package declarations for package-grouped declarations]
	// * bullet[context declarations for independent declarations]
	// * / CompleteOCLDocumentCS:
	//	ownedImports+=ImportCS* (ownedPackages+=PackageDeclarationCS | ownedContexts+=ContextDeclCS)*;
	public CompleteOCLGrammarAccess.CompleteOCLDocumentCSElements getCompleteOCLDocumentCSAccess() {
		return gaCompleteOCL.getCompleteOCLDocumentCSAccess();
	}
	
	public ParserRule getCompleteOCLDocumentCSRule() {
		return getCompleteOCLDocumentCSAccess().getRule();
	}

	//terminal UNQUOTED_STRING: // Never forward parsed; just provides a placeholder
	//	'£$%^£$%^' //  for reverse serialisation of embedded OCL 
	//;
	public TerminalRule getUNQUOTED_STRINGRule() {
		return gaCompleteOCL.getUNQUOTED_STRINGRule();
	} 

	//CompleteOCLNavigationOperatorName:
	//	'^' | '^^';
	public CompleteOCLGrammarAccess.CompleteOCLNavigationOperatorNameElements getCompleteOCLNavigationOperatorNameAccess() {
		return gaCompleteOCL.getCompleteOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getCompleteOCLNavigationOperatorNameRule() {
		return getCompleteOCLNavigationOperatorNameAccess().getRule();
	}

	//ClassifierContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? selfName=UnrestrictedName?
	//	ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS | ownedDefinitions+=DefCS)+;
	public CompleteOCLGrammarAccess.ClassifierContextDeclCSElements getClassifierContextDeclCSAccess() {
		return gaCompleteOCL.getClassifierContextDeclCSAccess();
	}
	
	public ParserRule getClassifierContextDeclCSRule() {
		return getClassifierContextDeclCSAccess().getRule();
	}

	/// *
	// * A Constraint such as 
	// * 
	// * oclText[IsNull('should be null') : self = null]
	// * 
	// * comprises at least the OCL specification of the constraint. The constraint may
	// * additionally have a name which may be followed by a parenthesized expression defining an OCL
	// * expression to be evaluated to provide an error message.
	// * / ConstraintCS base::ConstraintCS:
	//	(name=UnrestrictedName ('(' ownedMessageSpecification=SpecificationCS ')')?)? ':' ownedSpecification=SpecificationCS
	public CompleteOCLGrammarAccess.ConstraintCSElements getConstraintCSAccess() {
		return gaCompleteOCL.getConstraintCSAccess();
	}
	
	public ParserRule getConstraintCSRule() {
		return getConstraintCSAccess().getRule();
	}

	/// *
	// * A Context declaration can be a Classifier, Operation of Property Context declaration.
	// * / ContextDeclCS:
	//	PropertyContextDeclCS
	//	| ClassifierContextDeclCS
	//	| OperationContextDeclCS;
	public CompleteOCLGrammarAccess.ContextDeclCSElements getContextDeclCSAccess() {
		return gaCompleteOCL.getContextDeclCSAccess();
	}
	
	public ParserRule getContextDeclCSRule() {
		return getContextDeclCSAccess().getRule();
	}

	/// *
	// * A definition can be an, Operation or Property definition.
	// * / DefCS:
	//	DefOperationCS | DefPropertyCS;
	public CompleteOCLGrammarAccess.DefCSElements getDefCSAccess() {
		return gaCompleteOCL.getDefCSAccess();
	}
	
	public ParserRule getDefCSRule() {
		return getDefCSAccess().getRule();
	}

	/// *
	// * An operation definition provides an additional operation for its classifier context.
	// * 
	// * oclText[static def redundantName: isEven(i : Integer) : Boolean = i mod 2 = 0]
	// * 
	// * comprises at least an operation name, return type and an OCL expression that evaluates the operation value.
	// * The operation may have parameters and may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// * / DefOperationCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' ownedSignature=TemplateSignatureCS?
	//	name=UnrestrictedName '(' (ownedParameters+=DefParameterCS (',' ownedParameters+=DefParameterCS)*)? ')' ':'
	//	ownedType=TypeExpCS?
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefOperationCSElements getDefOperationCSAccess() {
		return gaCompleteOCL.getDefOperationCSAccess();
	}
	
	public ParserRule getDefOperationCSRule() {
		return getDefOperationCSAccess().getRule();
	}

	//DefParameterCS base::ParameterCS:
	//	name=UnrestrictedName ':' ownedType=TypeExpCS
	public CompleteOCLGrammarAccess.DefParameterCSElements getDefParameterCSAccess() {
		return gaCompleteOCL.getDefParameterCSAccess();
	}
	
	public ParserRule getDefParameterCSRule() {
		return getDefParameterCSAccess().getRule();
	}

	/// *
	// * A property definition provides an additional property for its classifier context.
	// * 
	// * oclText[static def redundantName: upperCaseName : Boolean = name.toUpperCase()]
	// * 
	// * comprises at least a property name, type and an OCL expression that evaluates the property value.
	// * The property may be declared static in which case there is no oclText[self].
	// * 
	// * For compatibility with invariants the definition may have a name that is never used.
	// * / DefPropertyCS:
	//	isStatic?='static'? 'def' UnrestrictedName? ':' name=UnrestrictedName ':' ownedType=TypeExpCS
	//	'=' ownedSpecification=SpecificationCS;
	public CompleteOCLGrammarAccess.DefPropertyCSElements getDefPropertyCSAccess() {
		return gaCompleteOCL.getDefPropertyCSAccess();
	}
	
	public ParserRule getDefPropertyCSRule() {
		return getDefPropertyCSAccess().getRule();
	}

	//ImportCS base::ImportCS:
	//	('import' | 'include' | 'library') (name=Identifier ':')? ownedPathName=URIPathNameCS isAll?='::*'?
	public CompleteOCLGrammarAccess.ImportCSElements getImportCSAccess() {
		return gaCompleteOCL.getImportCSAccess();
	}
	
	public ParserRule getImportCSRule() {
		return getImportCSAccess().getRule();
	}

	/// *
	// * An operation context declaration complements an existing operation with additional details.
	// * 
	// * oclText[context (T) Stack::pop() : T]
	// * oclText[pre NotEmptyPop: size() > 0]
	// * oclText[post: size()@pre = size() + 1]
	// * 
	// * The operation declaration comprises at least an operation name, which must be qualified with at least a
	// * class name. If used outside a package declaration, package name qualification is also needed. 
	// * If the return type is omitted OclVoid is used.
	// * The operation may also have operation parameters and template parameters.
	// * The declaration may be followed by any number of preconditions,
	// * and/or postconditions. It may also be followed by a body expression that defines the evaluation. 
	// * 
	// * For compatibility with invariants the body expression may have a name that is never used.
	// * / OperationContextDeclCS:
	//	'context' ownedSignature=TemplateSignatureCS? ownedPathName=PathNameCS
	//	'(' (ownedParameters+=ParameterCS (',' ownedParameters+=ParameterCS)*)? ')' ':' ownedType=TypeExpCS? ('pre'
	//	ownedPreconditions+=ConstraintCS | 'post' ownedPostconditions+=ConstraintCS | 'body' UnrestrictedName? ':'
	//	ownedBodies+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.OperationContextDeclCSElements getOperationContextDeclCSAccess() {
		return gaCompleteOCL.getOperationContextDeclCSAccess();
	}
	
	public ParserRule getOperationContextDeclCSRule() {
		return getOperationContextDeclCSAccess().getRule();
	}

	//PackageDeclarationCS:
	//	'package' ownedPathName=PathNameCS ('inv' ownedInvariants+=ConstraintCS)* ownedContexts+=ContextDeclCS* 'endpackage';
	public CompleteOCLGrammarAccess.PackageDeclarationCSElements getPackageDeclarationCSAccess() {
		return gaCompleteOCL.getPackageDeclarationCSAccess();
	}
	
	public ParserRule getPackageDeclarationCSRule() {
		return getPackageDeclarationCSAccess().getRule();
	}

	//ParameterCS base::ParameterCS:
	//	(name=UnrestrictedName ':')? ownedType=TypeExpCS
	public CompleteOCLGrammarAccess.ParameterCSElements getParameterCSAccess() {
		return gaCompleteOCL.getParameterCSAccess();
	}
	
	public ParserRule getParameterCSRule() {
		return getParameterCSAccess().getRule();
	}

	/// *
	// * A property context declaration complements an existing property with additional details.
	// * 
	// * oclText[context (T) Stack::isEmpty : Boolean]
	// * oclText[derive IsEmpty: size() = 0]
	// * 
	// * The property declaration comprises at least a property name and type.
	// * The type must be qualified with at least a class name.
	// * If used outside a package declaration, package name qualification is also needed. 
	// * The declaration may be followed by a derive constraint and/or an init expression.
	// * 
	// * A derive constraint provides an alternate mechanism for defining a class invariant;
	// * the only difference is that the property is identified as a constrainedElement. As an
	// * invariant the constraint provides an OCL expression that should always be true.
	// * 
	// * For a non-derived property, an init expression defines the value to be assigned to the property
	// * when its containing object is first created. 
	// * 
	// * For a derived property, an init expression defines the evaluation of the property, which
	// * may vary from access to access even for read-only properties. 
	// * / PropertyContextDeclCS:
	//	'context' ownedPathName=PathNameCS ':' ownedType=TypeExpCS ('derive' ownedDerivedInvariants+=ConstraintCS | 'init' ':'
	//	ownedDefaultExpressions+=SpecificationCS)*;
	public CompleteOCLGrammarAccess.PropertyContextDeclCSElements getPropertyContextDeclCSAccess() {
		return gaCompleteOCL.getPropertyContextDeclCSAccess();
	}
	
	public ParserRule getPropertyContextDeclCSRule() {
		return getPropertyContextDeclCSAccess().getRule();
	}

	//SpecificationCS essentialocl::ExpSpecificationCS:
	//	ownedExpression=ExpCS | exprString=UNQUOTED_STRING
	public CompleteOCLGrammarAccess.SpecificationCSElements getSpecificationCSAccess() {
		return gaCompleteOCL.getSpecificationCSAccess();
	}
	
	public ParserRule getSpecificationCSRule() {
		return getSpecificationCSAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	////	Base overrides
	////---------------------------------------------------------------------------------
	//TemplateSignatureCS base::TemplateSignatureCS:
	//	'(' ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* ')' | '<'
	//	ownedParameters+=TypeParameterCS (',' ownedParameters+=TypeParameterCS)* '>'
	public CompleteOCLGrammarAccess.TemplateSignatureCSElements getTemplateSignatureCSAccess() {
		return gaCompleteOCL.getTemplateSignatureCSAccess();
	}
	
	public ParserRule getTemplateSignatureCSRule() {
		return getTemplateSignatureCSAccess().getRule();
	}

	//TypedRefCS base::TypedRefCS:
	//	TypeLiteralCS | TypedTypeRefCS
	public CompleteOCLGrammarAccess.TypedRefCSElements getTypedRefCSAccess() {
		return gaCompleteOCL.getTypedRefCSAccess();
	}
	
	public ParserRule getTypedRefCSRule() {
		return getTypedRefCSAccess().getRule();
	}

	//UnrestrictedName:
	//	EssentialOCLUnrestrictedName
	//	//| 'body'
	//	//| 'context'
	//	//| 'def'
	//	//| 'derive'
	//	//|	'endpackage'
	//	| 'import'
	//	| 'include'
	//	//| 'init'
	//	//| 'inv'
	//	| 'library'
	//	//|	'package'
	//	//|	'post'
	//	//|	'pre'
	//	//|	'static'
	//;
	public CompleteOCLGrammarAccess.UnrestrictedNameElements getUnrestrictedNameAccess() {
		return gaCompleteOCL.getUnrestrictedNameAccess();
	}
	
	public ParserRule getUnrestrictedNameRule() {
		return getUnrestrictedNameAccess().getRule();
	}

	////---------------------------------------------------------------------------------
	////	EssentialOCL overrides
	////---------------------------------------------------------------------------------
	//NavigatingArgExpCS essentialocl::ExpCS:
	//	{OCLMessageArgCS} '?' | ExpCS
	public CompleteOCLGrammarAccess.NavigatingArgExpCSElements getNavigatingArgExpCSAccess() {
		return gaCompleteOCL.getNavigatingArgExpCSAccess();
	}
	
	public ParserRule getNavigatingArgExpCSRule() {
		return getNavigatingArgExpCSAccess().getRule();
	}

	//NavigationOperatorName:
	//	EssentialOCLNavigationOperatorName | CompleteOCLNavigationOperatorName;
	public CompleteOCLGrammarAccess.NavigationOperatorNameElements getNavigationOperatorNameAccess() {
		return gaCompleteOCL.getNavigationOperatorNameAccess();
	}
	
	public ParserRule getNavigationOperatorNameRule() {
		return getNavigationOperatorNameAccess().getRule();
	}

	//PrimitiveTypeIdentifier:
	//	'Boolean'
	//	| 'Integer'
	//	| 'Real'
	//	| 'String'
	//	| 'UnlimitedNatural'
	//	| 'OclAny'
	//	| 'OclInvalid'
	//	| 'OclMessage'
	//	| 'OclState'
	//	| 'OclVoid';
	public CompleteOCLGrammarAccess.PrimitiveTypeIdentifierElements getPrimitiveTypeIdentifierAccess() {
		return gaCompleteOCL.getPrimitiveTypeIdentifierAccess();
	}
	
	public ParserRule getPrimitiveTypeIdentifierRule() {
		return getPrimitiveTypeIdentifierAccess().getRule();
	}

	////generate essentialOCLCST "http://www.eclipse.org/ocl/3.0.0/EssentialOCLCST"
	//Model ContextCS:
	//	ownedExpression=ExpCS
	public EssentialOCLGrammarAccess.ModelElements getModelAccess() {
		return gaEssentialOCL.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLReservedKeyword:
	//	'and'
	//	| 'else'
	//	| 'endif'
	//	| 'if'
	//	| 'implies'
	//	| 'in'
	//	| 'let'
	//	| 'not'
	//	| 'or'
	//	| 'then'
	//	| 'xor';
	public EssentialOCLGrammarAccess.EssentialOCLReservedKeywordElements getEssentialOCLReservedKeywordAccess() {
		return gaEssentialOCL.getEssentialOCLReservedKeywordAccess();
	}
	
	public ParserRule getEssentialOCLReservedKeywordRule() {
		return getEssentialOCLReservedKeywordAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnaryOperatorName:
	//	'-' | 'not';
	public EssentialOCLGrammarAccess.EssentialOCLUnaryOperatorNameElements getEssentialOCLUnaryOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnaryOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLUnaryOperatorNameRule() {
		return getEssentialOCLUnaryOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLInfixOperatorName:
	//	'*' | '/' | '+' | '-' | '>' | '<' | '>=' | '<=' | '=' | '<>' | 'and' | 'or' | 'xor' | 'implies';
	public EssentialOCLGrammarAccess.EssentialOCLInfixOperatorNameElements getEssentialOCLInfixOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLInfixOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLInfixOperatorNameRule() {
		return getEssentialOCLInfixOperatorNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLNavigationOperatorName:
	//	'.' | '->' | '?.' | '?->';
	public EssentialOCLGrammarAccess.EssentialOCLNavigationOperatorNameElements getEssentialOCLNavigationOperatorNameAccess() {
		return gaEssentialOCL.getEssentialOCLNavigationOperatorNameAccess();
	}
	
	public ParserRule getEssentialOCLNavigationOperatorNameRule() {
		return getEssentialOCLNavigationOperatorNameAccess().getRule();
	}

	//BinaryOperatorName:
	//	InfixOperatorName | super::NavigationOperatorName;
	public EssentialOCLGrammarAccess.BinaryOperatorNameElements getBinaryOperatorNameAccess() {
		return gaEssentialOCL.getBinaryOperatorNameAccess();
	}
	
	public ParserRule getBinaryOperatorNameRule() {
		return getBinaryOperatorNameAccess().getRule();
	}

	//InfixOperatorName:
	//	EssentialOCLInfixOperatorName;
	public EssentialOCLGrammarAccess.InfixOperatorNameElements getInfixOperatorNameAccess() {
		return gaEssentialOCL.getInfixOperatorNameAccess();
	}
	
	public ParserRule getInfixOperatorNameRule() {
		return getInfixOperatorNameAccess().getRule();
	}

	//UnaryOperatorName:
	//	EssentialOCLUnaryOperatorName;
	public EssentialOCLGrammarAccess.UnaryOperatorNameElements getUnaryOperatorNameAccess() {
		return gaEssentialOCL.getUnaryOperatorNameAccess();
	}
	
	public ParserRule getUnaryOperatorNameRule() {
		return getUnaryOperatorNameAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Names
	////---------------------------------------------------------------------
	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnrestrictedName:
	//	Identifier;
	public EssentialOCLGrammarAccess.EssentialOCLUnrestrictedNameElements getEssentialOCLUnrestrictedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnrestrictedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnrestrictedNameRule() {
		return getEssentialOCLUnrestrictedNameAccess().getRule();
	}

	/// ** <<<This is a join point for derived grammars - replace with a more disciplined grammar extensibility>>> * /
	//EssentialOCLUnreservedName:
	//	super::UnrestrictedName
	//	| CollectionTypeIdentifier
	//	| super::PrimitiveTypeIdentifier
	//	| 'Map'
	//	| 'Tuple';
	public EssentialOCLGrammarAccess.EssentialOCLUnreservedNameElements getEssentialOCLUnreservedNameAccess() {
		return gaEssentialOCL.getEssentialOCLUnreservedNameAccess();
	}
	
	public ParserRule getEssentialOCLUnreservedNameRule() {
		return getEssentialOCLUnreservedNameAccess().getRule();
	}

	//UnreservedName:
	//	EssentialOCLUnreservedName;
	public EssentialOCLGrammarAccess.UnreservedNameElements getUnreservedNameAccess() {
		return gaEssentialOCL.getUnreservedNameAccess();
	}
	
	public ParserRule getUnreservedNameRule() {
		return getUnreservedNameAccess().getRule();
	}

	//URIPathNameCS base::PathNameCS:
	//	ownedPathElements+=URIFirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*
	public EssentialOCLGrammarAccess.URIPathNameCSElements getURIPathNameCSAccess() {
		return gaEssentialOCL.getURIPathNameCSAccess();
	}
	
	public ParserRule getURIPathNameCSRule() {
		return getURIPathNameCSAccess().getRule();
	}

	//URIFirstPathElementCS base::PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName] | {base::PathElementWithURICS}
	//	referredElement=[pivot::Namespace|URI]
	public EssentialOCLGrammarAccess.URIFirstPathElementCSElements getURIFirstPathElementCSAccess() {
		return gaEssentialOCL.getURIFirstPathElementCSAccess();
	}
	
	public ParserRule getURIFirstPathElementCSRule() {
		return getURIFirstPathElementCSAccess().getRule();
	}

	//PrimitiveTypeCS base::PrimitiveTypeRefCS:
	//	name=super::PrimitiveTypeIdentifier
	public EssentialOCLGrammarAccess.PrimitiveTypeCSElements getPrimitiveTypeCSAccess() {
		return gaEssentialOCL.getPrimitiveTypeCSAccess();
	}
	
	public ParserRule getPrimitiveTypeCSRule() {
		return getPrimitiveTypeCSAccess().getRule();
	}

	//CollectionTypeIdentifier:
	//	'Set'
	//	| 'Bag'
	//	| 'Sequence'
	//	| 'Collection'
	//	| 'OrderedSet';
	public EssentialOCLGrammarAccess.CollectionTypeIdentifierElements getCollectionTypeIdentifierAccess() {
		return gaEssentialOCL.getCollectionTypeIdentifierAccess();
	}
	
	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}

	//CollectionTypeCS:
	//	name=CollectionTypeIdentifier ('(' ownedType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.CollectionTypeCSElements getCollectionTypeCSAccess() {
		return gaEssentialOCL.getCollectionTypeCSAccess();
	}
	
	public ParserRule getCollectionTypeCSRule() {
		return getCollectionTypeCSAccess().getRule();
	}

	//MapTypeCS:
	//	name='Map' ('(' ownedKeyType=TypeExpCS ',' ownedValueType=TypeExpCS ')')?;
	public EssentialOCLGrammarAccess.MapTypeCSElements getMapTypeCSAccess() {
		return gaEssentialOCL.getMapTypeCSAccess();
	}
	
	public ParserRule getMapTypeCSRule() {
		return getMapTypeCSAccess().getRule();
	}

	//TupleTypeCS base::TupleTypeCS:
	//	name='Tuple' ('(' (ownedParts+=TuplePartCS (',' ownedParts+=TuplePartCS)*)? ')')?
	public EssentialOCLGrammarAccess.TupleTypeCSElements getTupleTypeCSAccess() {
		return gaEssentialOCL.getTupleTypeCSAccess();
	}
	
	public ParserRule getTupleTypeCSRule() {
		return getTupleTypeCSAccess().getRule();
	}

	//TuplePartCS base::TuplePartCS:
	//	name=super::UnrestrictedName ':' ownedType=TypeExpCS
	public EssentialOCLGrammarAccess.TuplePartCSElements getTuplePartCSAccess() {
		return gaEssentialOCL.getTuplePartCSAccess();
	}
	
	public ParserRule getTuplePartCSRule() {
		return getTuplePartCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Literals
	////---------------------------------------------------------------------
	//CollectionLiteralExpCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=CollectionLiteralPartCS (',' ownedParts+=CollectionLiteralPartCS)*)?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionLiteralExpCSElements getCollectionLiteralExpCSAccess() {
		return gaEssentialOCL.getCollectionLiteralExpCSAccess();
	}
	
	public ParserRule getCollectionLiteralExpCSRule() {
		return getCollectionLiteralExpCSAccess().getRule();
	}

	//CollectionLiteralPartCS:
	//	ownedExpression=ExpCS ('..' ownedLastExpression=ExpCS)? | ownedExpression=PatternExpCS;
	public EssentialOCLGrammarAccess.CollectionLiteralPartCSElements getCollectionLiteralPartCSAccess() {
		return gaEssentialOCL.getCollectionLiteralPartCSAccess();
	}
	
	public ParserRule getCollectionLiteralPartCSRule() {
		return getCollectionLiteralPartCSAccess().getRule();
	}

	//CollectionPatternCS:
	//	ownedType=CollectionTypeCS
	//	'{' (ownedParts+=PatternExpCS (',' ownedParts+=PatternExpCS)* ('++' restVariableName=Identifier))?
	//	'}';
	public EssentialOCLGrammarAccess.CollectionPatternCSElements getCollectionPatternCSAccess() {
		return gaEssentialOCL.getCollectionPatternCSAccess();
	}
	
	public ParserRule getCollectionPatternCSRule() {
		return getCollectionPatternCSAccess().getRule();
	}

	//ShadowPartCS:
	//	referredProperty=[pivot::Property|super::UnrestrictedName] '=' ownedInitExpression=(ExpCS | PatternExpCS);
	public EssentialOCLGrammarAccess.ShadowPartCSElements getShadowPartCSAccess() {
		return gaEssentialOCL.getShadowPartCSAccess();
	}
	
	public ParserRule getShadowPartCSRule() {
		return getShadowPartCSAccess().getRule();
	}

	//PatternExpCS:
	//	patternVariableName=super::UnrestrictedName? ':' ownedPatternType=TypeExpCS;
	public EssentialOCLGrammarAccess.PatternExpCSElements getPatternExpCSAccess() {
		return gaEssentialOCL.getPatternExpCSAccess();
	}
	
	public ParserRule getPatternExpCSRule() {
		return getPatternExpCSAccess().getRule();
	}

	//LambdaLiteralExpCS:
	//	'Lambda' '{' ownedExpressionCS=ExpCS '}';
	public EssentialOCLGrammarAccess.LambdaLiteralExpCSElements getLambdaLiteralExpCSAccess() {
		return gaEssentialOCL.getLambdaLiteralExpCSAccess();
	}
	
	public ParserRule getLambdaLiteralExpCSRule() {
		return getLambdaLiteralExpCSAccess().getRule();
	}

	//MapLiteralExpCS:
	//	ownedType=MapTypeCS '{' (ownedParts+=MapLiteralPartCS (',' ownedParts+=MapLiteralPartCS)*)? '}';
	public EssentialOCLGrammarAccess.MapLiteralExpCSElements getMapLiteralExpCSAccess() {
		return gaEssentialOCL.getMapLiteralExpCSAccess();
	}
	
	public ParserRule getMapLiteralExpCSRule() {
		return getMapLiteralExpCSAccess().getRule();
	}

	//MapLiteralPartCS:
	//	ownedKey=ExpCS '<-' ownedValue=ExpCS;
	public EssentialOCLGrammarAccess.MapLiteralPartCSElements getMapLiteralPartCSAccess() {
		return gaEssentialOCL.getMapLiteralPartCSAccess();
	}
	
	public ParserRule getMapLiteralPartCSRule() {
		return getMapLiteralPartCSAccess().getRule();
	}

	//PrimitiveLiteralExpCS:
	//	NumberLiteralExpCS
	//	| StringLiteralExpCS
	//	| BooleanLiteralExpCS
	//	| UnlimitedNaturalLiteralExpCS
	//	| InvalidLiteralExpCS
	//	| NullLiteralExpCS;
	public EssentialOCLGrammarAccess.PrimitiveLiteralExpCSElements getPrimitiveLiteralExpCSAccess() {
		return gaEssentialOCL.getPrimitiveLiteralExpCSAccess();
	}
	
	public ParserRule getPrimitiveLiteralExpCSRule() {
		return getPrimitiveLiteralExpCSAccess().getRule();
	}

	//TupleLiteralExpCS:
	//	'Tuple' '{' ownedParts+=TupleLiteralPartCS (',' ownedParts+=TupleLiteralPartCS)* '}';
	public EssentialOCLGrammarAccess.TupleLiteralExpCSElements getTupleLiteralExpCSAccess() {
		return gaEssentialOCL.getTupleLiteralExpCSAccess();
	}
	
	public ParserRule getTupleLiteralExpCSRule() {
		return getTupleLiteralExpCSAccess().getRule();
	}

	//TupleLiteralPartCS:
	//	name=super::UnrestrictedName (':' ownedType=TypeExpCS)? '=' ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.TupleLiteralPartCSElements getTupleLiteralPartCSAccess() {
		return gaEssentialOCL.getTupleLiteralPartCSAccess();
	}
	
	public ParserRule getTupleLiteralPartCSRule() {
		return getTupleLiteralPartCSAccess().getRule();
	}

	//NumberLiteralExpCS:
	//	symbol=NUMBER_LITERAL;
	public EssentialOCLGrammarAccess.NumberLiteralExpCSElements getNumberLiteralExpCSAccess() {
		return gaEssentialOCL.getNumberLiteralExpCSAccess();
	}
	
	public ParserRule getNumberLiteralExpCSRule() {
		return getNumberLiteralExpCSAccess().getRule();
	}

	//StringLiteralExpCS:
	//	segments+=StringLiteral+;
	public EssentialOCLGrammarAccess.StringLiteralExpCSElements getStringLiteralExpCSAccess() {
		return gaEssentialOCL.getStringLiteralExpCSAccess();
	}
	
	public ParserRule getStringLiteralExpCSRule() {
		return getStringLiteralExpCSAccess().getRule();
	}

	//BooleanLiteralExpCS:
	//	symbol='true'
	//	| symbol='false';
	public EssentialOCLGrammarAccess.BooleanLiteralExpCSElements getBooleanLiteralExpCSAccess() {
		return gaEssentialOCL.getBooleanLiteralExpCSAccess();
	}
	
	public ParserRule getBooleanLiteralExpCSRule() {
		return getBooleanLiteralExpCSAccess().getRule();
	}

	//UnlimitedNaturalLiteralExpCS:
	//	{UnlimitedNaturalLiteralExpCS} '*';
	public EssentialOCLGrammarAccess.UnlimitedNaturalLiteralExpCSElements getUnlimitedNaturalLiteralExpCSAccess() {
		return gaEssentialOCL.getUnlimitedNaturalLiteralExpCSAccess();
	}
	
	public ParserRule getUnlimitedNaturalLiteralExpCSRule() {
		return getUnlimitedNaturalLiteralExpCSAccess().getRule();
	}

	//InvalidLiteralExpCS:
	//	{InvalidLiteralExpCS} 'invalid';
	public EssentialOCLGrammarAccess.InvalidLiteralExpCSElements getInvalidLiteralExpCSAccess() {
		return gaEssentialOCL.getInvalidLiteralExpCSAccess();
	}
	
	public ParserRule getInvalidLiteralExpCSRule() {
		return getInvalidLiteralExpCSAccess().getRule();
	}

	//NullLiteralExpCS:
	//	{NullLiteralExpCS} 'null';
	public EssentialOCLGrammarAccess.NullLiteralExpCSElements getNullLiteralExpCSAccess() {
		return gaEssentialOCL.getNullLiteralExpCSAccess();
	}
	
	public ParserRule getNullLiteralExpCSRule() {
		return getNullLiteralExpCSAccess().getRule();
	}

	//TypeLiteralCS base::TypedRefCS:
	//	PrimitiveTypeCS
	//	| CollectionTypeCS
	//	| MapTypeCS
	//	| TupleTypeCS
	public EssentialOCLGrammarAccess.TypeLiteralCSElements getTypeLiteralCSAccess() {
		return gaEssentialOCL.getTypeLiteralCSAccess();
	}
	
	public ParserRule getTypeLiteralCSRule() {
		return getTypeLiteralCSAccess().getRule();
	}

	//TypeLiteralWithMultiplicityCS base::TypedRefCS:
	//	TypeLiteralCS ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeLiteralWithMultiplicityCSElements getTypeLiteralWithMultiplicityCSAccess() {
		return gaEssentialOCL.getTypeLiteralWithMultiplicityCSAccess();
	}
	
	public ParserRule getTypeLiteralWithMultiplicityCSRule() {
		return getTypeLiteralWithMultiplicityCSAccess().getRule();
	}

	//TypeLiteralExpCS:
	//	ownedType=TypeLiteralWithMultiplicityCS;
	public EssentialOCLGrammarAccess.TypeLiteralExpCSElements getTypeLiteralExpCSAccess() {
		return gaEssentialOCL.getTypeLiteralExpCSAccess();
	}
	
	public ParserRule getTypeLiteralExpCSRule() {
		return getTypeLiteralExpCSAccess().getRule();
	}

	//TypeNameExpCS:
	//	ownedPathName=PathNameCS (ownedCurlyBracketedClause=CurlyBracketedClauseCS ('{' ownedPatternGuard=ExpCS '}')?)?;
	public EssentialOCLGrammarAccess.TypeNameExpCSElements getTypeNameExpCSAccess() {
		return gaEssentialOCL.getTypeNameExpCSAccess();
	}
	
	public ParserRule getTypeNameExpCSRule() {
		return getTypeNameExpCSAccess().getRule();
	}

	//TypeExpCS base::TypedRefCS:
	//	(TypeNameExpCS | TypeLiteralCS | CollectionPatternCS) ownedMultiplicity=MultiplicityCS?
	public EssentialOCLGrammarAccess.TypeExpCSElements getTypeExpCSAccess() {
		return gaEssentialOCL.getTypeExpCSAccess();
	}
	
	public ParserRule getTypeExpCSRule() {
		return getTypeExpCSAccess().getRule();
	}

	////---------------------------------------------------------------------
	////  Expressions
	////---------------------------------------------------------------------
	//// An ExpCS permits a LetExpCS only in the final term to ensure
	////  that let is right associative, whereas infix operators are left associative.
	////   a = 64 / 16 / let b : Integer in 8 / let c : Integer in 4 
	//// is
	////   a = (64 / 16) / (let b : Integer in 8 / (let c : Integer in 4 ))
	/// * An expression elaborates a prefixed expression with zero or more binary operator and expression suffixes.
	// * An optionally prefixed let expression is permitted except when suffixed with further expressions.* / ExpCS:
	//	PrefixedPrimaryExpCS ({InfixExpCS.ownedLeft=current} name=BinaryOperatorName ownedRight=ExpCS)? | PrefixedLetExpCS;
	public EssentialOCLGrammarAccess.ExpCSElements getExpCSAccess() {
		return gaEssentialOCL.getExpCSAccess();
	}
	
	public ParserRule getExpCSRule() {
		return getExpCSAccess().getRule();
	}

	/// * A prefixed let expression elaborates a let expression with zero or more unary prefix operators. * / PrefixedLetExpCS
	//ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedLetExpCS | LetExpCS
	public EssentialOCLGrammarAccess.PrefixedLetExpCSElements getPrefixedLetExpCSAccess() {
		return gaEssentialOCL.getPrefixedLetExpCSAccess();
	}
	
	public ParserRule getPrefixedLetExpCSRule() {
		return getPrefixedLetExpCSAccess().getRule();
	}

	/// * A prefixed primary expression elaborates a primary expression with zero or more unary prefix operators. * /
	//PrefixedPrimaryExpCS ExpCS:
	//	{PrefixExpCS} name=UnaryOperatorName ownedRight=PrefixedPrimaryExpCS | PrimaryExpCS
	public EssentialOCLGrammarAccess.PrefixedPrimaryExpCSElements getPrefixedPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrefixedPrimaryExpCSAccess();
	}
	
	public ParserRule getPrefixedPrimaryExpCSRule() {
		return getPrefixedPrimaryExpCSAccess().getRule();
	}

	/// * A primary expression identifies the basic expressions from which more complex expressions may be constructed. * /
	//PrimaryExpCS ExpCS:
	//	NestedExpCS
	//	| IfExpCS
	//	| SelfExpCS
	//	| PrimitiveLiteralExpCS
	//	| TupleLiteralExpCS
	//	| MapLiteralExpCS
	//	| CollectionLiteralExpCS
	//	| LambdaLiteralExpCS
	//	| TypeLiteralExpCS
	//	| NameExpCS
	public EssentialOCLGrammarAccess.PrimaryExpCSElements getPrimaryExpCSAccess() {
		return gaEssentialOCL.getPrimaryExpCSAccess();
	}
	
	public ParserRule getPrimaryExpCSRule() {
		return getPrimaryExpCSAccess().getRule();
	}

	/// * A name expression is a generalised rule for expressions that start with a name and which may be followed by square, round or
	// * curly bracket clauses and optionally an @pre as well.* / NameExpCS:
	//	ownedPathName=PathNameCS ownedSquareBracketedClauses+=SquareBracketedClauseCS*
	//	ownedRoundBracketedClause=RoundBracketedClauseCS? ownedCurlyBracketedClause=CurlyBracketedClauseCS? (isPre?='@'
	//	'pre')?;
	public EssentialOCLGrammarAccess.NameExpCSElements getNameExpCSAccess() {
		return gaEssentialOCL.getNameExpCSAccess();
	}
	
	public ParserRule getNameExpCSRule() {
		return getNameExpCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for the literal arguments of collections, maps, tuples and shadows.* /
	//CurlyBracketedClauseCS:
	//	{CurlyBracketedClauseCS} '{' ((ownedParts+=ShadowPartCS (',' ownedParts+=ShadowPartCS)*)?
	//	| value=StringLiteral) '}';
	public EssentialOCLGrammarAccess.CurlyBracketedClauseCSElements getCurlyBracketedClauseCSAccess() {
		return gaEssentialOCL.getCurlyBracketedClauseCSAccess();
	}
	
	public ParserRule getCurlyBracketedClauseCSRule() {
		return getCurlyBracketedClauseCSAccess().getRule();
	}

	/// * A curly bracket clause is a generalized rule for template specialisations and operations arguments.* /
	//RoundBracketedClauseCS:
	//	{RoundBracketedClauseCS} '(' (ownedArguments+=NavigatingArgCS ownedArguments+=NavigatingCommaArgCS*
	//	(ownedArguments+=NavigatingSemiArgCS ownedArguments+=NavigatingCommaArgCS*)? (ownedArguments+=NavigatingBarArgCS
	//	ownedArguments+=NavigatingCommaArgCS*)*)? ')';
	public EssentialOCLGrammarAccess.RoundBracketedClauseCSElements getRoundBracketedClauseCSAccess() {
		return gaEssentialOCL.getRoundBracketedClauseCSAccess();
	}
	
	public ParserRule getRoundBracketedClauseCSRule() {
		return getRoundBracketedClauseCSAccess().getRule();
	}

	/// * A square bracket clause is a generalized rule for association class qualifiers and roles.* / SquareBracketedClauseCS:
	//	'[' ownedTerms+=ExpCS (',' ownedTerms+=ExpCS)* ']';
	public EssentialOCLGrammarAccess.SquareBracketedClauseCSElements getSquareBracketedClauseCSAccess() {
		return gaEssentialOCL.getSquareBracketedClauseCSAccess();
	}
	
	public ParserRule getSquareBracketedClauseCSRule() {
		return getSquareBracketedClauseCSAccess().getRule();
	}

	/// * A navigating argument is a generalized rule for the first argument in a round bracket clause. This is typically the first operation
	// * parameter or an iterator. * / NavigatingArgCS:
	//	ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? | 'in'
	//	ownedInitExpression=ExpCS)? | ':' ownedType=TypeExpCS;
	public EssentialOCLGrammarAccess.NavigatingArgCSElements getNavigatingArgCSAccess() {
		return gaEssentialOCL.getNavigatingArgCSAccess();
	}
	
	public ParserRule getNavigatingArgCSRule() {
		return getNavigatingArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating bar argument is a generalized rule for a bar-prefixed argument in a round bracket clause. This is typically the body of an iteration. * /
	//NavigatingBarArgCS NavigatingArgCS:
	//	prefix='|' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingBarArgCSElements getNavigatingBarArgCSAccess() {
		return gaEssentialOCL.getNavigatingBarArgCSAccess();
	}
	
	public ParserRule getNavigatingBarArgCSRule() {
		return getNavigatingBarArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating comma argument is a generalized rule for non-first argument in a round bracket clause. These are typically non-first operation
	// * parameters or a second iterator. * / NavigatingCommaArgCS NavigatingArgCS:
	//	prefix=',' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)? |
	//	'in' ownedInitExpression=ExpCS)?
	public EssentialOCLGrammarAccess.NavigatingCommaArgCSElements getNavigatingCommaArgCSAccess() {
		return gaEssentialOCL.getNavigatingCommaArgCSAccess();
	}
	
	public ParserRule getNavigatingCommaArgCSRule() {
		return getNavigatingCommaArgCSAccess().getRule();
	}

	//// Type-less init is an illegal infix expression
	/// * A navigating semi argument is a generalized rule for a semicolon prefixed argument in a round bracket clause. This is typically an iterate accumulator. * /
	//NavigatingSemiArgCS NavigatingArgCS:
	//	prefix=';' ownedNameExpression=super::NavigatingArgExpCS (':' ownedType=TypeExpCS ('=' ownedInitExpression=ExpCS)?)?
	public EssentialOCLGrammarAccess.NavigatingSemiArgCSElements getNavigatingSemiArgCSAccess() {
		return gaEssentialOCL.getNavigatingSemiArgCSAccess();
	}
	
	public ParserRule getNavigatingSemiArgCSRule() {
		return getNavigatingSemiArgCSAccess().getRule();
	}

	//IfExpCS:
	//	'if' ownedCondition=(ExpCS | PatternExpCS)
	//	'then' ownedThenExpression=ExpCS
	//	//	ifThenExpressions+=IfThenExpCS
	//	ownedIfThenExpressions+=ElseIfThenExpCS*
	//	'else' ownedElseExpression=ExpCS
	//	'endif';
	public EssentialOCLGrammarAccess.IfExpCSElements getIfExpCSAccess() {
		return gaEssentialOCL.getIfExpCSAccess();
	}
	
	public ParserRule getIfExpCSRule() {
		return getIfExpCSAccess().getRule();
	}

	////IfThenExpCS returns IfThenExpCS:
	////	'if' condition=ExpCS
	////	'then' thenExpression=ExpCS
	////;
	//ElseIfThenExpCS IfThenExpCS:
	//	'elseif' ownedCondition=ExpCS
	//	'then' ownedThenExpression=ExpCS
	public EssentialOCLGrammarAccess.ElseIfThenExpCSElements getElseIfThenExpCSAccess() {
		return gaEssentialOCL.getElseIfThenExpCSAccess();
	}
	
	public ParserRule getElseIfThenExpCSRule() {
		return getElseIfThenExpCSAccess().getRule();
	}

	//LetExpCS:
	//	'let' ownedVariables+=LetVariableCS (',' ownedVariables+=LetVariableCS)*
	//	'in' ownedInExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetExpCSElements getLetExpCSAccess() {
		return gaEssentialOCL.getLetExpCSAccess();
	}
	
	public ParserRule getLetExpCSRule() {
		return getLetExpCSAccess().getRule();
	}

	//LetVariableCS:
	//	name=super::UnrestrictedName ownedRoundBracketedClause=RoundBracketedClauseCS? (':' ownedType=TypeExpCS)? '='
	//	ownedInitExpression=ExpCS;
	public EssentialOCLGrammarAccess.LetVariableCSElements getLetVariableCSAccess() {
		return gaEssentialOCL.getLetVariableCSAccess();
	}
	
	public ParserRule getLetVariableCSRule() {
		return getLetVariableCSAccess().getRule();
	}

	//NestedExpCS:
	//	'(' ownedExpression=ExpCS ')';
	public EssentialOCLGrammarAccess.NestedExpCSElements getNestedExpCSAccess() {
		return gaEssentialOCL.getNestedExpCSAccess();
	}
	
	public ParserRule getNestedExpCSRule() {
		return getNestedExpCSAccess().getRule();
	}

	//SelfExpCS:
	//	{SelfExpCS} 'self';
	public EssentialOCLGrammarAccess.SelfExpCSElements getSelfExpCSAccess() {
		return gaEssentialOCL.getSelfExpCSAccess();
	}
	
	public ParserRule getSelfExpCSRule() {
		return getSelfExpCSAccess().getRule();
	}

	//MultiplicityBoundsCS:
	//	lowerBound=LOWER ('..' upperBound=UPPER)?;
	public BaseGrammarAccess.MultiplicityBoundsCSElements getMultiplicityBoundsCSAccess() {
		return gaBase.getMultiplicityBoundsCSAccess();
	}
	
	public ParserRule getMultiplicityBoundsCSRule() {
		return getMultiplicityBoundsCSAccess().getRule();
	}

	//MultiplicityCS:
	//	'[' (MultiplicityBoundsCS | MultiplicityStringCS) ('|?' | isNullFree?='|1')? ']';
	public BaseGrammarAccess.MultiplicityCSElements getMultiplicityCSAccess() {
		return gaBase.getMultiplicityCSAccess();
	}
	
	public ParserRule getMultiplicityCSRule() {
		return getMultiplicityCSAccess().getRule();
	}

	//MultiplicityStringCS:
	//	stringBounds=('*' | '+' | '?');
	public BaseGrammarAccess.MultiplicityStringCSElements getMultiplicityStringCSAccess() {
		return gaBase.getMultiplicityStringCSAccess();
	}
	
	public ParserRule getMultiplicityStringCSRule() {
		return getMultiplicityStringCSAccess().getRule();
	}

	//PathNameCS:
	//	ownedPathElements+=FirstPathElementCS ('::' ownedPathElements+=NextPathElementCS)*;
	public BaseGrammarAccess.PathNameCSElements getPathNameCSAccess() {
		return gaBase.getPathNameCSAccess();
	}
	
	public ParserRule getPathNameCSRule() {
		return getPathNameCSAccess().getRule();
	}

	//FirstPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnrestrictedName]
	public BaseGrammarAccess.FirstPathElementCSElements getFirstPathElementCSAccess() {
		return gaBase.getFirstPathElementCSAccess();
	}
	
	public ParserRule getFirstPathElementCSRule() {
		return getFirstPathElementCSAccess().getRule();
	}

	//NextPathElementCS PathElementCS:
	//	referredElement=[pivot::NamedElement|super::UnreservedName]
	public BaseGrammarAccess.NextPathElementCSElements getNextPathElementCSAccess() {
		return gaBase.getNextPathElementCSAccess();
	}
	
	public ParserRule getNextPathElementCSRule() {
		return getNextPathElementCSAccess().getRule();
	}

	//TemplateBindingCS:
	//	ownedSubstitutions+=TemplateParameterSubstitutionCS (',' ownedSubstitutions+=TemplateParameterSubstitutionCS)*
	//	ownedMultiplicity=MultiplicityCS?;
	public BaseGrammarAccess.TemplateBindingCSElements getTemplateBindingCSAccess() {
		return gaBase.getTemplateBindingCSAccess();
	}
	
	public ParserRule getTemplateBindingCSRule() {
		return getTemplateBindingCSAccess().getRule();
	}

	//TemplateParameterSubstitutionCS:
	//	ownedActualParameter=TypeRefCS;
	public BaseGrammarAccess.TemplateParameterSubstitutionCSElements getTemplateParameterSubstitutionCSAccess() {
		return gaBase.getTemplateParameterSubstitutionCSAccess();
	}
	
	public ParserRule getTemplateParameterSubstitutionCSRule() {
		return getTemplateParameterSubstitutionCSAccess().getRule();
	}

	//TypeParameterCS:
	//	name=super::UnrestrictedName ('extends' ownedExtends+=super::TypedRefCS ('&&' ownedExtends+=super::TypedRefCS)*)?;
	public BaseGrammarAccess.TypeParameterCSElements getTypeParameterCSAccess() {
		return gaBase.getTypeParameterCSAccess();
	}
	
	public ParserRule getTypeParameterCSRule() {
		return getTypeParameterCSAccess().getRule();
	}

	//TypeRefCS:
	//	super::TypedRefCS | WildcardTypeRefCS;
	public BaseGrammarAccess.TypeRefCSElements getTypeRefCSAccess() {
		return gaBase.getTypeRefCSAccess();
	}
	
	public ParserRule getTypeRefCSRule() {
		return getTypeRefCSAccess().getRule();
	}

	//TypedTypeRefCS:
	//	ownedPathName=PathNameCS ('(' ownedBinding=TemplateBindingCS ')')?;
	public BaseGrammarAccess.TypedTypeRefCSElements getTypedTypeRefCSAccess() {
		return gaBase.getTypedTypeRefCSAccess();
	}
	
	public ParserRule getTypedTypeRefCSRule() {
		return getTypedTypeRefCSAccess().getRule();
	}

	//WildcardTypeRefCS:
	//	{WildcardTypeRefCS} '?' ('extends' ownedExtends=super::TypedRefCS)?;
	public BaseGrammarAccess.WildcardTypeRefCSElements getWildcardTypeRefCSAccess() {
		return gaBase.getWildcardTypeRefCSAccess();
	}
	
	public ParserRule getWildcardTypeRefCSRule() {
		return getWildcardTypeRefCSAccess().getRule();
	}

	//ID:
	//	SIMPLE_ID | ESCAPED_ID;
	public BaseGrammarAccess.IDElements getIDAccess() {
		return gaBase.getIDAccess();
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}

	//Identifier:
	//	ID;
	public BaseGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaBase.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	/// * A lowerbounded integer is used to define the lowerbound of a collection multiplicity. The value may not be the unlimited value. * /
	//LOWER ecore::EInt:
	//	INT
	public BaseGrammarAccess.LOWERElements getLOWERAccess() {
		return gaBase.getLOWERAccess();
	}
	
	public ParserRule getLOWERRule() {
		return getLOWERAccess().getRule();
	}

	/// * A number may be an integer or floating point value. The declaration here appears to be that for just an integer. This is to avoid
	// * lookahead conflicts in simple lexers between a dot within a floating point number and the dot-dot in a CollectionLiteralPartCS. A
	// * practical implementation should give high priority to a successful parse of INT ('.' INT)? (('e' | 'E') ('+' | '-')? INT)? than
	// * to the unsuccessful partial parse of INT '..'. The type of the INT terminal is String to allow the floating point syntax to be used.
	// * / NUMBER_LITERAL BigNumber:
	//	INT
	public BaseGrammarAccess.NUMBER_LITERALElements getNUMBER_LITERALAccess() {
		return gaBase.getNUMBER_LITERALAccess();
	}
	
	public ParserRule getNUMBER_LITERALRule() {
		return getNUMBER_LITERALAccess().getRule();
	}

	//// EssentialOCLTokenSource pieces this together ('.' INT)? (('e' | 'E') ('+' | '-')? INT)?;
	//StringLiteral:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaBase.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * An upperbounded integer is used to define the upperbound of a collection multiplicity. The value may be the unlimited value. * /
	//UPPER ecore::EInt:
	//	INT | '*'
	public BaseGrammarAccess.UPPERElements getUPPERAccess() {
		return gaBase.getUPPERAccess();
	}
	
	public ParserRule getUPPERRule() {
		return getUPPERAccess().getRule();
	}

	//URI:
	//	SINGLE_QUOTED_STRING;
	public BaseGrammarAccess.URIElements getURIAccess() {
		return gaBase.getURIAccess();
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal fragment ESCAPED_CHARACTER:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\');
	public TerminalRule getESCAPED_CHARACTERRule() {
		return gaBase.getESCAPED_CHARACTERRule();
	} 

	//terminal fragment LETTER_CHARACTER:
	//	'a'..'z' | 'A'..'Z' | '_';
	public TerminalRule getLETTER_CHARACTERRule() {
		return gaBase.getLETTER_CHARACTERRule();
	} 

	//terminal DOUBLE_QUOTED_STRING:
	//	'"' (ESCAPED_CHARACTER | !('\\' | '"'))* '"';
	public TerminalRule getDOUBLE_QUOTED_STRINGRule() {
		return gaBase.getDOUBLE_QUOTED_STRINGRule();
	} 

	//terminal SINGLE_QUOTED_STRING:
	//	"'" (ESCAPED_CHARACTER | !('\\' | "'"))* "'";
	public TerminalRule getSINGLE_QUOTED_STRINGRule() {
		return gaBase.getSINGLE_QUOTED_STRINGRule();
	} 

	//terminal ML_SINGLE_QUOTED_STRING:
	//	"/'"->"'/";
	public TerminalRule getML_SINGLE_QUOTED_STRINGRule() {
		return gaBase.getML_SINGLE_QUOTED_STRINGRule();
	} 

	//terminal SIMPLE_ID:
	//	LETTER_CHARACTER (LETTER_CHARACTER | '0'..'9')*;
	public TerminalRule getSIMPLE_IDRule() {
		return gaBase.getSIMPLE_IDRule();
	} 

	//terminal ESCAPED_ID:
	//	"_" SINGLE_QUOTED_STRING;
	public TerminalRule getESCAPED_IDRule() {
		return gaBase.getESCAPED_IDRule();
	} 

	//terminal INT:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaBase.getINTRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaBase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaBase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaBase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaBase.getANY_OTHERRule();
	} 
}
