/**
 * generated by Xtext
 */
package org.muml.psm.allocation.language.xtext.scoping;

import com.google.common.base.Objects;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.ocl.pivot.internal.library.ImplementationManager;
import org.eclipse.ocl.pivot.internal.manager.PivotMetamodelManager;
import org.eclipse.ocl.pivot.internal.resource.EnvironmentFactoryAdapter;
import org.eclipse.ocl.pivot.internal.scoping.Attribution;
import org.eclipse.ocl.xtext.base.scoping.AbstractJavaClassScope;
import org.eclipse.ocl.xtext.base.utilities.BaseCSResource;
import org.eclipse.ocl.xtext.completeocl.scoping.CompleteOCLScopeProvider;
import org.eclipse.ocl.xtext.oclstdlib.scoping.JavaClassScope;
import org.eclipse.ocl.xtext.oclstdlibcs.OCLstdlibCSPackage;
import org.eclipse.xtext.scoping.IScope;
import org.muml.psm.allocation.language.cs.CsPackage;
import org.muml.psm.allocation.language.cs.MeasureFunctionCS;
import org.muml.psm.allocation.language.xtext.attributes.SpecificationCSAttribution;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class AllocationSpecificationLanguageScopeProvider extends CompleteOCLScopeProvider {
  public static void init() {
    Attribution.REGISTRY.put(CsPackage.Literals.SPECIFICATION_CS, SpecificationCSAttribution.INSTANCE);
  }
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((context instanceof MeasureFunctionCS)) {
      _xifexpression = this.polymorphicGetScope(context, reference);
    } else {
      IScope _xifexpression_1 = null;
      EClass _eReferenceType = reference.getEReferenceType();
      boolean _equals = Objects.equal(_eReferenceType, OCLstdlibCSPackage.Literals.JAVA_CLASS_CS);
      if (_equals) {
        _xifexpression_1 = this.getJavaClassScope(context, reference);
      } else {
        _xifexpression_1 = super.getScope(context, reference);
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  protected IScope polymorphicGetScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      IScope scope = this.polymorphicFindScopeForReferenceName(context, reference);
      boolean _equals = Objects.equal(scope, null);
      if (_equals) {
        IScope _polymorphicFindScopeForClassName = this.polymorphicFindScopeForClassName(context, reference);
        scope = _polymorphicFindScopeForClassName;
        boolean _equals_1 = Objects.equal(scope, null);
        if (_equals_1) {
          IScope _delegateGetScope = this.delegateGetScope(context, reference);
          scope = _delegateGetScope;
        }
      }
      _xblockexpression = scope;
    }
    return _xblockexpression;
  }
  
  protected IScope getJavaClassScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      final Resource csResource = context.eResource();
      if ((csResource instanceof BaseCSResource)) {
        AbstractJavaClassScope adapter = JavaClassScope.findAdapter(((BaseCSResource) csResource));
        boolean _equals = Objects.equal(adapter, null);
        if (_equals) {
          EnvironmentFactoryAdapter environmentFactoryAdapter = EnvironmentFactoryAdapter.find(csResource);
          boolean _equals_1 = Objects.equal(environmentFactoryAdapter, null);
          if (_equals_1) {
            final ResourceSet csResourceSet = ((BaseCSResource)csResource).getResourceSet();
            boolean _notEquals = (!Objects.equal(csResourceSet, null));
            if (_notEquals) {
              EnvironmentFactoryAdapter _find = EnvironmentFactoryAdapter.find(csResourceSet);
              environmentFactoryAdapter = _find;
            }
          }
          List<ClassLoader> classLoaders = Collections.<ClassLoader>emptyList();
          boolean _notEquals_1 = (!Objects.equal(environmentFactoryAdapter, null));
          if (_notEquals_1) {
            PivotMetamodelManager _metamodelManager = environmentFactoryAdapter.getMetamodelManager();
            ImplementationManager _implementationManager = _metamodelManager.getImplementationManager();
            List<ClassLoader> _classLoaders = _implementationManager.getClassLoaders();
            classLoaders = _classLoaders;
          }
          JavaClassScope _adapter = JavaClassScope.getAdapter(((BaseCSResource) csResource), classLoaders);
          adapter = _adapter;
        }
        return adapter;
      }
      _xblockexpression = IScope.NULLSCOPE;
    }
    return _xblockexpression;
  }
}
