[comment encoding = UTF-8 /]
[**
 * The documentation of the module Events.
 */]
[module Message('http://www.muml.org/pim/connector/1.0.0', 
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')/]
[import org::muml::codegen::componenttype::c::queries::stringQueries/]
[import org::muml::codegen::componenttype::c::queries::modelQueries/]
[import org::muml::codegen::componenttype::c::actionlanguage::expression/]



[**
 * Generates file, which contains typedefs for every Message-Struct.
 *  Therefore, you can use the name of the message without 'struct' in front.
 */]
[template public generateMessageHeader(components : Collection(Component), path : String, useSubDir: Boolean)]

[comment message files/]
[file (path+getFileName4MessageTypes(useSubDir), false, 'UTF-8')]
/**
 * @file 
 * @author generated
 * @brief The typedefs for the  Messages are definied here
 * @details To guarantee unique Names for Messages, the Name of the corresponding MessageTypeReposity is appended
 */
#ifndef MESSAGE_TYPES_H
#define MESSAGE_TYPES_H
#include "../lib/standardTypes.h"


//the following message types are not generated, because they have no parameters
[for (msg : MessageType | getAllUsedMessages(components)) ? (msg.parameters->isEmpty())]
typedef struct [getMessageType(msg)/]{
	int8_T dummy;
}[getMessageType(msg)/];
[/for]

[for (msg : MessageType | getAllUsedMessages(components)) ? (msg.parameters->size()>0)]
//definition for message type [msg.getName()/]
typedef struct [getMessageType(msg)/]{
[for (param : Parameter | msg.parameters)]
	 [param.dataType.getTypeName()/] [param.getName()/];
[/for]
}[getMessageType(msg)/];
[/for]
#endif /* MESSAGE_TYPES_H */
[/file]
[/template]

[query public getAllUsedMessages (components : Collection(Component)) : Set(MessageType) = 
let receiverMessages:Set(MessageType) = components.ports->filter(DiscretePort)->collect(receiverMessageTypes)->asSet() in
let senderMessages:Set(MessageType) = components.ports->filter(DiscretePort)->collect(senderMessageTypes)->asSet() in
receiverMessages->union(senderMessages)->asOrderedSet()
 /]

