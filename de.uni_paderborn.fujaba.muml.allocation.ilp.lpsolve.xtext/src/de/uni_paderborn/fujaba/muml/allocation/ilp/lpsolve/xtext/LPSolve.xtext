// automatically generated by Xtext
grammar de.uni_paderborn.fujaba.muml.allocation.ilp.lpsolve.xtext.LPSolve with org.eclipse.xtext.common.Terminals

import "http://www.fujaba.de/muml/allocation/ilp/0.1.0" as ilp
//import "platform:/resource/de.uni_paderborn.fujaba.muml.allocation.ilp/model/ilp.ecore#/ilp" as ilp
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.storydriven.org/core/0.3.1" as core
import "http://www.storydriven.org/core/expressions/0.3.1" as expressions
//import "platform:/resource/org.storydriven.core/model/core.ecore#//expressions" as expressions
import "http://www.storydriven.org/core/expressions/common/0.3.1" as common
//import "platform:/resource/org.storydriven.core/model/core.ecore#//expressions/common" as common

IntegerLinearProgram returns ilp::IntegerLinearProgram:
	objectiveFunction=ObjectiveFunctionExpression
	constraints+=ConstraintExpression*
	variables+=Variable*
;

ObjectiveFunctionExpression returns ilp::ObjectiveFunctionExpression:
	// support lpsolve's (strange) specification of a non-existent objective function
	// (in this case _no_ ObjectiveFunctionExpression object should be created)
	(('min' | 'max') ':' ';') | goal=ObjectiveGoal':' objectiveFunction=LinearExpression';'
;

enum ObjectiveGoal returns ilp::ObjectiveGoal:
	MIN = 'min' | MAX = 'max'
;

ConstraintExpression returns ilp::ConstraintExpression:
	// the comment represents an optional name of a restriction
	(comment=VariableID ':')? leftExpression=SimpleLinearExpression operator=ComparingOperator rightExpression=SimpleLinearExpression';'
;

enum ComparingOperator returns common::ComparingOperator:
	EQUAL='=' | GREATER='>' | GREATER_OR_EQUAL='>=' | LESS='<' | LESS_OR_EQUAL='<='
;

Variable returns ilp::Variable:
	dataType=ILPDataType name=VariableID';'
;

VariableID returns ecore::EString:
	ID ('.' (ID | INT ID?))*
;

enum ILPDataType returns ilp::ILPDataType:
	BINARY = 'bin' | INTEGER = 'int' | REAL = 'real'
;

LinearExpression returns expressions::Expression:
	// if you need a more sophisticated expression grammar override this rule
	SimpleLinearExpression
;

SimpleLinearExpression returns expressions::Expression:
	AdditionExpression
;

enum AdditionOperator returns common::ArithmeticOperator:
	PLUS='+' | MINUS='-'
;

AdditionExpression returns expressions::Expression:
	MultiplicationExpression (
		{common::ArithmeticExpression.leftExpression = current} operator=AdditionOperator rightExpression=LinearExpression
	)?
;

// XXX: here we also allow non-linear expressions, but we do not care,
// because this grammar is just for internal use (test fixture specification)
MultiplicationExpression returns expressions::Expression:
	Operand (
		{common::ArithmeticExpression.leftExpression = current} operator=MultiplicationOperator rightExpression=Operand
	)?
;

enum MultiplicationOperator returns common::ArithmeticOperator:
	TIMES='*'
;

Operand returns expressions::Expression:
	NumberLiteralExpression | VariableExpression
;

NumberLiteralExpression returns common::LiteralExpression:
	value=Number
;

Number returns ecore::EString:
	'-'? (Decimal | INT)
;

Decimal returns ecore::EString:
	INT '.' INT	
;

VariableExpression returns ilp::VariableExpression:
	variable=[ilp::Variable|VariableID]
;