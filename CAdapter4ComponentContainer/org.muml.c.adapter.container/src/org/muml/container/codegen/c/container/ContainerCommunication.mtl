[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given Container.
 */]
[module ContainerCommunication('http://www.muml.org/pim/connector/1.0.0',
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/core/expressions/common/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0',
				'http://www.opendds.org/modeling/schemas/DCPS/1.0',
				'http://www.opendds.org/modeling/schemas/Core/1.0',
				'http://www.opendds.org/modeling/schemas/Application/1.0',
				'http://www.opendds.org/modeling/schemas/Topics/1.0')/]


[import org::muml::codegen::componenttype::c::queries::stringQueries/]
[import org::muml::codegen::componenttype::c::queries::modelQueries/]
[import org::muml::codegen::componenttype::c::queries::ContainerQueries/]

[import org::muml::container::codegen::c::queries::containerStringQueries/]
[import org::muml::container::codegen::c::container::local::LocalCommunication/]
[import org::muml::container::codegen::c::container::dds::DDSCommunication/]

[template public generateCommunicationMethods(container:ComponentContainer)]
[let portInstanceConfigs : Sequence(PortInstanceConfiguration) = container.componentInstanceConfigurations.portInstanceConfigurations]
	[comment check which PortInstanceConfigurations are used for this port /]
	[comment create methods for directedTypedPort/]
	[for (port : DirectedTypedPort | container.componentType.ports->filter(DirectedTypedPort))]
		[let usedPortConfigs : Sequence(PortInstanceConfiguration) = portInstanceConfigs->select(p:PortInstanceConfiguration | p.portInstance.portType=port)]
					[if port.inPort]
						[generateDoesMessageExistsMethod(port, usedPortConfigs)/]
						[generateRecvMessageMethod(port, usedPortConfigs)/]
					[/if]
					[if port.oclAsType(DirectedTypedPort).outPort]
						[generateSendMessageMethod(port, usedPortConfigs)/]
					[/if]
	
		[/let]
	[/for]
	
	[comment create methods for discretePorts/]
	[for (port : DiscretePort | container.componentType.ports->filter(DiscretePort))]
		[let usedPortConfigs : Sequence(PortInstanceConfiguration) = portInstanceConfigs->select(p:PortInstanceConfiguration | p.portInstance.portType=port)]
					[for (recv_msg : MessageType | port.receiverMessageTypes)]
							[generateDoesMessageExistsMethod(port, recv_msg, usedPortConfigs)/]
							[generateRecvMessageMethod(port, recv_msg, usedPortConfigs)/]
					[/for]
					
					[for (send_msg : MessageType | port.senderMessageTypes)]
						[generateSendMessageMethod(port, send_msg, usedPortConfigs)/]
					[/for]	
		[/let]
	[/for]
	
[/let]
	
[/template]

[comment methods for Hybrid/Continous Ports/]
[template public generateDoesMessageExistsMethod(port:DirectedTypedPort, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief method to test if message exists for DirectedTypedPort [port.name/] 
*@details looksup if the  buffer contains a messages
*
*/
	bool_t [port.getContainerCheckForMessageMethodName()/](Port* port){
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForReceiving_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForReceiving_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForMessageExists_Local(port)/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForMessageExists_DDS(portInstanceConfigurations.oclAsType(PortInstanceConfiguration_DDS), port)/]
			[/if]	
		default:
			break;	
		}
		return false;
	}
[/template]

[template public generateSendMessageMethod(port:DirectedTypedPort, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief The Send method for DirectedTypedPort [port.name/] 
*
*/	
void [port.getContainerSendMethodName()/](Port* port, [port.dataType.getTypeName()/]* msg){
		[comment generated required data structures/]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForSending_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForSending_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForSending_Local(port)/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForSending_DDS(portInstanceConfigurations.oclAsType(PortInstanceConfiguration_DDS), port)/]
			[/if]	
		default:
			break;	
		}
	}
[/template]

[template public generateRecvMessageMethod(port:DirectedTypedPort, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief The Receive method for DirectedTypedPort [port.name/] 
*
*/	
bool_t [port.getContainerReceiverMethodName()/](Port* port, [port.dataType.getTypeName()/]* msg){
		[comment generated required data structures/]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForReceiving_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForReceiving_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForReceiving_Local()/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForReceiving_DDS(portInstanceConfigurations.oclAsType(PortInstanceConfiguration_DDS), port)/]
			[/if]	
		default:
			break;	
		}
		return false;
	}	
[/template]


[comment methods for DiscretePorts and the correspond Message/]

[template public generateDoesMessageExistsMethod(port:DiscretePort, msg:MessageType, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief The Check method for DiscretePort [port.name/]  and message [msg.getName()/] 
*@details Checks if  buffer contains a message of type [msg.getName()/]  
*
*/	
	bool_t [port.getContainerCheckForMessageMethodName(msg)/](Port* port){
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForReceiving_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForReceiving_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForMessageExists_Local(msg)/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForMessageExists_DDS(portInstanceConfigurations.oclAsType(PortInstanceConfiguration_DDS), msg)/]
			[/if]	
		default:
			break;	
		}
		return false;
	}
[/template]

[template public generateSendMessageMethod(port:DiscretePort, msg:MessageType, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief The Send method for DiscretePort [port.name/]  and message [msg.getName()/]
*@details Send  a message of type [msg.getName()/]  
*
*/	
	void [port.getContainerSendMethodName(msg)/](Port* port, [msg.getMessageType()/]* msg){
		[comment generated required data structures/]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForSending_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForSending_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForSending_Local(msg)/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForSending_DDS(portInstanceConfigurations->filter(PortInstanceConfiguration_DDS), msg)/]
			[/if]	
		default:
			break;	
		}
	}
[/template]

[template public generateRecvMessageMethod(port:DiscretePort, msg:MessageType, portInstanceConfigurations:Collection(PortInstanceConfiguration))]
/**
*
*@brief The Receiv method for DiscretePort [port.name/]  and message [msg.getName()/]
*@details Receives  a message of type [msg.getName()/]  
*
*/	
		bool_t [port.getContainerReceiverMethodName(msg)/](Port* port, [msg.getMessageType()/]* msg){
		[comment generated required data structures/]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
			[generateDeclarationsForReceiving_Local()/]
		[/if]
		[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
			[generateDeclarationsForReceiving_DDS()/]
		[/if]
		switch(port->handle->type) {
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_Local))]
				[generateSwitchCaseForReceiving_Local(msg)/]
			[/if]
			[if portInstanceConfigurations->exists(c|c.oclIsKindOf(PortInstanceConfiguration_DDS))]
				[generateSwitchCaseForReceiving_DDS(portInstanceConfigurations.oclAsType(PortInstanceConfiguration_DDS), msg)/]
			[/if]	
		default:
			break;	
		}
		return false;
	}
[/template]