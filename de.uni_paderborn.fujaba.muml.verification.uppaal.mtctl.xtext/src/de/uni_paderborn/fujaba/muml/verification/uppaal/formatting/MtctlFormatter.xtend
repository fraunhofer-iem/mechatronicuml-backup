/*
 * generated by Xtext
 */
package de.uni_paderborn.fujaba.muml.verification.uppaal.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import de.uni_paderborn.fujaba.muml.verification.uppaal.services.MtctlGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class MtctlFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension MtctlGrammarAccess
	
	override protected configureFormatting(FormattingConfig c) {
		c.setAutoLinewrap(500);
		for (pair : findKeywordPairs('[', ']')) { //get rid of excess spaces
			c.setNoSpace().before(pair.second);
			c.setNoSpace().after(pair.first);
		}
		
		for (comma : findKeywords(',')) //excess spaces
			c.setNoSpace().before(comma);
		
		for (parentheses : findKeywordPairs('(',')')) { //excess spaces in parentheses (want: " (a, b) ")
			c.setNoSpace().after(parentheses.first);
			c.setNoSpace().before(parentheses.second);
		}
		
		for (keyword : findKeywords('bufferMessageCount', 'transitionFiring', 'messageInBuffer', 'messageInTransit', 'stateInStatechart', 'substateOf', 'stateActive', 'stateEntering', 'stateExiting', 'forall', 'exists')) //remove excess space between keywords and their expected parenthesis
			c.setNoSpace().after(keyword);
		
		for(semikolon: findKeywords(';')) { //do newlines after ';'
			c.setNoLinewrap().before(semikolon)
			c.setNoSpace().before(semikolon)
			c.setLinewrap().after(semikolon)
		}
		
		//for (pair : findKeywordPairs(';', '//'))
		//	c.setNoLinewrap().after(pair.first);
		for (comment : findRuleCalls(SL_COMMENTRule)) {
			c.setNoLinewrap.before(comment);
			c.setLinewrap().after(comment);
		}
		
		/*c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)*/
	}
}
