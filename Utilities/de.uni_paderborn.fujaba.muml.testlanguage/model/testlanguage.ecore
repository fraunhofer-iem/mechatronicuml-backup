<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="testlanguage" nsURI="http://de/uni_paderborn/fujaba/muml/testlanguage"
    nsPrefix="de.uni_paderborn.fujaba.muml.testlanguage">
  <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
    <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Node">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="noCyclesAllowed"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
      <details key="noCyclesAllowed" value="-- Nodes may not be part of a cycle or be dependent on a node that is part of a cycle.&#xD;&#xA;self.outputs.targets.node->asSet()->closure(outputs.targets.node)->excludes(self)"/>
    </eAnnotations>
    <eOperations name="setupFromSpecification" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#x9;&#x9;// Set the label according to the specification.&#xD;&#xA;&#x9;&#x9;this.setLabel(this.specification.getLabel());&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Remember old in- and outputs for later reuse.&#xD;&#xA;&#x9;&#x9;List&lt;Input> oldInputs = new LinkedList&lt;Input>();&#xD;&#xA;&#x9;&#x9;for (Input input : this.getInputs()) {&#xD;&#xA;&#x9;&#x9;&#x9;oldInputs.add(input);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;List&lt;Output> oldOutputs = new LinkedList&lt;Output>();&#xD;&#xA;&#x9;&#x9;for (Output output : this.getOutputs()) {&#xD;&#xA;&#x9;&#x9;&#x9;oldOutputs.add(output);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Clear old ports.&#xD;&#xA;&#x9;&#x9;this.getInputs().clear();&#xD;&#xA;&#x9;&#x9;this.getOutputs().clear();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Setup new ports and reuse old ones if possible.&#xD;&#xA;&#x9;&#x9;for (EObject specObj : this.specification.getPortSpecifications()) {&#xD;&#xA;&#x9;&#x9;&#x9;PortSpecification spec = (PortSpecification) specObj;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;boolean specificationIsInOut = spec.getType() == PortType.INOUT;&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;if (spec.getType() == PortType.IN || spec.getType() == PortType.INOUT) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Can we reuse an old input port?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean reuse = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator&lt;Input> iter = oldInputs.iterator();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while (iter.hasNext()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Input input = iter.next();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (input.getName().equals(spec.getName()) &amp;&amp; input.isOptional() == spec.isOptional()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&amp;&amp; input.getDataType() == spec.getDataType() &amp;&amp; input.isInOut() == specificationIsInOut) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.getInputs().add(input);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;iter.remove();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reuse = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// If not, create a new input port.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!reuse) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Input input = TestLanguageFactory.eINSTANCE.createInput();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;input.setName(spec.getName());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;input.setOptional(spec.isOptional());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;input.setDataType(spec.getDataType());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;input.setInOut(specificationIsInOut);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.getInputs().add(input);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;if (spec.getType() == PortType.OUT || spec.getType() == PortType.INOUT) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// Can we reuse an old output port?&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;boolean reuse = false;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Iterator&lt;Output> iter = oldOutputs.iterator();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;while (iter.hasNext()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Output output = iter.next();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (output.getName().equals(spec.getName()) &amp;&amp; output.isInOut() == specificationIsInOut) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this.getOutputs().add(output);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;iter.remove();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;reuse = true;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;// If not, create a new output port.&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!reuse) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Output output = TestLanguageFactory.eINSTANCE.createOutput();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output.setName(spec.getName());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;output.setInOut(specificationIsInOut);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.getOutputs().add(output);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Disconnect old ports that are not used anymore.&#xD;&#xA;&#x9;&#x9;for (Input input : oldInputs) {&#xD;&#xA;&#x9;&#x9;&#x9;input.setSource(null);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;for (Output output : oldOutputs) {&#xD;&#xA;&#x9;&#x9;&#x9;for (Input input : output.getTargets()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;input.setSource(null);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}"/>
        <details key="documentation" value="Performs a setup routine for the specific node, i.e. it sets the label and ports according to the NodeSpecification."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="execute" lowerBound="1" eExceptions="ecore:EDataType ../../de.uni_paderborn.fujaba.muml.testlanguage.specification/model/specification.ecore#//ExecutionException">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="&#x9;&#x9;// FIXME Hack to disable notifications so that the transactional editing&#xD;&#xA;&#x9;&#x9;// domain won't complain about me modifying the domain element.&#xD;&#xA;&#x9;&#x9;this.eSetDeliver(false);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Initialize caches if needed.&#xD;&#xA;&#x9;&#x9;if (this.getInputCache() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;this.setInputCache(new HashMap&lt;String, Object>());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if (this.getOutputCache() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;this.setOutputCache(new HashMap&lt;String, Object>());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Refresh the input cache.&#xD;&#xA;&#x9;&#x9;for (Input input : this.getInputs()) {&#xD;&#xA;&#x9;&#x9;&#x9;if (input.getSource() == null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getInputCache().remove(input.getName());&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this.getInputCache().put(input.getName(), input.getData());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// Clear the output cache.&#xD;&#xA;&#x9;&#x9;this.getOutputCache().clear();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;// NOTE A check whether all non-optional ports actually get data is not&#xD;&#xA;&#x9;&#x9;// necessary, as previous constraints already took care of this.&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;// Execute the behavior that is written in the specification.&#xD;&#xA;&#x9;&#x9;&#x9;this.specification.execute(this.getInputCache(),&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this.getOutputCache());&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;return;&#xD;&#xA;&#x9;&#x9;} catch (Exception e) {&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;// Clear the output cache.&#xD;&#xA;&#x9;&#x9;&#x9;this.getOutputCache().clear();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;throw new ExecutionException(e);&#xD;&#xA;&#x9;&#x9;} finally {&#xD;&#xA;&#x9;&#x9;&#x9;this.eSetDeliver(true);&#xD;&#xA;&#x9;&#x9;}"/>
        <details key="documentation" value="Executes the node. It basically just delegates to the execute()-method of the NodeSpecification, but also does some maintenance.&#xD;&#xA;&#xD;&#xA;@throws ExecutionException if an error occurs during execution, containing an error message."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createSpecification" lowerBound="1">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="try {&#xD;&#xA;&#x9;SpecificationFactory fac = de.uni_paderborn.fujaba.muml.testlanguage.specification.SpecificationFactory.eINSTANCE;&#xD;&#xA;&#x9;java.lang.reflect.Method creator = fac.getClass().getMethod(&quot;create&quot;+this.specificationClassName);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;this.setSpecification((NodeSpecification) creator.invoke(fac));&#xD;&#xA;&#x9;this.specification.initialize();&#xD;&#xA;} catch (NoSuchMethodException e) {&#xD;&#xA;&#x9;// The desired NodeSpecification does not exist.&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;} catch (InvocationTargetException e) {&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;} catch (IllegalAccessException e) {&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;} catch (Exception e) {&#xD;&#xA;&#x9;e.printStackTrace();&#xD;&#xA;}"/>
        <details key="documentation" value="Reflectively creates the underlying NodeSpecification by looking into the field specificationClassName and searching a class of that name."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputs" upperBound="-1"
        eType="#//Input" containment="true" eOpposite="#//Input/node" eKeys="#//Port/name"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outputs" upperBound="-1"
        eType="#//Output" containment="true" eOpposite="#//Output/node" eKeys="#//Port/name"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="label" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="node"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" eType="ecore:EClass ../../de.uni_paderborn.fujaba.muml.testlanguage.specification/model/specification.ecore#//NodeSpecification"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="specificationClassName"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="Default"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="inputCache" transient="true">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eGenericType>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="outputCache" transient="true">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eGenericType>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Input" eSuperTypes="#//Port">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
      <details key="mandatoryInputMustBeConnected" value="-- Inputs that are mandatory (= not optional) must have a connection.&#xD;&#xA;self.source.oclIsUndefined() implies self.optional"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="constraints" value="mandatoryInputMustBeConnected"/>
      <details key="documentation" value="This class represents a specific type of port that is used as an input."/>
    </eAnnotations>
    <eOperations name="getData" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (this.getSource() == null)&#xD;&#xA;{&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;return this.getSource().getData();"/>
        <details key="documentation" value="Returns the data that flows to this input port.&#xD;&#xA;&#xD;&#xA;@return An object that is delivered by a connected output port or null, if the input is not connected."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" eType="#//Output"
        eOpposite="#//Output/targets"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="node" lowerBound="1" eType="#//Node"
        eOpposite="#//Node/inputs"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="optional" lowerBound="1"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean" defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="dataType">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaClass">
        <eTypeArguments/>
      </eGenericType>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Output" eSuperTypes="#//Port">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="documentation" value="This class represents a specific type of port that is used as an output."/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
      <details key="ifInputTypeIsInOutThenItIsTheOnlyOne"/>
    </eAnnotations>
    <eOperations name="getData" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="body" value="if (this.getNode().getOutputCache() == null)&#xD;&#xA;{&#xD;&#xA;&#x9;return null;&#xD;&#xA;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;return this.getNode().getOutputCache().get(this.getName());"/>
        <details key="documentation" value="Returns the object that this port gets from its node.&#xD;&#xA;&#xD;&#xA;@return The object filed in the outputCache of the associated node with the name of this port, or null if there is no data."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="targets" upperBound="-1"
        eType="#//Input" eOpposite="#//Input/source"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="node" lowerBound="1" eType="#//Node"
        eOpposite="#//Node/outputs"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Port" abstract="true">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="documentation" value="Abstract class for ports."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="port"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="inOut" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TestCase">
    <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
      <details key="documentation" value="Container class that represents a test case."/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nodes" upperBound="-1"
        eType="#//Node" containment="true"/>
  </eClassifiers>
</ecore:EPackage>
