«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/Ecore'»
«EXTENSION xpt::editor::palette::Utils»

«REM»This code generates a NodeTool entry for every specification.«ENDREM»
«AROUND createGroup FOR gmfgen::ToolGroup-»
	«IF title = 'Nodes'»
	«EXPAND xpt::Common::generatedMemberComment('Creates \"' + title + '\" palette tool group')»
	private org.eclipse.gef.palette.PaletteContainer «createMethodName»() {
		org.eclipse.gef.palette.PaletteGroup paletteContainer = new org.eclipse.gef.palette.PaletteGroup(
				de.uni_paderborn.fujaba.muml.testlanguage.diagram.part.Messages.Nodes2Group_title);
		paletteContainer.setId("createNodes2Group"); //$NON-NLS-1$

		java.util.List<String> specs = de.uni_paderborn.fujaba.muml.testlanguage.specification.custom.SpecificationRegistry
				.getSpecificationClasses();
		for (String spec: specs)
		{
			java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType> types = new java.util.ArrayList<org.eclipse.gmf.runtime.emf.type.core.IElementType>(3);
			types.add(de.uni_paderborn.fujaba.muml.testlanguage.diagram.providers.TestLanguageElementTypes.Node_2001);
			types.add(de.uni_paderborn.fujaba.muml.testlanguage.diagram.providers.TestLanguageElementTypes.Input_3001);
			types.add(de.uni_paderborn.fujaba.muml.testlanguage.diagram.providers.TestLanguageElementTypes.Output_3002);
			
			// Create a NodeSpecification-instance of the given type to get the
			// label. *cough* A bit of a hack, but EMF won't allow static
			// members.
			String label = spec;
			try {
				SpecificationFactory fac = de.uni_paderborn.fujaba.muml.testlanguage.specification.SpecificationFactory.eINSTANCE;
				java.lang.reflect.Method creator = fac.getClass().getMethod(
						"create" + spec);
				NodeSpecification concSpec = (NodeSpecification) creator
						.invoke(fac);
				concSpec.initialize();
				label = concSpec.getLabel();
			} catch (Exception e) {
				// If something went wrong, then so be it.
				label = spec;
			}

			// Create the tool entry.
			NodeToolEntry entry = new NodeToolEntry(
					label,
					spec,
					types);
			entry.setId("createNode1"+spec); //$NON-NLS-1$
			entry.setSmallIcon(de.uni_paderborn.fujaba.muml.testlanguage.diagram.providers.TestLanguageElementTypes
					.getImageDescriptor(de.uni_paderborn.fujaba.muml.testlanguage.diagram.providers.TestLanguageElementTypes.Node_2001));
			entry.setLargeIcon(entry.getSmallIcon());
			entry.setSpecificationClassName(spec);
			paletteContainer.add(entry);
		}
		return paletteContainer;
	}
	«ELSE»
		«targetDef.proceed()»
	«ENDIF»
«ENDAROUND»

«REM»Tell the original template to generate ToolEntry classes.«ENDREM»
«AROUND generateToolEntryClasses FOR gmfgen::Palette»«EXPAND xpt::editor::palette::PaletteFactory::generateToolEntryClasses(true)»«ENDAROUND»
«AROUND newEntry(toolVarName : String) FOR gmfgen::ToolEntry»«EXPAND xpt::editor::palette::PaletteFactory::newEntry(toolVarName, true)»«ENDAROUND»

«REM»Define custom ToolEntry class that is able to save a specification class name.«ENDREM»
«AROUND nodeToolEntry FOR gmfgen::Palette»
	«EXPAND xpt::Common::generatedClassComment»
	private static class NodeToolEntry extends org.eclipse.gef.palette.ToolEntry {

		«EXPAND xpt::Common::generatedMemberComment»
		private final «EXPAND CodeStyle::G('java.util.List', 'org.eclipse.gmf.runtime.emf.type.core.IElementType') FOR diagram» elementTypes;

		private String specificationClassName = null;
		
		public void setSpecificationClassName(String className) {
			this.specificationClassName = className;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private NodeToolEntry(String title, String description, «EXPAND CodeStyle::G('java.util.List', 'org.eclipse.gmf.runtime.emf.type.core.IElementType') FOR diagram» elementTypes) {
			super(title, description, null, null);
			this.elementTypes = elementTypes;
		}

		«EXPAND xpt::Common::generatedMemberComment»
		public org.eclipse.gef.Tool createTool() {
			final String specificationClassName = this.specificationClassName;
			org.eclipse.gef.Tool tool = new org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool(elementTypes) {
				@Override
				protected org.eclipse.gef.Request createTargetRequest() {
					org.eclipse.gef.Request req = super.createTargetRequest();
					req.getExtendedData().put("specificationClassName",
							specificationClassName);
					return req;
				}
			};
			tool.setProperties(getToolProperties());
			return tool;
		}
	}
«ENDAROUND»