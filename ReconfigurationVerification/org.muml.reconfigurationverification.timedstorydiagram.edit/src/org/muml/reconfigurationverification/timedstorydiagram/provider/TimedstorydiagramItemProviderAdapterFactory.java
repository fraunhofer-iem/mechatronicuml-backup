/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.muml.reconfigurationverification.timedstorydiagram.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.muml.reconfigurationverification.timedstorydiagram.util.TimedstorydiagramAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TimedstorydiagramItemProviderAdapterFactory extends TimedstorydiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TimedstorydiagramItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.TimedGraphTransformationSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedGraphTransformationSystemItemProvider timedGraphTransformationSystemItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.TimedGraphTransformationSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedGraphTransformationSystemAdapter() {
		if (timedGraphTransformationSystemItemProvider == null) {
			timedGraphTransformationSystemItemProvider = new TimedGraphTransformationSystemItemProvider(this);
		}

		return timedGraphTransformationSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.TimedStoryDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedStoryDiagramItemProvider timedStoryDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.TimedStoryDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedStoryDiagramAdapter() {
		if (timedStoryDiagramItemProvider == null) {
			timedStoryDiagramItemProvider = new TimedStoryDiagramItemProvider(this);
		}

		return timedStoryDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.InvariantStoryDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvariantStoryDiagramItemProvider invariantStoryDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.InvariantStoryDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvariantStoryDiagramAdapter() {
		if (invariantStoryDiagramItemProvider == null) {
			invariantStoryDiagramItemProvider = new InvariantStoryDiagramItemProvider(this);
		}

		return invariantStoryDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceStoryDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockInstanceStoryDiagramItemProvider clockInstanceStoryDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceStoryDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockInstanceStoryDiagramAdapter() {
		if (clockInstanceStoryDiagramItemProvider == null) {
			clockInstanceStoryDiagramItemProvider = new ClockInstanceStoryDiagramItemProvider(this);
		}

		return clockInstanceStoryDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockInstanceItemProvider clockInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockInstanceAdapter() {
		if (clockInstanceItemProvider == null) {
			clockInstanceItemProvider = new ClockInstanceItemProvider(this);
		}

		return clockInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockInstanceConstraintItemProvider clockInstanceConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockInstanceConstraintAdapter() {
		if (clockInstanceConstraintItemProvider == null) {
			clockInstanceConstraintItemProvider = new ClockInstanceConstraintItemProvider(this);
		}

		return clockInstanceConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClockInstanceVariableItemProvider clockInstanceVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.ClockInstanceVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClockInstanceVariableAdapter() {
		if (clockInstanceVariableItemProvider == null) {
			clockInstanceVariableItemProvider = new ClockInstanceVariableItemProvider(this);
		}

		return clockInstanceVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.TimedStoryPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedStoryPatternItemProvider timedStoryPatternItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.TimedStoryPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedStoryPatternAdapter() {
		if (timedStoryPatternItemProvider == null) {
			timedStoryPatternItemProvider = new TimedStoryPatternItemProvider(this);
		}

		return timedStoryPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.reconfigurationverification.timedstorydiagram.TimedActivityNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedActivityNodeItemProvider timedActivityNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.reconfigurationverification.timedstorydiagram.TimedActivityNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedActivityNodeAdapter() {
		if (timedActivityNodeItemProvider == null) {
			timedActivityNodeItemProvider = new TimedActivityNodeItemProvider(this);
		}

		return timedActivityNodeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (timedGraphTransformationSystemItemProvider != null) timedGraphTransformationSystemItemProvider.dispose();
		if (timedStoryDiagramItemProvider != null) timedStoryDiagramItemProvider.dispose();
		if (invariantStoryDiagramItemProvider != null) invariantStoryDiagramItemProvider.dispose();
		if (clockInstanceStoryDiagramItemProvider != null) clockInstanceStoryDiagramItemProvider.dispose();
		if (clockInstanceItemProvider != null) clockInstanceItemProvider.dispose();
		if (clockInstanceConstraintItemProvider != null) clockInstanceConstraintItemProvider.dispose();
		if (clockInstanceVariableItemProvider != null) clockInstanceVariableItemProvider.dispose();
		if (timedStoryPatternItemProvider != null) timedStoryPatternItemProvider.dispose();
		if (timedActivityNodeItemProvider != null) timedActivityNodeItemProvider.dispose();
	}

}
