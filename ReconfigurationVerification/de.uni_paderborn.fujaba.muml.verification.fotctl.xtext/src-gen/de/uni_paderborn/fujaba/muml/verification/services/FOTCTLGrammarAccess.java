/*
* generated by Xtext
*/
package de.uni_paderborn.fujaba.muml.verification.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FOTCTLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FoTCTLSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FoTCTLSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFoTCTLSpecAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNodeLabelPredicatesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNodeLabelPredicatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_1_0 = (RuleCall)cNodeLabelPredicatesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNodeLabelPredicatesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_2_1_0 = (RuleCall)cNodeLabelPredicatesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketControl000aKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEdgeLabelPredicatesKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEdgeLabelPredicatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_1_0 = (RuleCall)cEdgeLabelPredicatesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cEdgeLabelPredicatesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_2_1_0 = (RuleCall)cEdgeLabelPredicatesAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketControl000aKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConstantsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConstantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConstantsConstantSymbolDeclParserRuleCall_4_1_0 = (RuleCall)cConstantsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cConstantsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cConstantsConstantSymbolDeclParserRuleCall_4_2_1_0 = (RuleCall)cConstantsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketControl000aKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cFormulasKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFormulasAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFormulasFoTCTLFormulaParserRuleCall_6_0 = (RuleCall)cFormulasAssignment_6.eContents().get(0);
		
		//FoTCTLSpec:
		//	{FoTCTLSpec} "Declaration\n" ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl (","
		//	nodeLabelPredicates+=NodeLabelPredicateDecl)* "}\n")? ("EdgeLabelPredicates {"
		//	edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)* "}\n")? ("Constants {"
		//	constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")? "Formulas\n" formulas+=FoTCTLFormula+;
		public ParserRule getRule() { return rule; }

		//{FoTCTLSpec} "Declaration\n" ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl (","
		//nodeLabelPredicates+=NodeLabelPredicateDecl)* "}\n")? ("EdgeLabelPredicates {"
		//edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)* "}\n")? ("Constants {"
		//constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")? "Formulas\n" formulas+=FoTCTLFormula+
		public Group getGroup() { return cGroup; }

		//{FoTCTLSpec}
		public Action getFoTCTLSpecAction_0() { return cFoTCTLSpecAction_0; }

		//"Declaration\n"
		public Keyword getDeclarationKeyword_1() { return cDeclarationKeyword_1; }

		//("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl ("," nodeLabelPredicates+=NodeLabelPredicateDecl)*
		//"}\n")?
		public Group getGroup_2() { return cGroup_2; }

		//"NodeLabelPredicates {"
		public Keyword getNodeLabelPredicatesKeyword_2_0() { return cNodeLabelPredicatesKeyword_2_0; }

		//nodeLabelPredicates+=NodeLabelPredicateDecl
		public Assignment getNodeLabelPredicatesAssignment_2_1() { return cNodeLabelPredicatesAssignment_2_1; }

		//NodeLabelPredicateDecl
		public RuleCall getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_1_0() { return cNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_1_0; }

		//("," nodeLabelPredicates+=NodeLabelPredicateDecl)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//nodeLabelPredicates+=NodeLabelPredicateDecl
		public Assignment getNodeLabelPredicatesAssignment_2_2_1() { return cNodeLabelPredicatesAssignment_2_2_1; }

		//NodeLabelPredicateDecl
		public RuleCall getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_2_1_0() { return cNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_2_1_0; }

		//"}\n"
		public Keyword getRightCurlyBracketControl000aKeyword_2_3() { return cRightCurlyBracketControl000aKeyword_2_3; }

		//("EdgeLabelPredicates {" edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)*
		//"}\n")?
		public Group getGroup_3() { return cGroup_3; }

		//"EdgeLabelPredicates {"
		public Keyword getEdgeLabelPredicatesKeyword_3_0() { return cEdgeLabelPredicatesKeyword_3_0; }

		//edgeLabelPredicates+=EdgeLabelPredicateDecl
		public Assignment getEdgeLabelPredicatesAssignment_3_1() { return cEdgeLabelPredicatesAssignment_3_1; }

		//EdgeLabelPredicateDecl
		public RuleCall getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_1_0() { return cEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_1_0; }

		//("," edgeLabelPredicates+=EdgeLabelPredicateDecl)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//edgeLabelPredicates+=EdgeLabelPredicateDecl
		public Assignment getEdgeLabelPredicatesAssignment_3_2_1() { return cEdgeLabelPredicatesAssignment_3_2_1; }

		//EdgeLabelPredicateDecl
		public RuleCall getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_2_1_0() { return cEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_2_1_0; }

		//"}\n"
		public Keyword getRightCurlyBracketControl000aKeyword_3_3() { return cRightCurlyBracketControl000aKeyword_3_3; }

		//("Constants {" constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")?
		public Group getGroup_4() { return cGroup_4; }

		//"Constants {"
		public Keyword getConstantsKeyword_4_0() { return cConstantsKeyword_4_0; }

		//constants+=ConstantSymbolDecl
		public Assignment getConstantsAssignment_4_1() { return cConstantsAssignment_4_1; }

		//ConstantSymbolDecl
		public RuleCall getConstantsConstantSymbolDeclParserRuleCall_4_1_0() { return cConstantsConstantSymbolDeclParserRuleCall_4_1_0; }

		//("," constants+=ConstantSymbolDecl)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//constants+=ConstantSymbolDecl
		public Assignment getConstantsAssignment_4_2_1() { return cConstantsAssignment_4_2_1; }

		//ConstantSymbolDecl
		public RuleCall getConstantsConstantSymbolDeclParserRuleCall_4_2_1_0() { return cConstantsConstantSymbolDeclParserRuleCall_4_2_1_0; }

		//"}\n"
		public Keyword getRightCurlyBracketControl000aKeyword_4_3() { return cRightCurlyBracketControl000aKeyword_4_3; }

		//"Formulas\n"
		public Keyword getFormulasKeyword_5() { return cFormulasKeyword_5; }

		//formulas+=FoTCTLFormula+
		public Assignment getFormulasAssignment_6() { return cFormulasAssignment_6; }

		//FoTCTLFormula
		public RuleCall getFormulasFoTCTLFormulaParserRuleCall_6_0() { return cFormulasFoTCTLFormulaParserRuleCall_6_0; }
	}

	public class FoTCTLFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FoTCTLFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFoTCTLFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFormulaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormulaFormulaDefinitionParserRuleCall_1_0 = (RuleCall)cFormulaAssignment_1.eContents().get(0);
		private final Keyword cSemicolonControl000aKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FoTCTLFormula:
		//	{FoTCTLFormula} formula=FormulaDefinition ";\n";
		public ParserRule getRule() { return rule; }

		//{FoTCTLFormula} formula=FormulaDefinition ";\n"
		public Group getGroup() { return cGroup; }

		//{FoTCTLFormula}
		public Action getFoTCTLFormulaAction_0() { return cFoTCTLFormulaAction_0; }

		//formula=FormulaDefinition
		public Assignment getFormulaAssignment_1() { return cFormulaAssignment_1; }

		//FormulaDefinition
		public RuleCall getFormulaFormulaDefinitionParserRuleCall_1_0() { return cFormulaFormulaDefinitionParserRuleCall_1_0; }

		//";\n"
		public Keyword getSemicolonControl000aKeyword_2() { return cSemicolonControl000aKeyword_2; }
	}

	public class FormulaDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormulaDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtomicFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryFormulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FormulaDefinition returns tctl::FormulaDefinition:
		//	AtomicFormula | UnaryFormula | BinaryFormula;
		public ParserRule getRule() { return rule; }

		//AtomicFormula | UnaryFormula | BinaryFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtomicFormula
		public RuleCall getAtomicFormulaParserRuleCall_0() { return cAtomicFormulaParserRuleCall_0; }

		//UnaryFormula
		public RuleCall getUnaryFormulaParserRuleCall_1() { return cUnaryFormulaParserRuleCall_1; }

		//BinaryFormula
		public RuleCall getBinaryFormulaParserRuleCall_2() { return cBinaryFormulaParserRuleCall_2; }
	}

	public class NodeLabelPredicateDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeLabelPredicateDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeLabelPredicateDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameNode_predicate_nameTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NodeLabelPredicateDecl:
		//	{NodeLabelPredicateDecl} name=node_predicate_name;
		public ParserRule getRule() { return rule; }

		//{NodeLabelPredicateDecl} name=node_predicate_name
		public Group getGroup() { return cGroup; }

		//{NodeLabelPredicateDecl}
		public Action getNodeLabelPredicateDeclAction_0() { return cNodeLabelPredicateDeclAction_0; }

		//name=node_predicate_name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//node_predicate_name
		public RuleCall getNameNode_predicate_nameTerminalRuleCall_1_0() { return cNameNode_predicate_nameTerminalRuleCall_1_0; }
	}

	public class EdgeLabelPredicateDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeLabelPredicateDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeLabelPredicateDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEdge_predicate_nameTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EdgeLabelPredicateDecl:
		//	{EdgeLabelPredicateDecl} name=edge_predicate_name;
		public ParserRule getRule() { return rule; }

		//{EdgeLabelPredicateDecl} name=edge_predicate_name
		public Group getGroup() { return cGroup; }

		//{EdgeLabelPredicateDecl}
		public Action getEdgeLabelPredicateDeclAction_0() { return cEdgeLabelPredicateDeclAction_0; }

		//name=edge_predicate_name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//edge_predicate_name
		public RuleCall getNameEdge_predicate_nameTerminalRuleCall_1_0() { return cNameEdge_predicate_nameTerminalRuleCall_1_0; }
	}

	public class ConstantSymbolDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantSymbolDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantSymbolDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameConstant_nameTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConstantSymbolDecl:
		//	{ConstantSymbolDecl} name=constant_name;
		public ParserRule getRule() { return rule; }

		//{ConstantSymbolDecl} name=constant_name
		public Group getGroup() { return cGroup; }

		//{ConstantSymbolDecl}
		public Action getConstantSymbolDeclAction_0() { return cConstantSymbolDeclAction_0; }

		//name=constant_name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//constant_name
		public RuleCall getNameConstant_nameTerminalRuleCall_1_0() { return cNameConstant_nameTerminalRuleCall_1_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationConstantSymbolDeclCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationConstantSymbolDeclConstant_nameTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationConstantSymbolDeclCrossReference_1_0.eContents().get(1);
		
		//Constant:
		//	{Constant} declaration=[ConstantSymbolDecl|constant_name];
		public ParserRule getRule() { return rule; }

		//{Constant} declaration=[ConstantSymbolDecl|constant_name]
		public Group getGroup() { return cGroup; }

		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }

		//declaration=[ConstantSymbolDecl|constant_name]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[ConstantSymbolDecl|constant_name]
		public CrossReference getDeclarationConstantSymbolDeclCrossReference_1_0() { return cDeclarationConstantSymbolDeclCrossReference_1_0; }

		//constant_name
		public RuleCall getDeclarationConstantSymbolDeclConstant_nameTerminalRuleCall_1_0_1() { return cDeclarationConstantSymbolDeclConstant_nameTerminalRuleCall_1_0_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationQuantifiedFormulaCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationQuantifiedFormulaVariable_nameTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationQuantifiedFormulaCrossReference_1_0.eContents().get(1);
		
		//Variable:
		//	{Variable} declaration=[QuantifiedFormula|variable_name];
		public ParserRule getRule() { return rule; }

		//{Variable} declaration=[QuantifiedFormula|variable_name]
		public Group getGroup() { return cGroup; }

		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//declaration=[QuantifiedFormula|variable_name]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[QuantifiedFormula|variable_name]
		public CrossReference getDeclarationQuantifiedFormulaCrossReference_1_0() { return cDeclarationQuantifiedFormulaCrossReference_1_0; }

		//variable_name
		public RuleCall getDeclarationQuantifiedFormulaVariable_nameTerminalRuleCall_1_0_1() { return cDeclarationQuantifiedFormulaVariable_nameTerminalRuleCall_1_0_1; }
	}

	public class UnaryFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryTemporalFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQuantifiedFormulaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//UnaryFormula returns tctl::UnaryFormula:
		//	NotFormula | UnaryTemporalFormula | QuantifiedFormula;
		public ParserRule getRule() { return rule; }

		//NotFormula | UnaryTemporalFormula | QuantifiedFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//NotFormula
		public RuleCall getNotFormulaParserRuleCall_0() { return cNotFormulaParserRuleCall_0; }

		//UnaryTemporalFormula
		public RuleCall getUnaryTemporalFormulaParserRuleCall_1() { return cUnaryTemporalFormulaParserRuleCall_1; }

		//QuantifiedFormula
		public RuleCall getQuantifiedFormulaParserRuleCall_2() { return cQuantifiedFormulaParserRuleCall_2; }
	}

	public class BinaryFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryLogicFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryTemporalFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BinaryFormula returns tctl::BinaryFormula:
		//	BinaryLogicFormula | BinaryTemporalFormula;
		public ParserRule getRule() { return rule; }

		//BinaryLogicFormula | BinaryTemporalFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryLogicFormula
		public RuleCall getBinaryLogicFormulaParserRuleCall_0() { return cBinaryLogicFormulaParserRuleCall_0; }

		//BinaryTemporalFormula
		public RuleCall getBinaryTemporalFormulaParserRuleCall_1() { return cBinaryTemporalFormulaParserRuleCall_1; }
	}

	public class AtomicFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeLabelPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEdgeLabelPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicFormula returns tctl::AtomicFormula:
		//	NodeLabelPredicate | EdgeLabelPredicate;
		public ParserRule getRule() { return rule; }

		//NodeLabelPredicate | EdgeLabelPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//NodeLabelPredicate
		public RuleCall getNodeLabelPredicateParserRuleCall_0() { return cNodeLabelPredicateParserRuleCall_0; }

		//EdgeLabelPredicate
		public RuleCall getEdgeLabelPredicateParserRuleCall_1() { return cEdgeLabelPredicateParserRuleCall_1; }
	}

	public class NodeLabelPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeLabelPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNodeLabelPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationNodeLabelPredicateDeclCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationNodeLabelPredicateDeclNode_predicate_nameTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationNodeLabelPredicateDeclCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTermTermParserRuleCall_3_0 = (RuleCall)cTermAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeLabelPredicate:
		//	{NodeLabelPredicate} declaration=[NodeLabelPredicateDecl|node_predicate_name] "(" term=Term ")";
		public ParserRule getRule() { return rule; }

		//{NodeLabelPredicate} declaration=[NodeLabelPredicateDecl|node_predicate_name] "(" term=Term ")"
		public Group getGroup() { return cGroup; }

		//{NodeLabelPredicate}
		public Action getNodeLabelPredicateAction_0() { return cNodeLabelPredicateAction_0; }

		//declaration=[NodeLabelPredicateDecl|node_predicate_name]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[NodeLabelPredicateDecl|node_predicate_name]
		public CrossReference getDeclarationNodeLabelPredicateDeclCrossReference_1_0() { return cDeclarationNodeLabelPredicateDeclCrossReference_1_0; }

		//node_predicate_name
		public RuleCall getDeclarationNodeLabelPredicateDeclNode_predicate_nameTerminalRuleCall_1_0_1() { return cDeclarationNodeLabelPredicateDeclNode_predicate_nameTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//term=Term
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }

		//Term
		public RuleCall getTermTermParserRuleCall_3_0() { return cTermTermParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EdgeLabelPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeLabelPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEdgeLabelPredicateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationEdgeLabelPredicateDeclCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationEdgeLabelPredicateDeclEdge_predicate_nameTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationEdgeLabelPredicateDeclCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTermTermParserRuleCall_3_0 = (RuleCall)cTermAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSecondTermAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSecondTermTermParserRuleCall_5_0 = (RuleCall)cSecondTermAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EdgeLabelPredicate:
		//	{EdgeLabelPredicate} declaration=[EdgeLabelPredicateDecl|edge_predicate_name] "(" term=Term "," secondTerm=Term ")";
		public ParserRule getRule() { return rule; }

		//{EdgeLabelPredicate} declaration=[EdgeLabelPredicateDecl|edge_predicate_name] "(" term=Term "," secondTerm=Term ")"
		public Group getGroup() { return cGroup; }

		//{EdgeLabelPredicate}
		public Action getEdgeLabelPredicateAction_0() { return cEdgeLabelPredicateAction_0; }

		//declaration=[EdgeLabelPredicateDecl|edge_predicate_name]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[EdgeLabelPredicateDecl|edge_predicate_name]
		public CrossReference getDeclarationEdgeLabelPredicateDeclCrossReference_1_0() { return cDeclarationEdgeLabelPredicateDeclCrossReference_1_0; }

		//edge_predicate_name
		public RuleCall getDeclarationEdgeLabelPredicateDeclEdge_predicate_nameTerminalRuleCall_1_0_1() { return cDeclarationEdgeLabelPredicateDeclEdge_predicate_nameTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//term=Term
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }

		//Term
		public RuleCall getTermTermParserRuleCall_3_0() { return cTermTermParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//secondTerm=Term
		public Assignment getSecondTermAssignment_5() { return cSecondTermAssignment_5; }

		//Term
		public RuleCall getSecondTermTermParserRuleCall_5_0() { return cSecondTermTermParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class QuantifiedFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuantifiedFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuantifiedFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cQuantifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQuantifierQuantifierEnumRuleCall_1_0 = (RuleCall)cQuantifierAssignment_1.eContents().get(0);
		private final Keyword cSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameVariable_nameTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSpaceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSubformulaAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubformulaFormulaDefinitionParserRuleCall_5_0 = (RuleCall)cSubformulaAssignment_5.eContents().get(0);
		
		//QuantifiedFormula:
		//	{QuantifiedFormula} quantifier=Quantifier " " name=variable_name
		//	//' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
		// " " subformula=FormulaDefinition;
		public ParserRule getRule() { return rule; }

		//{QuantifiedFormula} quantifier=Quantifier " " name=variable_name
		////' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
		// " " subformula=FormulaDefinition
		public Group getGroup() { return cGroup; }

		//{QuantifiedFormula}
		public Action getQuantifiedFormulaAction_0() { return cQuantifiedFormulaAction_0; }

		//quantifier=Quantifier
		public Assignment getQuantifierAssignment_1() { return cQuantifierAssignment_1; }

		//Quantifier
		public RuleCall getQuantifierQuantifierEnumRuleCall_1_0() { return cQuantifierQuantifierEnumRuleCall_1_0; }

		//" "
		public Keyword getSpaceKeyword_2() { return cSpaceKeyword_2; }

		//name=variable_name
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//variable_name
		public RuleCall getNameVariable_nameTerminalRuleCall_3_0() { return cNameVariable_nameTerminalRuleCall_3_0; }

		////' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
		// " "
		public Keyword getSpaceKeyword_4() { return cSpaceKeyword_4; }

		//subformula=FormulaDefinition
		public Assignment getSubformulaAssignment_5() { return cSubformulaAssignment_5; }

		//FormulaDefinition
		public RuleCall getSubformulaFormulaDefinitionParserRuleCall_5_0() { return cSubformulaFormulaDefinitionParserRuleCall_5_0; }
	}

	public class TCTLFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TCTLFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTCTLFormulaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFormulaAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormulaFormulaDefinitionParserRuleCall_0_1_0 = (RuleCall)cFormulaAssignment_0_1.eContents().get(0);
		private final RuleCall cFoTCTLFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TCTLFormula returns tctl::TCTLFormula:
		//	{tctl::TCTLFormula} formula=FormulaDefinition | FoTCTLFormula;
		public ParserRule getRule() { return rule; }

		//{tctl::TCTLFormula} formula=FormulaDefinition | FoTCTLFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//{tctl::TCTLFormula} formula=FormulaDefinition
		public Group getGroup_0() { return cGroup_0; }

		//{tctl::TCTLFormula}
		public Action getTCTLFormulaAction_0_0() { return cTCTLFormulaAction_0_0; }

		//formula=FormulaDefinition
		public Assignment getFormulaAssignment_0_1() { return cFormulaAssignment_0_1; }

		//FormulaDefinition
		public RuleCall getFormulaFormulaDefinitionParserRuleCall_0_1_0() { return cFormulaFormulaDefinitionParserRuleCall_0_1_0; }

		//FoTCTLFormula
		public RuleCall getFoTCTLFormulaParserRuleCall_1() { return cFoTCTLFormulaParserRuleCall_1; }
	}

	public class NotFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNOTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNotFormulaAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cSubformulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubformulaFormulaDefinitionParserRuleCall_2_0 = (RuleCall)cSubformulaAssignment_2.eContents().get(0);
		
		//NotFormula returns tctl::NotFormula:
		//	"NOT " {tctl::NotFormula} subformula=FormulaDefinition;
		public ParserRule getRule() { return rule; }

		//"NOT " {tctl::NotFormula} subformula=FormulaDefinition
		public Group getGroup() { return cGroup; }

		//"NOT "
		public Keyword getNOTKeyword_0() { return cNOTKeyword_0; }

		//{tctl::NotFormula}
		public Action getNotFormulaAction_1() { return cNotFormulaAction_1; }

		//subformula=FormulaDefinition
		public Assignment getSubformulaAssignment_2() { return cSubformulaAssignment_2; }

		//FormulaDefinition
		public RuleCall getSubformulaFormulaDefinitionParserRuleCall_2_0() { return cSubformulaFormulaDefinitionParserRuleCall_2_0; }
	}

	public class TemporalFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalFormula");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryTemporalFormulaParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryTemporalFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TemporalFormula returns tctl::TemporalFormula:
		//	BinaryTemporalFormula | UnaryTemporalFormula;
		public ParserRule getRule() { return rule; }

		//BinaryTemporalFormula | UnaryTemporalFormula
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryTemporalFormula
		public RuleCall getBinaryTemporalFormulaParserRuleCall_0() { return cBinaryTemporalFormulaParserRuleCall_0; }

		//UnaryTemporalFormula
		public RuleCall getUnaryTemporalFormulaParserRuleCall_1() { return cUnaryTemporalFormulaParserRuleCall_1; }
	}

	public class UnaryTemporalFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryTemporalFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryTemporalFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTemporalOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTemporalOperatorTemporalOperatorEnumRuleCall_1_0 = (RuleCall)cTemporalOperatorAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComparisonOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComparisonOperatorComparisonOperatorEnumRuleCall_3_0 = (RuleCall)cComparisonOperatorAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueINTTerminalRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketSpaceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubformulaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubformulaFormulaDefinitionParserRuleCall_6_0 = (RuleCall)cSubformulaAssignment_6.eContents().get(0);
		
		//UnaryTemporalFormula returns tctl::UnaryTemporalFormula:
		//	{tctl::UnaryTemporalFormula} temporalOperator=TemporalOperator "[" comparisonOperator=ComparisonOperator value=INT
		//	"] " subformula=FormulaDefinition;
		public ParserRule getRule() { return rule; }

		//{tctl::UnaryTemporalFormula} temporalOperator=TemporalOperator "[" comparisonOperator=ComparisonOperator value=INT "] "
		//subformula=FormulaDefinition
		public Group getGroup() { return cGroup; }

		//{tctl::UnaryTemporalFormula}
		public Action getUnaryTemporalFormulaAction_0() { return cUnaryTemporalFormulaAction_0; }

		//temporalOperator=TemporalOperator
		public Assignment getTemporalOperatorAssignment_1() { return cTemporalOperatorAssignment_1; }

		//TemporalOperator
		public RuleCall getTemporalOperatorTemporalOperatorEnumRuleCall_1_0() { return cTemporalOperatorTemporalOperatorEnumRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_3() { return cComparisonOperatorAssignment_3; }

		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorEnumRuleCall_3_0() { return cComparisonOperatorComparisonOperatorEnumRuleCall_3_0; }

		//value=INT
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_4_0() { return cValueINTTerminalRuleCall_4_0; }

		//"] "
		public Keyword getRightSquareBracketSpaceKeyword_5() { return cRightSquareBracketSpaceKeyword_5; }

		//subformula=FormulaDefinition
		public Assignment getSubformulaAssignment_6() { return cSubformulaAssignment_6; }

		//FormulaDefinition
		public RuleCall getSubformulaFormulaDefinitionParserRuleCall_6_0() { return cSubformulaFormulaDefinitionParserRuleCall_6_0; }
	}

	public class BinaryTemporalFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryTemporalFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryTemporalFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftSubformulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftSubformulaFormulaDefinitionParserRuleCall_2_0 = (RuleCall)cLeftSubformulaAssignment_2.eContents().get(0);
		private final Keyword cSpaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTemporalOperatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTemporalOperatorTemporalOperatorEnumRuleCall_4_0 = (RuleCall)cTemporalOperatorAssignment_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cComparisonOperatorAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cComparisonOperatorComparisonOperatorEnumRuleCall_6_0 = (RuleCall)cComparisonOperatorAssignment_6.eContents().get(0);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueINTTerminalRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRightSubformulaAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRightSubformulaFormulaDefinitionParserRuleCall_9_0 = (RuleCall)cRightSubformulaAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//BinaryTemporalFormula returns tctl::BinaryTemporalFormula:
		//	{tctl::BinaryTemporalFormula} "(" leftSubformula=FormulaDefinition " " temporalOperator=TemporalOperator "["
		//	comparisonOperator=ComparisonOperator value=INT "] " rightSubformula=FormulaDefinition ")";
		public ParserRule getRule() { return rule; }

		//{tctl::BinaryTemporalFormula} "(" leftSubformula=FormulaDefinition " " temporalOperator=TemporalOperator "["
		//comparisonOperator=ComparisonOperator value=INT "] " rightSubformula=FormulaDefinition ")"
		public Group getGroup() { return cGroup; }

		//{tctl::BinaryTemporalFormula}
		public Action getBinaryTemporalFormulaAction_0() { return cBinaryTemporalFormulaAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//leftSubformula=FormulaDefinition
		public Assignment getLeftSubformulaAssignment_2() { return cLeftSubformulaAssignment_2; }

		//FormulaDefinition
		public RuleCall getLeftSubformulaFormulaDefinitionParserRuleCall_2_0() { return cLeftSubformulaFormulaDefinitionParserRuleCall_2_0; }

		//" "
		public Keyword getSpaceKeyword_3() { return cSpaceKeyword_3; }

		//temporalOperator=TemporalOperator
		public Assignment getTemporalOperatorAssignment_4() { return cTemporalOperatorAssignment_4; }

		//TemporalOperator
		public RuleCall getTemporalOperatorTemporalOperatorEnumRuleCall_4_0() { return cTemporalOperatorTemporalOperatorEnumRuleCall_4_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }

		//comparisonOperator=ComparisonOperator
		public Assignment getComparisonOperatorAssignment_6() { return cComparisonOperatorAssignment_6; }

		//ComparisonOperator
		public RuleCall getComparisonOperatorComparisonOperatorEnumRuleCall_6_0() { return cComparisonOperatorComparisonOperatorEnumRuleCall_6_0; }

		//value=INT
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_7_0() { return cValueINTTerminalRuleCall_7_0; }

		//"] "
		public Keyword getRightSquareBracketSpaceKeyword_8() { return cRightSquareBracketSpaceKeyword_8; }

		//rightSubformula=FormulaDefinition
		public Assignment getRightSubformulaAssignment_9() { return cRightSubformulaAssignment_9; }

		//FormulaDefinition
		public RuleCall getRightSubformulaFormulaDefinitionParserRuleCall_9_0() { return cRightSubformulaFormulaDefinitionParserRuleCall_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}

	public class BinaryLogicFormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryLogicFormula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryLogicFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftSubformulaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftSubformulaFormulaDefinitionParserRuleCall_2_0 = (RuleCall)cLeftSubformulaAssignment_2.eContents().get(0);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorBinaryLogicOperatorEnumRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Assignment cRightSubformulaAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRightSubformulaFormulaDefinitionParserRuleCall_4_0 = (RuleCall)cRightSubformulaAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BinaryLogicFormula returns tctl::BinaryLogicFormula:
		//	{tctl::BinaryLogicFormula} "(" leftSubformula=FormulaDefinition operator=BinaryLogicOperator
		//	rightSubformula=FormulaDefinition ")";
		public ParserRule getRule() { return rule; }

		//{tctl::BinaryLogicFormula} "(" leftSubformula=FormulaDefinition operator=BinaryLogicOperator
		//rightSubformula=FormulaDefinition ")"
		public Group getGroup() { return cGroup; }

		//{tctl::BinaryLogicFormula}
		public Action getBinaryLogicFormulaAction_0() { return cBinaryLogicFormulaAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//leftSubformula=FormulaDefinition
		public Assignment getLeftSubformulaAssignment_2() { return cLeftSubformulaAssignment_2; }

		//FormulaDefinition
		public RuleCall getLeftSubformulaFormulaDefinitionParserRuleCall_2_0() { return cLeftSubformulaFormulaDefinitionParserRuleCall_2_0; }

		//operator=BinaryLogicOperator
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//BinaryLogicOperator
		public RuleCall getOperatorBinaryLogicOperatorEnumRuleCall_3_0() { return cOperatorBinaryLogicOperatorEnumRuleCall_3_0; }

		//rightSubformula=FormulaDefinition
		public Assignment getRightSubformulaAssignment_4() { return cRightSubformulaAssignment_4; }

		//FormulaDefinition
		public RuleCall getRightSubformulaFormulaDefinitionParserRuleCall_4_0() { return cRightSubformulaFormulaDefinitionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtomicPropositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Term returns tctl::Term:
		//	Variable | Constant | AtomicProposition;
		public ParserRule getRule() { return rule; }

		//Variable | Constant | AtomicProposition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Variable
		public RuleCall getVariableParserRuleCall_0() { return cVariableParserRuleCall_0; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//AtomicProposition
		public RuleCall getAtomicPropositionParserRuleCall_2() { return cAtomicPropositionParserRuleCall_2; }
	}

	public class AtomicPropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicProposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtomicPropositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVariable_nameTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//AtomicProposition returns tctl::AtomicProposition:
		//	{tctl::AtomicProposition} name=variable_name;
		public ParserRule getRule() { return rule; }

		//{tctl::AtomicProposition} name=variable_name
		public Group getGroup() { return cGroup; }

		//{tctl::AtomicProposition}
		public Action getAtomicPropositionAction_0() { return cAtomicPropositionAction_0; }

		//name=variable_name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//variable_name
		public RuleCall getNameVariable_nameTerminalRuleCall_1_0() { return cNameVariable_nameTerminalRuleCall_1_0; }
	}
	
	
	public class QuantifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Quantifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEXISTSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEXISTSExistsKeyword_0_0 = (Keyword)cEXISTSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFORALLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFORALLForallKeyword_1_0 = (Keyword)cFORALLEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Quantifier:
		//	EXISTS="exists" | FORALL="forall";
		public EnumRule getRule() { return rule; }

		//EXISTS="exists" | FORALL="forall"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EXISTS="exists"
		public EnumLiteralDeclaration getEXISTSEnumLiteralDeclaration_0() { return cEXISTSEnumLiteralDeclaration_0; }

		//"exists"
		public Keyword getEXISTSExistsKeyword_0_0() { return cEXISTSExistsKeyword_0_0; }

		//FORALL="forall"
		public EnumLiteralDeclaration getFORALLEnumLiteralDeclaration_1() { return cFORALLEnumLiteralDeclaration_1; }

		//"forall"
		public Keyword getFORALLForallKeyword_1_0() { return cFORALLForallKeyword_1_0; }
	}

	public class BinaryLogicOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryLogicOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDSpaceAmpersandSpaceKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUIVSpaceLessThanSignEqualsSignGreaterThanSignSpaceKeyword_1_0 = (Keyword)cEQUIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cIMPLYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cIMPLYSpaceEqualsSignGreaterThanSignSpaceKeyword_2_0 = (Keyword)cIMPLYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORSpaceVerticalLineSpaceKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cXORSpaceCircumflexAccentSpaceKeyword_4_0 = (Keyword)cXOREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum BinaryLogicOperator returns tctl::BinaryLogicOperator:
		//	AND=" & " | EQUIV=" <=> " | IMPLY=" => " | OR=" | " | XOR=" ^ ";
		public EnumRule getRule() { return rule; }

		//AND=" & " | EQUIV=" <=> " | IMPLY=" => " | OR=" | " | XOR=" ^ "
		public Alternatives getAlternatives() { return cAlternatives; }

		//AND=" & "
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }

		//" & "
		public Keyword getANDSpaceAmpersandSpaceKeyword_0_0() { return cANDSpaceAmpersandSpaceKeyword_0_0; }

		//EQUIV=" <=> "
		public EnumLiteralDeclaration getEQUIVEnumLiteralDeclaration_1() { return cEQUIVEnumLiteralDeclaration_1; }

		//" <=> "
		public Keyword getEQUIVSpaceLessThanSignEqualsSignGreaterThanSignSpaceKeyword_1_0() { return cEQUIVSpaceLessThanSignEqualsSignGreaterThanSignSpaceKeyword_1_0; }

		//IMPLY=" => "
		public EnumLiteralDeclaration getIMPLYEnumLiteralDeclaration_2() { return cIMPLYEnumLiteralDeclaration_2; }

		//" => "
		public Keyword getIMPLYSpaceEqualsSignGreaterThanSignSpaceKeyword_2_0() { return cIMPLYSpaceEqualsSignGreaterThanSignSpaceKeyword_2_0; }

		//OR=" | "
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }

		//" | "
		public Keyword getORSpaceVerticalLineSpaceKeyword_3_0() { return cORSpaceVerticalLineSpaceKeyword_3_0; }

		//XOR=" ^ "
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_4() { return cXOREnumLiteralDeclaration_4; }

		//" ^ "
		public Keyword getXORSpaceCircumflexAccentSpaceKeyword_4_0() { return cXORSpaceCircumflexAccentSpaceKeyword_4_0; }
	}

	public class ComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSpaceEqualsSignSpaceKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERSpaceGreaterThanSignSpaceKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_OR_EQUALSpaceGreaterThanSignEqualsSignSpaceKeyword_2_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLESSSpaceLessThanSignSpaceKeyword_3_0 = (Keyword)cLESSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESS_OR_EQUALSpaceLessThanSignEqualsSignSpaceKeyword_4_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOperator returns tctl::ComparisonOperator:
		//	EQUAL=" = " | GREATER=" > " | GREATER_OR_EQUAL=" >= " | LESS=" < " | LESS_OR_EQUAL=" <= ";
		public EnumRule getRule() { return rule; }

		//EQUAL=" = " | GREATER=" > " | GREATER_OR_EQUAL=" >= " | LESS=" < " | LESS_OR_EQUAL=" <= "
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUAL=" = "
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }

		//" = "
		public Keyword getEQUALSpaceEqualsSignSpaceKeyword_0_0() { return cEQUALSpaceEqualsSignSpaceKeyword_0_0; }

		//GREATER=" > "
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }

		//" > "
		public Keyword getGREATERSpaceGreaterThanSignSpaceKeyword_1_0() { return cGREATERSpaceGreaterThanSignSpaceKeyword_1_0; }

		//GREATER_OR_EQUAL=" >= "
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_2() { return cGREATER_OR_EQUALEnumLiteralDeclaration_2; }

		//" >= "
		public Keyword getGREATER_OR_EQUALSpaceGreaterThanSignEqualsSignSpaceKeyword_2_0() { return cGREATER_OR_EQUALSpaceGreaterThanSignEqualsSignSpaceKeyword_2_0; }

		//LESS=" < "
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_3() { return cLESSEnumLiteralDeclaration_3; }

		//" < "
		public Keyword getLESSSpaceLessThanSignSpaceKeyword_3_0() { return cLESSSpaceLessThanSignSpaceKeyword_3_0; }

		//LESS_OR_EQUAL=" <= "
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_4() { return cLESS_OR_EQUALEnumLiteralDeclaration_4; }

		//" <= "
		public Keyword getLESS_OR_EQUALSpaceLessThanSignEqualsSignSpaceKeyword_4_0() { return cLESS_OR_EQUALSpaceLessThanSignEqualsSignSpaceKeyword_4_0; }
	}

	public class TemporalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TemporalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAFEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAFAFKeyword_0_0 = (Keyword)cAFEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAGAGKeyword_1_0 = (Keyword)cAGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAUAUKeyword_2_0 = (Keyword)cAUEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEFEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEFEFKeyword_3_0 = (Keyword)cEFEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEGEGKeyword_4_0 = (Keyword)cEGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cEUEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cEUEUKeyword_5_0 = (Keyword)cEUEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TemporalOperator returns tctl::TemporalOperator:
		//	AF | AG | AU | EF | EG | EU;
		public EnumRule getRule() { return rule; }

		//AF | AG | AU | EF | EG | EU
		public Alternatives getAlternatives() { return cAlternatives; }

		//AF
		public EnumLiteralDeclaration getAFEnumLiteralDeclaration_0() { return cAFEnumLiteralDeclaration_0; }

		//"AF"
		public Keyword getAFAFKeyword_0_0() { return cAFAFKeyword_0_0; }

		//AG
		public EnumLiteralDeclaration getAGEnumLiteralDeclaration_1() { return cAGEnumLiteralDeclaration_1; }

		//"AG"
		public Keyword getAGAGKeyword_1_0() { return cAGAGKeyword_1_0; }

		//AU
		public EnumLiteralDeclaration getAUEnumLiteralDeclaration_2() { return cAUEnumLiteralDeclaration_2; }

		//"AU"
		public Keyword getAUAUKeyword_2_0() { return cAUAUKeyword_2_0; }

		//EF
		public EnumLiteralDeclaration getEFEnumLiteralDeclaration_3() { return cEFEnumLiteralDeclaration_3; }

		//"EF"
		public Keyword getEFEFKeyword_3_0() { return cEFEFKeyword_3_0; }

		//EG
		public EnumLiteralDeclaration getEGEnumLiteralDeclaration_4() { return cEGEnumLiteralDeclaration_4; }

		//"EG"
		public Keyword getEGEGKeyword_4_0() { return cEGEGKeyword_4_0; }

		//EU
		public EnumLiteralDeclaration getEUEnumLiteralDeclaration_5() { return cEUEnumLiteralDeclaration_5; }

		//"EU"
		public Keyword getEUEUKeyword_5_0() { return cEUEUKeyword_5_0; }
	}
	
	private final FoTCTLSpecElements pFoTCTLSpec;
	private final FoTCTLFormulaElements pFoTCTLFormula;
	private final FormulaDefinitionElements pFormulaDefinition;
	private final NodeLabelPredicateDeclElements pNodeLabelPredicateDecl;
	private final EdgeLabelPredicateDeclElements pEdgeLabelPredicateDecl;
	private final ConstantSymbolDeclElements pConstantSymbolDecl;
	private final ConstantElements pConstant;
	private final VariableElements pVariable;
	private final UnaryFormulaElements pUnaryFormula;
	private final BinaryFormulaElements pBinaryFormula;
	private final AtomicFormulaElements pAtomicFormula;
	private final NodeLabelPredicateElements pNodeLabelPredicate;
	private final EdgeLabelPredicateElements pEdgeLabelPredicate;
	private final QuantifiedFormulaElements pQuantifiedFormula;
	private final QuantifierElements unknownRuleQuantifier;
	private final TCTLFormulaElements pTCTLFormula;
	private final NotFormulaElements pNotFormula;
	private final TemporalFormulaElements pTemporalFormula;
	private final UnaryTemporalFormulaElements pUnaryTemporalFormula;
	private final BinaryTemporalFormulaElements pBinaryTemporalFormula;
	private final BinaryLogicFormulaElements pBinaryLogicFormula;
	private final BinaryLogicOperatorElements unknownRuleBinaryLogicOperator;
	private final TermElements pTerm;
	private final AtomicPropositionElements pAtomicProposition;
	private final ComparisonOperatorElements unknownRuleComparisonOperator;
	private final TemporalOperatorElements unknownRuleTemporalOperator;
	private final TerminalRule tNode_predicate_name;
	private final TerminalRule tEdge_predicate_name;
	private final TerminalRule tVariable_name;
	private final TerminalRule tConstant_name;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FOTCTLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFoTCTLSpec = new FoTCTLSpecElements();
		this.pFoTCTLFormula = new FoTCTLFormulaElements();
		this.pFormulaDefinition = new FormulaDefinitionElements();
		this.pNodeLabelPredicateDecl = new NodeLabelPredicateDeclElements();
		this.pEdgeLabelPredicateDecl = new EdgeLabelPredicateDeclElements();
		this.pConstantSymbolDecl = new ConstantSymbolDeclElements();
		this.pConstant = new ConstantElements();
		this.pVariable = new VariableElements();
		this.pUnaryFormula = new UnaryFormulaElements();
		this.pBinaryFormula = new BinaryFormulaElements();
		this.pAtomicFormula = new AtomicFormulaElements();
		this.pNodeLabelPredicate = new NodeLabelPredicateElements();
		this.pEdgeLabelPredicate = new EdgeLabelPredicateElements();
		this.pQuantifiedFormula = new QuantifiedFormulaElements();
		this.unknownRuleQuantifier = new QuantifierElements();
		this.pTCTLFormula = new TCTLFormulaElements();
		this.pNotFormula = new NotFormulaElements();
		this.pTemporalFormula = new TemporalFormulaElements();
		this.pUnaryTemporalFormula = new UnaryTemporalFormulaElements();
		this.pBinaryTemporalFormula = new BinaryTemporalFormulaElements();
		this.pBinaryLogicFormula = new BinaryLogicFormulaElements();
		this.unknownRuleBinaryLogicOperator = new BinaryLogicOperatorElements();
		this.pTerm = new TermElements();
		this.pAtomicProposition = new AtomicPropositionElements();
		this.unknownRuleComparisonOperator = new ComparisonOperatorElements();
		this.unknownRuleTemporalOperator = new TemporalOperatorElements();
		this.tNode_predicate_name = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "node_predicate_name");
		this.tEdge_predicate_name = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edge_predicate_name");
		this.tVariable_name = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "variable_name");
		this.tConstant_name = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "constant_name");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_paderborn.fujaba.muml.verification.FOTCTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FoTCTLSpec:
	//	{FoTCTLSpec} "Declaration\n" ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl (","
	//	nodeLabelPredicates+=NodeLabelPredicateDecl)* "}\n")? ("EdgeLabelPredicates {"
	//	edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)* "}\n")? ("Constants {"
	//	constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")? "Formulas\n" formulas+=FoTCTLFormula+;
	public FoTCTLSpecElements getFoTCTLSpecAccess() {
		return pFoTCTLSpec;
	}
	
	public ParserRule getFoTCTLSpecRule() {
		return getFoTCTLSpecAccess().getRule();
	}

	//FoTCTLFormula:
	//	{FoTCTLFormula} formula=FormulaDefinition ";\n";
	public FoTCTLFormulaElements getFoTCTLFormulaAccess() {
		return pFoTCTLFormula;
	}
	
	public ParserRule getFoTCTLFormulaRule() {
		return getFoTCTLFormulaAccess().getRule();
	}

	//FormulaDefinition returns tctl::FormulaDefinition:
	//	AtomicFormula | UnaryFormula | BinaryFormula;
	public FormulaDefinitionElements getFormulaDefinitionAccess() {
		return pFormulaDefinition;
	}
	
	public ParserRule getFormulaDefinitionRule() {
		return getFormulaDefinitionAccess().getRule();
	}

	//NodeLabelPredicateDecl:
	//	{NodeLabelPredicateDecl} name=node_predicate_name;
	public NodeLabelPredicateDeclElements getNodeLabelPredicateDeclAccess() {
		return pNodeLabelPredicateDecl;
	}
	
	public ParserRule getNodeLabelPredicateDeclRule() {
		return getNodeLabelPredicateDeclAccess().getRule();
	}

	//EdgeLabelPredicateDecl:
	//	{EdgeLabelPredicateDecl} name=edge_predicate_name;
	public EdgeLabelPredicateDeclElements getEdgeLabelPredicateDeclAccess() {
		return pEdgeLabelPredicateDecl;
	}
	
	public ParserRule getEdgeLabelPredicateDeclRule() {
		return getEdgeLabelPredicateDeclAccess().getRule();
	}

	//ConstantSymbolDecl:
	//	{ConstantSymbolDecl} name=constant_name;
	public ConstantSymbolDeclElements getConstantSymbolDeclAccess() {
		return pConstantSymbolDecl;
	}
	
	public ParserRule getConstantSymbolDeclRule() {
		return getConstantSymbolDeclAccess().getRule();
	}

	//Constant:
	//	{Constant} declaration=[ConstantSymbolDecl|constant_name];
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//Variable:
	//	{Variable} declaration=[QuantifiedFormula|variable_name];
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//UnaryFormula returns tctl::UnaryFormula:
	//	NotFormula | UnaryTemporalFormula | QuantifiedFormula;
	public UnaryFormulaElements getUnaryFormulaAccess() {
		return pUnaryFormula;
	}
	
	public ParserRule getUnaryFormulaRule() {
		return getUnaryFormulaAccess().getRule();
	}

	//BinaryFormula returns tctl::BinaryFormula:
	//	BinaryLogicFormula | BinaryTemporalFormula;
	public BinaryFormulaElements getBinaryFormulaAccess() {
		return pBinaryFormula;
	}
	
	public ParserRule getBinaryFormulaRule() {
		return getBinaryFormulaAccess().getRule();
	}

	//AtomicFormula returns tctl::AtomicFormula:
	//	NodeLabelPredicate | EdgeLabelPredicate;
	public AtomicFormulaElements getAtomicFormulaAccess() {
		return pAtomicFormula;
	}
	
	public ParserRule getAtomicFormulaRule() {
		return getAtomicFormulaAccess().getRule();
	}

	//NodeLabelPredicate:
	//	{NodeLabelPredicate} declaration=[NodeLabelPredicateDecl|node_predicate_name] "(" term=Term ")";
	public NodeLabelPredicateElements getNodeLabelPredicateAccess() {
		return pNodeLabelPredicate;
	}
	
	public ParserRule getNodeLabelPredicateRule() {
		return getNodeLabelPredicateAccess().getRule();
	}

	//EdgeLabelPredicate:
	//	{EdgeLabelPredicate} declaration=[EdgeLabelPredicateDecl|edge_predicate_name] "(" term=Term "," secondTerm=Term ")";
	public EdgeLabelPredicateElements getEdgeLabelPredicateAccess() {
		return pEdgeLabelPredicate;
	}
	
	public ParserRule getEdgeLabelPredicateRule() {
		return getEdgeLabelPredicateAccess().getRule();
	}

	//QuantifiedFormula:
	//	{QuantifiedFormula} quantifier=Quantifier " " name=variable_name
	//	//' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
	// " " subformula=FormulaDefinition;
	public QuantifiedFormulaElements getQuantifiedFormulaAccess() {
		return pQuantifiedFormula;
	}
	
	public ParserRule getQuantifiedFormulaRule() {
		return getQuantifiedFormulaAccess().getRule();
	}

	//enum Quantifier:
	//	EXISTS="exists" | FORALL="forall";
	public QuantifierElements getQuantifierAccess() {
		return unknownRuleQuantifier;
	}
	
	public EnumRule getQuantifierRule() {
		return getQuantifierAccess().getRule();
	}

	//TCTLFormula returns tctl::TCTLFormula:
	//	{tctl::TCTLFormula} formula=FormulaDefinition | FoTCTLFormula;
	public TCTLFormulaElements getTCTLFormulaAccess() {
		return pTCTLFormula;
	}
	
	public ParserRule getTCTLFormulaRule() {
		return getTCTLFormulaAccess().getRule();
	}

	//NotFormula returns tctl::NotFormula:
	//	"NOT " {tctl::NotFormula} subformula=FormulaDefinition;
	public NotFormulaElements getNotFormulaAccess() {
		return pNotFormula;
	}
	
	public ParserRule getNotFormulaRule() {
		return getNotFormulaAccess().getRule();
	}

	//TemporalFormula returns tctl::TemporalFormula:
	//	BinaryTemporalFormula | UnaryTemporalFormula;
	public TemporalFormulaElements getTemporalFormulaAccess() {
		return pTemporalFormula;
	}
	
	public ParserRule getTemporalFormulaRule() {
		return getTemporalFormulaAccess().getRule();
	}

	//UnaryTemporalFormula returns tctl::UnaryTemporalFormula:
	//	{tctl::UnaryTemporalFormula} temporalOperator=TemporalOperator "[" comparisonOperator=ComparisonOperator value=INT
	//	"] " subformula=FormulaDefinition;
	public UnaryTemporalFormulaElements getUnaryTemporalFormulaAccess() {
		return pUnaryTemporalFormula;
	}
	
	public ParserRule getUnaryTemporalFormulaRule() {
		return getUnaryTemporalFormulaAccess().getRule();
	}

	//BinaryTemporalFormula returns tctl::BinaryTemporalFormula:
	//	{tctl::BinaryTemporalFormula} "(" leftSubformula=FormulaDefinition " " temporalOperator=TemporalOperator "["
	//	comparisonOperator=ComparisonOperator value=INT "] " rightSubformula=FormulaDefinition ")";
	public BinaryTemporalFormulaElements getBinaryTemporalFormulaAccess() {
		return pBinaryTemporalFormula;
	}
	
	public ParserRule getBinaryTemporalFormulaRule() {
		return getBinaryTemporalFormulaAccess().getRule();
	}

	//BinaryLogicFormula returns tctl::BinaryLogicFormula:
	//	{tctl::BinaryLogicFormula} "(" leftSubformula=FormulaDefinition operator=BinaryLogicOperator
	//	rightSubformula=FormulaDefinition ")";
	public BinaryLogicFormulaElements getBinaryLogicFormulaAccess() {
		return pBinaryLogicFormula;
	}
	
	public ParserRule getBinaryLogicFormulaRule() {
		return getBinaryLogicFormulaAccess().getRule();
	}

	//enum BinaryLogicOperator returns tctl::BinaryLogicOperator:
	//	AND=" & " | EQUIV=" <=> " | IMPLY=" => " | OR=" | " | XOR=" ^ ";
	public BinaryLogicOperatorElements getBinaryLogicOperatorAccess() {
		return unknownRuleBinaryLogicOperator;
	}
	
	public EnumRule getBinaryLogicOperatorRule() {
		return getBinaryLogicOperatorAccess().getRule();
	}

	//Term returns tctl::Term:
	//	Variable | Constant | AtomicProposition;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//AtomicProposition returns tctl::AtomicProposition:
	//	{tctl::AtomicProposition} name=variable_name;
	public AtomicPropositionElements getAtomicPropositionAccess() {
		return pAtomicProposition;
	}
	
	public ParserRule getAtomicPropositionRule() {
		return getAtomicPropositionAccess().getRule();
	}

	//enum ComparisonOperator returns tctl::ComparisonOperator:
	//	EQUAL=" = " | GREATER=" > " | GREATER_OR_EQUAL=" >= " | LESS=" < " | LESS_OR_EQUAL=" <= ";
	public ComparisonOperatorElements getComparisonOperatorAccess() {
		return unknownRuleComparisonOperator;
	}
	
	public EnumRule getComparisonOperatorRule() {
		return getComparisonOperatorAccess().getRule();
	}

	//enum TemporalOperator returns tctl::TemporalOperator:
	//	AF | AG | AU | EF | EG | EU;
	public TemporalOperatorElements getTemporalOperatorAccess() {
		return unknownRuleTemporalOperator;
	}
	
	public EnumRule getTemporalOperatorRule() {
		return getTemporalOperatorAccess().getRule();
	}

	//terminal node_predicate_name:
	//	"A".."Z" ("a".."z" | "A".."Z")+;
	public TerminalRule getNode_predicate_nameRule() {
		return tNode_predicate_name;
	} 

	//terminal edge_predicate_name:
	//	"a".."z" ("a".."z" | "A".."Z")+;
	public TerminalRule getEdge_predicate_nameRule() {
		return tEdge_predicate_name;
	} 

	//terminal variable_name:
	//	"a".."z" ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getVariable_nameRule() {
		return tVariable_name;
	} 

	//terminal constant_name:
	//	"A".."Z" ("A".."Z" | "_" | "0".."9")*;
	public TerminalRule getConstant_nameRule() {
		return tConstant_name;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
