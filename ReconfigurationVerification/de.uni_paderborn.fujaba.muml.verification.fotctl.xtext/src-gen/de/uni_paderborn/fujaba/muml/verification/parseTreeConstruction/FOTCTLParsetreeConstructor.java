/*
* generated by Xtext
*/
package de.uni_paderborn.fujaba.muml.verification.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.uni_paderborn.fujaba.muml.verification.services.FOTCTLGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class FOTCTLParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private FOTCTLGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group(this, this, 0, inst);
			case 1: return new FoTCTLFormula_Group(this, this, 1, inst);
			case 2: return new FormulaDefinition_Alternatives(this, this, 2, inst);
			case 3: return new NodeLabelPredicateDecl_Group(this, this, 3, inst);
			case 4: return new EdgeLabelPredicateDecl_Group(this, this, 4, inst);
			case 5: return new ConstantSymbolDecl_Group(this, this, 5, inst);
			case 6: return new Constant_Group(this, this, 6, inst);
			case 7: return new Variable_Group(this, this, 7, inst);
			case 8: return new UnaryFormula_Alternatives(this, this, 8, inst);
			case 9: return new BinaryFormula_Alternatives(this, this, 9, inst);
			case 10: return new AtomicFormula_Alternatives(this, this, 10, inst);
			case 11: return new NodeLabelPredicate_Group(this, this, 11, inst);
			case 12: return new EdgeLabelPredicate_Group(this, this, 12, inst);
			case 13: return new QuantifiedFormula_Group(this, this, 13, inst);
			case 14: return new TCTLFormula_Alternatives(this, this, 14, inst);
			case 15: return new NotFormula_Group(this, this, 15, inst);
			case 16: return new TemporalFormula_Alternatives(this, this, 16, inst);
			case 17: return new UnaryTemporalFormula_Group(this, this, 17, inst);
			case 18: return new BinaryTemporalFormula_Group(this, this, 18, inst);
			case 19: return new BinaryLogicFormula_Group(this, this, 19, inst);
			case 20: return new Term_Alternatives(this, this, 20, inst);
			case 21: return new AtomicProposition_Group(this, this, 21, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule FoTCTLSpec ****************
 *
 * FoTCTLSpec:
 * 
 * 	{FoTCTLSpec} "Declaration\n" ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl (","
 * 
 * 	nodeLabelPredicates+=NodeLabelPredicateDecl)* "}\n")? ("EdgeLabelPredicates {"
 * 
 * 	edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)* "}\n")? ("Constants {"
 * 
 * 	constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")? "Formulas\n" formulas+=FoTCTLFormula+;
 *
 **/

// {FoTCTLSpec} "Declaration\n" ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl (","
// 
// nodeLabelPredicates+=NodeLabelPredicateDecl)* "}\n")? ("EdgeLabelPredicates {"
// 
// edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)* "}\n")? ("Constants {"
// 
// constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")? "Formulas\n" formulas+=FoTCTLFormula+
protected class FoTCTLSpec_Group extends GroupToken {
	
	public FoTCTLSpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_FormulasAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFoTCTLSpecAccess().getFoTCTLSpecAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FoTCTLSpec}
protected class FoTCTLSpec_FoTCTLSpecAction_0 extends ActionToken  {

	public FoTCTLSpec_FoTCTLSpecAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getFoTCTLSpecAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "Declaration\n"
protected class FoTCTLSpec_DeclarationKeyword_1 extends KeywordToken  {
	
	public FoTCTLSpec_DeclarationKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getDeclarationKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_FoTCTLSpecAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("NodeLabelPredicates {" nodeLabelPredicates+=NodeLabelPredicateDecl ("," nodeLabelPredicates+=NodeLabelPredicateDecl)*
// 
// "}\n")?
protected class FoTCTLSpec_Group_2 extends GroupToken {
	
	public FoTCTLSpec_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_2_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "NodeLabelPredicates {"
protected class FoTCTLSpec_NodeLabelPredicatesKeyword_2_0 extends KeywordToken  {
	
	public FoTCTLSpec_NodeLabelPredicatesKeyword_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesKeyword_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_DeclarationKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// nodeLabelPredicates+=NodeLabelPredicateDecl
protected class FoTCTLSpec_NodeLabelPredicatesAssignment_2_1 extends AssignmentToken  {
	
	public FoTCTLSpec_NodeLabelPredicatesAssignment_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesAssignment_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicateDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nodeLabelPredicates",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nodeLabelPredicates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNodeLabelPredicateDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_NodeLabelPredicatesKeyword_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," nodeLabelPredicates+=NodeLabelPredicateDecl)*
protected class FoTCTLSpec_Group_2_2 extends GroupToken {
	
	public FoTCTLSpec_Group_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_NodeLabelPredicatesAssignment_2_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FoTCTLSpec_CommaKeyword_2_2_0 extends KeywordToken  {
	
	public FoTCTLSpec_CommaKeyword_2_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_2_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_NodeLabelPredicatesAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// nodeLabelPredicates+=NodeLabelPredicateDecl
protected class FoTCTLSpec_NodeLabelPredicatesAssignment_2_2_1 extends AssignmentToken  {
	
	public FoTCTLSpec_NodeLabelPredicatesAssignment_2_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesAssignment_2_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicateDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nodeLabelPredicates",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nodeLabelPredicates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNodeLabelPredicateDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_CommaKeyword_2_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}\n"
protected class FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_2_3 extends KeywordToken  {
	
	public FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_2_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_2_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_2_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_NodeLabelPredicatesAssignment_2_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ("EdgeLabelPredicates {" edgeLabelPredicates+=EdgeLabelPredicateDecl ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)*
// 
// "}\n")?
protected class FoTCTLSpec_Group_3 extends GroupToken {
	
	public FoTCTLSpec_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_3_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "EdgeLabelPredicates {"
protected class FoTCTLSpec_EdgeLabelPredicatesKeyword_3_0 extends KeywordToken  {
	
	public FoTCTLSpec_EdgeLabelPredicatesKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_DeclarationKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// edgeLabelPredicates+=EdgeLabelPredicateDecl
protected class FoTCTLSpec_EdgeLabelPredicatesAssignment_3_1 extends AssignmentToken  {
	
	public FoTCTLSpec_EdgeLabelPredicatesAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicateDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("edgeLabelPredicates",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("edgeLabelPredicates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEdgeLabelPredicateDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_EdgeLabelPredicatesKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," edgeLabelPredicates+=EdgeLabelPredicateDecl)*
protected class FoTCTLSpec_Group_3_2 extends GroupToken {
	
	public FoTCTLSpec_Group_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_EdgeLabelPredicatesAssignment_3_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FoTCTLSpec_CommaKeyword_3_2_0 extends KeywordToken  {
	
	public FoTCTLSpec_CommaKeyword_3_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_3_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_EdgeLabelPredicatesAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// edgeLabelPredicates+=EdgeLabelPredicateDecl
protected class FoTCTLSpec_EdgeLabelPredicatesAssignment_3_2_1 extends AssignmentToken  {
	
	public FoTCTLSpec_EdgeLabelPredicatesAssignment_3_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesAssignment_3_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicateDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("edgeLabelPredicates",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("edgeLabelPredicates");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEdgeLabelPredicateDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_CommaKeyword_3_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}\n"
protected class FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_3_3 extends KeywordToken  {
	
	public FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_3_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_3_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_3_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_EdgeLabelPredicatesAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// ("Constants {" constants+=ConstantSymbolDecl ("," constants+=ConstantSymbolDecl)* "}\n")?
protected class FoTCTLSpec_Group_4 extends GroupToken {
	
	public FoTCTLSpec_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "Constants {"
protected class FoTCTLSpec_ConstantsKeyword_4_0 extends KeywordToken  {
	
	public FoTCTLSpec_ConstantsKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getConstantsKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_Group_2(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FoTCTLSpec_DeclarationKeyword_1(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// constants+=ConstantSymbolDecl
protected class FoTCTLSpec_ConstantsAssignment_4_1 extends AssignmentToken  {
	
	public FoTCTLSpec_ConstantsAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getConstantsAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantSymbolDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constants",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constants");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantSymbolDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getConstantsConstantSymbolDeclParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_ConstantsKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("," constants+=ConstantSymbolDecl)*
protected class FoTCTLSpec_Group_4_2 extends GroupToken {
	
	public FoTCTLSpec_Group_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getGroup_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_ConstantsAssignment_4_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class FoTCTLSpec_CommaKeyword_4_2_0 extends KeywordToken  {
	
	public FoTCTLSpec_CommaKeyword_4_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_4_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_ConstantsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// constants+=ConstantSymbolDecl
protected class FoTCTLSpec_ConstantsAssignment_4_2_1 extends AssignmentToken  {
	
	public FoTCTLSpec_ConstantsAssignment_4_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getConstantsAssignment_4_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantSymbolDecl_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constants",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constants");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantSymbolDeclRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getConstantsConstantSymbolDeclParserRuleCall_4_2_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_CommaKeyword_4_2_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "}\n"
protected class FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_4_3 extends KeywordToken  {
	
	public FoTCTLSpec_RightCurlyBracketLineFeedLfKeyword_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_ConstantsAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// "Formulas\n"
protected class FoTCTLSpec_FormulasKeyword_5 extends KeywordToken  {
	
	public FoTCTLSpec_FormulasKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getFormulasKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLSpec_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FoTCTLSpec_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FoTCTLSpec_Group_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new FoTCTLSpec_DeclarationKeyword_1(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// formulas+=FoTCTLFormula+
protected class FoTCTLSpec_FormulasAssignment_6 extends AssignmentToken  {
	
	public FoTCTLSpec_FormulasAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLSpecAccess().getFormulasAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formulas",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formulas");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFoTCTLFormulaRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLSpecAccess().getFormulasFoTCTLFormulaParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLSpec_FormulasAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new FoTCTLSpec_FormulasKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule FoTCTLSpec ****************/


/************ begin Rule FoTCTLFormula ****************
 *
 * FoTCTLFormula:
 * 
 * 	{FoTCTLFormula} formula=FormulaDefinition ";\n";
 *
 **/

// {FoTCTLFormula} formula=FormulaDefinition ";\n"
protected class FoTCTLFormula_Group extends GroupToken {
	
	public FoTCTLFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFoTCTLFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLFormula_SemicolonLineFeedLfKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFoTCTLFormulaAccess().getFoTCTLFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {FoTCTLFormula}
protected class FoTCTLFormula_FoTCTLFormulaAction_0 extends ActionToken  {

	public FoTCTLFormula_FoTCTLFormulaAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getFoTCTLFormulaAccess().getFoTCTLFormulaAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// formula=FormulaDefinition
protected class FoTCTLFormula_FormulaAssignment_1 extends AssignmentToken  {
	
	public FoTCTLFormula_FormulaAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFoTCTLFormulaAccess().getFormulaAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFoTCTLFormulaAccess().getFormulaFormulaDefinitionParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new FoTCTLFormula_FoTCTLFormulaAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ";\n"
protected class FoTCTLFormula_SemicolonLineFeedLfKeyword_2 extends KeywordToken  {
	
	public FoTCTLFormula_SemicolonLineFeedLfKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFoTCTLFormulaAccess().getSemicolonLineFeedLfKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLFormula_FormulaAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule FoTCTLFormula ****************/


/************ begin Rule FormulaDefinition ****************
 *
 * FormulaDefinition returns tctl::FormulaDefinition:
 * 
 * 	AtomicFormula | UnaryFormula | BinaryFormula;
 *
 **/

// AtomicFormula | UnaryFormula | BinaryFormula
protected class FormulaDefinition_Alternatives extends AlternativesToken {

	public FormulaDefinition_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFormulaDefinitionAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_AtomicFormulaParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FormulaDefinition_UnaryFormulaParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new FormulaDefinition_BinaryFormulaParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNotFormulaAccess().getNotFormulaAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// AtomicFormula
protected class FormulaDefinition_AtomicFormulaParserRuleCall_0 extends RuleCallToken {
	
	public FormulaDefinition_AtomicFormulaParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormulaDefinitionAccess().getAtomicFormulaParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicFormula_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtomicFormula_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnaryFormula
protected class FormulaDefinition_UnaryFormulaParserRuleCall_1 extends RuleCallToken {
	
	public FormulaDefinition_UnaryFormulaParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormulaDefinitionAccess().getUnaryFormulaParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryFormula_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotFormulaAccess().getNotFormulaAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnaryFormula_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BinaryFormula
protected class FormulaDefinition_BinaryFormulaParserRuleCall_2 extends RuleCallToken {
	
	public FormulaDefinition_BinaryFormulaParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFormulaDefinitionAccess().getBinaryFormulaParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryFormula_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BinaryFormula_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FormulaDefinition ****************/


/************ begin Rule NodeLabelPredicateDecl ****************
 *
 * NodeLabelPredicateDecl:
 * 
 * 	{NodeLabelPredicateDecl} name=node_predicate_name;
 *
 **/

// {NodeLabelPredicateDecl} name=node_predicate_name
protected class NodeLabelPredicateDecl_Group extends GroupToken {
	
	public NodeLabelPredicateDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicateDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNodeLabelPredicateDeclAccess().getNodeLabelPredicateDeclAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NodeLabelPredicateDecl}
protected class NodeLabelPredicateDecl_NodeLabelPredicateDeclAction_0 extends ActionToken  {

	public NodeLabelPredicateDecl_NodeLabelPredicateDeclAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateDeclAccess().getNodeLabelPredicateDeclAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=node_predicate_name
protected class NodeLabelPredicateDecl_NameAssignment_1 extends AssignmentToken  {
	
	public NodeLabelPredicateDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicateDecl_NodeLabelPredicateDeclAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNodeLabelPredicateDeclAccess().getNameNode_predicate_nameTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNodeLabelPredicateDeclAccess().getNameNode_predicate_nameTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule NodeLabelPredicateDecl ****************/


/************ begin Rule EdgeLabelPredicateDecl ****************
 *
 * EdgeLabelPredicateDecl:
 * 
 * 	{EdgeLabelPredicateDecl} name=edge_predicate_name;
 *
 **/

// {EdgeLabelPredicateDecl} name=edge_predicate_name
protected class EdgeLabelPredicateDecl_Group extends GroupToken {
	
	public EdgeLabelPredicateDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicateDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEdgeLabelPredicateDeclAccess().getEdgeLabelPredicateDeclAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EdgeLabelPredicateDecl}
protected class EdgeLabelPredicateDecl_EdgeLabelPredicateDeclAction_0 extends ActionToken  {

	public EdgeLabelPredicateDecl_EdgeLabelPredicateDeclAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateDeclAccess().getEdgeLabelPredicateDeclAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=edge_predicate_name
protected class EdgeLabelPredicateDecl_NameAssignment_1 extends AssignmentToken  {
	
	public EdgeLabelPredicateDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicateDecl_EdgeLabelPredicateDeclAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEdgeLabelPredicateDeclAccess().getNameEdge_predicate_nameTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEdgeLabelPredicateDeclAccess().getNameEdge_predicate_nameTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EdgeLabelPredicateDecl ****************/


/************ begin Rule ConstantSymbolDecl ****************
 *
 * ConstantSymbolDecl:
 * 
 * 	{ConstantSymbolDecl} name=constant_name;
 *
 **/

// {ConstantSymbolDecl} name=constant_name
protected class ConstantSymbolDecl_Group extends GroupToken {
	
	public ConstantSymbolDecl_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantSymbolDeclAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantSymbolDecl_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstantSymbolDeclAccess().getConstantSymbolDeclAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ConstantSymbolDecl}
protected class ConstantSymbolDecl_ConstantSymbolDeclAction_0 extends ActionToken  {

	public ConstantSymbolDecl_ConstantSymbolDeclAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConstantSymbolDeclAccess().getConstantSymbolDeclAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=constant_name
protected class ConstantSymbolDecl_NameAssignment_1 extends AssignmentToken  {
	
	public ConstantSymbolDecl_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantSymbolDeclAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ConstantSymbolDecl_ConstantSymbolDeclAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getConstantSymbolDeclAccess().getNameConstant_nameTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getConstantSymbolDeclAccess().getNameConstant_nameTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ConstantSymbolDecl ****************/


/************ begin Rule Constant ****************
 *
 * Constant:
 * 
 * 	{Constant} declaration=[ConstantSymbolDecl|constant_name];
 *
 **/

// {Constant} declaration=[ConstantSymbolDecl|constant_name]
protected class Constant_Group extends GroupToken {
	
	public Constant_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConstantAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constant_DeclarationAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstantAccess().getConstantAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Constant}
protected class Constant_ConstantAction_0 extends ActionToken  {

	public Constant_ConstantAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getConstantAccess().getConstantAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// declaration=[ConstantSymbolDecl|constant_name]
protected class Constant_DeclarationAssignment_1 extends AssignmentToken  {
	
	public Constant_DeclarationAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConstantAccess().getDeclarationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constant_ConstantAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConstantAccess().getDeclarationConstantSymbolDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getConstantAccess().getDeclarationConstantSymbolDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Constant ****************/


/************ begin Rule Variable ****************
 *
 * Variable:
 * 
 * 	{Variable} declaration=[QuantifiedFormula|variable_name];
 *
 **/

// {Variable} declaration=[QuantifiedFormula|variable_name]
protected class Variable_Group extends GroupToken {
	
	public Variable_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getVariableAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_DeclarationAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAccess().getVariableAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Variable}
protected class Variable_VariableAction_0 extends ActionToken  {

	public Variable_VariableAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getVariableAccess().getVariableAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// declaration=[QuantifiedFormula|variable_name]
protected class Variable_DeclarationAssignment_1 extends AssignmentToken  {
	
	public Variable_DeclarationAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getVariableAccess().getDeclarationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_VariableAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getVariableAccess().getDeclarationQuantifiedFormulaCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getVariableAccess().getDeclarationQuantifiedFormulaCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


/************ end Rule Variable ****************/


/************ begin Rule UnaryFormula ****************
 *
 * UnaryFormula returns tctl::UnaryFormula:
 * 
 * 	NotFormula | UnaryTemporalFormula | QuantifiedFormula;
 *
 **/

// NotFormula | UnaryTemporalFormula | QuantifiedFormula
protected class UnaryFormula_Alternatives extends AlternativesToken {

	public UnaryFormula_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUnaryFormulaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryFormula_NotFormulaParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UnaryFormula_UnaryTemporalFormulaParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UnaryFormula_QuantifiedFormulaParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotFormulaAccess().getNotFormulaAction_1().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NotFormula
protected class UnaryFormula_NotFormulaParserRuleCall_0 extends RuleCallToken {
	
	public UnaryFormula_NotFormulaParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryFormulaAccess().getNotFormulaParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotFormulaAccess().getNotFormulaAction_1().getType().getClassifier())
			return null;
		if(checkForRecursion(NotFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnaryTemporalFormula
protected class UnaryFormula_UnaryTemporalFormulaParserRuleCall_1 extends RuleCallToken {
	
	public UnaryFormula_UnaryTemporalFormulaParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryFormulaAccess().getUnaryTemporalFormulaParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnaryTemporalFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// QuantifiedFormula
protected class UnaryFormula_QuantifiedFormulaParserRuleCall_2 extends RuleCallToken {
	
	public UnaryFormula_QuantifiedFormulaParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getUnaryFormulaAccess().getQuantifiedFormulaParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(QuantifiedFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule UnaryFormula ****************/


/************ begin Rule BinaryFormula ****************
 *
 * BinaryFormula returns tctl::BinaryFormula:
 * 
 * 	BinaryLogicFormula | BinaryTemporalFormula;
 *
 **/

// BinaryLogicFormula | BinaryTemporalFormula
protected class BinaryFormula_Alternatives extends AlternativesToken {

	public BinaryFormula_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getBinaryFormulaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryFormula_BinaryLogicFormulaParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new BinaryFormula_BinaryTemporalFormulaParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BinaryLogicFormula
protected class BinaryFormula_BinaryLogicFormulaParserRuleCall_0 extends RuleCallToken {
	
	public BinaryFormula_BinaryLogicFormulaParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBinaryFormulaAccess().getBinaryLogicFormulaParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryLogicFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BinaryLogicFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// BinaryTemporalFormula
protected class BinaryFormula_BinaryTemporalFormulaParserRuleCall_1 extends RuleCallToken {
	
	public BinaryFormula_BinaryTemporalFormulaParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBinaryFormulaAccess().getBinaryTemporalFormulaParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BinaryTemporalFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule BinaryFormula ****************/


/************ begin Rule AtomicFormula ****************
 *
 * AtomicFormula returns tctl::AtomicFormula:
 * 
 * 	NodeLabelPredicate | EdgeLabelPredicate;
 *
 **/

// NodeLabelPredicate | EdgeLabelPredicate
protected class AtomicFormula_Alternatives extends AlternativesToken {

	public AtomicFormula_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getAtomicFormulaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicFormula_NodeLabelPredicateParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new AtomicFormula_EdgeLabelPredicateParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// NodeLabelPredicate
protected class AtomicFormula_NodeLabelPredicateParserRuleCall_0 extends RuleCallToken {
	
	public AtomicFormula_NodeLabelPredicateParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicFormulaAccess().getNodeLabelPredicateParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicate_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(NodeLabelPredicate_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// EdgeLabelPredicate
protected class AtomicFormula_EdgeLabelPredicateParserRuleCall_1 extends RuleCallToken {
	
	public AtomicFormula_EdgeLabelPredicateParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAtomicFormulaAccess().getEdgeLabelPredicateParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(EdgeLabelPredicate_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule AtomicFormula ****************/


/************ begin Rule NodeLabelPredicate ****************
 *
 * NodeLabelPredicate:
 * 
 * 	{NodeLabelPredicate} declaration=[NodeLabelPredicateDecl|node_predicate_name] "(" term=Term ")";
 *
 **/

// {NodeLabelPredicate} declaration=[NodeLabelPredicateDecl|node_predicate_name] "(" term=Term ")"
protected class NodeLabelPredicate_Group extends GroupToken {
	
	public NodeLabelPredicate_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicate_RightParenthesisKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {NodeLabelPredicate}
protected class NodeLabelPredicate_NodeLabelPredicateAction_0 extends ActionToken  {

	public NodeLabelPredicate_NodeLabelPredicateAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// declaration=[NodeLabelPredicateDecl|node_predicate_name]
protected class NodeLabelPredicate_DeclarationAssignment_1 extends AssignmentToken  {
	
	public NodeLabelPredicate_DeclarationAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getDeclarationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicate_NodeLabelPredicateAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNodeLabelPredicateAccess().getDeclarationNodeLabelPredicateDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getNodeLabelPredicateAccess().getDeclarationNodeLabelPredicateDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class NodeLabelPredicate_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public NodeLabelPredicate_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicate_DeclarationAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// term=Term
protected class NodeLabelPredicate_TermAssignment_3 extends AssignmentToken  {
	
	public NodeLabelPredicate_TermAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getTermAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNodeLabelPredicateAccess().getTermTermParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NodeLabelPredicate_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class NodeLabelPredicate_RightParenthesisKeyword_4 extends KeywordToken  {
	
	public NodeLabelPredicate_RightParenthesisKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNodeLabelPredicateAccess().getRightParenthesisKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NodeLabelPredicate_TermAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule NodeLabelPredicate ****************/


/************ begin Rule EdgeLabelPredicate ****************
 *
 * EdgeLabelPredicate:
 * 
 * 	{EdgeLabelPredicate} declaration=[EdgeLabelPredicateDecl|edge_predicate_name] "(" term=Term "," secondTerm=Term ")";
 *
 **/

// {EdgeLabelPredicate} declaration=[EdgeLabelPredicateDecl|edge_predicate_name] "(" term=Term "," secondTerm=Term ")"
protected class EdgeLabelPredicate_Group extends GroupToken {
	
	public EdgeLabelPredicate_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_RightParenthesisKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {EdgeLabelPredicate}
protected class EdgeLabelPredicate_EdgeLabelPredicateAction_0 extends ActionToken  {

	public EdgeLabelPredicate_EdgeLabelPredicateAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// declaration=[EdgeLabelPredicateDecl|edge_predicate_name]
protected class EdgeLabelPredicate_DeclarationAssignment_1 extends AssignmentToken  {
	
	public EdgeLabelPredicate_DeclarationAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getDeclarationAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_EdgeLabelPredicateAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaration",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaration");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEdgeLabelPredicateAccess().getDeclarationEdgeLabelPredicateDeclCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getEdgeLabelPredicateAccess().getDeclarationEdgeLabelPredicateDeclCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "("
protected class EdgeLabelPredicate_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public EdgeLabelPredicate_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_DeclarationAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// term=Term
protected class EdgeLabelPredicate_TermAssignment_3 extends AssignmentToken  {
	
	public EdgeLabelPredicate_TermAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getTermAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("term",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("term");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEdgeLabelPredicateAccess().getTermTermParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EdgeLabelPredicate_LeftParenthesisKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ","
protected class EdgeLabelPredicate_CommaKeyword_4 extends KeywordToken  {
	
	public EdgeLabelPredicate_CommaKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getCommaKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_TermAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// secondTerm=Term
protected class EdgeLabelPredicate_SecondTermAssignment_5 extends AssignmentToken  {
	
	public EdgeLabelPredicate_SecondTermAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getSecondTermAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("secondTerm",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("secondTerm");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getTermRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEdgeLabelPredicateAccess().getSecondTermTermParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EdgeLabelPredicate_CommaKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class EdgeLabelPredicate_RightParenthesisKeyword_6 extends KeywordToken  {
	
	public EdgeLabelPredicate_RightParenthesisKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEdgeLabelPredicateAccess().getRightParenthesisKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EdgeLabelPredicate_SecondTermAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule EdgeLabelPredicate ****************/


/************ begin Rule QuantifiedFormula ****************
 *
 * QuantifiedFormula:
 * 
 * 	{QuantifiedFormula} quantifier=Quantifier " " name=variable_name
 * 
 * 	//' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
 *  " " subformula=FormulaDefinition;
 *
 **/

// {QuantifiedFormula} quantifier=Quantifier " " name=variable_name
// 
// //' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
//  " " subformula=FormulaDefinition
protected class QuantifiedFormula_Group extends GroupToken {
	
	public QuantifiedFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_SubformulaAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {QuantifiedFormula}
protected class QuantifiedFormula_QuantifiedFormulaAction_0 extends ActionToken  {

	public QuantifiedFormula_QuantifiedFormulaAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// quantifier=Quantifier
protected class QuantifiedFormula_QuantifierAssignment_1 extends AssignmentToken  {
	
	public QuantifiedFormula_QuantifierAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getQuantifierAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_QuantifiedFormulaAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("quantifier",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("quantifier");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getQuantifiedFormulaAccess().getQuantifierQuantifierEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getQuantifiedFormulaAccess().getQuantifierQuantifierEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// " "
protected class QuantifiedFormula_SpaceKeyword_2 extends KeywordToken  {
	
	public QuantifiedFormula_SpaceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getSpaceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_QuantifierAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// name=variable_name
protected class QuantifiedFormula_NameAssignment_3 extends AssignmentToken  {
	
	public QuantifiedFormula_NameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_SpaceKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getQuantifiedFormulaAccess().getNameVariable_nameTerminalRuleCall_3_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getQuantifiedFormulaAccess().getNameVariable_nameTerminalRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// //' ('(variables+=[Variable|name](','variables+=[Variable|name])*)?') '
//  " "
protected class QuantifiedFormula_SpaceKeyword_4 extends KeywordToken  {
	
	public QuantifiedFormula_SpaceKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getSpaceKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new QuantifiedFormula_NameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subformula=FormulaDefinition
protected class QuantifiedFormula_SubformulaAssignment_5 extends AssignmentToken  {
	
	public QuantifiedFormula_SubformulaAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getQuantifiedFormulaAccess().getSubformulaAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getQuantifiedFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new QuantifiedFormula_SpaceKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule QuantifiedFormula ****************/


/************ begin Rule TCTLFormula ****************
 *
 * TCTLFormula returns tctl::TCTLFormula:
 * 
 * 	{tctl::TCTLFormula} formula=FormulaDefinition | FoTCTLFormula;
 *
 **/

// {tctl::TCTLFormula} formula=FormulaDefinition | FoTCTLFormula
protected class TCTLFormula_Alternatives extends AlternativesToken {

	public TCTLFormula_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTCTLFormulaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TCTLFormula_Group_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TCTLFormula_FoTCTLFormulaParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFoTCTLFormulaAccess().getFoTCTLFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTCTLFormulaAccess().getTCTLFormulaAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::TCTLFormula} formula=FormulaDefinition
protected class TCTLFormula_Group_0 extends GroupToken {
	
	public TCTLFormula_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTCTLFormulaAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TCTLFormula_FormulaAssignment_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTCTLFormulaAccess().getTCTLFormulaAction_0_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::TCTLFormula}
protected class TCTLFormula_TCTLFormulaAction_0_0 extends ActionToken  {

	public TCTLFormula_TCTLFormulaAction_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTCTLFormulaAccess().getTCTLFormulaAction_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// formula=FormulaDefinition
protected class TCTLFormula_FormulaAssignment_0_1 extends AssignmentToken  {
	
	public TCTLFormula_FormulaAssignment_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTCTLFormulaAccess().getFormulaAssignment_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("formula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("formula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTCTLFormulaAccess().getFormulaFormulaDefinitionParserRuleCall_0_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TCTLFormula_TCTLFormulaAction_0_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// FoTCTLFormula
protected class TCTLFormula_FoTCTLFormulaParserRuleCall_1 extends RuleCallToken {
	
	public TCTLFormula_FoTCTLFormulaParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTCTLFormulaAccess().getFoTCTLFormulaParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FoTCTLFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFoTCTLFormulaAccess().getFoTCTLFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(FoTCTLFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TCTLFormula ****************/


/************ begin Rule NotFormula ****************
 *
 * NotFormula returns tctl::NotFormula:
 * 
 * 	"NOT " {tctl::NotFormula} subformula=FormulaDefinition;
 *
 **/

// "NOT " {tctl::NotFormula} subformula=FormulaDefinition
protected class NotFormula_Group extends GroupToken {
	
	public NotFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNotFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotFormula_SubformulaAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNotFormulaAccess().getNotFormulaAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "NOT "
protected class NotFormula_NOTKeyword_0 extends KeywordToken  {
	
	public NotFormula_NOTKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNotFormulaAccess().getNOTKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {tctl::NotFormula}
protected class NotFormula_NotFormulaAction_1 extends ActionToken  {

	public NotFormula_NotFormulaAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNotFormulaAccess().getNotFormulaAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NotFormula_NOTKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// subformula=FormulaDefinition
protected class NotFormula_SubformulaAssignment_2 extends AssignmentToken  {
	
	public NotFormula_SubformulaAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNotFormulaAccess().getSubformulaAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNotFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NotFormula_NotFormulaAction_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule NotFormula ****************/


/************ begin Rule TemporalFormula ****************
 *
 * TemporalFormula returns tctl::TemporalFormula:
 * 
 * 	BinaryTemporalFormula | UnaryTemporalFormula;
 *
 **/

// BinaryTemporalFormula | UnaryTemporalFormula
protected class TemporalFormula_Alternatives extends AlternativesToken {

	public TemporalFormula_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTemporalFormulaAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TemporalFormula_BinaryTemporalFormulaParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TemporalFormula_UnaryTemporalFormulaParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// BinaryTemporalFormula
protected class TemporalFormula_BinaryTemporalFormulaParserRuleCall_0 extends RuleCallToken {
	
	public TemporalFormula_BinaryTemporalFormulaParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalFormulaAccess().getBinaryTemporalFormulaParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(BinaryTemporalFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// UnaryTemporalFormula
protected class TemporalFormula_UnaryTemporalFormulaParserRuleCall_1 extends RuleCallToken {
	
	public TemporalFormula_UnaryTemporalFormulaParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTemporalFormulaAccess().getUnaryTemporalFormulaParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(UnaryTemporalFormula_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TemporalFormula ****************/


/************ begin Rule UnaryTemporalFormula ****************
 *
 * UnaryTemporalFormula returns tctl::UnaryTemporalFormula:
 * 
 * 	{tctl::UnaryTemporalFormula} temporalOperator=TemporalOperator "[" comparisonOperator=ComparisonOperator value=INT
 * 
 * 	"] " subformula=FormulaDefinition;
 *
 **/

// {tctl::UnaryTemporalFormula} temporalOperator=TemporalOperator "[" comparisonOperator=ComparisonOperator value=INT "] "
// 
// subformula=FormulaDefinition
protected class UnaryTemporalFormula_Group extends GroupToken {
	
	public UnaryTemporalFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_SubformulaAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::UnaryTemporalFormula}
protected class UnaryTemporalFormula_UnaryTemporalFormulaAction_0 extends ActionToken  {

	public UnaryTemporalFormula_UnaryTemporalFormulaAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// temporalOperator=TemporalOperator
protected class UnaryTemporalFormula_TemporalOperatorAssignment_1 extends AssignmentToken  {
	
	public UnaryTemporalFormula_TemporalOperatorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getTemporalOperatorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_UnaryTemporalFormulaAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("temporalOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("temporalOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getUnaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class UnaryTemporalFormula_LeftSquareBracketKeyword_2 extends KeywordToken  {
	
	public UnaryTemporalFormula_LeftSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getLeftSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_TemporalOperatorAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comparisonOperator=ComparisonOperator
protected class UnaryTemporalFormula_ComparisonOperatorAssignment_3 extends AssignmentToken  {
	
	public UnaryTemporalFormula_ComparisonOperatorAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getComparisonOperatorAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_LeftSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comparisonOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comparisonOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_3_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getUnaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// value=INT
protected class UnaryTemporalFormula_ValueAssignment_4 extends AssignmentToken  {
	
	public UnaryTemporalFormula_ValueAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getValueAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_ComparisonOperatorAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnaryTemporalFormulaAccess().getValueINTTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUnaryTemporalFormulaAccess().getValueINTTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "] "
protected class UnaryTemporalFormula_RightSquareBracketSpaceKeyword_5 extends KeywordToken  {
	
	public UnaryTemporalFormula_RightSquareBracketSpaceKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getRightSquareBracketSpaceKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UnaryTemporalFormula_ValueAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// subformula=FormulaDefinition
protected class UnaryTemporalFormula_SubformulaAssignment_6 extends AssignmentToken  {
	
	public UnaryTemporalFormula_SubformulaAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnaryTemporalFormulaAccess().getSubformulaAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("subformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("subformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnaryTemporalFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new UnaryTemporalFormula_RightSquareBracketSpaceKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule UnaryTemporalFormula ****************/


/************ begin Rule BinaryTemporalFormula ****************
 *
 * BinaryTemporalFormula returns tctl::BinaryTemporalFormula:
 * 
 * 	{tctl::BinaryTemporalFormula} "(" leftSubformula=FormulaDefinition " " temporalOperator=TemporalOperator "["
 * 
 * 	comparisonOperator=ComparisonOperator value=INT "] " rightSubformula=FormulaDefinition ")";
 *
 **/

// {tctl::BinaryTemporalFormula} "(" leftSubformula=FormulaDefinition " " temporalOperator=TemporalOperator "["
// 
// comparisonOperator=ComparisonOperator value=INT "] " rightSubformula=FormulaDefinition ")"
protected class BinaryTemporalFormula_Group extends GroupToken {
	
	public BinaryTemporalFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_RightParenthesisKeyword_10(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::BinaryTemporalFormula}
protected class BinaryTemporalFormula_BinaryTemporalFormulaAction_0 extends ActionToken  {

	public BinaryTemporalFormula_BinaryTemporalFormulaAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class BinaryTemporalFormula_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public BinaryTemporalFormula_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_BinaryTemporalFormulaAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// leftSubformula=FormulaDefinition
protected class BinaryTemporalFormula_LeftSubformulaAssignment_2 extends AssignmentToken  {
	
	public BinaryTemporalFormula_LeftSubformulaAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getLeftSubformulaAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leftSubformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leftSubformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBinaryTemporalFormulaAccess().getLeftSubformulaFormulaDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryTemporalFormula_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// " "
protected class BinaryTemporalFormula_SpaceKeyword_3 extends KeywordToken  {
	
	public BinaryTemporalFormula_SpaceKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getSpaceKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_LeftSubformulaAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// temporalOperator=TemporalOperator
protected class BinaryTemporalFormula_TemporalOperatorAssignment_4 extends AssignmentToken  {
	
	public BinaryTemporalFormula_TemporalOperatorAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getTemporalOperatorAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_SpaceKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("temporalOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("temporalOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBinaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_4_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBinaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "["
protected class BinaryTemporalFormula_LeftSquareBracketKeyword_5 extends KeywordToken  {
	
	public BinaryTemporalFormula_LeftSquareBracketKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getLeftSquareBracketKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_TemporalOperatorAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comparisonOperator=ComparisonOperator
protected class BinaryTemporalFormula_ComparisonOperatorAssignment_6 extends AssignmentToken  {
	
	public BinaryTemporalFormula_ComparisonOperatorAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getComparisonOperatorAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_LeftSquareBracketKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("comparisonOperator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("comparisonOperator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBinaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_6_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBinaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_6_0();
			return obj;
		}
		return null;
	}

}

// value=INT
protected class BinaryTemporalFormula_ValueAssignment_7 extends AssignmentToken  {
	
	public BinaryTemporalFormula_ValueAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getValueAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_ComparisonOperatorAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("value",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("value");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBinaryTemporalFormulaAccess().getValueINTTerminalRuleCall_7_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getBinaryTemporalFormulaAccess().getValueINTTerminalRuleCall_7_0();
			return obj;
		}
		return null;
	}

}

// "] "
protected class BinaryTemporalFormula_RightSquareBracketSpaceKeyword_8 extends KeywordToken  {
	
	public BinaryTemporalFormula_RightSquareBracketSpaceKeyword_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getRightSquareBracketSpaceKeyword_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_ValueAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// rightSubformula=FormulaDefinition
protected class BinaryTemporalFormula_RightSubformulaAssignment_9 extends AssignmentToken  {
	
	public BinaryTemporalFormula_RightSubformulaAssignment_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getRightSubformulaAssignment_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightSubformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightSubformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBinaryTemporalFormulaAccess().getRightSubformulaFormulaDefinitionParserRuleCall_9_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryTemporalFormula_RightSquareBracketSpaceKeyword_8(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class BinaryTemporalFormula_RightParenthesisKeyword_10 extends KeywordToken  {
	
	public BinaryTemporalFormula_RightParenthesisKeyword_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryTemporalFormulaAccess().getRightParenthesisKeyword_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryTemporalFormula_RightSubformulaAssignment_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BinaryTemporalFormula ****************/


/************ begin Rule BinaryLogicFormula ****************
 *
 * BinaryLogicFormula returns tctl::BinaryLogicFormula:
 * 
 * 	{tctl::BinaryLogicFormula} "(" leftSubformula=FormulaDefinition operator=BinaryLogicOperator
 * 
 * 	rightSubformula=FormulaDefinition ")";
 *
 **/

// {tctl::BinaryLogicFormula} "(" leftSubformula=FormulaDefinition operator=BinaryLogicOperator
// 
// rightSubformula=FormulaDefinition ")"
protected class BinaryLogicFormula_Group extends GroupToken {
	
	public BinaryLogicFormula_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryLogicFormula_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::BinaryLogicFormula}
protected class BinaryLogicFormula_BinaryLogicFormulaAction_0 extends ActionToken  {

	public BinaryLogicFormula_BinaryLogicFormulaAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "("
protected class BinaryLogicFormula_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public BinaryLogicFormula_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryLogicFormula_BinaryLogicFormulaAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// leftSubformula=FormulaDefinition
protected class BinaryLogicFormula_LeftSubformulaAssignment_2 extends AssignmentToken  {
	
	public BinaryLogicFormula_LeftSubformulaAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getLeftSubformulaAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("leftSubformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("leftSubformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBinaryLogicFormulaAccess().getLeftSubformulaFormulaDefinitionParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryLogicFormula_LeftParenthesisKeyword_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// operator=BinaryLogicOperator
protected class BinaryLogicFormula_OperatorAssignment_3 extends AssignmentToken  {
	
	public BinaryLogicFormula_OperatorAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getOperatorAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryLogicFormula_LeftSubformulaAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("operator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operator");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getBinaryLogicFormulaAccess().getOperatorBinaryLogicOperatorEnumRuleCall_3_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getBinaryLogicFormulaAccess().getOperatorBinaryLogicOperatorEnumRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// rightSubformula=FormulaDefinition
protected class BinaryLogicFormula_RightSubformulaAssignment_4 extends AssignmentToken  {
	
	public BinaryLogicFormula_RightSubformulaAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getRightSubformulaAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FormulaDefinition_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("rightSubformula",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("rightSubformula");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFormulaDefinitionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBinaryLogicFormulaAccess().getRightSubformulaFormulaDefinitionParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new BinaryLogicFormula_OperatorAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ")"
protected class BinaryLogicFormula_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public BinaryLogicFormula_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBinaryLogicFormulaAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new BinaryLogicFormula_RightSubformulaAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule BinaryLogicFormula ****************/


/************ begin Rule Term ****************
 *
 * Term returns tctl::Term:
 * 
 * 	Variable | Constant | AtomicProposition;
 *
 **/

// Variable | Constant | AtomicProposition
protected class Term_Alternatives extends AlternativesToken {

	public Term_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTermAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_VariableParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term_ConstantParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Term_AtomicPropositionParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getConstantAccess().getConstantAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getVariableAccess().getVariableAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// Variable
protected class Term_VariableParserRuleCall_0 extends RuleCallToken {
	
	public Term_VariableParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getVariableParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Variable_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getVariableAccess().getVariableAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Variable_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Constant
protected class Term_ConstantParserRuleCall_1 extends RuleCallToken {
	
	public Term_ConstantParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getConstantParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Constant_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConstantAccess().getConstantAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Constant_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AtomicProposition
protected class Term_AtomicPropositionParserRuleCall_2 extends RuleCallToken {
	
	public Term_AtomicPropositionParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getAtomicPropositionParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicProposition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(AtomicProposition_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Term ****************/


/************ begin Rule AtomicProposition ****************
 *
 * AtomicProposition returns tctl::AtomicProposition:
 * 
 * 	{tctl::AtomicProposition} name=variable_name;
 *
 **/

// {tctl::AtomicProposition} name=variable_name
protected class AtomicProposition_Group extends GroupToken {
	
	public AtomicProposition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAtomicPropositionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicProposition_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {tctl::AtomicProposition}
protected class AtomicProposition_AtomicPropositionAction_0 extends ActionToken  {

	public AtomicProposition_AtomicPropositionAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// name=variable_name
protected class AtomicProposition_NameAssignment_1 extends AssignmentToken  {
	
	public AtomicProposition_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAtomicPropositionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AtomicProposition_AtomicPropositionAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAtomicPropositionAccess().getNameVariable_nameTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAtomicPropositionAccess().getNameVariable_nameTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AtomicProposition ****************/

}
