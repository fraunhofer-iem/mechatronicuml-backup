/*
* generated by Xtext
*/
grammar InternalFOTCTL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.verification.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.verification.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.fujaba.muml.verification.services.FOTCTLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private FOTCTLGrammarAccess grammarAccess;
 	
    public InternalFOTCTLParser(TokenStream input, FOTCTLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FoTCTLSpec";	
   	}
   	
   	@Override
   	protected FOTCTLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFoTCTLSpec
entryRuleFoTCTLSpec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFoTCTLSpecRule()); }
	 iv_ruleFoTCTLSpec=ruleFoTCTLSpec 
	 { $current=$iv_ruleFoTCTLSpec.current; } 
	 EOF 
;

// Rule FoTCTLSpec
ruleFoTCTLSpec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFoTCTLSpecAccess().getFoTCTLSpecAction_0(),
            $current);
    }
)	otherlv_1='Declaration\n' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFoTCTLSpecAccess().getDeclarationKeyword_1());
    }
(	otherlv_2='NodeLabelPredicates {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_1_0()); 
	    }
		lv_nodeLabelPredicates_3_0=ruleNodeLabelPredicateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"nodeLabelPredicates",
        		lv_nodeLabelPredicates_3_0, 
        		"NodeLabelPredicateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getNodeLabelPredicatesNodeLabelPredicateDeclParserRuleCall_2_2_1_0()); 
	    }
		lv_nodeLabelPredicates_5_0=ruleNodeLabelPredicateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"nodeLabelPredicates",
        		lv_nodeLabelPredicates_5_0, 
        		"NodeLabelPredicateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}\n' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_2_3());
    }
)?(	otherlv_7='EdgeLabelPredicates {' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_1_0()); 
	    }
		lv_edgeLabelPredicates_8_0=ruleEdgeLabelPredicateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"edgeLabelPredicates",
        		lv_edgeLabelPredicates_8_0, 
        		"EdgeLabelPredicateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getEdgeLabelPredicatesEdgeLabelPredicateDeclParserRuleCall_3_2_1_0()); 
	    }
		lv_edgeLabelPredicates_10_0=ruleEdgeLabelPredicateDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"edgeLabelPredicates",
        		lv_edgeLabelPredicates_10_0, 
        		"EdgeLabelPredicateDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}\n' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_3_3());
    }
)?(	otherlv_12='Constants {' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFoTCTLSpecAccess().getConstantsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getConstantsConstantSymbolDeclParserRuleCall_4_1_0()); 
	    }
		lv_constants_13_0=ruleConstantSymbolDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_13_0, 
        		"ConstantSymbolDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFoTCTLSpecAccess().getCommaKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getConstantsConstantSymbolDeclParserRuleCall_4_2_1_0()); 
	    }
		lv_constants_15_0=ruleConstantSymbolDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_15_0, 
        		"ConstantSymbolDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_16='}\n' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFoTCTLSpecAccess().getRightCurlyBracketLineFeedLfKeyword_4_3());
    }
)?	otherlv_17='Formulas\n' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getFoTCTLSpecAccess().getFormulasKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLSpecAccess().getFormulasFoTCTLFormulaParserRuleCall_6_0()); 
	    }
		lv_formulas_18_0=ruleFoTCTLFormula		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLSpecRule());
	        }
       		add(
       			$current, 
       			"formulas",
        		lv_formulas_18_0, 
        		"FoTCTLFormula");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleFoTCTLFormula
entryRuleFoTCTLFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFoTCTLFormulaRule()); }
	 iv_ruleFoTCTLFormula=ruleFoTCTLFormula 
	 { $current=$iv_ruleFoTCTLFormula.current; } 
	 EOF 
;

// Rule FoTCTLFormula
ruleFoTCTLFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFoTCTLFormulaAccess().getFoTCTLFormulaAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFoTCTLFormulaAccess().getFormulaFormulaDefinitionParserRuleCall_1_0()); 
	    }
		lv_formula_1_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFoTCTLFormulaRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_1_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';\n' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFoTCTLFormulaAccess().getSemicolonLineFeedLfKeyword_2());
    }
)
;





// Entry rule entryRuleFormulaDefinition
entryRuleFormulaDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormulaDefinitionRule()); }
	 iv_ruleFormulaDefinition=ruleFormulaDefinition 
	 { $current=$iv_ruleFormulaDefinition.current; } 
	 EOF 
;

// Rule FormulaDefinition
ruleFormulaDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFormulaDefinitionAccess().getAtomicFormulaParserRuleCall_0()); 
    }
    this_AtomicFormula_0=ruleAtomicFormula
    { 
        $current = $this_AtomicFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFormulaDefinitionAccess().getUnaryFormulaParserRuleCall_1()); 
    }
    this_UnaryFormula_1=ruleUnaryFormula
    { 
        $current = $this_UnaryFormula_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFormulaDefinitionAccess().getBinaryFormulaParserRuleCall_2()); 
    }
    this_BinaryFormula_2=ruleBinaryFormula
    { 
        $current = $this_BinaryFormula_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNodeLabelPredicateDecl
entryRuleNodeLabelPredicateDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeLabelPredicateDeclRule()); }
	 iv_ruleNodeLabelPredicateDecl=ruleNodeLabelPredicateDecl 
	 { $current=$iv_ruleNodeLabelPredicateDecl.current; } 
	 EOF 
;

// Rule NodeLabelPredicateDecl
ruleNodeLabelPredicateDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeLabelPredicateDeclAccess().getNodeLabelPredicateDeclAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_NODE_PREDICATE_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNodeLabelPredicateDeclAccess().getNameNode_predicate_nameTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeLabelPredicateDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"node_predicate_name");
	    }

)
))
;





// Entry rule entryRuleEdgeLabelPredicateDecl
entryRuleEdgeLabelPredicateDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeLabelPredicateDeclRule()); }
	 iv_ruleEdgeLabelPredicateDecl=ruleEdgeLabelPredicateDecl 
	 { $current=$iv_ruleEdgeLabelPredicateDecl.current; } 
	 EOF 
;

// Rule EdgeLabelPredicateDecl
ruleEdgeLabelPredicateDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEdgeLabelPredicateDeclAccess().getEdgeLabelPredicateDeclAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_EDGE_PREDICATE_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEdgeLabelPredicateDeclAccess().getNameEdge_predicate_nameTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeLabelPredicateDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"edge_predicate_name");
	    }

)
))
;





// Entry rule entryRuleConstantSymbolDecl
entryRuleConstantSymbolDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantSymbolDeclRule()); }
	 iv_ruleConstantSymbolDecl=ruleConstantSymbolDecl 
	 { $current=$iv_ruleConstantSymbolDecl.current; } 
	 EOF 
;

// Rule ConstantSymbolDecl
ruleConstantSymbolDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantSymbolDeclAccess().getConstantSymbolDeclAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_CONSTANT_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantSymbolDeclAccess().getNameConstant_nameTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantSymbolDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"constant_name");
	    }

)
))
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantAccess().getConstantAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
        }
	otherlv_1=RULE_CONSTANT_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getConstantAccess().getDeclarationConstantSymbolDeclCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAccess().getVariableAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
        }
	otherlv_1=RULE_VARIABLE_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getDeclarationQuantifiedFormulaCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleUnaryFormula
entryRuleUnaryFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryFormulaRule()); }
	 iv_ruleUnaryFormula=ruleUnaryFormula 
	 { $current=$iv_ruleUnaryFormula.current; } 
	 EOF 
;

// Rule UnaryFormula
ruleUnaryFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryFormulaAccess().getNotFormulaParserRuleCall_0()); 
    }
    this_NotFormula_0=ruleNotFormula
    { 
        $current = $this_NotFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryFormulaAccess().getUnaryTemporalFormulaParserRuleCall_1()); 
    }
    this_UnaryTemporalFormula_1=ruleUnaryTemporalFormula
    { 
        $current = $this_UnaryTemporalFormula_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryFormulaAccess().getQuantifiedFormulaParserRuleCall_2()); 
    }
    this_QuantifiedFormula_2=ruleQuantifiedFormula
    { 
        $current = $this_QuantifiedFormula_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBinaryFormula
entryRuleBinaryFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryFormulaRule()); }
	 iv_ruleBinaryFormula=ruleBinaryFormula 
	 { $current=$iv_ruleBinaryFormula.current; } 
	 EOF 
;

// Rule BinaryFormula
ruleBinaryFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBinaryFormulaAccess().getBinaryLogicFormulaParserRuleCall_0()); 
    }
    this_BinaryLogicFormula_0=ruleBinaryLogicFormula
    { 
        $current = $this_BinaryLogicFormula_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBinaryFormulaAccess().getBinaryTemporalFormulaParserRuleCall_1()); 
    }
    this_BinaryTemporalFormula_1=ruleBinaryTemporalFormula
    { 
        $current = $this_BinaryTemporalFormula_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicFormula
entryRuleAtomicFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicFormulaRule()); }
	 iv_ruleAtomicFormula=ruleAtomicFormula 
	 { $current=$iv_ruleAtomicFormula.current; } 
	 EOF 
;

// Rule AtomicFormula
ruleAtomicFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicFormulaAccess().getNodeLabelPredicateParserRuleCall_0()); 
    }
    this_NodeLabelPredicate_0=ruleNodeLabelPredicate
    { 
        $current = $this_NodeLabelPredicate_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAtomicFormulaAccess().getEdgeLabelPredicateParserRuleCall_1()); 
    }
    this_EdgeLabelPredicate_1=ruleEdgeLabelPredicate
    { 
        $current = $this_EdgeLabelPredicate_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNodeLabelPredicate
entryRuleNodeLabelPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeLabelPredicateRule()); }
	 iv_ruleNodeLabelPredicate=ruleNodeLabelPredicate 
	 { $current=$iv_ruleNodeLabelPredicate.current; } 
	 EOF 
;

// Rule NodeLabelPredicate
ruleNodeLabelPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNodeLabelPredicateAccess().getNodeLabelPredicateAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeLabelPredicateRule());
	        }
        }
	otherlv_1=RULE_NODE_PREDICATE_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getNodeLabelPredicateAccess().getDeclarationNodeLabelPredicateDeclCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeLabelPredicateAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNodeLabelPredicateAccess().getTermTermParserRuleCall_3_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNodeLabelPredicateRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNodeLabelPredicateAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleEdgeLabelPredicate
entryRuleEdgeLabelPredicate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeLabelPredicateRule()); }
	 iv_ruleEdgeLabelPredicate=ruleEdgeLabelPredicate 
	 { $current=$iv_ruleEdgeLabelPredicate.current; } 
	 EOF 
;

// Rule EdgeLabelPredicate
ruleEdgeLabelPredicate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getEdgeLabelPredicateAccess().getEdgeLabelPredicateAction_0(),
            $current);
    }
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeLabelPredicateRule());
	        }
        }
	otherlv_1=RULE_EDGE_PREDICATE_NAME
	{
		newLeafNode(otherlv_1, grammarAccess.getEdgeLabelPredicateAccess().getDeclarationEdgeLabelPredicateDeclCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEdgeLabelPredicateAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeLabelPredicateAccess().getTermTermParserRuleCall_3_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeLabelPredicateRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEdgeLabelPredicateAccess().getCommaKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeLabelPredicateAccess().getSecondTermTermParserRuleCall_5_0()); 
	    }
		lv_secondTerm_5_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeLabelPredicateRule());
	        }
       		set(
       			$current, 
       			"secondTerm",
        		lv_secondTerm_5_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEdgeLabelPredicateAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleQuantifiedFormula
entryRuleQuantifiedFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifiedFormulaRule()); }
	 iv_ruleQuantifiedFormula=ruleQuantifiedFormula 
	 { $current=$iv_ruleQuantifiedFormula.current; } 
	 EOF 
;

// Rule QuantifiedFormula
ruleQuantifiedFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuantifiedFormulaAccess().getQuantifiedFormulaAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedFormulaAccess().getQuantifierQuantifierEnumRuleCall_1_0()); 
	    }
		lv_quantifier_1_0=ruleQuantifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedFormulaRule());
	        }
       		set(
       			$current, 
       			"quantifier",
        		lv_quantifier_1_0, 
        		"Quantifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=' ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getQuantifiedFormulaAccess().getSpaceKeyword_2());
    }
(
(
		lv_name_3_0=RULE_VARIABLE_NAME
		{
			newLeafNode(lv_name_3_0, grammarAccess.getQuantifiedFormulaAccess().getNameVariable_nameTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getQuantifiedFormulaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"variable_name");
	    }

)
)	otherlv_4=' ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getQuantifiedFormulaAccess().getSpaceKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQuantifiedFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_5_0()); 
	    }
		lv_subformula_5_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuantifiedFormulaRule());
	        }
       		set(
       			$current, 
       			"subformula",
        		lv_subformula_5_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleNotFormula
entryRuleNotFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotFormulaRule()); }
	 iv_ruleNotFormula=ruleNotFormula 
	 { $current=$iv_ruleNotFormula.current; } 
	 EOF 
;

// Rule NotFormula
ruleNotFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='NOT ' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotFormulaAccess().getNOTKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotFormulaAccess().getNotFormulaAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_2_0()); 
	    }
		lv_subformula_2_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotFormulaRule());
	        }
       		set(
       			$current, 
       			"subformula",
        		lv_subformula_2_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleUnaryTemporalFormula
entryRuleUnaryTemporalFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryTemporalFormulaRule()); }
	 iv_ruleUnaryTemporalFormula=ruleUnaryTemporalFormula 
	 { $current=$iv_ruleUnaryTemporalFormula.current; } 
	 EOF 
;

// Rule UnaryTemporalFormula
ruleUnaryTemporalFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryTemporalFormulaAccess().getUnaryTemporalFormulaAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_1_0()); 
	    }
		lv_temporalOperator_1_0=ruleTemporalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"temporalOperator",
        		lv_temporalOperator_1_0, 
        		"TemporalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnaryTemporalFormulaAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_3_0()); 
	    }
		lv_comparisonOperator_3_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"comparisonOperator",
        		lv_comparisonOperator_3_0, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getUnaryTemporalFormulaAccess().getValueINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryTemporalFormulaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"INT");
	    }

)
)	otherlv_5='] ' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnaryTemporalFormulaAccess().getRightSquareBracketSpaceKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryTemporalFormulaAccess().getSubformulaFormulaDefinitionParserRuleCall_6_0()); 
	    }
		lv_subformula_6_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"subformula",
        		lv_subformula_6_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBinaryTemporalFormula
entryRuleBinaryTemporalFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryTemporalFormulaRule()); }
	 iv_ruleBinaryTemporalFormula=ruleBinaryTemporalFormula 
	 { $current=$iv_ruleBinaryTemporalFormula.current; } 
	 EOF 
;

// Rule BinaryTemporalFormula
ruleBinaryTemporalFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinaryTemporalFormulaAccess().getBinaryTemporalFormulaAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryTemporalFormulaAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTemporalFormulaAccess().getLeftSubformulaFormulaDefinitionParserRuleCall_2_0()); 
	    }
		lv_leftSubformula_2_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"leftSubformula",
        		lv_leftSubformula_2_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=' ' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinaryTemporalFormulaAccess().getSpaceKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTemporalFormulaAccess().getTemporalOperatorTemporalOperatorEnumRuleCall_4_0()); 
	    }
		lv_temporalOperator_4_0=ruleTemporalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"temporalOperator",
        		lv_temporalOperator_4_0, 
        		"TemporalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBinaryTemporalFormulaAccess().getLeftSquareBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTemporalFormulaAccess().getComparisonOperatorComparisonOperatorEnumRuleCall_6_0()); 
	    }
		lv_comparisonOperator_6_0=ruleComparisonOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"comparisonOperator",
        		lv_comparisonOperator_6_0, 
        		"ComparisonOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_7_0=RULE_INT
		{
			newLeafNode(lv_value_7_0, grammarAccess.getBinaryTemporalFormulaAccess().getValueINTTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinaryTemporalFormulaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"INT");
	    }

)
)	otherlv_8='] ' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getBinaryTemporalFormulaAccess().getRightSquareBracketSpaceKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryTemporalFormulaAccess().getRightSubformulaFormulaDefinitionParserRuleCall_9_0()); 
	    }
		lv_rightSubformula_9_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryTemporalFormulaRule());
	        }
       		set(
       			$current, 
       			"rightSubformula",
        		lv_rightSubformula_9_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getBinaryTemporalFormulaAccess().getRightParenthesisKeyword_10());
    }
)
;





// Entry rule entryRuleBinaryLogicFormula
entryRuleBinaryLogicFormula returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryLogicFormulaRule()); }
	 iv_ruleBinaryLogicFormula=ruleBinaryLogicFormula 
	 { $current=$iv_ruleBinaryLogicFormula.current; } 
	 EOF 
;

// Rule BinaryLogicFormula
ruleBinaryLogicFormula returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBinaryLogicFormulaAccess().getBinaryLogicFormulaAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBinaryLogicFormulaAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryLogicFormulaAccess().getLeftSubformulaFormulaDefinitionParserRuleCall_2_0()); 
	    }
		lv_leftSubformula_2_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryLogicFormulaRule());
	        }
       		set(
       			$current, 
       			"leftSubformula",
        		lv_leftSubformula_2_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryLogicFormulaAccess().getOperatorBinaryLogicOperatorEnumRuleCall_3_0()); 
	    }
		lv_operator_3_0=ruleBinaryLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryLogicFormulaRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"BinaryLogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryLogicFormulaAccess().getRightSubformulaFormulaDefinitionParserRuleCall_4_0()); 
	    }
		lv_rightSubformula_4_0=ruleFormulaDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryLogicFormulaRule());
	        }
       		set(
       			$current, 
       			"rightSubformula",
        		lv_rightSubformula_4_0, 
        		"FormulaDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBinaryLogicFormulaAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getVariableParserRuleCall_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getConstantParserRuleCall_1()); 
    }
    this_Constant_1=ruleConstant
    { 
        $current = $this_Constant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermAccess().getAtomicPropositionParserRuleCall_2()); 
    }
    this_AtomicProposition_2=ruleAtomicProposition
    { 
        $current = $this_AtomicProposition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomicProposition
entryRuleAtomicProposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicPropositionRule()); }
	 iv_ruleAtomicProposition=ruleAtomicProposition 
	 { $current=$iv_ruleAtomicProposition.current; } 
	 EOF 
;

// Rule AtomicProposition
ruleAtomicProposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicPropositionAccess().getAtomicPropositionAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_VARIABLE_NAME
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAtomicPropositionAccess().getNameVariable_nameTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicPropositionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"variable_name");
	    }

)
))
;





// Rule Quantifier
ruleQuantifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='exists' 
	{
        $current = grammarAccess.getQuantifierAccess().getEXISTSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuantifierAccess().getEXISTSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='forall' 
	{
        $current = grammarAccess.getQuantifierAccess().getFORALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuantifierAccess().getFORALLEnumLiteralDeclaration_1()); 
    }
));



// Rule BinaryLogicOperator
ruleBinaryLogicOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0=' & ' 
	{
        $current = grammarAccess.getBinaryLogicOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1=' <=> ' 
	{
        $current = grammarAccess.getBinaryLogicOperatorAccess().getEQUIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryLogicOperatorAccess().getEQUIVEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2=' => ' 
	{
        $current = grammarAccess.getBinaryLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3=' | ' 
	{
        $current = grammarAccess.getBinaryLogicOperatorAccess().getOREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinaryLogicOperatorAccess().getOREnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4=' ^ ' 
	{
        $current = grammarAccess.getBinaryLogicOperatorAccess().getXOREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getBinaryLogicOperatorAccess().getXOREnumLiteralDeclaration_4()); 
    }
));



// Rule ComparisonOperator
ruleComparisonOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0=' = ' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1=' > ' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2=' >= ' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3=' < ' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLESSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOperatorAccess().getLESSEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4=' <= ' 
	{
        $current = grammarAccess.getComparisonOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4()); 
    }
));



// Rule TemporalOperator
ruleTemporalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AF' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getAFEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTemporalOperatorAccess().getAFEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='AG' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getAGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTemporalOperatorAccess().getAGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='AU' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getAUEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTemporalOperatorAccess().getAUEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='EF' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getEFEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTemporalOperatorAccess().getEFEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='EG' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getEGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTemporalOperatorAccess().getEGEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='EU' 
	{
        $current = grammarAccess.getTemporalOperatorAccess().getEUEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTemporalOperatorAccess().getEUEnumLiteralDeclaration_5()); 
    }
));



RULE_NODE_PREDICATE_NAME : 'A'..'Z' ('a'..'z'|'A'..'Z')+;

RULE_EDGE_PREDICATE_NAME : 'a'..'z' ('a'..'z'|'A'..'Z')+;

RULE_VARIABLE_NAME : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_CONSTANT_NAME : 'A'..'Z' ('A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


