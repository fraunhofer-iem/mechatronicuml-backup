	import 'http://www.muml.org/pm/hardware/hwvaluetype/1.0.0'
	import 'http://www.muml.org/pm/hardware/hwresource/1.0.0'
	import 'http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0'
	import 'http://www.muml.org/pm/hardware/hwresourceinstance/1.0.0'
	import 'http://www.muml.org/pim/instance/1.0.0'
	import 'http://www.muml.org/pim/connector/1.0.0'
	import 'http://www.muml.org/pim/valuetype/1.0.0'
	import 'http://www.muml.org/psm/properties/1.0.0'
	import 'http://www.muml.org/core/expressions/common/1.0.0'
	import 'http://www.muml.org/eloquent/adapter/muml/oclcontext/1.0.0'
	
	-- The OCLContext operations represent some kind of public API that can/should be used
	-- when specifying constraints; The other operations are "internal" helpers that may change in the
	-- future. TODO: more documentation.	
	context oclcontext::OCLContext
		-- unused here
	--	def: getECUs(ecuNames : Set(String)) : Sequence(hwresourceinstance::StructuredResourceInstance) =
	--		self.hardwarePlatformInstanceConfiguration.resources->select(ecuNames->includes(name))->asSequence()
		
		
		def: getECU(ecuName : String) : Set(hwresourceinstance::StructuredResourceInstance) =
			self.getAllStructuredHWInstances()->select(name = ecuName)	
			
		def: getAllSWInstances() : Set(instance::ComponentInstance) =
			self.componentInstanceConfiguration.getAllEmbeddedInstances()
			
		def: getAllSWInstancesOfSCI(instanceName:String) : Set(instance::ComponentInstance) =
			self.componentInstanceConfiguration.getAllEmbeddedInstancesOfSCI(instanceName)	
		
		def: getSWInstance(instanceName : String) : Set(instance::ComponentInstance) =
			self.getAllSWInstances()->select(name = instanceName)
			
		def: getSWInstanceOfSCI(instanceName : String, of : String) : instance::ComponentInstance =
			self.getAllSWInstancesOfSCI(of)->any(name = instanceName)	
		
		def: getAllHWInstances() : Set(hwresourceinstance::ResourceInstance) =
			self.getAllHWPlatformInstances()->collect(embeddedHPIC.resources)->asSet()
			
		def: getAllHWInstancesOfPlatformInstance(platformInstance:String) : Set(hwresourceinstance::ResourceInstance) =
			self.hardwarePlatformInstanceConfiguration.getAllEmbeddedPlatformInstancesOfPlatformInstance(platformInstance)->collect(embeddedHPIC.resources)->asSet()
			
		def: getAllStructuredHWInstances() : Set(hwresourceinstance::StructuredResourceInstance) =
			self.getAllHWInstances()->select(
				oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
			)->collect(
				oclAsType(hwresourceinstance::StructuredResourceInstance)
			)->asSet()
			
		def: getAllHWPlatformInstances() : Set(hwplatforminstance::HWPlatformInstance) =
			self.hardwarePlatformInstanceConfiguration.getAllEmbeddedPlatformInstances()
			
		def: getHWPlatformInstance(platformInstanceName : String) : Set(hwplatforminstance::HWPlatformInstance) =
			self.getAllHWPlatformInstances()->select(name = platformInstanceName)
			
		def: allocateToECU(instanceName : String, ecuName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::StructuredResourceInstance))
			=
			self.getSWInstance(instanceName)->collect(ci |
				self.allocateToECU(ci, ecuName)
			)->asSet()
			
		def: allocateToECU(componentInstance : instance::ComponentInstance, ecuName : String)
			: Set(Tuple(first : instance::ComponentInstance, second :hwresourceinstance::StructuredResourceInstance))
			=
			componentInstance->asSet()->product(self.getECU(ecuName))->asSet()
			
		def: allocateToECU(componentInstance : Set(instance::ComponentInstance), ecuName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::StructuredResourceInstance))
			=
			componentInstance->product(self.getECU(ecuName))->asSet()	
			
		def: allocateEmbeddedToPlatformInstance(swInstanceName : String, platformInstanceName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::StructuredResourceInstance
			))
			=
			self.getSWInstance(swInstanceName)->collect(ci|ci.getAllEmbeddedInstances())->product(
				-- only to direct embedded StructuredResourceInstances
				self.getHWPlatformInstance(platformInstanceName)->collect(pI|pI.embeddedHPIC.resources)
					->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))
			)
			
		def: allocateEmbeddedToPlatformInstanceOf(swInstanceName : String, ofInstanceName:String, platformInstanceName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::StructuredResourceInstance
			))
			=
			self.getSWInstanceOfSCI(swInstanceName,ofInstanceName)->collect(ci|ci.getAllEmbeddedInstances())->product(
				-- only to direct embedded StructuredResourceInstances
				self.getHWPlatformInstance(platformInstanceName)->collect(pI|pI.embeddedHPIC.resources)
					->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))
			)	
		
		def: allocateToDifferentECUs(instance1 : String, instance2 : String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			self.getSWInstance(instance1)->product(self.getSWInstance(instance2))->reject(first=second)
			
		def: allocateCompontentsOfSCIToDifferentECUs(instance1 : String, instance2 : String, of:String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			Set{Tuple{first = self.getSWInstanceOfSCI(instance1,of), second = self.getSWInstanceOfSCI(instance2,of)}}	
			
		def: allocateToSameECUs(instance1 : String, instance2 : String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			self.allocateToDifferentECUs(instance1, instance2)
			
		def: allocateCompontentsOfSCIToSameECU(instance1 : String, instance2 : String, of:String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			self.allocateCompontentsOfSCIToDifferentECUs(instance1, instance2,of)	
			
		def: allocateCommunicatingComponentsToConnectedECUs() : Set(Tuple(
			c1 : instance::ComponentInstance,
			e1 :hwresourceinstance::StructuredResourceInstance,
			c2 : instance::ComponentInstance,
			e2 :hwresourceinstance::StructuredResourceInstance
		)) =
			let allHWInstances : Set(hwresourceinstance::StructuredResourceInstance)
			=
			self.getAllStructuredHWInstances()
			in 
			self.componentInstanceConfiguration.getCommunicatingComponents()->collect(s |
				self.allocateComponentsToConnectedECUs(s->at(1), s->at(2), 
					allHWInstances
				)
			)->asSet()
	
		def: allocateComponentsToConnectedECUs(c1 : instance::ComponentInstance, c2 : instance::ComponentInstance,
			allowedECUs : Set(hwresourceinstance::StructuredResourceInstance)
		) : Set(Tuple(
			c1 : instance::ComponentInstance,
			e1 : hwresourceinstance::StructuredResourceInstance,
			c2 : instance::ComponentInstance,
			e2 : hwresourceinstance::StructuredResourceInstance
		)) =
			allowedECUs->collect(e1 |
				e1.getConnectedECUs()->union(Set{e1})
					->select(e | allowedECUs->includes(e))
					->collect(e2 |
						Set{
							Tuple{c1 = c1, e1 = e1, c2 = c2, e2 = e2},
							Tuple{c1 = c1, e1 = e2, c2 = c2, e2 = e1}
						}
					)
			)->asSet()
			
		def: colocateSCIAndEmbeddedParts(componentName : String) : Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance)) =
			let ci : Set(instance::ComponentInstance) = self.getSWInstance(componentName)
			in
			ci->collect(c| c->product(c.getAllEmbeddedInstances()->reject(cs | c = cs)))->asSet()
			
		def: getSWInstancesWithRequiredMemory() : Set(instance::ComponentInstance) =
			self.getAllSWInstances()->select(ci |
				ci.getMemoryExtensions()->notEmpty()
			)
			
		def: getHWInstancesWithMaxMemory() : Set(hwresourceinstance::StructuredResourceInstance) =
			self.getAllStructuredHWInstances()->select(
				getMemoryResourceInstances()->notEmpty()
			)->asSet()
			
		def: maxMemoryConsumption() : Set(
			Tuple(
				requiredMemory : Set(
						Tuple(
							componentInstance : instance::ComponentInstance,
							resourceInstance : hwresourceinstance::StructuredResourceInstance,
							requiredMemory : Real							
						)
				),
				maxMemory : Real
			)
		)
			=
			let swInstances : Set(instance::ComponentInstance) = self.getSWInstancesWithRequiredMemory()
			in
			self.getHWInstancesWithMaxMemory()->collect(ecu |
				Tuple{
					maxMemory = ecu.getMemoryResourceInstances()->any(true).memorySize.convertToByte(),
					requiredMemory = swInstances->product(ecu->asSet())->collect(t |
						Tuple {
							componentInstance = t.first,
							resourceInstance = t.second,
							requiredMemory = t.first.getMemoryExtensions()->any(true).requiredMemory.convertToByte()
						}
					)->asSet()
				}
			)->asSet()
			
		def: getSWInstancesWithWCET(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance) : Set(instance::ComponentInstance) =
			instances->select(not getWCETExtensionForECU(ecu).oclIsUndefined())
			
		def: getSWInstancesForSchedulingOnECU(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance) : Set(instance::ComponentInstance) =
			self.getSWInstancesWithWCET(instances, ecu)->select(not getSchedulingExtension().oclIsUndefined())
			
	context connector::ConnectorInstance
		-- basically, a DFS
		def: getReachableConnectors() : OrderedSet(OrderedSet(connector::ConnectorInstance)) =
			OrderedSet{OrderedSet{self}}->closure(s : OrderedSet(connector::ConnectorInstance) |
				s->last()->collect(c |
					c.connectorEndpointInstances->collect(connectorInstances)
				)->select(c |
					-- move forward
					if s->size() >= 2 then 
						s->at(s->size() - 1).connectorEndpointInstances
					else
						OrderedSet{}
					endif
					->intersection(c.connectorEndpointInstances)->isEmpty()
				)->collectNested(c |
					s->append(c)
				)
			)	
			
	context hwplatforminstance::HWPlatformInstanceConfiguration
		def: getAllEmbeddedPlatformInstances() : Set(hwplatforminstance::HWPlatformInstance) =
			self.hwplatformInstances->closure(h |
				h->asSet()->union(h.embeddedHPIC.hwplatformInstances)
			)->asSet()
			
		def: getAllEmbeddedPlatformInstancesOfPlatformInstance(platformInstanceName:String) : Set(hwplatforminstance::HWPlatformInstance) =
			self.hwplatformInstances->select(name=platformInstanceName)->closure(h |
				h->asSet()->union(h.embeddedHPIC.hwplatformInstances)
			)->asSet()	
	
	-- XXX: hacky
	context hwresourceinstance::ResourceInstance
		def: resolveToStructuredResourceInstances() : Set(hwresourceinstance::StructuredResourceInstance) =
			if self.oclIsKindOf(hwresourceinstance::DeviceInstance) then
				--self.hwports->select(oclIsKindOf(hwplatforminstance::HWPortInstance))
				--	->collect(oclAsType(hwplatforminstance::HWPortInstance))
				--	->collect(connectorInstances.connectorEndpointInstances)
				--	->reject(ep | self.hwports->includes(ep))
				--	->select(oclIsKindOf(hwplatforminstance::HWPortInstance))
				--	->collect(eContainer())->select(oclIsKindOf(hwresourceinstance::ResourceInstance))
				-- this should be the more sane/correct approach
				self.getConnectedECUs()->asSet()
			else
				self->oclIsTypeOf(hwresourceinstance::StructuredResourceInstance)->oclAsType(hwresourceinstance::StructuredResourceInstance)->asSet()
			endif
			
		def: getConnectedECUs() : Set(hwresourceinstance::StructuredResourceInstance) =
			self.getConnectors()->collect(c |
				c.connectorEndpointInstances->select(oclIsKindOf(hwresourceinstance::HWPort))
					->collect(oclAsType(hwresourceinstance::HWPort).parentResourceInstance)
			)->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))->collect(oclAsType(hwresourceinstance::StructuredResourceInstance))->asSet()->reject(r | r = self)
		
		def: getConnectors(other : hwresourceinstance::ResourceInstance) : OrderedSet(OrderedSet(connector::ConnectorInstance)) =
			self.getConnectors()->select(s |
				s->last().connectorEndpointInstances
					->select(oclIsKindOf(hwresourceinstance::HWPort))
					->collect(oclAsType(hwresourceinstance::HWPort).parentResourceInstance)
					->includes(other)
			)
			
		def: getConnectors() : OrderedSet(OrderedSet(connector::ConnectorInstance)) =
			self.hwports->select(oclIsKindOf(connector::ConnectorEndpointInstance))
				->collect(oclAsType(connector::ConnectorEndpointInstance))
				->collect(connectorInstances)
				->collectNested(c | c.getReachableConnectors())
				->iterate(it : OrderedSet(OrderedSet(connector::ConnectorInstance)); acc : OrderedSet(OrderedSet(connector::ConnectorInstance)) = OrderedSet{} |
					acc->union(it)->asOrderedSet()
				)->asOrderedSet()
		
		def: getReachableECUs() : Set(hwresourceinstance::ResourceInstance) =
			self->asSet()->closure(
				getConnectedECUs()
			)->reject(r | r = self)
			
	context hwresourceinstance::StructuredResourceInstance
		def: getMemoryResourceInstances() : Set(hwresourceinstance::MemoryResourceInstance) =
			self.embeddedAtomicResourceInstances->select(
				oclIsKindOf(hwresourceinstance::MemoryResourceInstance)
			)->collect(
				oclAsType(hwresourceinstance::MemoryResourceInstance)
			)->select(
				memoryType = hwresource::MemoryKind::RAM
			)->asSet()
		
	context instance::ComponentInstanceConfiguration
		def: getAllEmbeddedInstances() : Set(instance::ComponentInstance) =
			self.componentInstances->closure(c |
				if c.oclIsKindOf(instance::StructuredComponentInstance) then
					c->asSet()->union(c.oclAsType(instance::StructuredComponentInstance).embeddedCIC.componentInstances)
				else
					c->asSet()
				endif
			)->asSet()
			
		def: getAllEmbeddedInstancesOfSCI(instanceName:String) : Set(instance::ComponentInstance) =
			self.componentInstances->select(name=instanceName)->closure(c |
				if c.oclIsKindOf(instance::StructuredComponentInstance) then
					c->asSet()->union(c.oclAsType(instance::StructuredComponentInstance).embeddedCIC.componentInstances)
				else
					c->asSet()
				endif
			)->asSet()		
			
		def: getCICs() : Set(instance::ComponentInstanceConfiguration) =
			self->asSet()->closure(
				componentInstances->select(oclIsKindOf(instance::StructuredComponentInstance))
					->collect(oclAsType(instance::StructuredComponentInstance))
					->collect(embeddedCIC)
			)
			
		def: getConnectors() : Set(instance::PortConnectorInstance) =
			self.getCICs()->collect(portConnectorInstances)->select(portInstances->size() = 2)->asSet()
			
		def: getCommunicatingComponents() : Set(OrderedSet(instance::ComponentInstance)) =
			self.getCICs()->collect(getConnectors())
				->collectNested(
					OrderedSet{
						portInstances->at(1).componentInstance,
						portInstances->at(2).componentInstance
					}
				)->asSet()
			
	context instance::ComponentInstance
		def: getAllEmbeddedInstances() : Set(instance::ComponentInstance) =
			if self.oclIsKindOf(instance::StructuredComponentInstance) then
				self->asSet()->union(self.oclAsType(instance::StructuredComponentInstance).embeddedCIC.getAllEmbeddedInstances())
			else
				self->asSet()
			endif

		def: getMemoryExtensions() : Set(properties::RequiredMemory) =
			self.extensions->select(oclIsKindOf(properties::RequiredMemory))
				->collect(oclAsType(properties::RequiredMemory))->asSet()
				
		def: getSchedulingExtensions() : Set(properties::Scheduling) =
			self.extensions->select(oclIsKindOf(properties::Scheduling))
				->collect(oclAsType(properties::Scheduling))->asSet()
				
		def: getSchedulingExtension() : properties::Scheduling =
			self.getSchedulingExtensions()->any(true)
				
		def: getWCETExtensions() : Set(properties::WCET) =
			self.extensions->select(oclIsKindOf(properties::WCET))
				->collect(oclAsType(properties::WCET))->asSet()
				
		def: getWCETExtensionForECU(ecu : hwresourceinstance::ResourceInstance) : properties::WCET =
			let wcets : Set(properties::WCET) = self.getWCETExtensions()
			in
			let wcet : properties::WCET = wcets->any(resourceInstance = ecu)
			in
			if wcet.oclIsUndefined() then
                -- XXX: this prone to fail, if all resourceInstance references are <> null
                -- (FIXME later)
				wcets->any(resourceInstance.oclIsUndefined())
			else
				wcet
			endif
	
	--normalized to milliseconds			
	context valuetype::TimeValue
		def: getLiteralVal() : Real =
			if self._'value'.oclIsKindOf(common::LiteralExpression) then
				if self._'unit'.toString() = 'SECONDS' then
					self._'value'.oclAsType(common::LiteralExpression).value.toReal()*1000
				else
					if self._'unit'.toString() = 'MICROSECONDS' then
						self._'value'.oclAsType(common::LiteralExpression).value.toReal()/1000
					else
						 if self._'unit'.toString() = 'HOURS' then
							self._'value'.oclAsType(common::LiteralExpression).value.toReal()*3600000
						 else
							if self._'unit'.toString() = 'DAYS' then 
								self._'value'.oclAsType(common::LiteralExpression).value.toReal()*86400000	
							else
								if self._'unit'.toString() = 'MINUTES' then 
									self._'value'.oclAsType(common::LiteralExpression).value.toReal()*60000
								else
									if self._'unit'.toString() = 'NANOSECONDS' then 
										self._'value'.oclAsType(common::LiteralExpression).value.toReal()/1000000
									else
										self._'value'.oclAsType(common::LiteralExpression).value.toReal()
									endif
								endif
							endif
						endif
					endif
				endif
			else
				42
			endif
			
			
-- CAN RTA (see Controller Area Network (CAN) schedulability analysis: Refuted, revisited and revised,
-- http://link.springer.com/article/10.1007%2Fs11241-007-9012-7)

context oclcontext::OCLContext

	def: busUtilization(busName : String) : Set(
		Tuple(
			utilization : Set(
				Tuple(
					c1 : instance::ComponentInstance,
					e1 : hwresourceinstance::ResourceInstance,
					c2 : instance::ComponentInstance,
					e2 : hwresourceinstance::ResourceInstance,
					utilization : Real 
				)
			),
			rval : Real
		)
	)
		=
		let canBus = self.getCANBus(busName)
		in
		let busECUPairs : Set(Tuple(first : hwresourceinstance::ResourceInstance, second : hwresourceinstance::ResourceInstance))
		=
		canBus.getConnectedECUs()->product(canBus.getConnectedECUs())->reject(t |
			t.first = t.second
				or not t.first.oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
				or not t.second.oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
		)
		in
		Set{
			Tuple{
				utilization = self.getSendingPortInstances()->collect(
					getMessageExtension()
				)->collect(msg |
					let senderPortInstance : instance::PortInstance
					=
					msg.extendableBase.oclAsType(instance::PortInstance)
					in
					let
					senderComponent : instance::ComponentInstance = senderPortInstance.componentInstance
					in
					let	receiverComponent : instance::ComponentInstance = senderPortInstance.getReceiverPortInstance().componentInstance
					in
					busECUPairs->collect(t |
						Tuple{
							c1 = senderComponent,
							e1 = t.first,
							c2 = receiverComponent,
							e2 = t.second,
							utilization = canBus.getUtilization(Set{msg})
						}
					)
				)->asSet(),
				rval = 1
			}
		}

	def: canRTA(busName : String) : Set(
			Tuple(
				lval : Set(
					Tuple(
						c1 : instance::ComponentInstance,
						e1 : hwresourceinstance::ResourceInstance,
						c2 : instance::ComponentInstance,
						e2 : hwresourceinstance::ResourceInstance,
						lval : Real
					)
				),
				rval : Real
			)
		)
			=
			let canBus = self.getCANBus(busName)
			in
			let possibleMessages : Set(Set(properties::CANMessageFrame))
			=
			canBus.getPossibleMessages(
				self.getSendingPortInstances()->collect(getMessageExtension())->asSet()
			)
			in
			possibleMessages->collect(messages |
				messages->collect(msg |
					let blockingTime : Real = canBus.getBlockingTime(msg.getLowerPriorityMessages(messages, true))
					in
					let busyPeriod : Real = msg.calculateBusyPeriod(msg.getHigherPriorityMessages(messages, false), canBus, blockingTime)
					in
					msg.calculateWorstCaseResponseTimeTuples(
						msg.getHigherPriorityMessages(messages, true),
						canBus, blockingTime, busyPeriod,
						self.getAllHWInstances()->select(
							oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
						)
					)
				)
			)->asSet()
			
			
		def: getCANBusses() : Set(hwplatforminstance::BusInstance) =
			self.getAllHWPlatformInstances()->collect(embeddedHPIC)->collect(
				networkingHardwareInstances
			)->select(
				oclIsKindOf(hwplatforminstance::BusInstance)
			)->collect(
				oclAsType(hwplatforminstance::BusInstance)
			)->asSet()
			
		def: getCANBus(busName : String) : hwplatforminstance::BusInstance =
			self.getCANBusses()->any(name = busName)
			
		def: getSendingPortInstances() : Set(instance::PortInstance) =
			self.getAllSWInstances()->collect(getSendingPortInstances())->asSet()
				
		def: getPowerset(portInstances : Set(instance::PortInstance)) : Set(Set(instance::PortInstance)) =
			Set{portInstances}->closure(s |
				s->collectNested(c |
					s->reject(elm | elm = c)
				)
			)->asSet()
			
	context hwplatforminstance::BusInstance
		def: getConnectedECUs() : Set(hwresourceinstance::ResourceInstance) =
			self.getConnectors()->select(path |
				-- path should contain other busses or bridges
				path->forAll(c |
					c.connectorEndpointInstances->forAll(ce |
						ce.oclIsKindOf(hwplatforminstance::NetworkingHardwareInstance) implies ce = self
					)
				)
			)->collect(path |
				path->collect(connectorEndpointInstances)->select(
					oclIsKindOf(hwplatforminstance::HWPortInstance)
				)->collect(oclAsType(hwplatforminstance::HWPortInstance).parentResourceInstance)
			)->asSet()
			
		def: getConnectors() : Set(OrderedSet(connector::ConnectorInstance)) =
			self.connectorInstances
				->collectNested(c | c.getReachableConnectors())
				->iterate(it : OrderedSet(OrderedSet(connector::ConnectorInstance)); acc : OrderedSet(OrderedSet(connector::ConnectorInstance)) = OrderedSet{} |
					acc->union(it)->asOrderedSet()
				)->asSet()
				
		def: getPossibleMessages(messages : Set(properties::CANMessageFrame)) : Set(Set(properties::CANMessageFrame)) =
			Set{messages}->closure(msgs |
				if self.getUtilization(msgs) < 1 then
					Set{msgs}
				else
					msgs->collectNested(msg |
						msgs->reject(elm | elm = msg)
					)
				endif
			)->select(msgs | self.getUtilization(msgs) < 1)
				
		def: getUtilization(messages : Set(properties::CANMessageFrame)) : Real =
			messages->collect(msg |
				self.getTransmissionTime(msg) / msg.period.getLiteralVal()
			)->sum()
				
		def: getTransmissionTime(message : properties::CANMessageFrame) : Real =
			-- TODO: can we use this? message.size.getInByte() / self.bandwidth.getInBpS()
			message.size.convertToByte() / self.bandwidth.convertToBytePerSecond()
			
			
		def: getBlockingTime(lmessages : Set(properties::CANMessageFrame)) : Real =
			lmessages->collect(msg | self.getTransmissionTime(msg))
				->union(Set{0})->_'max'()
				
		def: getBitTransmissionTime() : Real =
			1 / self.bandwidth.convertToBytePerSecond()

		context hwvaluetype::DataSize
		def: convertToByte() : Real = 
		if self._'value'.oclIsKindOf(Real) then
			if self._'unit' = DataSizeUnit::Byte then
					self._'value'
			else 
				if self._'unit' = DataSizeUnit::KByte then
					self._'value'*1024
				else
					if self._'unit' = DataSizeUnit::MByte then
						self._'value'*1024*1024
					else
						if self._'unit' = DataSizeUnit::GByte then
							self._'value'*1024*1024*1024
						else
							if self._'unit' = DataSizeUnit::Bit then
								self._'value'/8
							else
							0
							endif
						endif
					endif
				endif
			endif
		else 
			0
		endif
		
	context hwvaluetype::DataRate
		def: convertToBytePerSecond() : Real =
		if self._'value'.oclIsKindOf(Real) then
			if self._'unit' = DataRateUnit::bs then
				self._'value'/8
			else 
				if self._'unit' = DataRateUnit::Kbs then
					self._'value'*1024/8
				else 
					if self._'unit' = DataRateUnit::Mbs then
						self._'value'*1024*1024/8
					else 
						0
					endif
				endif
			endif
		else
		0 
		endif
				
	context instance::ComponentInstance
		def: getSendingPortInstances() : Set(instance::PortInstance) =
			self.portInstances->select(
				not getMessageExtension().oclIsUndefined()
			)->asSet()
			
	context instance::PortInstance
		def: getReceiverPortInstance() : instance::PortInstance =
			-- XXX: delegation ports!
			self.connectorInstances->any(true).connectorEndpointInstances->any(p | p <> self).oclAsType(instance::PortInstance)
			
		def: getMessageExtensions() : Set(properties::CANMessageFrame) =
			self.extensions->select(oclIsKindOf(properties::CANMessageFrame))
				->collect(oclAsType(properties::CANMessageFrame))->asSet()
				
		def: getMessageExtension() : properties::CANMessageFrame =
			self.getMessageExtensions()->any(true)
			
	context valuetype::NaturalNumber
		def: getVal() : Integer =
			self._'value'
			
	context properties::CANMessageFrame
		def: getLowerPriorityMessages(msgs : Set(properties::CANMessageFrame), strict : Boolean) : Set(properties::CANMessageFrame) =
			msgs->select(msg |
				if strict then
					msg.priority.getVal() > self.priority.getVal()
				else
					msg.priority.getVal() >= self.priority.getVal()
				endif
			)
					
		def: getHigherPriorityMessages(msgs : Set(properties::CANMessageFrame), strict : Boolean) : Set(properties::CANMessageFrame) =
			msgs - self.getLowerPriorityMessages(msgs, not strict)
			
		def: ceil(val : Real) : Integer =
			let floor : Integer = val.floor()
			in
			if floor = val then
				floor
			else
				floor + 1
			endif
			
		def: calculateBusyPeriod(hemessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance, blockingTime : Real) : Real
			=
			OrderedSet{canBus.getTransmissionTime(self)}->closure(t : Real |
				hemessages->collect(msg |
					self.ceil(
						t / msg.period.getLiteralVal()
					) * canBus.getTransmissionTime(msg)
				)->sum() + blockingTime
			)->last()
			
		def: calculateWaitTimeForInstanceq(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, q : Integer
		) : Real
			=
			let transmissionQ : Real = q * canBus.getTransmissionTime(self)
			in
			OrderedSet{blockingTime + transmissionQ}->closure(w : Real |
				hmessages->collect(msg |
					self.ceil(
						(w + canBus.getBitTransmissionTime()) / msg.period.getLiteralVal()
					) * canBus.getTransmissionTime(msg)
				)->sum() + blockingTime + transmissionQ
			)->last()
			
		def: calculateWorstCaseResponseTimeForInstanceq(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, q : Integer
		) : Real
			=
			self.calculateWaitTimeForInstanceq(hmessages, canBus, blockingTime, q)
				- q * self.period.getLiteralVal() + canBus.getTransmissionTime(self)
				
		def: calculateWorstCaseResponseTime(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, busyPeriod : Real
		) : Tuple(worstCaseResponseTime : Real, instance : Integer)
			=
			let maxInstances : Integer = self.ceil(busyPeriod / self.period.getLiteralVal())
			in
			let worstCaseResponseTimes : OrderedSet(Real) = OrderedSet{0 .. maxInstances - 1}->collect(q |
				self.calculateWorstCaseResponseTimeForInstanceq(
					hmessages, canBus, blockingTime, q
				)
			)->asOrderedSet()
			in
			let worstCaseResponseTime : Real = worstCaseResponseTimes->_'max'()
			in
			Tuple{
				worstCaseResponseTime = worstCaseResponseTime,
				instance = worstCaseResponseTimes->indexOf(worstCaseResponseTime) - 1
			}
			
		def: calculateInterferenceTimeForInstanceQ(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, q : Integer, interferingMessage : properties::CANMessageFrame
		) : Real
			=
			let
			interferenceTime : Real
			=
			-- we could also reconstruct this from t.worstCaseResponseTime, but recalculating
			-- it is less error-prone
			-- TODO: verify if this calculation is really correct (in the worst case
			-- it is pessimistic (at least I think so))
			self.calculateWaitTimeForInstanceq(hmessages, canBus, blockingTime, q)
				- blockingTime - q * self.period.getLiteralVal() - q * canBus.getTransmissionTime(self)
			in
			self.ceil(
				interferenceTime / interferingMessage.period.getLiteralVal()
			) * canBus.getTransmissionTime(interferingMessage)
			
		def: calculateWorstCaseResponseTimeLvalTuples(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, busyPeriod : Real, ecus : Set(hwresourceinstance::ResourceInstance)
		) : Set(
			Tuple(
				c1 : instance::ComponentInstance,
				e1 : hwresourceinstance::ResourceInstance,
				c2 : instance::ComponentInstance,
				e2 : hwresourceinstance::ResourceInstance,
				lval : Real
			)
		)
			=
			let t : Tuple(worstCaseResponseTime : Real, instance : Integer)
			=
			self.calculateWorstCaseResponseTime(hmessages, canBus, blockingTime, busyPeriod)
			in
			let senderPortInstance : instance:: PortInstance
			=
			self.extendableBase.oclAsType(instance::PortInstance)
			in
			let senderComponent : instance::ComponentInstance
			=
			senderPortInstance.componentInstance
			in
			let receiverComponent : instance::ComponentInstance
			=
			senderPortInstance.getReceiverPortInstance().componentInstance
			in
			let senderReceiverInterference : Set(Tuple(senderComponent : instance::ComponentInstance, receiverComponent : instance::ComponentInstance, interferenceTime : Real))
			=
			hmessages->collect(msg |
				let senderPortInstance : instance::PortInstance
				=
				msg.extendableBase.oclAsType(instance::PortInstance)
				in
				Tuple{
					senderComponent = senderPortInstance.componentInstance,
					receiverComponent = senderPortInstance.getReceiverPortInstance().componentInstance,
					interferenceTime = self.calculateInterferenceTimeForInstanceQ(
						hmessages, canBus, blockingTime, t.instance, msg
					)
				}
			)->asSet()
			in
			let busECUPairs : Set(Tuple(first : hwresourceinstance::ResourceInstance, second : hwresourceinstance::ResourceInstance))
			=
			canBus.getConnectedECUs()->product(canBus.getConnectedECUs())->reject(t |
				t.first = t.second
					or not t.first.oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
					or not t.second.oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
			)
			in
			-- finally, we can construct the tuples
			busECUPairs->collect(tb |
				Tuple{
					c1 = senderComponent,
					e1 = tb.first,
					c2 = receiverComponent,
					e2 = tb.second,
					lval = t.worstCaseResponseTime
				}
			)->union(
				senderReceiverInterference->collect(t |
					ecus->collect(ecu |
						Tuple{
							c1 = t.senderComponent,
							e1 = ecu,
							c2 = t.receiverComponent,
							e2 = ecu,
							lval = -1 * t.interferenceTime
						}
					)	
				)
			)->asSet()
			
		def: calculateWorstCaseResponseTimeTuples(
			hmessages : Set(properties::CANMessageFrame), canBus : hwplatforminstance::BusInstance,
			blockingTime : Real, busyPeriod : Real, ecus : Set(hwresourceinstance::ResourceInstance)
		) : Set(
			Tuple(
				lval : Set(
					Tuple(
						c1 : instance::ComponentInstance,
						e1 : hwresourceinstance::ResourceInstance,
						c2 : instance::ComponentInstance,
						e2 : hwresourceinstance::ResourceInstance,
						lval : Real
					)
				),
				rval : Real
			)
		)
			=
			Set{
				Tuple{
					lval = self.calculateWorstCaseResponseTimeLvalTuples(
						hmessages, canBus, blockingTime, busyPeriod, ecus
					),
					rval = self.deadline.getLiteralVal()
				}
			}
			
	-- EDF as described in "Modeling and efficient solving of extra-functional properties for
-- adaptation in networked embedded real-time systems adaptation in networked embedded real-time systems"
-- (Zeller, Prehofer)
	context oclcontext::OCLContext
		def: minimum(a : Real, b : Real) : Real
			=
			if a - b < 0 then
				a
			else
				b
			endif
	
		def: EDFOnECU(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::StructuredResourceInstance)
			: Set(
				Tuple(	
					lval : Set(
						Tuple(
							componentInstance : instance::ComponentInstance,
							resourceInstance : hwresourceinstance::StructuredResourceInstance,
							lval : Real
						)
					),
					rval : Real
				)
			)
			=
			Set {
				Tuple {
					lval = self.getSWInstancesForSchedulingOnECU(instances, ecu)->collect(swInstance : instance::ComponentInstance |
						let scheduling : properties::Scheduling = swInstance.getSchedulingExtension()
						in
						let period : Real = scheduling.period.getLiteralVal()
						in
						let deadline : Real = scheduling.deadline.getLiteralVal()
						in
						let wcet : Real = swInstance.getWCETExtensionForECU(ecu).wcet.getLiteralVal()
						in
						Tuple{
							componentInstance = swInstance,
							resourceInstance = ecu,
							-- summand (see equation (11))
							lval = wcet / self.minimum(period, deadline)
						}
					)->asSet(),
					rval = 1
				}
			}
	
		def: EDF()
			: Set(
				Tuple(	
					lval : Set(
						Tuple(
							componentInstance : instance::ComponentInstance,
							resourceInstance : hwresourceinstance::StructuredResourceInstance,
							lval : Real
						)
					),
					rval : Real
				)
			)
			=
			let instances : Set(instance::ComponentInstance) = self.getAllSWInstances()
			in
			self.getAllStructuredHWInstances()->collect(ecu : hwresourceinstance::StructuredResourceInstance |
				self.EDFOnECU(instances, ecu)
			)->asSet()

-- RTA as described in "Modeling and efficient solving of extra-functional properties for
-- adaptation in networked embedded real-time systems adaptation in networked embedded real-time systems"
-- (Zeller, Prehofer)
	context oclcontext::OCLContext	
		def: RTAForInstanceAndECU(swInstance : instance::ComponentInstance, instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance)
			: Set(
				Tuple(
					lval : Set(
						Tuple(
							c1 : instance::ComponentInstance,
							e1 : hwresourceinstance::ResourceInstance,
							c2 : instance::ComponentInstance,
							e2 : hwresourceinstance::ResourceInstance,
							lval : Real
						)
					),
					rval : Real
				)
			)
			=
			let deadline : Real = swInstance.getSchedulingExtension().deadline.getLiteralVal()
			in
			Set{
				Tuple {
					lval = Set{
						Tuple{
							c1 = swInstance,
							e1 = ecu,
							c2 = swInstance,
							e2 = ecu,
							-- first summand from equation (8)
							lval = swInstance.getWCETExtensionForECU(ecu).wcet.getLiteralVal()
						}
					}
					->union(
						instances->select(
							getSchedulingExtension().priority._'value' > swInstance.getSchedulingExtension().priority._'value'
						)->collect(other : instance::ComponentInstance |
							let otherPeriod : Real = other.getSchedulingExtension().period.getLiteralVal()
							in
							let otherWCET : Real = other.getWCETExtensionForECU(ecu).wcet.getLiteralVal()
							in
							Tuple{
								c1 = swInstance,
								e1 = ecu,
								c2 = other,
								e2 = ecu,
								-- inner summand (see equation (8))
								lval = otherWCET - otherWCET * otherWCET / otherPeriod + otherWCET / otherPeriod * deadline   
							}
						)->asSet()
					),
					rval = deadline
				}
			}
			
		def: RTAOnECU(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance)
			: Set(
				Tuple(
					lval : Set(
						Tuple(
							c1 : instance::ComponentInstance,
							e1 : hwresourceinstance::ResourceInstance,
							c2 : instance::ComponentInstance,
							e2 : hwresourceinstance::ResourceInstance,
							lval : Real
						)
					),
					rval : Real
				)
			)
			=
			let schedInstances : Set(instance::ComponentInstance) = getSWInstancesForSchedulingOnECU(instances, ecu)
			in
			schedInstances->collect(swInstance : instance::ComponentInstance |
				self.RTAForInstanceAndECU(swInstance, schedInstances, ecu)
			)->asSet()
			
		def: RTA() 
			: Set(
				Tuple(
					lval : Set(
						Tuple(
							c1 : instance::ComponentInstance,
							e1 : hwresourceinstance::ResourceInstance,
							c2 : instance::ComponentInstance,
							e2 : hwresourceinstance::ResourceInstance,
							lval : Real
						)
					),
					rval : Real
				)
			)
			=
			let instances : Set(instance::ComponentInstance) = self.getAllSWInstances()
			in
			self.getAllHWInstances()->collect(ecu : hwresourceinstance::ResourceInstance |
				self.RTAOnECU(instances, ecu)
			)->asSet()