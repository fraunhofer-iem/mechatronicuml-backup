<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
  <nodes>
    <containmentFeature
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/FujabaRealtimeStatechart/vertices"/>
    <ownedChild>
      <domainMetaElement
          href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State"/>
      <domainInitializer
          xsi:type="gmfmap:FeatureSeqInitializer">
        <initializers
            xsi:type="gmfmap:FeatureValueSpec">
          <feature
              xsi:type="ecore:EAttribute"
              href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
          <value
              body="'State'"/>
        </initializers>
      </domainInitializer>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping">
        <diagramLabel
            href="realtimeStatechart.gmfgraph#StateNameLabel"/>
        <features
            href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
      </labelMappings>
      <tool
          xsi:type="gmftool:CreationTool"
          href="realtimeStatechart.gmftool#//@palette/@tools.1/@tools.0"/>
      <diagramNode
          href="realtimeStatechart.gmfgraph#State"/>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/entryEvent"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/EntryEvent"/>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#StateItemLabel"/>
            <viewExpression
                body="'entry / '.concat(if self.action.oclIsUndefined() then '' else self.action.name endif)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.1"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateItem"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/doEvent"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/DoEvent"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:ReferenceNewElementSpec">
              <feature
                  xsi:type="ecore:EReference"
                  href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/DoEvent/action"/>
              <newElementInitializers>
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
                  <value
                      body="'action'"/>
                </initializers>
              </newElementInitializers>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#StateItemLabel"/>
            <viewExpression
                body="'do / '.concat(if self.action.oclIsUndefined() then '' else self.action.name endif)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.2"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateItem"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/exitEvent"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/ExitEvent"/>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#StateItemLabel"/>
            <viewExpression
                body="'exit / '.concat(if self.action.oclIsUndefined() then '' else self.action.name endif)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.3"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateItem"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/invariants"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/ClockConstraint"/>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#StateItemLabel"/>
            <viewExpression
                body="(&#xA;&#x9;if self.clock.name.oclIsUndefined() then&#xA;&#x9;&#x9;'null'&#xA;&#x9;else&#xA;&#x9;&#x9;self.clock.name&#xA;&#x9;endif&#xA;).concat(' ').concat(&#xA;&#x9;if self.operator.oclIsUndefined() then&#xA;&#x9;&#x9;'null'&#xA;&#x9;else&#xA;&#x9;&#x9;let array : Set(Tuple(s : String, d : modeling::expressions::ComparingOperator)) = Set{&#xA;&#x9;&#x9;&#x9;Tuple{s = '&lt;', d = modeling::expressions::ComparingOperator::LESS },&#xA;&#x9;&#x9;&#x9;Tuple{s = '≤', d = modeling::expressions::ComparingOperator::LESS_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;Tuple{s = '=', d = modeling::expressions::ComparingOperator::EQUAL },&#xA;&#x9;&#x9;&#x9;Tuple{s = '≥', d = modeling::expressions::ComparingOperator::GREATER_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;Tuple{s = '>', d = modeling::expressions::ComparingOperator::GREATER },&#xA;&#x9;&#x9;&#x9;Tuple{s = '≠', d = modeling::expressions::ComparingOperator::UNEQUAL },&#xA;&#x9;&#x9;&#x9;Tuple{s = 'regexp', d = modeling::expressions::ComparingOperator::REGULAR_EXPRESSION }&#xA;&#x9;&#x9;} in array->any(t | t.d = self.operator).s&#xA;&#x9;endif&#xA;).concat(' ').concat(&#xA;&#x9;if self.bound.oclIsUndefined() then&#xA;&#x9;&#x9;'null'&#xA;&#x9;else&#xA;&#x9;&#x9;self.bound.toString()&#xA;&#x9;endif&#xA;)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.0"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateItem"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/channels"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/SynchronizationChannel"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
              <value
                  body="'channel'"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#StateItemLabel"/>
            <viewExpression
                body="(if self.name.oclIsUndefined() then 'null' else self.name endif).concat(&#xA;&#x9;'('.concat(&#xA;&#x9;&#x9;self.containedParameters->iterate(param; result : String = '' | &#xA;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;param.name.concat(' : ').concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if param.eType.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;param.eType.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)&#xA;&#x9;).concat(')')&#xA;)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.0"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateItem"/>
        </ownedChild>
      </children>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.1"
          referencedChild="//@nodes.0/@ownedChild/@children.5/@ownedChild">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/regions"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Region"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
              <value
                  body="'region'"/>
            </initializers>
          </domainInitializer>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern="">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#RegionNameLabel"/>
            <features
                href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping"
              viewPattern="">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#RegionPriorityLabel"/>
            <features
                href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Prioritizable/priority"/>
          </labelMappings>
          <labelMappings
              xsi:type="gmfmap:ExpressionLabelMapping"
              readOnly="true">
            <diagramLabel
                href="realtimeStatechart.gmfgraph#RegionVariablesLabel"/>
            <viewExpression
                body="(&#xA;&#xA;-- Attributes&#xA;&#xA;&#x9;if self.statechart.oclIsUndefined() or self.statechart.attributes->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'var: '.concat(&#xA;&#x9;&#x9;&#x9;self.statechart.attributes->iterate(attribute; result : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.eType.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.eType.name.concat(' ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('; ')&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;-- Operations&#xA;&#xA;&#x9;if self.statechart.oclIsUndefined() or self.statechart.operations->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'op: '.concat(&#xA;&#x9;&#x9;&#x9;self.statechart.operations->iterate(operation; result : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.eType.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.eType.name.concat(' ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('; ')&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;-- Clocks&#xA;&#xA;&#x9;if self.statechart.oclIsUndefined() or self.statechart.clocks->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'cl: '.concat(&#xA;&#x9;&#x9;&#x9;self.statechart.clocks->iterate(clock; result : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clock.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clock.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('; ')&#xA;&#x9;endif&#xA;)"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.5"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#Region"/>
          <children
              compartment="//@nodes.0/@ownedChild/@children.5/@ownedChild/@compartments.0"
              referencedChild="//@nodes.0/@ownedChild">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Region/vertices"/>
          </children>
          <compartments
              children="//@nodes.0/@ownedChild/@children.5/@ownedChild/@children.0">
            <compartment
                href="realtimeStatechart.gmfgraph#RegionContentsCompartment"/>
          </compartments>
        </ownedChild>
      </children>
      <children>
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/stateEntryOrExitPoints"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/StateEntryPoint"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
              <value
                  body="'entrypoint'"/>
            </initializers>
          </domainInitializer>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.6"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateEntryPoint"/>
        </ownedChild>
      </children>
      <children>
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/State/stateEntryOrExitPoints"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/StateExitPoint"/>
          <domainInitializer
              xsi:type="gmfmap:FeatureSeqInitializer">
            <initializers
                xsi:type="gmfmap:FeatureValueSpec">
              <feature
                  xsi:type="ecore:EAttribute"
                  href="../../org.storydriven.modeling/model/sdm.ecore#//NamedElement/name"/>
              <value
                  body="'exitpoint'"/>
            </initializers>
          </domainInitializer>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimeStatechart.gmftool#//@palette/@tools.2/@tools.7"/>
          <diagramNode
              href="realtimeStatechart.gmfgraph#StateExitPoint"/>
        </ownedChild>
      </children>
      <compartments
          children="//@nodes.0/@ownedChild/@children.0 //@nodes.0/@ownedChild/@children.1 //@nodes.0/@ownedChild/@children.3 //@nodes.0/@ownedChild/@children.4 //@nodes.0/@ownedChild/@children.2">
        <compartment
            href="realtimeStatechart.gmfgraph#CompoundCompartment"/>
      </compartments>
      <compartments
          children="//@nodes.0/@ownedChild/@children.5">
        <compartment
            href="realtimeStatechart.gmfgraph#RegionCompartment"/>
      </compartments>
    </ownedChild>
  </nodes>
  <links>
    <domainMetaElement
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition"/>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimeStatechart.gmfgraph#TransitionLabel"/>
      <viewExpression
          body="(&#xA;-- Synchronizations&#xA;&#xA;&#x9;if self.synchronization.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.synchronization.callee.oclAsType(SynchronizationChannel).name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.synchronization.callee.oclAsType(SynchronizationChannel).name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.ownedParameterBindings->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'('&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;self.synchronization.ownedParameterBindings->iterate(&#xA;&#x9;&#x9;&#x9;&#x9;binding; result : String = '' | (if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'&quot;'.concat(binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value).concat('&quot;')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.ownedParameterBindings->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;')'&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.kind = SynchronizationKind::SEND then&#xA;&#x9;&#x9;&#x9;&#x9;'!'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'?'&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;)&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Trigger Event&#xA;&#xA;&#x9;if self.triggerMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.triggerMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.instanceOf.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat('(').concat(&#xA;&#x9;&#x9;&#x9;if self.triggerMessageEvent.message.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.ownedParameterBindings->iterate(binding; bindingResult : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(if bindingResult = '' then '' else bindingResult.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Clock Constraints&#xA;&#xA;&#x9;if self.clockConstraints->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;self.clockConstraints->iterate(clockConstraint; result : String = '' | (&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.clock.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.clock.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.operator.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let array : Set(Tuple(s : String, d : modeling::expressions::ComparingOperator)) = Set{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '&lt;', d = modeling::expressions::ComparingOperator::LESS },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≤', d = modeling::expressions::ComparingOperator::LESS_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '=', d = modeling::expressions::ComparingOperator::EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≥', d = modeling::expressions::ComparingOperator::GREATER_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '>', d = modeling::expressions::ComparingOperator::GREATER },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≠', d = modeling::expressions::ComparingOperator::UNEQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = 'regexp', d = modeling::expressions::ComparingOperator::REGULAR_EXPRESSION }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} in array->any(t | t.d = clockConstraint.operator).s&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.bound.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.bound.toString()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;))&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;-- Guard&#xA;&#xA;&#x9;if self.guard.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;if self.guard.oclAsType(modeling::expressions::TextualExpression).expressionText.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.guard.oclAsType(modeling::expressions::TextualExpression).expressionText&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Slash (only shown, if one of the next parts is not null&#xA;&#xA;&#x9;if self.action.oclIsUndefined() and self.raiseMessageEvent.oclIsUndefined() and self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;' / '&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Action&#xA;&#xA;&#x9;if self.action.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'('.concat(&#xA;&#x9;&#x9;&#x9;if self.action.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.action.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;&#xA;-- Raise Event&#xA;&#xA;&#x9;if self.raiseMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.raiseMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.raiseMessageEvent.message.instanceOf.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat('(').concat(&#xA;&#x9;&#x9;&#x9;if self.raiseMessageEvent.message.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.raiseMessageEvent.message.ownedParameterBindings->iterate(binding; bindingResult : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(if bindingResult = '' then '' else bindingResult.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Clock Resets&#xA;&#xA;&#x9;if self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'{resets: '.concat(&#xA;&#x9;&#x9;&#x9;self.clockResets->iterate(clockReset; result : String = '' | &#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clockReset.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockReset.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('}')&#xA;&#x9;endif&#xA;)"/>
    </labelMappings>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimeStatechart.gmfgraph#TransitionDeadlineLabel"/>
      <viewExpression
          body="(&#xA;&#xA;-- Relative Deadline&#xA;&#xA;&#x9;if self.relativeDeadline.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.lowerBound.oclIsUndefined() then 'null' else self.relativeDeadline.lowerBound.toString() endif&#xA;&#x9;&#x9;).concat(';').concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.upperBound.oclIsUndefined() then 'null' else self.relativeDeadline.upperBound.toString() endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Absolute Deadlines&#xA;&#xA;&#x9;self.absoluteDeadlines->iterate(absoluteDeadline; result : String = '' |&#xA;&#x9;&#x9;(if result = '\n' then '' else result.concat('\n') endif).concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.clock.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.clock.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(' ∈ [').concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.lowerBound.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.lowerBound.toString()&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(';').concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.upperBound.oclIsUndefined() then &#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.upperBound.toString()&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;)&#xA;)"/>
    </labelMappings>
    <containmentFeature
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/FujabaRealtimeStatechart/transitions"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="realtimeStatechart.gmftool#//@palette/@tools.1/@tools.1"/>
    <diagramLink
        href="realtimeStatechart.gmfgraph#Transition"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition/source"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition/target"/>
  </links>
  <links>
    <domainMetaElement
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition"/>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimeStatechart.gmfgraph#TransitionLabel"/>
      <viewExpression
          body="(&#xA;-- Synchronizations&#xA;&#xA;&#x9;if self.synchronization.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.synchronization.callee.oclAsType(SynchronizationChannel).name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.synchronization.callee.oclAsType(SynchronizationChannel).name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.ownedParameterBindings->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'('&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;self.synchronization.ownedParameterBindings->iterate(&#xA;&#x9;&#x9;&#x9;&#x9;binding; result : String = '' | (if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'&quot;'.concat(binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value).concat('&quot;')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.ownedParameterBindings->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;')'&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.kind = SynchronizationKind::SEND then&#xA;&#x9;&#x9;&#x9;&#x9;'!'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'?'&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;)&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Trigger Event&#xA;&#xA;&#x9;if self.triggerMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.triggerMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.instanceOf.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat('(').concat(&#xA;&#x9;&#x9;&#x9;if self.triggerMessageEvent.message.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.ownedParameterBindings->iterate(binding; bindingResult : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(if bindingResult = '' then '' else bindingResult.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Clock Constraints&#xA;&#xA;&#x9;if self.clockConstraints->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;self.clockConstraints->iterate(clockConstraint; result : String = '' | (&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.clock.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.clock.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.operator.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let array : Set(Tuple(s : String, d : modeling::expressions::ComparingOperator)) = Set{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '&lt;', d = modeling::expressions::ComparingOperator::LESS },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≤', d = modeling::expressions::ComparingOperator::LESS_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '=', d = modeling::expressions::ComparingOperator::EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≥', d = modeling::expressions::ComparingOperator::GREATER_OR_EQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '>', d = modeling::expressions::ComparingOperator::GREATER },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '≠', d = modeling::expressions::ComparingOperator::UNEQUAL },&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = 'regexp', d = modeling::expressions::ComparingOperator::REGULAR_EXPRESSION }&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} in array->any(t | t.d = clockConstraint.operator).s&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.bound.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.bound.toString()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;))&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;-- Guard&#xA;&#xA;&#x9;if self.guard.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;if self.guard.oclAsType(modeling::expressions::TextualExpression).expressionText.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.guard.oclAsType(modeling::expressions::TextualExpression).expressionText&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Slash (only shown, if one of the next parts is not null&#xA;&#xA;&#x9;if self.action.oclIsUndefined() and self.raiseMessageEvent.oclIsUndefined() and self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;' / '&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Action&#xA;&#xA;&#x9;if self.action.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'('.concat(&#xA;&#x9;&#x9;&#x9;if self.action.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.action.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;&#xA;-- Raise Event&#xA;&#xA;&#x9;if self.raiseMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.raiseMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.raiseMessageEvent.message.instanceOf.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat('(').concat(&#xA;&#x9;&#x9;&#x9;if self.raiseMessageEvent.message.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.raiseMessageEvent.message.ownedParameterBindings->iterate(binding; bindingResult : String = '' |&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(if bindingResult = '' then '' else bindingResult.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;binding.valueExpression.oclAsType(modeling::expressions::LiteralExpression).value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#xA;&#x9;&#x9;).concat(')')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Clock Resets&#xA;&#xA;&#x9;if self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'{resets: '.concat(&#xA;&#x9;&#x9;&#x9;self.clockResets->iterate(clockReset; result : String = '' | &#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clockReset.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockReset.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('}')&#xA;&#x9;endif&#xA;)"/>
    </labelMappings>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimeStatechart.gmfgraph#TransitionDeadlineLabel"/>
      <viewExpression
          body="(&#xA;&#xA;-- Relative Deadline&#xA;&#xA;&#x9;if self.relativeDeadline.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.lowerBound.oclIsUndefined() then 'null' else self.relativeDeadline.lowerBound.toString() endif&#xA;&#x9;&#x9;).concat(';').concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.upperBound.oclIsUndefined() then 'null' else self.relativeDeadline.upperBound.toString() endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Absolute Deadlines&#xA;&#xA;&#x9;self.absoluteDeadlines->iterate(absoluteDeadline; result : String = '' |&#xA;&#x9;&#x9;(if result = '\n' then '' else result.concat('\n') endif).concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.clock.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.clock.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(' ∈ [').concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.lowerBound.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.lowerBound.toString()&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(';').concat(&#xA;&#x9;&#x9;&#x9;if absoluteDeadline.upperBound.oclIsUndefined() then &#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;absoluteDeadline.upperBound.toString()&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(']')&#xA;&#x9;)&#xA;)"/>
    </labelMappings>
    <containmentFeature
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Region/transitions"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="realtimeStatechart.gmftool#//@palette/@tools.1/@tools.1"/>
    <diagramLink
        href="realtimeStatechart.gmfgraph#Transition"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition/source"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/Transition/target"/>
  </links>
  <diagram>
    <diagramCanvas
        href="realtimeStatechart.gmfgraph#statechart"/>
    <domainModel
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart"/>
    <domainMetaElement
        href="../../de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart/FujabaRealtimeStatechart"/>
    <palette
        href="realtimeStatechart.gmftool#//@palette"/>
  </diagram>
</gmfmap:Mapping>
