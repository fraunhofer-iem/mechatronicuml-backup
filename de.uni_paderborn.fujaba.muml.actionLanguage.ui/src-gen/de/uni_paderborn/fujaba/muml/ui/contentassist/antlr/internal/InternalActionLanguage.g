/*
* generated by Xtext
*/
grammar InternalActionLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_paderborn.fujaba.muml.services.ActionLanguageGrammarAccess;

}

@parser::members {
 
 	private ActionLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ActionLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForLoop
entryRuleForLoop 
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForLoopAccess().getGroup()); }
(rule__ForLoop__Group__0)
{ after(grammarAccess.getForLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileLoop
entryRuleWhileLoop 
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
(rule__WhileLoop__Group__0)
{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop 
:
{ before(grammarAccess.getDoWhileLoopRule()); }
	 ruleDoWhileLoop
{ after(grammarAccess.getDoWhileLoopRule()); } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoWhileLoopAccess().getGroup()); }
(rule__DoWhileLoop__Group__0)
{ after(grammarAccess.getDoWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStartRule
entryRuleExpressionStartRule 
:
{ before(grammarAccess.getExpressionStartRuleRule()); }
	 ruleExpressionStartRule
{ after(grammarAccess.getExpressionStartRuleRule()); } 
	 EOF 
;

// Rule ExpressionStartRule
ruleExpressionStartRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStartRuleAccess().getAlternatives()); }
(rule__ExpressionStartRule__Alternatives)
{ after(grammarAccess.getExpressionStartRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForLoopCountingExpression
entryRuleForLoopCountingExpression 
:
{ before(grammarAccess.getForLoopCountingExpressionRule()); }
	 ruleForLoopCountingExpression
{ after(grammarAccess.getForLoopCountingExpressionRule()); } 
	 EOF 
;

// Rule ForLoopCountingExpression
ruleForLoopCountingExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getGroup()); }
(rule__ForLoopCountingExpression__Group__0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getArithmeticExpressionParserRuleCall()); }
	ruleArithmeticExpression
{ after(grammarAccess.getExpressionAccess().getArithmeticExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression 
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getGroup()); }
(rule__ArithmeticExpression__Group__0)
{ after(grammarAccess.getArithmeticExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryLogicExpression
entryRuleBinaryLogicExpression 
:
{ before(grammarAccess.getBinaryLogicExpressionRule()); }
	 ruleBinaryLogicExpression
{ after(grammarAccess.getBinaryLogicExpressionRule()); } 
	 EOF 
;

// Rule BinaryLogicExpression
ruleBinaryLogicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getGroup()); }
(rule__BinaryLogicExpression__Group__0)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttributeExpression
entryRuleAttributeExpression 
:
{ before(grammarAccess.getAttributeExpressionRule()); }
	 ruleAttributeExpression
{ after(grammarAccess.getAttributeExpressionRule()); } 
	 EOF 
;

// Rule AttributeExpression
ruleAttributeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeExpressionAccess().getAlternatives()); }
(rule__AttributeExpression__Alternatives)
{ after(grammarAccess.getAttributeExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifierOrValue
entryRuleIdentifierOrValue 
:
{ before(grammarAccess.getIdentifierOrValueRule()); }
	 ruleIdentifierOrValue
{ after(grammarAccess.getIdentifierOrValueRule()); } 
	 EOF 
;

// Rule IdentifierOrValue
ruleIdentifierOrValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierOrValueAccess().getAlternatives()); }
(rule__IdentifierOrValue__Alternatives)
{ after(grammarAccess.getIdentifierOrValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule AssignOperator
ruleAssignOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
(rule__AssignOperator__Alternatives)
{ after(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule IncrementDecrementOperator
ruleIncrementDecrementOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncrementDecrementOperatorAccess().getAlternatives()); }
(rule__IncrementDecrementOperator__Alternatives)
{ after(grammarAccess.getIncrementDecrementOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicOperator
ruleLogicOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
(rule__LogicOperator__Alternatives)
{ after(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ArithmeticOperator
ruleArithmeticOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
(rule__ArithmeticOperator__Alternatives)
{ after(grammarAccess.getArithmeticOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparingOperator
ruleComparingOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingOperatorAccess().getAlternatives()); }
(rule__ComparingOperator__Alternatives)
{ after(grammarAccess.getComparingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ExpressionStartRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); }
	ruleForLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); }
	ruleWhileLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); }
	ruleDoWhileLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); }
	ruleIfStatement
{ after(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
(rule__Assignment__Group_1_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorAssignment_1_1()); }
(rule__Assignment__IncrementDecrementOperatorAssignment_1_1)
{ after(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorAssignment_1_0()); }
(rule__ForLoopCountingExpression__IncrementDecrementOperatorAssignment_1_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getGroup_1_1()); }
(rule__ForLoopCountingExpression__Group_1_1__0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getUnaryExpressionParserRuleCall_0_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getBinaryLogicExpressionAccess().getUnaryExpressionParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getAttributeExpressionParserRuleCall_0_1()); }
	ruleAttributeExpression
{ after(grammarAccess.getBinaryLogicExpressionAccess().getAttributeExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__RightExpressionAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionUnaryExpressionParserRuleCall_1_1_0_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionUnaryExpressionParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAttributeExpressionParserRuleCall_1_1_0_1()); }
	ruleAttributeExpression
{ after(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAttributeExpressionParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
(rule__LiteralExpression__Group_0__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
(rule__LiteralExpression__Group_1__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeExpressionAccess().getLiteralExpressionParserRuleCall_0()); }
	ruleLiteralExpression
{ after(grammarAccess.getAttributeExpressionAccess().getLiteralExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAttributeExpressionAccess().getGroup_1()); }
(rule__AttributeExpression__Group_1__0)
{ after(grammarAccess.getAttributeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IdentifierOrValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierOrValueAccess().getNUMBERTerminalRuleCall_0()); }
	RULE_NUMBER
{ after(grammarAccess.getIdentifierOrValueAccess().getNUMBERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentifierOrValueAccess().getBOOLEANTerminalRuleCall_1()); }
	RULE_BOOLEAN
{ after(grammarAccess.getIdentifierOrValueAccess().getBOOLEANTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
(	'=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getASSIGN2EnumLiteralDeclaration_1()); }
(	':=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getASSIGN2EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_2()); }
(	'+=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getEQUAL_PLUSEnumLiteralDeclaration_3()); }
(	'=+' 
)
{ after(grammarAccess.getAssignOperatorAccess().getEQUAL_PLUSEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_4()); }
(	'-=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getEQUAL_MINUSEnumLiteralDeclaration_5()); }
(	'=-' 
)
{ after(grammarAccess.getAssignOperatorAccess().getEQUAL_MINUSEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementDecrementOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); }
(	'++' 
)
{ after(grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); }
(	'--' 
)
{ after(grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
(	'&' 
)
{ after(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getAND_ANDEnumLiteralDeclaration_1()); }
(	'&&' 
)
{ after(grammarAccess.getLogicOperatorAccess().getAND_ANDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_2()); }
(	'|' 
)
{ after(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getOR_OREnumLiteralDeclaration_3()); }
(	'||' 
)
{ after(grammarAccess.getLogicOperatorAccess().getOR_OREnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getXOREnumLiteralDeclaration_4()); }
(	'xor' 
)
{ after(grammarAccess.getLogicOperatorAccess().getXOREnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_5()); }
(	'=>' 
)
{ after(grammarAccess.getLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getEQUIVALENTEnumLiteralDeclaration_6()); }
(	'<=>' 
)
{ after(grammarAccess.getLogicOperatorAccess().getEQUIVALENTEnumLiteralDeclaration_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getTIMESEnumLiteralDeclaration_2()); }
(	'*' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getTIMESEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); }
(	'/' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getMODULOEnumLiteralDeclaration_4()); }
(	'%' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getMODULOEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getArithmeticOperatorAccess().getEXPEnumLiteralDeclaration_5()); }
(	'^' 
)
{ after(grammarAccess.getArithmeticOperatorAccess().getEXPEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
(	'==' 
)
{ after(grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_4()); }
(	'>' 
)
{ after(grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_5()); }
(	'<>' 
)
{ after(grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0()); }
(	'not' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_2()); }
(	'+' 
)
{ after(grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExpressionsAssignment_2()); }
(rule__Block__ExpressionsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ForLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getInitalizeExpressionAssignment_2()); }
(rule__ForLoop__InitalizeExpressionAssignment_2)
{ after(grammarAccess.getForLoopAccess().getInitalizeExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLoopTestAssignment_3()); }
(rule__ForLoop__LoopTestAssignment_3)
{ after(grammarAccess.getForLoopAccess().getLoopTestAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getForLoopAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getCountingExpressionAssignment_5()); }
(rule__ForLoop__CountingExpressionAssignment_5)
{ after(grammarAccess.getForLoopAccess().getCountingExpressionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__6__Impl
	rule__ForLoop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getBlockAssignment_7()); }
(rule__ForLoop__BlockAssignment_7)
{ after(grammarAccess.getForLoopAccess().getBlockAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__WhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopTestAssignment_2()); }
(rule__WhileLoop__LoopTestAssignment_2)
{ after(grammarAccess.getWhileLoopAccess().getLoopTestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockAssignment_4()); }
(rule__WhileLoop__BlockAssignment_4)
{ after(grammarAccess.getWhileLoopAccess().getBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DoWhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__0__Impl
	rule__DoWhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }

	'do' 

{ after(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__1__Impl
	rule__DoWhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getBlockAssignment_1()); }
(rule__DoWhileLoop__BlockAssignment_1)
{ after(grammarAccess.getDoWhileLoopAccess().getBlockAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__2__Impl
	rule__DoWhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }

	'while' 

{ after(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__3__Impl
	rule__DoWhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__4__Impl
	rule__DoWhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLoopTestAssignment_4()); }
(rule__DoWhileLoop__LoopTestAssignment_4)
{ after(grammarAccess.getDoWhileLoopAccess().getLoopTestAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getDoWhileLoopAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfConditionAssignment_2()); }
(rule__IfStatement__IfConditionAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getIfConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfBlockAssignment_4()); }
(rule__IfStatement__IfBlockAssignment_4)
{ after(grammarAccess.getIfStatementAccess().getIfBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
(rule__IfStatement__Group_5__0)*
{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_6()); }
(rule__IfStatement__Group_6__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseifKeyword_5_0()); }

	'elseif' 

{ after(grammarAccess.getIfStatementAccess().getElseifKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__1__Impl
	rule__IfStatement__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__2__Impl
	rule__IfStatement__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfConditionsAssignment_5_2()); }
(rule__IfStatement__ElseIfConditionsAssignment_5_2)
{ after(grammarAccess.getIfStatementAccess().getElseIfConditionsAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__3__Impl
	rule__IfStatement__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfBlocksAssignment_5_4()); }
(rule__IfStatement__ElseIfBlocksAssignment_5_4)
{ after(grammarAccess.getIfStatementAccess().getElseIfBlocksAssignment_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__0__Impl
	rule__IfStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockAssignment_6_1()); }
(rule__IfStatement__ElseBlockAssignment_6_1)
{ after(grammarAccess.getIfStatementAccess().getElseBlockAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAttributeAssignment_0()); }
(rule__Assignment__AttributeAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
(rule__Assignment__Alternatives_1)
{ after(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_0__0__Impl
	rule__Assignment__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignOperatorAssignment_1_0_0()); }
(rule__Assignment__AssignOperatorAssignment_1_0_0)
{ after(grammarAccess.getAssignmentAccess().getAssignOperatorAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignExpressionAssignment_1_0_1()); }
(rule__Assignment__AssignExpressionAssignment_1_0_1)
{ after(grammarAccess.getAssignmentAccess().getAssignExpressionAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForLoopCountingExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group__0__Impl
	rule__ForLoopCountingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAttributeAssignment_0()); }
(rule__ForLoopCountingExpression__AttributeAssignment_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAttributeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopCountingExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAlternatives_1()); }
(rule__ForLoopCountingExpression__Alternatives_1)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForLoopCountingExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group_1_1__0__Impl
	rule__ForLoopCountingExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignment_1_1_0()); }
(rule__ForLoopCountingExpression__AssignOperatorAssignment_1_1_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopCountingExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignExpressionAssignment_1_1_1()); }
(rule__ForLoopCountingExpression__AssignExpressionAssignment_1_1_1)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignExpressionAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArithmeticExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticExpression__Group__0__Impl
	rule__ArithmeticExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getArithmeticExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getGroup_1()); }
(rule__ArithmeticExpression__Group_1__0)*
{ after(grammarAccess.getArithmeticExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArithmeticExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticExpression__Group_1__0__Impl
	rule__ArithmeticExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticExpression__Group_1__1__Impl
	rule__ArithmeticExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ArithmeticExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getArithmeticExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArithmeticExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArithmeticExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__ArithmeticExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getArithmeticExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getBinaryLogicExpressionParserRuleCall_0()); }
	ruleBinaryLogicExpression
{ after(grammarAccess.getComparisonExpressionAccess().getBinaryLogicExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)*
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1_0()); }
(rule__ComparisonExpression__Group_1_0__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExpressionAssignment_1_1()); }
(rule__ComparisonExpression__RightExpressionAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getRightExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0__0__Impl
	rule__ComparisonExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_0_1()); }
(rule__ComparisonExpression__OperatorAssignment_1_0_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryLogicExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group__0__Impl
	rule__BinaryLogicExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getAlternatives_0()); }
(rule__BinaryLogicExpression__Alternatives_0)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getGroup_1()); }
(rule__BinaryLogicExpression__Group_1__0)*
{ after(grammarAccess.getBinaryLogicExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryLogicExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group_1__0__Impl
	rule__BinaryLogicExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getGroup_1_0()); }
(rule__BinaryLogicExpression__Group_1_0__0)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAssignment_1_1()); }
(rule__BinaryLogicExpression__RightExpressionAssignment_1_1)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryLogicExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group_1_0__0__Impl
	rule__BinaryLogicExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getBinaryLogicExpressionLeftExpressionAction_1_0_0()); }
(

)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getBinaryLogicExpressionLeftExpressionAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryLogicExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryLogicExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getOperatorAssignment_1_0_1()); }
(rule__BinaryLogicExpression__OperatorAssignment_1_0_1)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getOperatorAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
	rule__UnaryExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_1()); }
(rule__UnaryExpression__UnaryOperatorAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAssignment_2()); }
(rule__UnaryExpression__UnaryExpressionAssignment_2)
{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_0__0__Impl
	rule__LiteralExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getLiteralExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_0__1__Impl
	rule__LiteralExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getLiteralExpressionAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getLiteralExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
(rule__LiteralExpression__ValueAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AttributeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeExpression__Group_1__0__Impl
	rule__AttributeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeExpressionAccess().getAttributeExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getAttributeExpressionAccess().getAttributeExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AttributeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeExpressionAccess().getAttributeAssignment_1_1()); }
(rule__AttributeExpression__AttributeAssignment_1_1)
{ after(grammarAccess.getAttributeExpressionAccess().getAttributeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Block__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); }
	ruleExpressionStartRule{ after(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__InitalizeExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getInitalizeExpressionAssignmentParserRuleCall_2_0()); }
	ruleAssignment{ after(grammarAccess.getForLoopAccess().getInitalizeExpressionAssignmentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__LoopTestAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__CountingExpressionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); }
	ruleForLoopCountingExpression{ after(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__BlockAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); }
	ruleBlock{ after(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopTestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__BlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__BlockAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); }
	ruleBlock{ after(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__LoopTestAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfBlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfConditionsAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfBlocksAssignment_5_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBlockAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAttributeEAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getAttributeEAttributeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentAccess().getAttributeEAttributeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getAttributeEAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AssignOperatorAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); }
	ruleAssignOperator{ after(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AssignExpressionAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignExpressionExpressionParserRuleCall_1_0_1_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentAccess().getAssignExpressionExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__IncrementDecrementOperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_1_0()); }
	ruleIncrementDecrementOperator{ after(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__AttributeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAttributeEAttributeCrossReference_0_0()); }
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAttributeEAttributeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getForLoopCountingExpressionAccess().getAttributeEAttributeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAttributeEAttributeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__IncrementDecrementOperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_0_0()); }
	ruleIncrementDecrementOperator{ after(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__AssignOperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); }
	ruleAssignOperator{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__AssignExpressionAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignExpressionExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignExpressionExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getOperatorArithmeticOperatorEnumRuleCall_1_1_0()); }
	ruleArithmeticOperator{ after(grammarAccess.getArithmeticExpressionAccess().getOperatorArithmeticOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArithmeticExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getArithmeticExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorComparingOperatorEnumRuleCall_1_0_1_0()); }
	ruleComparingOperator{ after(grammarAccess.getComparisonExpressionAccess().getOperatorComparingOperatorEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExpressionBinaryLogicExpressionParserRuleCall_1_1_0()); }
	ruleBinaryLogicExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightExpressionBinaryLogicExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__OperatorAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getBinaryLogicExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryLogicExpression__RightExpressionAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAlternatives_1_1_0()); }
(rule__BinaryLogicExpression__RightExpressionAlternatives_1_1_0)
{ after(grammarAccess.getBinaryLogicExpressionAccess().getRightExpressionAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnaryOperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorUnaryOperatorEnumRuleCall_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryExpressionAccess().getUnaryOperatorUnaryOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__UnaryExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAttributeExpressionParserRuleCall_2_0()); }
	ruleAttributeExpression{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAttributeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueIdentifierOrValueParserRuleCall_1_1_0()); }
	ruleIdentifierOrValue{ after(grammarAccess.getLiteralExpressionAccess().getValueIdentifierOrValueParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeExpression__AttributeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeExpressionAccess().getAttributeEAttributeCrossReference_1_1_0()); }
(
{ before(grammarAccess.getAttributeExpressionAccess().getAttributeEAttributeIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAttributeExpressionAccess().getAttributeEAttributeIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getAttributeExpressionAccess().getAttributeEAttributeCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


