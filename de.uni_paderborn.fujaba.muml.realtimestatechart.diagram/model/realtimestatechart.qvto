modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
modeltype common uses common('common');

transformation settings(inout gmfgen : GMFGEN);
	-- extends transformation common...

-- TODO: call /de.uni_paderborn.fujaba.common/transformations/settings.qvto

main() {
	gmfgen.rootObjects()![GenEditorGenerator]->map settings();
}

mapping inout GenEditorGenerator::settings() {
	self->map general();
	self->map editorSpecific();
}

-- TODO: (bingo) Externalize this into a common settings.qvto, because it is the same among all editors.
mapping inout GenEditorGenerator::general() {
	self.dynamicTemplates := true;
    self.templateDirectory := "/de.uni_paderborn.fujaba.muml.common/gmf-templates";
    self.sameFileForDiagramAndModel := false;
}

mapping inout GenEditorGenerator::editorSpecific() {
	-- put settings here, that are often lost to apply them permanently
	self.diagram.compartments->select(c | c.editPartClassName = 'RegionRegionContentsCompartmentEditPart')->map listLayout(true);
	self.diagram.childNodes[GenChildSideAffixedNode]->select(n | n.editPartClassName = 'EntryPointEditPart' or n.editPartClassName = 'ExitPointEditPart')->map connectionPoint();
}


mapping inout GenCompartment::listLayout(value : Boolean) {
	self.listLayout := value;
}


mapping inout GenChildSideAffixedNode::connectionPoint() {
	-- self.behaviour[CustomBehaviour]->reject(b | b.key = 'de.uni_paderborn.fujaba.muml.common.edit.policies.ports.ConnectionPointEditPolicy.CONNECTION_POINT_VISUALIZATION_ROLE');
	-- self.behaviour += new CustomBehaviour('de.uni_paderborn.fujaba.muml.common.edit.policies.ports.ConnectionPointEditPolicy.CONNECTION_POINT_VISUALIZATION_ROLE', 'de.uni_paderborn.fujaba.muml.common.edit.policies.ports.ConnectionPointEditPolicy');
}

--constructor CustomBehaviour::CustomBehaviour(_key : String, editPolicy : String) {
--	key := _key;
--	editPolicyQualifiedClassName := editPolicy;
--}