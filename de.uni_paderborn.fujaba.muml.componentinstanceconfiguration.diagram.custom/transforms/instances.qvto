transformation InstantiationTransformation(inout instance : InstancePackage);

modeltype MumlPackage uses muml('http://www.fujaba.de/muml/0.2.2');
modeltype ConnectorPackage uses muml::connector('http://www.fujaba.de/muml/0.2.2');
modeltype ValuetypePackage uses muml::valuetype('http://www.fujaba.de/muml/0.2.2');
modeltype ComponentPackage uses muml::component('http://www.fujaba.de/muml/0.2.2');
modeltype InstancePackage uses muml::instance('http://www.fujaba.de/muml/0.2.2');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

property NULL_COMPONENT_PART_HELPER : ComponentPart = object ComponentPart{};
property NULL_PORT_PART_HELPER : PortPart = object PortPart{};

main() {
	log("QVT-O Script \"instances.qvto\" started.");

	// process AtomicComponentInstances
	instance.rootObjects()[AtomicComponentInstance]->forEach(ci) {
		ci.portInstances := ci.componentType.createPortInstances(NULL_COMPONENT_PART_HELPER); // using helper instead of "null", because of QVTO-Bug
	};
	
	// process StructuredComponentInstances
	instance.rootObjects()[StructuredComponentInstance]->forEach(ci) {
		// Remove old port instances from resource
		ci.portInstances->forEach(pi) {
			instance.removeElement(pi);
		};
		ci.portInstances := ci.componentType.createPortInstances(NULL_COMPONENT_PART_HELPER); // using helper instead of "null", because of QVTO-Bug
		
		// Remove old embedded cic from resource
		instance.removeElement(ci.embeddedCIC);
		ci.embeddedCIC := new ComponentInstanceConfiguration(ci.componentType.oclAsType(StructuredComponent));
		
		if (ci.container().oclIsKindOf(ComponentInstanceConfiguration)) then {
			// Remove old connector instances from resource
			ci.container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances->forEach(pci) {
				instance.removeElement(pci);
			};
			ci.container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances := Set { };
			
			// Add new connector instances
			ci.componentType[StructuredComponent].connectors->forEach(portConnector) {
				var endpoint1 : ConnectorEndpoint := portConnector.connectorEndpoints->first();
				var endpoint2 : ConnectorEndpoint := portConnector.connectorEndpoints->last();
				if (endpoint1 != endpoint2) then {
					endpoint1.resolve().oclAsSet()[PortInstance]->forEach(endpointInstance1) {
						endpoint2.resolve().oclAsSet()[PortInstance]->forEach(endpointInstance2) {
							if (not endpointInstance1.oclIsKindOf(DiscreteMultiPortInstance) and not endpointInstance2.oclIsKindOf(DiscreteMultiPortInstance) and ci.container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances->select(connectorEndpointInstances->includes(endpointInstance1) or connectorEndpointInstances->includes(endpointInstance2))->isEmpty()) then {
								ci.container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances += portConnector.createConnectorInstance(
									Set { endpointInstance1, endpointInstance2 }
								)[PortConnectorInstance];
							} endif;
						};
					};
				} endif;
			};
		} endif;
		
	};
	
	
	instance.removeElement(NULL_COMPONENT_PART_HELPER);
	instance.removeElement(NULL_PORT_PART_HELPER);
}

// Convenience query to cast a natural number as integer, using -1 as value for infinity.
query NaturalNumber::toInteger() : Integer {
	if (self.infinity) then {
		return -1;
	} endif;
	return self.value;
}

// Convenience query to get all Port Instances that have already been created for a port at a given ComponentInstance
query Port::portInstances(componentInstance : ComponentInstance) : Set(PortInstance) {
	return componentInstance.portInstances->select(i | i.type = self);
}


query Component::createPortInstances(part : ComponentPart) : Set(PortInstance) {
	var portInstances : Set(PortInstance);
	self.ports->forEach(port) {
		portInstances += port.createInstances(part, NULL_PORT_PART_HELPER)[PortInstance];
	};
	return portInstances;
}

query ComponentPart::createPortInstances() : Set(PortInstance) {
	var portInstances : Set(PortInstance);
	self.portParts->forEach(portPart) {
		var instances : Set(PortInstance) := portPart.portType.createInstances(self, portPart)[PortInstance];
		instances->forEach(instance) {
			portPart.map remember(instance);
		};
		portInstances += instances;
	};
	return portInstances;
}
mapping PortPart::remember(portInstance : PortInstance) : PortInstance {
	init {
		result := portInstance;
	}
}

// Creating multiple Port Instances for multi ports and one Port Instance for single ports.
query ConnectorEndpoint::createInstances(part : ComponentPart, portPart : PortPart) : Set(ConnectorEndpointInstance) {
	return Set { self.createInstance(part, portPart, 0) }
}
query DirectedTypedPort::createInstances(part : ComponentPart, portPart : PortPart) : Set(ConnectorEndpointInstance) {
	if (self.optional) then {
		return Set { };
 	} endif;
	return Set { self.createInstance(part, portPart, 0) };
}
query DiscretePort::createInstances(part : ComponentPart, portPart : PortPart) : Set(ConnectorEndpointInstance) {
	if (self.multiPort) then {
		var multiPortInstance : DiscreteMultiPortInstance := self.map multi(part, portPart);
		//return OrderedSet { multiPortInstance }
		return OrderedSet { multiPortInstance }[PortInstance]->union(multiPortInstance.subInteractionEndpointInstances[PortInstance])
	} endif;
	return self.createSubPortInstances(part, portPart);
}
query DiscretePort::createSubPortInstances(part : ComponentPart, portPart : PortPart) : Set(PortInstance) {
	var subPortInstances : Set(PortInstance);
	var count : Integer := 0;
	while (count < self.cardinality.lowerBound.toInteger()) {
		var portInstance : PortInstance := self.createInstance(part, portPart, count).oclAsType(PortInstance);
		portInstance.name := self.name + (count + 1).toString();
		subPortInstances += portInstance;
		count := count + 1;
	};
	return subPortInstances
}

// Primitively creating and initializing one PortInstance by PortType
query ConnectorEndpoint::createInstance(part : ComponentPart, portPart : PortPart, id : Integer) : ConnectorEndpointInstance {
	return self.map single(part, portPart, id);
}

// Connector instances
query Connector::otherEnd(thisEnd : ConnectorEndpoint) : ConnectorEndpoint {
	return self.connectorEndpoints->select(e | e != thisEnd)->first();
}
query Connector::createConnectorInstance(endpoints : Set(ConnectorEndpointInstance)) : ConnectorInstance {
	var connectorInstance : ConnectorInstance := self.primCreateConnectorInstance();
	connectorInstance.connectorEndpointInstances := endpoints;
	return connectorInstance;
}
query Connector::primCreateConnectorInstance() : ConnectorInstance {
	assert fatal (false) with log ("Tried to instantiate abstract class Connector.");
	return null;
}
query AssemblyConnector::primCreateConnectorInstance() : ConnectorInstance {
	return new AssemblyConnectorInstance(self);
}
query DelegationConnector::primCreateConnectorInstance() : ConnectorInstance {
	return new DelegationConnectorInstance(self);
}




// Constructors
constructor ComponentInstanceConfiguration::ComponentInstanceConfiguration(component : StructuredComponent) {
	name := component.name;
	
	component.embeddedComponentParts->select(p | p.componentType.oclIsKindOf(AtomicComponent))->forEach(part) {
		componentInstances += new AtomicComponentInstance(part.componentType.oclAsType(AtomicComponent), part);
	};
	component.embeddedComponentParts->select(p | p.componentType.oclIsKindOf(StructuredComponent))->forEach(part) {
		componentInstances += new StructuredComponentInstance(part.componentType.oclAsType(StructuredComponent), part);
	};

	portConnectorInstances := componentInstances.portInstances.portConnectorInstances;
}

// TODO: Same code as below
constructor AtomicComponentInstance::AtomicComponentInstance(type : AtomicComponent, part : ComponentPart) {
	componentType := type;
	name := type.name;
	
	if (part != NULL_COMPONENT_PART_HELPER) then {
		// Creating Port Instances also sets the opposite feature PortInstance.component
		portInstances := part.createPortInstances();	
	
		// Set ComponentPart
		componentPart := part;
	} else {
	
		// Creating Port Instances also sets the opposite feature PortInstance.component
		portInstances := componentType.createPortInstances(part);
	} endif;

}

// TODO: Same code as above
constructor StructuredComponentInstance::StructuredComponentInstance(type : StructuredComponent, part : ComponentPart) {
	componentType := type;
	name := type.name;
	
	if (part != NULL_COMPONENT_PART_HELPER) then {
		// Creating Port Instances also sets the opposite feature PortInstance.component
		portInstances := part.createPortInstances();	
	
		// Set ComponentPart
		componentPart := part;
	} else {
	
		// Creating Port Instances also sets the opposite feature PortInstance.component
		portInstances := componentType.createPortInstances(part);
	} endif;
	
	// Create ConnectorInstances
	if (container().oclIsKindOf(ComponentInstanceConfiguration)) then {
		componentType[StructuredComponent].connectors->forEach(portConnector) {
			var endpoint1 : ConnectorEndpoint := portConnector.connectorEndpoints->first();
			var endpoint2 : ConnectorEndpoint := portConnector.connectorEndpoints->last();
			if (endpoint1 != endpoint2) then {
				endpoint1.resolve().oclAsSet()[PortInstance]->forEach(endpointInstance1) {
					endpoint2.resolve().oclAsSet()[PortInstance]->forEach(endpointInstance2) {
						if (not endpointInstance1.oclIsKindOf(DiscreteMultiPortInstance) and not endpointInstance2.oclIsKindOf(DiscreteMultiPortInstance) and container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances->select(connectorEndpointInstances->includes(endpointInstance1) or connectorEndpointInstances->includes(endpointInstance2))->isEmpty()) then {
							container().oclAsType(ComponentInstanceConfiguration).portConnectorInstances += portConnector.createConnectorInstance(
								Set { endpointInstance1, endpointInstance2 }
							)[PortConnectorInstance];
						} endif;
					};
				};
			} endif;
		};
	} endif;
	
	embeddedCIC := new ComponentInstanceConfiguration(type);
}


constructor AssemblyConnectorInstance::AssemblyConnectorInstance(assembly : AssemblyConnector) {
	type := assembly;
}
constructor DelegationConnectorInstance::DelegationConnectorInstance(delegation : DelegationConnector) {
	type := delegation;	
}

mapping ConnectorEndpoint::single(part : ComponentPart, portPart : PortPart, id : Integer) : ConnectorEndpointInstance
	disjuncts DiscretePort::singleDiscrete, ContinuousPort::singleContinuous, HybridPort::singleHybrid;

mapping DiscretePort::multi(part : ComponentPart, portPart : PortPart) : DiscreteMultiPortInstance {
	type := self;
	name := type.name;
	subInteractionEndpointInstances := self.createSubPortInstances(part, portPart)[DiscreteSinglePortInstance];
}
mapping DiscretePort::singleDiscrete(part : ComponentPart, portPart : PortPart, id : Integer) : DiscreteSinglePortInstance {
	type := self;
}
mapping ContinuousPort::singleContinuous(part : ComponentPart, portPart : PortPart, id : Integer) : ContinuousPortInstance {
	type := self;
}
mapping HybridPort::singleHybrid(part : ComponentPart, portPart : PortPart, id : Integer) : HybridPortInstance {
	type := self;
}