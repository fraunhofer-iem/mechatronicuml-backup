import Util;

modeltype core uses core('http://www.storydriven.org/core/0.3.1');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/expressions/0.3.1');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/expressions/common/0.3.1');
modeltype instance uses muml::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.fujaba.de/muml/hardware/hwplatforminstance/1.1/');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.fujaba.de/muml/hardware/hwresourceinstance/1.1/');

library VariableHelper;

query ILLEGAL_VARIABLE_CHARS() : OrderedSet(String) {
	return OrderedSet{' '};
}

query Sequence(NamedElement)::getVariableName() : String {
	return '_'.join(self->collect(getVariableName()));
}

query NamedElement::getVariableName() : String {
	// fail in order to detect potential errors
	assert fatal (false) with log("implement me");
	return '';
}

query ComponentInstance::getVariableName() : String {
	return '.'.join(self.getParentComponents()->collect(name));
}

query ComponentInstance::getParentComponents() : OrderedSet(ComponentInstance) {
	return self->asOrderedSet()->closure(ci : ComponentInstance |
		let sci : StructuredComponentInstance = ci.parentCIC.parentStructuredComponentInstance
		in
		if sci.oclIsUndefined() then
			ci->asOrderedSet()
		else
			OrderedSet{ci, sci}
		endif
	)->reverse()->collect(oclAsType(ComponentInstance))->asOrderedSet();
}

query ResourceInstance::getVariableName() : String {
	return '.'.join(self.getParentHPICs()
		->collect(parentHWPlatformInstance.name)
		->append(self.name)
	); 
}

query ResourceInstance::getParentHPIC() : HWPlatformInstanceConfiguration {
	// eek!
	return self.container().oclAsType(HWPlatformInstanceConfiguration);
}

query ResourceInstance::getParentHPICs() : OrderedSet(HWPlatformInstanceConfiguration) {
	return
	let hpics : OrderedSet(HWPlatformInstanceConfiguration)= self.getParentHPIC()->asOrderedSet()
		->closure(hpic : HWPlatformInstanceConfiguration |
			if hpic.parentHWPlatformInstance.oclIsUndefined() then
				OrderedSet{}
			else
				OrderedSet{hpic, hpic.parentHWPlatformInstance.parentHPIC}
			endif
		)
	in
	hpics->subOrderedSet(1, hpics->size() - 1);
}

query Sequence(NamedElement)::getVariable() : Variable {
	return Sequence{self}.resolveone(Variable);
}