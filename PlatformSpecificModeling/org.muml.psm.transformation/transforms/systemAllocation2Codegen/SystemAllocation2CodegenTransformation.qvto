transformation SystemAllocation2Codegen(in allocationmodel : Allocation, in apimapping : PortMappingModel, out codegenmodel:Codegen);

modeltype Core uses core('http://www.muml.org/core/1.0.0');

modeltype PimPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype MessagePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype InstancePackage uses pim::instance('http://www.muml.org/pim/1.0.0');
modeltype ModelInstance uses modelinstance('http://www.muml.org/modelinstance/1.0.0');
modeltype Actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');

modeltype PSM uses psm('http://www.muml.org/psm/1.0.0');
modeltype Allocation uses psm::allocation('http://www.muml.org/psm/1.0.0');
modeltype Codegen uses psm::codegen('http://www.muml.org/psm/1.0.0');
modeltype PortMappingModel uses psm::portapimapping('http://www.muml.org/psm/1.0.0');
modeltype ApiExpessions uses psm::apiexpressions('http://www.muml.org/psm/1.0.0');

modeltype SoftPlattform uses swplatform('http://www.muml.org/pm/software/1.0.0');
modeltype Hardware uses hardware('http://www.muml.org/pm/hardware/1.0.0');
modeltype Platform uses hardware::hwplatform('http://www.muml.org/pm/hardware/1.0.0');
modeltype PlatformInstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype ResourceInstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype Resource uses hardware::hwresource('http://www.muml.org/pm/hardware/1.0.0');


//this extra attribute is used to dermine which hybridPort is connected to which continous port
// to determine the messages
//since the connections are only known at instance level
intermediate property HybridPort::connectedContiniousPort: pim::component::ContinuousPort;
intermediate property ContinuousPort::samplingTimes: Set(muml::valuetype::TimeValue);

property apiMap:MappingRepository;

main(){
	apiMap := apimapping.rootObjects()[MappingRepository]->any(true);
	allocationmodel.rootObjects()[SystemAllocation]->map mapSystemAllocation2Codegen();
}

mapping SystemAllocation::mapSystemAllocation2Codegen():GenSystem{

	var setOfECU:Sequence(StructuredResourceInstance) := self.allocations->collect(resourceInstance);
	var setoFComponentAllocatedToECU:Sequence(ComponentInstance);
	setOfECU->forEach(ecu){
		setoFComponentAllocatedToECU:=self.allocations->select(alloc| alloc.resourceInstance=ecu).componentInstance[AtomicComponentInstance];
		genECUs+=ecu.map mapStructuredResource2GenECU(setoFComponentAllocatedToECU);
	};
	cic:=self.cic;
	hpic:=self.hpic;
	
}

mapping StructuredResourceInstance::mapStructuredResource2GenECU(setofComponentAllocatedToThisECU:Collection(ComponentInstance)):GenECU when{not setofComponentAllocatedToThisECU->isEmpty()}{
	ecu:=self;
	setofComponentAllocatedToThisECU->forEach(cic){
		allocatedGenTasks+=cic.map mapComponentInstance2Task();
	};
	
	
}

mapping ComponentInstance::mapComponentInstance2Task():GenTask{
	genComponentInstances:=self.map mapComponentInstance2GenComponentInstance();
}


mapping ComponentInstance::mapComponentInstance2GenComponentInstance():GenComponentInstance{
	componentInstance:=self;
	initCommands:=self.getInitCommands();
	genPortInstances:=self.portInstances->map mapPortInstance2GenPortInstance();
	
}


mapping PortInstance::mapPortInstance2GenPortInstance():GenPortInstance disjuncts ContinuousPortInstance::mapPortInstance2GenPortInstance, HybridPortInstance::mapPortInstance2GenPortInstance, DiscreteSinglePortInstance::mapPortInstance2GenPortInstance, DiscreteMultiPortInstance::mapPortInstance2GenPortInstance;

mapping ContinuousPortInstance::mapPortInstance2GenPortInstance():GenPortInstance{
	portInstance:=self;
	samplingTime:=self.getSamplingTime();
	execCommand:=self.getExecCommand();
}


mapping HybridPortInstance::mapPortInstance2GenPortInstance():GenPortInstance{
	portInstance:=self;
}

mapping DiscreteSinglePortInstance::mapPortInstance2GenPortInstance():GenPortInstance{
	portInstance:=self;
}

mapping DiscreteMultiPortInstance::mapPortInstance2GenPortInstance():GenPortInstance{
	portInstance:=self;
}

query ComponentInstance::getInitCommands():Set(core::expressions::Expression){
	var initExpressions:Set(core::expressions::Expression):=Set{};
	self.portInstances[ContinuousPortInstance]->forEach(continousPortInstance){
		initExpressions+=apiMap.portApiMappings->select(portMapping|portMapping.port = continousPortInstance).initCommand;
	};
	return initExpressions;
}

query ContinuousPortInstance::getSamplingTime():TimeValue{
	var connectorEndPointInstances:Set(ConnectorEndpointInstance) :=self.connectorInstances.connectorEndpointInstances->closure(connectorInstances.connectorEndpointInstances);
	var hybridPortInstance:PortInstance := connectorEndPointInstances.oclAsType(PortInstance)->reject(p|p.componentInstance.oclIsKindOf(StructuredComponentInstance) or p = self)->any(true);
	if(hybridPortInstance.oclIsKindOf(HybridPortInstance)) then{
		return hybridPortInstance.portType.oclAsType(HybridPort).samplingInterval;
	}endif;
		return null;
}

query ContinuousPortInstance::getExecCommand():core::expressions::Expression{
	var execCommand:core::expressions::Expression;
		execCommand:=apiMap.portApiMappings->select(portMapping|portMapping.port = self)->any(true).execCommand;
	return execCommand;
}

