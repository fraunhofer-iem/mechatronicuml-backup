//import CommonLibrary;
import ComponentInstanceLibrary;
import ComponentLibrary;

import ModelcopyLibrary;

transformation CodeGenNormalizationTransformation(in inCodeGenModel:Codegen,  out outCodeGenModel:Codegen);


modeltype Core uses core('http://www.muml.org/core/1.0.0');

modeltype PimPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype Typespackage uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype MessagePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype RTSCPackage uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype ProtocolPackage uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype InstancePackage uses pim::instance('http://www.muml.org/pim/1.0.0');
modeltype ModelInstance uses modelinstance('http://www.muml.org/modelinstance/1.0.0');
modeltype Actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');

modeltype PSM uses psm('http://www.muml.org/psm/1.0.0');
modeltype Allocation uses psm::allocation('http://www.muml.org/psm/1.0.0');
modeltype Codegen uses psm::codegen('http://www.muml.org/psm/1.0.0');
modeltype PortMappingModel uses psm::portapimapping('http://www.muml.org/psm/1.0.0');
modeltype ApiExpessions uses psm::apiexpressions('http://www.muml.org/psm/1.0.0');
modeltype PSMInstance uses psm::psm_instance('http://www.muml.org/psm/1.0.0');
modeltype PSMRTSC uses psm::psm_realtimestatechart('http://www.muml.org/psm/1.0.0');
modeltype PSMRTSCParameter uses psm::psm_realtimestatechart::realtimestatechartparameter('http://www.muml.org/psm/1.0.0');

modeltype SoftPlattform uses swplatform('http://www.muml.org/pm/software/1.0.0');
modeltype Hardware uses hardware('http://www.muml.org/pm/hardware/1.0.0');
modeltype Platform uses hardware::hwplatform('http://www.muml.org/pm/hardware/1.0.0');
modeltype PlatformInstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype ResourceInstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/1.0.0');
modeltype Resource uses hardware::hwresource('http://www.muml.org/pm/hardware/1.0.0');

modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';


main() {
	//initialoize propery
	property_genComponentInstance:=inCodeGenModel.rootObjects()[GenSystem]->any(true).genECUs.allocatedGenTasks.genComponentInstances;
	
	//inCodeGenModel.rootObjects()[GenSystem].genECUs.allocatedGenTasks->map transform();
//	log(outCodeGenModel.toString());
//	outCodeGenModel.rootObjects()->forEach(elem){
//		log(elem.toString());
//	}

	inCodeGenModel.rootObjects()[GenSystem]->map mapGenSystem();
	//inCodeGenModel.rootObjects()[RootNode]->map transform();
}


mapping GenSystem::mapGenSystem():GenSystem{
	cic:=self.cic.map transform().oclAsType(ComponentInstanceConfiguration);
	hpic:=self.hpic;
	genECUs:=self.genECUs->map mapGenECU();	
}


mapping GenECU::mapGenECU():GenECU{
	ecu:=self.ecu;
	allocatedGenTasks:=self.allocatedGenTasks->map mapGenTask();
}

mapping GenTask::mapGenTask():GenTask{
	genComponentInstances:=self.genComponentInstances->map mapGenComponentInstance();
}

mapping GenComponentInstance::mapGenComponentInstance():GenComponentInstance{
	componentInstance:=self.componentInstance.late resolveone(ComponentInstance);
} 

mapping RootNode::create() : EObject {
	init {
		result := new RootNode().oclAsType(EObject);
	}
}


mapping ComponentInstanceConfiguration::create():EObject{
init {
		result := new ComponentInstanceConfiguration().oclAsType(EObject);
	}
}


mapping MessageTypeRepository::create():EObject{
init {
		result := new MessageTypeRepository().oclAsType(EObject);
	}
}



mapping StaticAtomicComponent::create():EObject{
init {
		result := new StaticAtomicComponent().oclAsType(EObject);
	}
}

mapping StaticStructuredComponent::create():EObject{
init {
		result := new StaticStructuredComponent().oclAsType(EObject);
	}
}

mapping PrimitiveDataType::create():EObject{
init {
		result := new PrimitiveDataType().oclAsType(EObject);
	}
}

mapping CoordinationProtocol::create():EObject{
init {
		result := new CoordinationProtocol().oclAsType(EObject);
	}
}

mapping RealtimeStatechart::create():EObject{
init {
		result := new ParameterizedRealtimeStatechart().oclAsType(EObject);
	}
}
