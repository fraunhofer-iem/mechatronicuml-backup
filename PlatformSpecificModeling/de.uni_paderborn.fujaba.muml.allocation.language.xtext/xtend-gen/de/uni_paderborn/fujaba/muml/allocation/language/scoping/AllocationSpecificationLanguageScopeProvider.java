/**
 * generated by Xtext
 */
package de.uni_paderborn.fujaba.muml.allocation.language.scoping;

import com.google.common.base.Objects;
import de.uni_paderborn.fujaba.muml.allocation.language.attributes.SpecificationCSAttribution;
import de.uni_paderborn.fujaba.muml.allocation.language.cs.CsPackage;
import de.uni_paderborn.fujaba.muml.allocation.language.cs.MeasureFunctionCS;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.ocl.examples.pivot.scoping.Attribution;
import org.eclipse.ocl.examples.xtext.essentialocl.scoping.EssentialOCLScopeProvider;
import org.eclipse.xtext.scoping.IScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class AllocationSpecificationLanguageScopeProvider extends EssentialOCLScopeProvider {
  public static void init() {
    Attribution.REGISTRY.put(CsPackage.Literals.SPECIFICATION_CS, SpecificationCSAttribution.INSTANCE);
  }
  
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((context instanceof MeasureFunctionCS)) {
      _xifexpression = this.polymorphicGetScope(context, reference);
    } else {
      _xifexpression = super.getScope(context, reference);
    }
    return _xifexpression;
  }
  
  protected IScope polymorphicGetScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      IScope scope = this.polymorphicFindScopeForReferenceName(context, reference);
      boolean _equals = Objects.equal(scope, null);
      if (_equals) {
        IScope _polymorphicFindScopeForClassName = this.polymorphicFindScopeForClassName(context, reference);
        scope = _polymorphicFindScopeForClassName;
        boolean _equals_1 = Objects.equal(scope, null);
        if (_equals_1) {
          IScope _delegateGetScope = this.delegateGetScope(context, reference);
          scope = _delegateGetScope;
        }
      }
      _xblockexpression = scope;
    }
    return _xblockexpression;
  }
}
