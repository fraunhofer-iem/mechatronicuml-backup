	import 'http://www.fujaba.de/muml/hardware/hwresource/1.1/'
	import 'http://www.fujaba.de/muml/hardware/hwplatforminstance/1.1/'
	import 'http://www.fujaba.de/muml/hardware/hwresourceinstance/1.1/'
	import 'http://www.fujaba.de/muml/instance/0.4.0'
	import 'http://www.fujaba.de/muml/connector/0.4.0'
	import 'http://www.fujaba.de/muml/valuetype/0.4.0'
	import 'http://www.fujaba.de/muml/psm/properties/0.4.0/'
	import 'http://www.fujaba.de/muml/allocation/language/0.1.0/oclcontext'
	import 'http://www.storydriven.org/core/expressions/common/0.3.1'
	
	-- The OCLContext operations represent some kind of public API that can/should be used
	-- when specifying constraints; The other operations are "internal" helpers that may change in the
	-- future. TODO: more documentation.	
	context oclcontext::OCLContext
		-- unused here
		def: getECUs(ecuNames : Set(String)) : Sequence(hwresourceinstance::ResourceInstance) =
			self.hardwarePlatformInstanceConfiguration.resources->select(ecuNames->includes(name))->asSequence()
		
		def: getECU(ecuName : String) : hwresourceinstance::ResourceInstance =
			self.getAllHWInstances()->any(name = ecuName)
			
		def: getAllSWInstances() : Set(instance::ComponentInstance) =
			self.componentInstanceConfiguration.getAllEmbeddedInstances()
		
		def: getSWInstance(instanceName : String) : instance::ComponentInstance =
			self.getAllSWInstances()->any(name = instanceName)
		
		def: getAllHWInstances() : Set(hwresourceinstance::ResourceInstance) =
			self.getAllHWPlatformInstances()->collect(embeddedHPIC.resources)->asSet()
			
		def: getAllHWPlatformInstances() : Set(hwplatforminstance::HWPlatformInstance) =
			self.hardwarePlatformInstanceConfiguration.getAllEmbeddedPlatformInstances()
			
		def: getHWPlatformInstance(platformInstanceName : String) : hwplatforminstance::HWPlatformInstance =
			self.getAllHWPlatformInstances()->any(name = platformInstanceName)
			
		def: allocateToECU(instanceName : String, ecuName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::ResourceInstance))
			=
			self.allocateToECU(self.getSWInstance(instanceName), ecuName)
			
		def: allocateToECU(componentInstance : instance::ComponentInstance, ecuName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::ResourceInstance))
			=
			componentInstance->asSet()->product(self.getECU(ecuName).resolveToStructuredResourceInstances())->asSet()
			
		def: allocateEmbeddedToPlatformInstance(swInstanceName : String, platformInstanceName : String)
			: Set(Tuple(first : instance::ComponentInstance, second : hwresourceinstance::ResourceInstance
			))
			=
			self.getSWInstance(swInstanceName).getAllEmbeddedInstances()->product(
				-- only to direct embedded StructuredResourceInstances
				self.getHWPlatformInstance(platformInstanceName).embeddedHPIC.resources
					->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))
			)
		
		def: allocateToDifferentECUs(instance1 : String, instance2 : String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			Set{Tuple{first = self.getSWInstance(instance1), second = self.getSWInstance(instance2)}}
			
		def: allocateToSameECUs(instance1 : String, instance2 : String)
			: Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance))
			=
			self.allocateToDifferentECUs(instance1, instance2)
			
		def: allocateCommunicatingComponentsToConnectedECUs() : Set(Tuple(
			c1 : instance::ComponentInstance,
			e1 : hwresourceinstance::ResourceInstance,
			c2 : instance::ComponentInstance,
			e2 : hwresourceinstance::ResourceInstance
		)) =
			let allHWInstances : Set(hwresourceinstance::ResourceInstance)
			=
			self.getAllHWInstances()->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))
			in 
			self.componentInstanceConfiguration.getCommunicatingComponents()->collect(s |
				self.allocateComponentsToConnectedECUs(s->at(1), s->at(2), 
					allHWInstances
				)
			)->asSet()
	
		def: allocateComponentsToConnectedECUs(c1 : instance::ComponentInstance, c2 : instance::ComponentInstance,
			allowedECUs : Set(hwresourceinstance::ResourceInstance)
		) : Set(Tuple(
			c1 : instance::ComponentInstance,
			e1 : hwresourceinstance::ResourceInstance,
			c2 : instance::ComponentInstance,
			e2 : hwresourceinstance::ResourceInstance
		)) =
			allowedECUs->collect(e1 |
				e1.getConnectedECUs()->union(Set{e1})
					->select(e | allowedECUs->includes(e))
					->collect(e2 |
						Set{
							Tuple{c1 = c1, e1 = e1, c2 = c2, e2 = e2},
							Tuple{c1 = c1, e1 = e2, c2 = c2, e2 = e1}
						}
					)
			)->asSet()
			
		def: colocateSCIAndEmbeddedParts(componentName : String) : Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance)) =
			let ci : instance::ComponentInstance = self.getSWInstance(componentName)
			in
			ci->asSet()->product(ci.getAllEmbeddedInstances()->reject(c | c = ci))
			
		def: getSWInstancesWithRequiredMemory() : Set(instance::ComponentInstance) =
			self.getAllSWInstances()->select(ci |
				ci.getMemoryExtensions()->notEmpty()
			)
			
		def: getHWInstancesWithMaxMemory() : Set(hwresourceinstance::StructuredResourceInstance) =
			self.getAllHWInstances()->select(
				oclIsKindOf(hwresourceinstance::StructuredResourceInstance)
			)->collect(
				oclAsType(hwresourceinstance::StructuredResourceInstance)
			)->select(
				getMemoryResourceInstances()->notEmpty()
			)->asSet()
			
		def: maxMemoryConsumption() : Set(
			Tuple(
				requiredMemory : Set(
						Tuple(
							componentInstance : instance::ComponentInstance,
							resourceInstance : hwresourceinstance::ResourceInstance,
							requiredMemory : Real							
						)
				),
				maxMemory : Real
			)
		)
			=
			let swInstances : Set(instance::ComponentInstance) = self.getSWInstancesWithRequiredMemory()
			in
			self.getHWInstancesWithMaxMemory()->collect(ecu |
				Tuple{
					maxMemory = ecu.getMemoryResourceInstances()->any(true).memorySize._'value',
					requiredMemory = swInstances->product(ecu->asSet())->collect(t |
						Tuple {
							componentInstance = t.first,
							resourceInstance = t.second,
							requiredMemory = t.first.getMemoryExtensions()->any(true).requiredMemory._'value'
						}
					)->asSet()
				}
			)->asSet()
			
		def: getSWInstancesWithWCET(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance) : Set(instance::ComponentInstance) =
			instances->select(not getWCETExtensionForECU(ecu).oclIsUndefined())
			
		def: getSWInstancesForSchedulingOnECU(instances : Set(instance::ComponentInstance), ecu : hwresourceinstance::ResourceInstance) : Set(instance::ComponentInstance) =
			self.getSWInstancesWithWCET(instances, ecu)->select(not getSchedulingExtension().oclIsUndefined())
			
	context hwplatforminstance::HWPlatformInstanceConfiguration
		def: getAllEmbeddedPlatformInstances() : Set(hwplatforminstance::HWPlatformInstance) =
			self.hwplatformInstances->closure(h |
				h->asSet()->union(h.embeddedHPIC.hwplatformInstances)
			)->asSet()
	
	-- XXX: hacky
	context hwresourceinstance::ResourceInstance
		def: resolveToStructuredResourceInstances() : Set(hwresourceinstance::ResourceInstance) =
			if self.oclIsKindOf(hwresourceinstance::DeviceInstance) then
				--self.hwports->select(oclIsKindOf(hwplatforminstance::HWPortInstance))
				--	->collect(oclAsType(hwplatforminstance::HWPortInstance))
				--	->collect(connectorInstances.connectorEndpointInstances)
				--	->reject(ep | self.hwports->includes(ep))
				--	->select(oclIsKindOf(hwplatforminstance::HWPortInstance))
				--	->collect(eContainer())->select(oclIsKindOf(hwresourceinstance::ResourceInstance))
				-- this should be the more sane/correct approach
				self.getConnectedECUs()->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))
			else
				self->asSet()
			endif
			
		def: getConnectedECUs() : Set(hwresourceinstance::ResourceInstance) =
			self.getConnectors()->collect(c |
				c.connectorEndpointInstances->select(oclIsKindOf(hwresourceinstance::HWPort))
					->collect(oclAsType(hwresourceinstance::HWPort).parentResourceInstance)
			)->asSet()->reject(r | r = self)
		
		def: getConnectors(other : hwresourceinstance::ResourceInstance) : OrderedSet(OrderedSet(connector::ConnectorInstance)) =
			self.getConnectors()->select(s |
				s->last().connectorEndpointInstances
					->select(oclIsKindOf(hwresourceinstance::HWPort))
					->collect(oclAsType(hwresourceinstance::HWPort).parentResourceInstance)
					->includes(other)
			)
			
		def: getConnectors() : OrderedSet(OrderedSet(connector::ConnectorInstance)) =
			self.hwports->select(oclIsKindOf(connector::ConnectorEndpointInstance))
				->collect(oclAsType(connector::ConnectorEndpointInstance))
				->collect(connectorInstances)
				->collectNested(c | OrderedSet{c})
				->closure(s : OrderedSet(connector::ConnectorInstance) |
					s->last()->collect(c |
						c.connectorEndpointInstances->collect(connectorInstances)
					)->select(c |
						-- move forward
						if s->size() >= 2 then 
							s->at(s->size() - 1).connectorEndpointInstances
						else
							OrderedSet{}
						endif
						->intersection(c.connectorEndpointInstances)->isEmpty()
					)->collectNested(c |
						s->append(c)
					)
				)
		
		def: getReachableECUs() : Set(hwresourceinstance::ResourceInstance) =
			self->asSet()->closure(
				getConnectedECUs()
			)->reject(r | r = self)
			
	context hwresourceinstance::StructuredResourceInstance
		def: getMemoryResourceInstances() : Set(hwresourceinstance::MemoryResourceInstance) =
			self.embeddedAtomicResourceInstances->select(
				oclIsKindOf(hwresourceinstance::MemoryResourceInstance)
			)->collect(
				oclAsType(hwresourceinstance::MemoryResourceInstance)
			)->select(
				memoryType = hwresource::MemoryKind::RAM
			)->asSet()
		
	context instance::ComponentInstanceConfiguration
		def: getAllEmbeddedInstances() : Set(instance::ComponentInstance) =
			self.componentInstances->closure(c |
				if c.oclIsKindOf(instance::StructuredComponentInstance) then
					c->asSet()->union(c.oclAsType(instance::StructuredComponentInstance).embeddedCIC.componentInstances)
				else
					c->asSet()
				endif
			)->asSet()
			
		def: getCICs() : Set(instance::ComponentInstanceConfiguration) =
			self->asSet()->closure(
				componentInstances->select(oclIsKindOf(instance::StructuredComponentInstance))
					->collect(oclAsType(instance::StructuredComponentInstance))
					->collect(embeddedCIC)
			)
			
		def: getConnectors() : Set(instance::PortConnectorInstance) =
			self.getCICs()->collect(portConnectorInstances)->select(portInstances->size() = 2)->asSet()
			
		def: getCommunicatingComponents() : Set(OrderedSet(instance::ComponentInstance)) =
			self.getCICs()->collect(getConnectors())
				->collectNested(
					OrderedSet{
						portInstances->at(1).componentInstance,
						portInstances->at(2).componentInstance
					}
				)->asSet()
			
	context instance::ComponentInstance
		def: getAllEmbeddedInstances() : Set(instance::ComponentInstance) =
			if self.oclIsKindOf(instance::StructuredComponentInstance) then
				self->asSet()->union(self.oclAsType(instance::StructuredComponentInstance).embeddedCIC.getAllEmbeddedInstances())
			else
				self->asSet()
			endif

		def: getMemoryExtensions() : Set(properties::RequiredMemory) =
			self.extension->select(oclIsKindOf(properties::RequiredMemory))
				->collect(oclAsType(properties::RequiredMemory))->asSet()
				
		def: getSchedulingExtensions() : Set(properties::Scheduling) =
			self.extension->select(oclIsKindOf(properties::Scheduling))
				->collect(oclAsType(properties::Scheduling))->asSet()
				
		def: getSchedulingExtension() : properties::Scheduling =
			self.getSchedulingExtensions()->any(true)
				
		def: getWCETExtensions() : Set(properties::WCET) =
			self.extension->select(oclIsKindOf(properties::WCET))
				->collect(oclAsType(properties::WCET))->asSet()
				
		def: getWCETExtensionForECU(ecu : hwresourceinstance::ResourceInstance) : properties::WCET =
			let wcets : Set(properties::WCET) = self.getWCETExtensions()
			in
			let wcet : properties::WCET = wcets->any(resourceInstance = ecu)
			in
			if wcet.oclIsUndefined() then
				wcets->any(resourceInstance.oclIsUndefined())
			else
				wcet
			endif
				
	context valuetype::TimeValue
		def: getLiteralVal() : Real =
			if self._'value'.oclIsKindOf(common::LiteralExpression) then
				self._'value'.oclAsType(common::LiteralExpression)._'value'.toReal()
			else
				42
			endif