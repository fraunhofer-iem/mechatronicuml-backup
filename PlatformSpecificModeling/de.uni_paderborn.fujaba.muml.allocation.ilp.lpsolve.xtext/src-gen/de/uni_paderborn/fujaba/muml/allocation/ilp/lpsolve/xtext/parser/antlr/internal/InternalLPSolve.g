/*
* generated by Xtext
*/
grammar InternalLPSolve;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.allocation.ilp.lpsolve.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.allocation.ilp.lpsolve.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.fujaba.muml.allocation.ilp.lpsolve.xtext.services.LPSolveGrammarAccess;

}

@parser::members {

 	private LPSolveGrammarAccess grammarAccess;
 	
    public InternalLPSolveParser(TokenStream input, LPSolveGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "IntegerLinearProgram";	
   	}
   	
   	@Override
   	protected LPSolveGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleIntegerLinearProgram
entryRuleIntegerLinearProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLinearProgramRule()); }
	 iv_ruleIntegerLinearProgram=ruleIntegerLinearProgram 
	 { $current=$iv_ruleIntegerLinearProgram.current; } 
	 EOF 
;

// Rule IntegerLinearProgram
ruleIntegerLinearProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLinearProgramAccess().getObjectiveFunctionObjectiveFunctionExpressionParserRuleCall_0_0()); 
	    }
		lv_objectiveFunction_0_0=ruleObjectiveFunctionExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLinearProgramRule());
	        }
       		set(
       			$current, 
       			"objectiveFunction",
        		lv_objectiveFunction_0_0, 
        		"ObjectiveFunctionExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLinearProgramAccess().getConstraintsConstraintExpressionParserRuleCall_1_0()); 
	    }
		lv_constraints_1_0=ruleConstraintExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLinearProgramRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_1_0, 
        		"ConstraintExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerLinearProgramAccess().getVariablesVariableParserRuleCall_2_0()); 
	    }
		lv_variables_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerLinearProgramRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleObjectiveFunctionExpression
entryRuleObjectiveFunctionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectiveFunctionExpressionRule()); }
	 iv_ruleObjectiveFunctionExpression=ruleObjectiveFunctionExpression 
	 { $current=$iv_ruleObjectiveFunctionExpression.current; } 
	 EOF 
;

// Rule ObjectiveFunctionExpression
ruleObjectiveFunctionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='min' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectiveFunctionExpressionAccess().getMinKeyword_0_0_0());
    }

    |	otherlv_1='max' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectiveFunctionExpressionAccess().getMaxKeyword_0_0_1());
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_0_1());
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_0_2());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getObjectiveFunctionExpressionAccess().getGoalObjectiveGoalEnumRuleCall_1_0_0()); 
	    }
		lv_goal_4_0=ruleObjectiveGoal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectiveFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"goal",
        		lv_goal_4_0, 
        		"ObjectiveGoal");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjectiveFunctionExpressionAccess().getColonKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectiveFunctionExpressionAccess().getObjectiveFunctionLinearExpressionParserRuleCall_1_2_0()); 
	    }
		lv_objectiveFunction_6_0=ruleLinearExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectiveFunctionExpressionRule());
	        }
       		set(
       			$current, 
       			"objectiveFunction",
        		lv_objectiveFunction_6_0, 
        		"LinearExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getObjectiveFunctionExpressionAccess().getSemicolonKeyword_1_3());
    }
))
;





// Entry rule entryRuleConstraintExpression
entryRuleConstraintExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintExpressionRule()); }
	 iv_ruleConstraintExpression=ruleConstraintExpression 
	 { $current=$iv_ruleConstraintExpression.current; } 
	 EOF 
;

// Rule ConstraintExpression
ruleConstraintExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getCommentVariableIDParserRuleCall_0_0_0()); 
	    }
		lv_comment_0_0=ruleVariableID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"VariableID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintExpressionAccess().getColonKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getLeftExpressionSimpleLinearExpressionParserRuleCall_1_0()); 
	    }
		lv_leftExpression_2_0=ruleSimpleLinearExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"leftExpression",
        		lv_leftExpression_2_0, 
        		"SimpleLinearExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getOperatorComparingOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_3_0=ruleComparingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"ComparingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintExpressionAccess().getRightExpressionSimpleLinearExpressionParserRuleCall_3_0()); 
	    }
		lv_rightExpression_4_0=ruleSimpleLinearExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_0, 
        		"SimpleLinearExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getConstraintExpressionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getDataTypeILPDataTypeEnumRuleCall_0_0()); 
	    }
		lv_dataType_0_0=ruleILPDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_0_0, 
        		"ILPDataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getNameVariableIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVariableID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"VariableID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleVariableID
entryRuleVariableID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableIDRule()); } 
	 iv_ruleVariableID=ruleVariableID 
	 { $current=$iv_ruleVariableID.current.getText(); }  
	 EOF 
;

// Rule VariableID
ruleVariableID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableIDAccess().getFullStopKeyword_1_0()); 
    }
(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_0()); 
    }

    |(    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getVariableIDAccess().getINTTerminalRuleCall_1_1_1_0()); 
    }
(    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getVariableIDAccess().getIDTerminalRuleCall_1_1_1_1()); 
    }
)?)))*)
    ;





// Entry rule entryRuleLinearExpression
entryRuleLinearExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearExpressionRule()); }
	 iv_ruleLinearExpression=ruleLinearExpression 
	 { $current=$iv_ruleLinearExpression.current; } 
	 EOF 
;

// Rule LinearExpression
ruleLinearExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLinearExpressionAccess().getSimpleLinearExpressionParserRuleCall()); 
    }
    this_SimpleLinearExpression_0=ruleSimpleLinearExpression
    { 
        $current = $this_SimpleLinearExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSimpleLinearExpression
entryRuleSimpleLinearExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleLinearExpressionRule()); }
	 iv_ruleSimpleLinearExpression=ruleSimpleLinearExpression 
	 { $current=$iv_ruleSimpleLinearExpression.current; } 
	 EOF 
;

// Rule SimpleLinearExpression
ruleSimpleLinearExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSimpleLinearExpressionAccess().getAdditionExpressionParserRuleCall()); 
    }
    this_AdditionExpression_0=ruleAdditionExpression
    { 
        $current = $this_AdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	 iv_ruleAdditionExpression=ruleAdditionExpression 
	 { $current=$iv_ruleAdditionExpression.current; } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); 
    }
    this_MultiplicationExpression_0=ruleMultiplicationExpression
    { 
        $current = $this_MultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightExpressionLinearExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleLinearExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"LinearExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	 iv_ruleMultiplicationExpression=ruleMultiplicationExpression 
	 { $current=$iv_ruleMultiplicationExpression.current; } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_0()); 
    }
    this_Operand_0=ruleOperand
    { 
        $current = $this_Operand_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"MultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"Operand");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getNumberLiteralExpressionParserRuleCall_0()); 
    }
    this_NumberLiteralExpression_0=ruleNumberLiteralExpression
    { 
        $current = $this_NumberLiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getVariableExpressionParserRuleCall_1()); 
    }
    this_VariableExpression_1=ruleVariableExpression
    { 
        $current = $this_VariableExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNumberLiteralExpression
entryRuleNumberLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralExpressionRule()); }
	 iv_ruleNumberLiteralExpression=ruleNumberLiteralExpression 
	 { $current=$iv_ruleNumberLiteralExpression.current; } 
	 EOF 
;

// Rule NumberLiteralExpression
ruleNumberLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberLiteralExpressionAccess().getValueNumberParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getHyphenMinusKeyword_0()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getNumberAccess().getDecimalParserRuleCall_1_0()); 
    }
    this_Decimal_1=ruleDecimal    {
		$current.merge(this_Decimal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleDecimal
entryRuleDecimal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalRule()); } 
	 iv_ruleDecimal=ruleDecimal 
	 { $current=$iv_ruleDecimal.current.getText(); }  
	 EOF 
;

// Rule Decimal
ruleDecimal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDecimalAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDecimalAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleVariableExpression
entryRuleVariableExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableExpressionRule()); }
	 iv_ruleVariableExpression=ruleVariableExpression 
	 { $current=$iv_ruleVariableExpression.current; } 
	 EOF 
;

// Rule VariableExpression
ruleVariableExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableExpressionAccess().getVariableVariableCrossReference_0()); 
	    }
		ruleVariableID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Rule ObjectiveGoal
ruleObjectiveGoal returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='min' 
	{
        $current = grammarAccess.getObjectiveGoalAccess().getMINEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getObjectiveGoalAccess().getMINEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='max' 
	{
        $current = grammarAccess.getObjectiveGoalAccess().getMAXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getObjectiveGoalAccess().getMAXEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparingOperator
ruleComparingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4()); 
    }
));



// Rule ILPDataType
ruleILPDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='bin' 
	{
        $current = grammarAccess.getILPDataTypeAccess().getBINARYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getILPDataTypeAccess().getBINARYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='int' 
	{
        $current = grammarAccess.getILPDataTypeAccess().getINTEGEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getILPDataTypeAccess().getINTEGEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='real' 
	{
        $current = grammarAccess.getILPDataTypeAccess().getREALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getILPDataTypeAccess().getREALEnumLiteralDeclaration_2()); 
    }
));



// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicationOperator
ruleMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration()); 
    }
);



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


