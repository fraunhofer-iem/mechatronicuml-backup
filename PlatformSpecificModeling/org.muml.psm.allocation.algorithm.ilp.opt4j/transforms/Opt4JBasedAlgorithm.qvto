import AbstractILPBasedAlgorithm;
import Opt4J;

modeltype allocationSpecification uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype instance uses muml::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype allocation uses psm::allocation('http://www.muml.org/psm/allocation/1.0.0');
modeltype opt4jconfig uses config('http://www.muml.org/psm/allocation/algorithm/ilp/opt4j/config/1.0.0');

transformation Opt4JBasedAlgorithm(in specification : allocationSpecification, in ins : instance, in hwpi : hwpinstance, out allocationOut : allocation)
	extends AbstractILPBasedAlgorithm;

main() {
	computeAllocation();
	allocationOut.removeOrphans();
}

helper allocation::removeOrphans() {
	// remove Opt4jConfiguration object from the out extent...
	self.objects()->select(
		oclIsKindOf(Opt4jConfiguration)
	)->forEach(elm) {
		self.removeElement(elm);
	};
}

query getAllocationSpecification() : allocationSpecification {
	return specification;
}

query getInstance() : instance {
	return ins;
}

query getHwpi() : hwpinstance {
	return hwpi;
}

helper solveILP(ilpModel : IntegerLinearProgram, solution : Dict(Variable, Integer)) : Integer {
	return opt4jsolve(ilpModel, solution);
}