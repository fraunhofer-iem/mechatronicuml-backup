Why is this fragment project needed at all?
The *.qvto files from the "algorithm.ilp.lpsolve" plugin import files from
the "algorithm.ilp" plugin. In order to have access to these files, we use
so-called "linkedResources" (basically, a filesystem agnostic way for
specifying symlinks). An alternative is to copy these files, but this will
end up in a maintenance nightmare... so we stick to the linkedResources for
now.
The problem is that the notion of linkedResources seems to only exist on
the workspace level. That is, the built *.jar files have no access to the
linkedResources anymore.

Actions taken so far:
- Tried to use the "org.eclipse.m2m.qvt.oml.unitResolverFactory" extension,
  but this does not work, because our registered factory is not considered
  during the unit resolving process (the
  "org.eclipse.m2m.internal.qvt.oml.project.builder.EclipseUnitResolverFactory" is
  always registered before our custom class (I also tried to use a fragment
  project, but w/o success))
- Implemented the "algorithm.ilp.lpsolve" plugin as a fragment project
  (with Fragment-Host set to the "algorith.ilp" plugin), but it seems that
  the "transforms" directories are not "merged".

Current workaround:
- Case 1: the allocation* plugins are checked out into the workspace
  In this case, this fragment project makes a contribution to the
  "org.eclipse.osgi" plugin and does a manual link resolving (a quite
  low-level approach, though)

- Case2: update site
  No workaround yet. Idea: force jenkins/buckminster to run a script
  before the build of the "algorithm.ilp.lpsolve" plugin, which
  copies all required files into the plugin (this is not an ideal
  solution, but OK). The question is, if it is possible to run such a
  script before the build.


Long story short - how to use this fragment project:
- Import this fragment into your workspace
- Import the "org.eclipse.osgi" plugin into your workspace
  (open the "Plug-ins" view -> select the "org.eclipse.osgi" plugin
  -> right click -> "Import As" -> "Binary Project")
- Copy the "lookup.properties.template" to "lookup.properties" and adjust
  the paths in the "lookup.properties" file (the file is part of this
  fragment project)
- When starting a new "Eclipse Application", add the following VM argument:
  -Dosgi.framework.extensions=org.muml.psm.allocation.devel
  (via "Run" -> "Run Configurations" -> select or create a new Eclipse
  Application -> select the "Arguments" tab and add it the VM arguments)
