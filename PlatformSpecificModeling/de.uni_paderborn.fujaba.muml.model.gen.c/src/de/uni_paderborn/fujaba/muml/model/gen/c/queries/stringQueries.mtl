[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module stringQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/swplatform/0.4.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/')]

[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::modelQueries]

[**
 * The documentation of the query generateElement.
 * @param anOclAny
 */]
[query public getHeaderFile (rtsc : RealtimeStatechart) : String = rtsc.name.getName()+'.h'/]

[query public getOSMacroIdentifier (os : String) : String = os.toUpper()/]

[query public getNumberOfMessageBuffers (port : DiscretePort) : String = 
if (port.receiverMessageBuffer->size().toString() <> '*') then
port.receiverMessageBuffer->size().toString()
else
'10'
endif
/]

[query public getSizeOfMessageBuffer (msgBuffer : MessageBuffer) : String = 
if (msgBuffer.bufferSize.toString() <> '*') then
msgBuffer.bufferSize.toString()
else
'5'
endif
/]


[**
 * @param syncChannel
*/]
[query public getAddMethodName(component: Component, cPart : ComponentPart) : String =
	getClassName(component) + '_addTo_'+getName(cPart)
/]


[**
 * @param syncChannel
*/]
[query public getRTSCPointerName(apiCall : APICallParameterBinding) : String =
	apiCall.getMethodName().substring(apiCall.getMethodName().toString().size()-6).toLowerFirst()
/]


[**
 * @param syncChannel
*/]
[query public getRemoveMethodName(component : Component, cPart : ComponentPart) : String =
	getClassName(component) + '_removeFrom_'+getName(cPart)
/]

[query public getCreateMethodName(port : Port) : String =
	getClassName(port) + '_create'	
/]

[query public getMethodName(op : Operation) : String =
	op.getName()	
/]

[query public getName(op : Operation) : String =
	op.name.getName().toLowerFirst()	
/]

[query public getName(rsri : RefinedStructuredResourceInstance) : String =
	rsri.oclAsType(StructuredResourceInstance).name.getName().toLowerFirst()	
/]

[query public getName(rsri : Resource) : String =
	rsri.name.getName().toLowerFirst()	
/]

[query public getName(parameter : Parameter) : String = 
	parameter.name.getName().toLowerFirst()
/]

[query public getName(component : Component) : String = 
	getName(component.name)
/]

[query public getName(componentPart : ComponentPart) : String = 
	getName(componentPart.name)
/]

[query public getName(cInst : ComponentInstance) : String = 
	getName(cInst.name)
/]

[query public getName(sri : StructuredResourceInstance) : String = 
	getName(sri.name)
/]


[query public getName(var : Variable) : String = 
	getName(var.name)
/]

[query public getName(msgType : MessageType) : String = 
	getName(msgType.name)
/]

[query public getName (rtsc : RealtimeStatechart) : String = 
if (rtsc.parentRegion.oclIsUndefined()) then
'Root'+getName(rtsc.name)
else
rtsc.parentRegion.getName()+'_'+getName(rtsc.parentRegion.name)
endif
/]

[query public getName (region : Region) : String = 
region.parentState.getName()+'_'+getName(region.name)
/]

[query public getName (rep : MessageTypeRepository) : String = 
getName(rep.name)
/]

[query public getName (channel : SynchronizationChannel) : String = 
getName(channel.name)
/]

[query public getName(state : State) : String =
 
	getName(state.parentStatechart).toUpper() + '_' + getName(state.name).toUpper() +'_STATE'

/]
[**
 * @param port
*/]
[query public getName(port : Port) : String = 
	getName(port.name) 
/]

[**
 * @param port
*/]
[query public getName(port : HybridPort) : String = 
	getName(port.name) 
/]

[**
 * @param port
*/]
[query public getName(port : PortInstance) : String = 
	getName(port.name)
/]

[**
 * @param hardware port
*/]
[query public getName(port : HWPortInstance) : String = 
	getName(port.name) 
/]


[**
 * @param region
*/]
[comment @TODO exitRegion...naming? /]
[query public getExitMethodName(region : Region) : String =

		getClassName(region.embeddedStatechart) + '_exit'

/]



[**
 * @param component
*/]
[query public getFileName(component : Component, header : Boolean) : String = 
	'components/' + 
		getClassName(component).toLowerFirst()
	+
	if (header) then
		'.h'
	else
		'.c'
	endif
/]
[query public getFileName(cic : ComponentInstanceConfiguration, header : Boolean) : String = 
		getClassName(cic).toLowerFirst()
	+
	if (header) then
		'.h'
	else
		'.c'
	endif
/]

[query public getFileName(rsri : RefinedStructuredResourceInstance, header : Boolean) : String = 
		getClassName(rsri).toLowerFirst()
	+
	if (header) then
		'.h'
	else
		'.c'
	endif
/]


[query public getFileName(cpart : ComponentPart, header : Boolean) : String = 
	'components/' + 
		getClassName(cpart).toLowerFirst()
	+
	if (header) then
		'.h'
	else
		'.c'
	endif
/]


[**
 * @param component
*/]
[query public getFileName(sync : SynchronizationChannel, header : Boolean) : String =
	'syncChannels/' + getClassName(sync).toLowerFirst() +
	if (header) then
		'.h'
	else
		'.c'
	endif
/]

[query public getFileName(rtsc : RealtimeStatechart, header : Boolean, operations : Boolean) : String = 
	if(operations) then
		'impl/' + getClassName(rtsc).toLowerFirst() + 'Operations.c'
	else
		'RTSCs/' + getClassName(rtsc).toLowerFirst()  + 
		if(header) then
			'.h'
		else
			'.c'
		endif
	endif
/]

[query public getFileName(ci : Component, header : Boolean, operations : Boolean) : String = 
	
		'components/' + getClassName(ci).toLowerFirst()  + 
		if(header) then
			'.h'
		else
			'.c'
		endif

/]

[query public getFileName(rep : MessageTypeRepository, header : Boolean) : String = 
	
		'msg/' + rep.getName().toLowerFirst() + 'Messages'+
		if(header) then
			'.h'
		else
			'.c'
		endif

/]



[query public getTaskName(ci : AtomicComponentInstance) : String = 
	
		'Task_'+ci.getVariableName()

/]


[**
 * @param component
*/]
[query public getClassName(component : Component) : String =
	getName(component).toUpperFirst() + 'Component' 
/]

[query public getClassName(cic : ComponentInstanceConfiguration) : String =
	getName(cic).toUpperFirst() + 'Component' 
/]

[query public getClassName(componentPart : ComponentPart) : String =
	getName(componentPart.componentType).toUpperFirst() + 'Component' 
/]

[query public getClassName(cInst : ComponentInstance) : String =
	cInst.componentType.getClassName() 
/]


[**
 * @param syncChannel
*/]
[comment TODO paramter/]
[query public getClassName(syncChannel : SynchronizationChannel) : String = 
	'SyncChannel'
/]

[query public getClassName(rtsc: RealtimeStatechart) : String = 
	getClassName(rtsc, false)
/]


[query public getClassName(rtsc: RealtimeStatechart, enum : Boolean) : String =
	getName(rtsc).toUpperFirst() + 
	if (enum) then 
		'State'
	else
		'StateChart'
	endif
/]

[query public getClassName(connector : Connector) : String = 
	if ((connector.connectorEndpoints->at(1).oclIsTypeOf(DiscretePort)) and (connector.connectorEndpoints->at(2).oclIsTypeOf(DiscretePort))) then			
		'DiscreteConnection'		
	else
		'ContinuousConnection'
	endif
/]

[query public getSuperClassName(rtsc: RealtimeStatechart) : String = 
	getSuperClassName(rtsc, false)
/]

[query public getSuperClassName(rtsc: RealtimeStatechart, enum :Boolean) : String = 
	if rtsc.parentRegion.oclIsUndefined() then
		getClassName(rtsc, enum)
	else
		getSuperClassName(rtsc.parentRegion.parentState.parentStatechart, enum)
	endif
/]

[**
 * @param port
*/]
[query public getClassName(port : Port) : String = 
	if (port.oclIsTypeOf(DiscretePort)) then
		'DiscretePort'
	else
		'#warning Continous ports not supported!'
	endif
/]

[query public getClassName(rsri : RefinedStructuredResourceInstance) : String = 
	rsri.getName()
/]

[query public getName(clock : Clock) : String = 
	getName(clock.name)+'_of'+clock.statechart.getVariableName()
/]

[query public getName(cic : ComponentInstanceConfiguration) : String = 
	getName(cic.name)
/]

[query public getTaskName(ci : ComponentInstance) : String = 
	'Task_'+getVariableName(ci)
/]

[query public getVariableName(component : Component) : String =
		getName(component).toLowerFirst() + 'Component'
/]

[query public getVariableName(cInst : ComponentInstance) : String =
		getName(cInst).toLowerFirst() + 'Component'
/]

[query public getVariableName(var : Variable) : String = 
	getName(var)
/]


[query public getVariableName(syncChannel : SynchronizationChannel) : String = 
	syncChannel.name.getName().toLowerFirst() + 'SyncChannel'
/]

[query public getVariableName(rtsc : RealtimeStatechart) : String =
	'currentStateOf'+getName(rtsc).toUpperFirst()
/]

[query public getVariableName(clock : Clock) : String = 
	getName(clock).toLowerFirst() + 'Clock'
/]


[query public getVariableName(msgType : MessageType) : String = 
	msgType.getName() + msgType.repository.getName() +'Message'
/]

[query public getStructName(msgType : MessageType) : String = 
	msgType.getName() + msgType.repository.getName() +'Message'
/]

[query public getTypeName (msgType: MessageType) : String = 
msgType.getName() + msgType.repository.getName() +'Message'/]
[**
 * @param port
*/]
[query public getVariableName(part : ComponentPart) : String = 
	getName(part).toLowerFirst() + 'Component'
/]

[query public getVariableName(region : Region) : String =
	'currentStateOf' + getName(region.embeddedStatechart).toUpperFirst()
/]
[**
 * @param port
*/]
[query public getVariableName(port : Port) : String = 
	getVariableName(port, true)
/]


[**
 * @param port
*/]
[query public getVariableName(port : Port, classVariable : Boolean) : String = 
	if (port.oclIsTypeOf(HybridPort) or port.oclIsTypeOf(ContinuousPort)) then
			getName(port).toLowerFirst()
	else
		getName(port).toLowerFirst() + 'Port'
	endif
/]

[**
 * @param connector
*/]
[query public getVariableName(connector : ConnectorInstance) : String = 

		if not (connector.connectorEndpointInstances->at(1).oclAsType(PortInstance).oclIsKindOf(DiscretePortInstance) and connector.connectorEndpointInstances->at(2).oclAsType(PortInstance).oclIsKindOf(DiscretePortInstance)) then
		getName(connector.connectorEndpointInstances->at(1).oclAsType(PortInstance)).toLowerFirst() + 'Connection'
	else
		getName(connector.connectorEndpointInstances->at(1).oclAsType(PortInstance)).toLowerFirst() + getName(connector.connectorEndpointInstances->at(2).oclAsType(PortInstance)).toUpperFirst() + 'Connection'
	endif
/]


[query public getConstructorName(rtsc: RealtimeStatechart) : String = 
	getClassName(rtsc) + '_create'
/]



[**
 * @param operation
*/]
[query public getHeaderDefine(component : Component) : String = 
	getClassName(component).toUpper() + '_H_'
/]


[query public getHeaderDefine(rtsc : RealtimeStatechart) : String = 
	getClassName(rtsc).toUpper() + '_H_'	
/]

[**
 * @param component
*/]
[query public getInitializeMethodName(component : Component) : String =

		getClassName(component) + '_initialize'

/]

[**
 * @param component
*/]
[query public getInitializeMethodName(cInst : ComponentInstance) : String =

		getClassName(cInst) + '_initialize'

/]

[query public getInitializeMethodName(cpart : ComponentPart) : String =

		getClassName(cpart) + '_initialize'

/]

[query public getInitializeMethodName(rtsc : RealtimeStatechart) : String = 

		getClassName(rtsc) + '_initialize'
/]

[query public getInitializeMethodName(region : Region) : String = 

		'initialize' + getName(region).toUpperFirst() + 'Region'

/]

[**
 * @param component
*/]
[query public getDestroyMethodName(component : Component) : String =

		getClassName(component) + '_destroy'

/]

[query public getDestroyMethodName(componentPart : ComponentPart) : String =

		getClassName(componentPart.componentType) + '_destroy'

/]


[**
 * @param connector
*/]
[query public getDestroyMethodName(connector : Connector) : String =
	getClassName(connector) + '_destroy'
/]

[query public getDestroyMethodName(rtsc : RealtimeStatechart) : String =
	getClassName(rtsc) + '_destroy'
/]

[**
 * @param syncChannel
*/]
[query public getDestroyMethodName(syncChannel : SynchronizationChannel) : String =
	getClassName(syncChannel) + '_destroy'
/]

[**
 * @param port
*/]
[query public getDestroyMethodName(port : Port) : String =
	'Port_destroy'
/]

[**
 * @param component
*/]
[query public getProcessMethodName(component : Component) : String =

		getClassName(component) + '_processStep'

/]

[query public getProcessMethodName(componentPart : ComponentPart) : String =

		getClassName(componentPart.componentType) + '_processStep'

/]

[query public getProcessMethodName(rtsc : RealtimeStatechart) : String =
		getClassName(rtsc) + '_processStep'
/]

[query public getExitMethodName(rtsc : RealtimeStatechart) : String =
		getClassName(rtsc) + '_exit'
/]

[query public getTerminateMethodName(rtsc : RealtimeStatechart) : String =
	getClassName(rtsc)  + '_isTerminated'	
/]

[query public getIsInStateMethodName(rtsc : RealtimeStatechart) : String =
	getClassName(rtsc)  + '_isInState'	
/]

[**
 * @param component
*/]
[query public getTerminateMethodName(component : Component) : String =

		getClassName(component) + '_isTerminated'

/]

[query public getTerminateMethodName(componentPart : ComponentPart) : String =

		getClassName(componentPart.componentType) + '_isTerminated'

/]






[query public replaceClockNames(rtsc : RealtimeStatechart, expression : String) : String = 
	rtsc.availableClocks->collect(oclAsType(Clock))->iterate(clock : Clock; returnValue : String = expression | returnValue.replaceAll('\\b' + getName(clock.name) + '\\b', 'Clock_getTime(stateMachine->' + getVariableName(clock) + ')'))	
/]

[query public replaceLocalVariableNames(rtsc : RealtimeStatechart, expression : String) : String = 
	if not rtsc.oclIsUndefined() and rtsc.allAvailableVariables ->size() > 0 then 
		rtsc.allAvailableVariables->collect(oclAsType(Variable))->iterate(var : Variable; returnValue : String = expression | returnValue.replaceAll('\\b' + getName(var.name) + '\\b', 'stateMachine->' + getVariableName(var)))
	else
		expression
	endif	
/]

[query public getVerifyMethodName(state : State) : String = 
	'verifySyncChannelsOf' + getName(state.name)
/]


[**
 * @param state
*/]
[query public getClockVariableName(state : State) : String = 
	getName(state.name).toLowerFirst() + 'DoClock'
/]

[**
 * @param component
*/]
[query public getCreateMethodName(component : Component) : String =

		getClassName(component) + '_create'

/]

[query public getCreateMethodName(cpart : ComponentPart) : String =

		getClassName(cpart) + '_create'

/]

[query public getCreateMethodName(cInst : ComponentInstance) : String =

		getClassName(cInst) + '_create'

/]

[**
 * @param component
*/]
[query public getCreateMethodName(rtsc : RealtimeStatechart) : String =
	getClassName(rtsc) + '_create'	
/]

[**
 * @param syncChannel (specialization of operation, do not change order of templates!)
*/]
[query public getCreateMethodName(syncChannel : SynchronizationChannel) : String =
	getClassName(syncChannel) + '_create'	
/]

[**
 * @param element
*/]
[query public getTypeName(type : DataType) : String = 
	if (type.name = 'BOOLEAN') then 'bool' else 
	if (type.name = 'BYTE') then 'byte' else
	if (type.name = 'DOUBLE') then 'double' else
	if (type.name = 'INT') then 'int' else
	if (type.name = 'LONG') then 'long' else
	if (type.name = 'SHORT') then 'short' else
	if (type.name = 'VOID') then 'void' else
	'TYPE UNDIFINED'
	endif
	endif
	endif
	endif
	endif
	endif
	endif
/]

[**
 * @param element
*/]
[query public getTypeNameForProtoBuf(type : DataType) : String = 
	if (type.name = 'BOOLEAN') then 'bool' else 
	if (type.name = 'BYTE') then 'bool' else
	if (type.name = 'DOUBLE') then 'double' else
	if (type.name = 'INT') then 'int32' else
	if (type.name = 'LONG') then 'int64' else
	if (type.name = 'SHORT') then 'int32' else
	if (type.name = 'VOID') then 'void' else
	'TYPE UNDIFINED'
	endif
	endif
	endif
	endif
	endif
	endif
	endif
/]

[**
 * @param element
*/]
[query public getDefaultReturn(op : Operation) : String = 
	if (op.returnType.name = 'BOOLEAN') then 'false' else 
	if (op.returnType.name = 'BYTE') then '0' else
	if (op.returnType.name = 'DOUBLE') then '0.0' else
	if (op.returnType.name = 'INT') then '0' else
	if (op.returnType.name = 'LONG') then '0' else
	if (op.returnType.name = 'SHORT') then '0' else
	if (op.returnType.name = 'VOID') then 'void' else
	'TYPE UNDIFINED'
	endif
	endif
	endif
	endif
	endif
	endif
	endif
/]

[query public getTypeName(var : Variable) : String = 
	var.dataType.getTypeName()
/]



[**
 * 
*/]
[query private tokenize(name : String, token : String) : String =
	if name.contains(token) then 
		name.tokenize(token)->iterate(iterator : String; returnValue : String = '' | returnValue + iterator.toUpperFirst())
	else
		name
	endif
/]

[** 
 * @param name
*/]
[query public getName(name : String) : String =
	Sequence{' ', '-', '.'}->iterate(iterator : String; returnValue : String = name | tokenize(returnValue, iterator)) 
/]



[comment @TODO /]
[query public getTriggerEvent(component : Component, rtsc : RealtimeStatechart, transition : Transition) : String =
	'Trigger Event'
/]

[query public getOpSymbol(operator : ComparingOperator ) : String =
	if (operator = ComparingOperator::LESS_OR_EQUAL) then '<=' else 
	if (operator = ComparingOperator::EQUAL) then '==' else	
	if (operator = ComparingOperator::GREATER_OR_EQUAL) then '>=' else	
	if (operator = ComparingOperator::LESS) then '<' else	
	if (operator = ComparingOperator::GREATER) then '>' else
	if (operator = ComparingOperator::UNEQUAL) then '!=' else
	'OPERATOR UNDEFINED'	
	endif
	endif
	endif
	endif
	endif
	endif
/]


[**
 * @param port
*/]
[query public getGetterName(component : Component) : String = 
	getClassName(component) + '_getStateMachine'
/]
[**
 * @param port
*/]
[query public getGetterName(port : Port) : String = 
	getClassName(port.component) + '_get' + port.name.getName()

/]

[**
 * @param port
*/]
[query public getGetterName(port : Port, classVariable : Boolean) : String = 
	'get' + getVariableName(port, classVariable).toUpperFirst() + '()' 
/]


[query public getType(par:Parameter) : String = 
	par.dataType.getTypeName() 
/]

[query public getDefaultValue(type : DataType) : String = 
if (type.name = 'BOOLEAN') then 'false' else 
	if (type.name = 'BYTE') then '0' else
	if (type.name = 'DOUBLE') then '0.0' else
	if (type.name = 'INT') then '0' else
	if (type.name = 'LONG') then '0' else
	if (type.name = 'SHORT') then '0' else
	if (type.name = 'VOID') then 'void' else
	'TYPE UNDIFINED'
	endif
	endif
	endif
	endif
	endif
	endif
	endif

/]



[query public getVariablePathRecursive(ci : ComponentInstance, path : String) : String = 
	if (ci.parentCIC.parentStructuredComponentInstance.oclIsUndefined()) then
		getVariableName(ci) +'->'+path
	else
	getVariablePathRecursive(ci.parentCIC.parentStructuredComponentInstance,getVariableName(ci) +'->'+path)
	endif
/]
[query public getVariablePath(pi : PortInstance) : String = 
	if (pi.componentInstance.parentCIC.parentStructuredComponentInstance.oclIsUndefined()) then
		getVariableName(pi.componentInstance) +'->'+getVariableName(pi.portType)
	else
	getVariablePathRecursive(pi.componentInstance.parentCIC.parentStructuredComponentInstance, getVariableName(pi.componentInstance) +'->'+getVariableName(pi.portType))
	endif
/]





[query public cdtbeautifier(a : String) : String = invoke('org.eclipse.acceleo.additions.beautifier.CdtBeautifier','beautify(java.lang.String)', Sequence{a}) /]

