// automatically generated by Xtext
grammar org.muml.psm.allocation.language.AllocationSpecificationLanguage with org.eclipse.ocl.xtext.completeocl.CompleteOCL

// use platform uri (the generation fails if NSURIs are used) - the OCL xtext files use
// the platform uri import mechanism as well
import "platform:/resource/org.muml.psm.allocation.language/model/LanguageSpecificationCS.ecore" as cs
import "platform:/resource/org.eclipse.ocl.xtext.essentialocl/model/EssentialOCLCS.ecore" as essentialocl

Specification returns cs::SpecificationCS:
	{cs::SpecificationCS}
	name=ID '{'
		(ownedImports += ImportCS | ownedContexts += ClassifierContextDeclCS
			| services += Service | constraints += Constraint
		)*
		(goal=Goal measure=MeasureFunction)? 
	'}'
;

Service returns cs::ServiceCS:
	'service' name=ID '{'
		dimensions += QosDimension*
	'}'
;

QosDimension returns cs::QoSDimensionCS:
	'qos' name=ID '{'
		'value' weighting=ValueTupleDescriptor';'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		'ocl' expression=Model ';'
	'}'
;

Constraint returns cs::ConstraintCS:
	'constraint' (LocationConstraint | ResourceConstraint | RequiredHardwareResourceInstanceConstraint)
;

LocationConstraint returns cs::LocationConstraintCS:
	type=LocationConstraintType (name=ID)? '{'
		'descriptors' tupleDescriptor=LocationTupleDescriptor ';'
		'ocl' expression=Model ';'
	'}'
;

ResourceConstraint returns cs::ResourceConstraintCS:
	('resource' | 'requiredResource') (name=ID)? '{'
		'lhs' weighting=ValueTupleDescriptor';'
		'rhs' rhs=ValueTupleDescriptor';'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		'ocl' expression=Model ';'
	'}'
;

RequiredHardwareResourceInstanceConstraint returns cs::RequiredHardwareResourceInstanceConstraintCS:
	('requiredHardwareResourceInstance' | 'requiredLocation') (name=ID)? '{'
		'descriptors' tupleDescriptors+=ComponentResourceTupleDescriptor (',' tupleDescriptors+=ComponentResourceTupleDescriptor)*';'
		'ocl' expression=Model';'
	'}'
;

enum LocationConstraintType returns cs::LocationConstraintTypes:
	SAME_LOCATION='sameLocation' | SAME_LOCATION='collocation'
		| DIFFERENT_LOCATION='differentLocation' | DIFFERENT_LOCATION='separateLocation'
;

LocationTupleDescriptor returns cs::LocationTupleDescriptorCS:
	'(' instance=ID ',' secondInstance=ID ')'
;

ValueTupleDescriptor returns cs::ValueTupleDescriptorCS:
	value=ID
;

ComponentResourceTupleDescriptor returns cs::ComponentResourceTupleDescriptorCS:
	'(' instance=ID ',' hwresinstance=ID ')'
;

MeasureFunction returns cs::MeasureFunctionCS:
	'measure' services+=[cs::ServiceCS] ('+' services+=[cs::ServiceCS])*';'
;

enum Goal returns cs::Goal:
	MIN='min' | MAX='max'
;