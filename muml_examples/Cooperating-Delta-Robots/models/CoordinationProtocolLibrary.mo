within ;
package CoordinationProtocolLibrary
package UsersGuide "User's Guide"

  package Elements "Elements"

    model Fail_Operational_Delegation

        annotation (Documentation(info="<html>
<h3> Fail_Operational_Delegation Pattern </h3>
<p> 
This pattern realizes a delegation of a task from a role master to a role slave. The
slave executes the task in a certain time and answers regarding success or failure. The
pattern assumes that a failure is not safety-critical, though only one delegation at a time
is allowed. 
</p>

<h4> Context </h4>
<p> 
Delegate tasks between communicating actors. 
</p>

<h4> Problem </h4>
<p> 
If the communication is asynchronous and the communication channel is
unreliable, the role that sends the task, does not know if the other role has received it.
Though, the task has to be done. 
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that enables a role master to delegate tasks
to a slave. A failed task execution does not need to be handled before a new task can be
delegated. The master delegates the task and wait for its completion. After a specified
time, the master cancels the waiting. The slave executes this task in a certain time and
reports if the task was done successfully or if the execution failed.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the two roles master and slave. Both
roles are in/out roles.Which message each role can receive and send is shown in the message interfaces. The master may send the message order to the slave. 
The slave may send the messages done and fail to the master. The time parameter of the role master is $timeout, the time parameter of role slave
is $worktime. The connector may lose messages. The delay for sending a message is
defined by the time parameters $delay-min and $delay-max.
</p> 
<p><img width = \"706\" height = \"405\" src=\"images/Fail_Operational_Delegation/Structure_Fail-OperationalDelegation.jpg\" ></p>
<p><small>Figure 1: Structure and Interfaces of the Fail-Operational-Pattern </small></p>
<h4> Behavior </h4>
<p>
The role master consists of the initial state Inactive and the state Waiting. From state
Inactive, the message order() can be send to the slave and the state changes to Waiting.
Upon the activation of Waiting the clock c0 is reset via an entry-action. An invariant using
c0 ensures that Waiting is left not later than $timeout units of time after its activation.
There are three outgoing transitions from which the one with the highest priority is
triggered by the message done and leads to Inactive. The message fail triggers the other
transition and leads also to Inactive. If there is a timeout, the state changes also back to
Inactive.
</p>
</p>
The role slave represents the counter-part to the master role and consist of the initial
state Inactive and the state Working. The message order() triggers the transition from
Inactive to Working. Upon the activation of Working the clock c0 is reset via an entryaction.
An invariant using c0 ensures that Working is left not later than $worktime units of time after its activation. 
There are two outgoing transitions. The one with the highest priority sends the message done() to the master and the state changes back to Inactive. If
an error occurs, the message fail() will be send to the master and the state changes also
back to Inactive, too.
</p>

<p><img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Master.jpg\" >
<img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Slave.jpg\" ></p>
<p><small>Figure 2: Realtimestatechart, showing the behavior of the slave and master role </small></p>

</html>
"));
    end Fail_Operational_Delegation;

    model Master_Slave_Assignment
        annotation (Documentation(info="<html>
<h3> Master_Slave_Assignment </h3>
<p> 
This pattern is used if two systems can dynamically change between one state in which
they have equal rights and another state in which one is the master and the other one is
the slave.
</p>

<h4> Context </h4>
<p> 
Equal, independent systems want to cooperate.
</p>

<h4> Problem </h4>
<p> 
A system wants to cooperate with another system. During this time, they depend
on each other and a safety-critical situation occurs, if they remain self-determined.
Furthermore, the communication channel may be unreliable and the systems and the
communication channel may fall out fully.
</p>

<h4> Solution </h4>
<p>
Define a pattern so that two equal roles can dynamically change into a state
where one is the master that may delegate tasks or proposals to the other role (the slave).
If the master or the communication channel falls out, the slave will recognize this, because
master and slave exchange alive-messages with each other, and will leave his slave
position.
</p>


<h4> Structure </h4>
<p> 
There are two peer roles, because they have the identical behavior. Each role can become the master or slave at run-time. Both roles are in/out
roles and have the same message interfaces for sending and receiving.
Thus, both peers may send the messages youSlave, confirm, noSlave, alive, and alive2 to
the other peer.
The time parameters of a peer are $timeout1, $timeout2, and $period. The connector
may lose messages. The delay for sending a message is defined by the time parameters
$delay-min and $delay-max.
</p> 
<p><img src=\"images/Master_Slave_Assignment/MasterSlavePattern.jpg\" ></p>
<p><small>Figure 1: Structure of the Master-Slave-Assignment Pattern </small></p>
<p><img src=\"images/Master_Slave_Assignment/MasterSlaveInterface.jpg\"></p>
<p><small>Figure 2: Interfaces of the Master-Slave-Assignment Pattern </small></p>

<h4> Behavior </h4>
<p>
Both peers are in the initial state NoAssignment. A peer may send the message
youSlave if it had rested in this state at least $waittime time units. After sending this
messages the state changes to MasterProposed. If the other peer receives this message,
it confirms this using the message confirm and changes to state Slave. If both peers had
send the message youSlave, they both return to state NoAssignment. If messages are
lost, they return from state MasterProposed after $timeout1 time units.
</p>
</p>
If a peer confirms the proposal and the initiator receives it, it changes to state Master.
The state Master must be leaved after $period time units either with (i) sending an alive
message to the slave, (ii) consuming an alive2 message that was send from the slave,
(iii) breaking the assignment by sending the noSlave message to the slave, or (iv) with a
timeout that occurs if no alive2 message was received for a certain number of times (this
is defined by the variable $tries).
</p>
<p>
A slave (i) can receive an alive message from the master and has to answer with an
alive2 message, (ii) can receive an youSlave message and has to answer with a confirm
message, (iii) has to leave the assignment if it receives the noSlave message and has to
change to state NoAssignment, or (iv) has to change to state NoAssignment, because no
message was received after $timeout1 time units. This state change is allowed, because
after that time, the slave can assume that the master or the communication channel has
fallen out.
</p>
<p><img src=\"images/Master_Slave_Assignment/MasterSlaveBehavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatechart, showing the behavior of the peer role </small></p>
</html>
"));
    end Master_Slave_Assignment;

    model Turn_Transmission
        annotation (Documentation(info="<html>
<h3> Turn-Transmission Pattern </h3>
<p> 
This pattern synchronizes the behavior of two systems in such a way, that never two systems are active at the same time. But both systems may be inactive at the same time.
</p>

<h4> Context </h4>
<p> 
Two systems are cooperating in a safety crititcal environment, where both systems may not be active at the same time.
</p>

<h4> Problem </h4>
<p> 
Both systems want to fulfill a task together. In order to accieve this, they have to be active sequentially. So, when active, one system always waits until the other is finished and vice versa.
</p>

<h4> Solution </h4>
<p>
Define a pattern which ensures that both systems may never be active at the same time by defining two partners, which implement the same behavior but if one partner starts the cooperation, they act exactly in the opposite way. S

</p>


<h4> Structure </h4>
<p> 
The pattern consists of the role partner, which is a in/out role. The message the partners exchange can be seen in the message interface. The partner may send the message turn() to the other partner and vice versa. The connector must not loose messages. The delay for sending a message is defined by the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Turn_Transmission/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Turn-Transmission Pattern</small></p>
<p><img src=\"images/Turn_Transmission/Interfaces.jpg\" ></p>
<p><small>Figure 2: Interfaces of the Turn-Transmission Pattern</small></p>
<h4> Behavior </h4>
<p>
In order to distinguish between the two partners in this section, they are called partner1 and partner2. Both, partner1 or partner2, may start the cooperation. Assuming partner1 wants to start the cooperation, then it sends the message turn() to partner2 and changes its state to 'YourTurn', which means that partner1 is not actively solving this task anymore but gives it turn to partner1. Consequently, by receiving the turn() message from partner1, partner2 is now the acitve partner and changes its state to 'MyTurn'. Now both partners may change their 'roles' between 'MyTurn' and 'YourTurn'sequentially, such that they are always in the corresponding 'counterstate'. If a partner decides to end the cooperation, either because the task is fullfilled or in case of a failure, it can always change its state back to inactive. Furthermore if a partner does not receive any message from the counterpart, then after a certain amount of time units it changes it changes its state back to inactive via the timeout transition. 
</p>

<p><img src=\"images/Turn_Transmission/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatechart, showing the behavior of the partner</small></p>
</html>
"));
    end Turn_Transmission;

    model Limit_Observation
        annotation (Documentation(info="<html>
<H3> Limit Observation</H3>
<p> 
This pattern is used to communicate if a certain value violates a defined limit or not.
</p>

<h4> Context </h4>
<p> 
Information exchange between participants.
</p>

<h4> Problem </h4>
<p> 
Two participants exist within a system. One collects numerical information,
the other wants the know them. In particular, he wants to know if the numerical information
violates a certain limit or not.
</p>

<h4> Solution </h4>
<p>
The goal should be to avoid as much communication as possible. Therefore,
define a coordination protocol that consists of the two roles provider and observer.
The provider collects the data and only informs the observer if the limit is violated or redeemed.
At first, it is unknown if the limit is violated or redeemed, because the provider
first has to explore the situation.
In addition, the pattern warranted a disjunction of the observation and the processing
and analysis of the environment situation.
</p>
<h4> Structure </h4>
<p> 
The pattern consists of the roles provider and observer.
The role provider is an out-role; the role observer is an in-role.
Which message each role can receive and send is shown in the message interfaces. The provider may send the messages limitViolated and limitRedeemed to
the observer.
The connector must not lose messages. The time parameter of the role provider is
$worktime. The delay for sending a message is defined by the time parameters $delaymin
and $delay-max.
</p> 
<p><img src=\"images/Limit-Observation/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Limit Observation Pattern</small></p>
<p><img src=\"images/Limit-Observation/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Limit Observation Pattern</small></p>

<h4> Behavior </h4>
<p>
The role provider starts in state MeasuringLimit and stays there not longer than $worktime
units of time. In this state the first measurement will be done and the provider
checks if the limit is redeemed or violated. If it is redeemed the state changes to LimitRedeemed
and the message limitRedeemed is send to the observer. If the limit is violated,
the state changes to LimitViolated and the message limitViolated is send to the observer. If
the provider is in state LimitViolated and recognizes that the results of the measurements
changes so that the limit is not violated anymore, the provider changes to state LimitRedeemed
and sends the message limitRedeemed. If the provider is in state LimitRedeemed
and recognizes that the results of the measurements changes so that the limit is
violated, the provider changes to state LimitViolated and sends the message limitViolated.
The observer is the correspondent part of the provider and is initially waiting for the
provider if the limit is violated or redeemed. It reacts on the messages of the provider
and changes to state LimitExceeded if the value exceeds the limit or to LimitRedeemed
if value redeems the limit.
</p>
<p><img src=\"images/Limit-Observation/Limit-Observation-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts of the Limit-Observation Pattern, showing the behavior of the observer and provider role </small></p>
</html>"));
    end Limit_Observation;

    model Fail_Safe_Delegation
        annotation (Documentation(info="<html>
<p><b></font><font style=\"font-size: 10pt; \">Fail-Safe Delegation</b></p>
<p>This pattern realizes a delegation of a task from a role master to a role slave. The slave executes the task in a certain time and answers regarding success or failure. If the execution fails, no other task may be delegated until the master ensures that the failure has been corrected. Moreover, only one delegation at a time is allowed. </p>
<p><h4>Context </h4></p>
<p>Delegate tasks between communicating actors. </p>
<p><h4>Problem </h4></p>
<p>If the communication is asynchronous and the communication channel is unreliable, the role that sends the task, does not know if the other role has received it. Though, the task has to be done. </p>
<p><h4>Solution </h4></p>
<p>Define a coordination protocol that enables a role master to delegate tasks to a slave. A failed task execution is handled before a new task can be delegated. The master delegates the task and wait for its completion. After a specified time, the master cancels the waiting. The slave executes this task in a certain time and reports if the task was done successfully or if the execution failed. If it failed, the slave does not execute new tasks until the master sends the signal that the error is resolved. </p>
<p><h4>Structure </h4></p>
<p>The pattern consists of the two roles master and slave. Both roles are in/out roles.Which message each role can receive and send is shown in the message interfaces. The master may send the messages order and continue tthe slave. The slave may send the messages done and fail to the master. The time parameter of the role master is $timeout, the time parameter of role slave is $worktime. The connector may lose messages. The delay for sending a message is defined by the time parameters $delay-min and $delay-max. </p>
<p><img src=\"images/Fail_Safe_Delegation/Structure.jpg\"/> </p><p></font><font style=\"font-size: 7pt; \">Figure 1: Structure of Fail Safe Delegation </p>
<p><img src=\"images/Fail_Safe_Delegation/Interfaces.jpg\"/></p>
<p><small>Figure 2: Interfaces of Fail Safe Delegation </small></p>
<p><h4>Behavior </h4></p>
<p>The role master has the initial state Idle. From this state the master can send the message order() to the slave and the state changes to Waiting. An entry-action in this state resets the clock c0. If the clock c0 reaches the value of $timeout, the master assumes that the order or the answer message got lost or that the slave has fallen out. Then, the state will leave to Idle. If the master receives the message fail() the state will change to FailSafe. If the master receives the message done() the state changes back to Idle. When the master receives the message fail(), it changes to state FailSafe. The pattern assumes that if the master is in state FailSafe, the master execute actions to resolve the problem. Afterward, it sends message continue() changes back to Idle. The role slave is the correspondent part to the master and consists of the initial state Idle and the statesWorking and FailSafe. If it receives the message order the state changes to Working. This state can be leave as soon as the order is done. Then the slave sends done to the master and the state changes back to Idle. An entry-action in the state Working resets the clock c0. If the clock c0 reaches the value of $worktime and the order is not finished yet, the slave has to cancel the order, sends the message fail to the master, and changes to state FailSafe. If the order fails, the slave changes to state FailSafe, too. This state can be leave with the message continue. Then the slave changes back to state Idle. It may happen that the slave receives the message order while it is in state FailSafe. This is only the case, if a message before got lost. As the slave is not allowed to execute the order, it sends the message fail immeditiately and remains in state FailSafe. </p>
<p><img src=\"images/Fail_Safe_Delegation/Behavior.jpg\"/></p>
<p><small>Figure 3: Realtimestatecharts of the Fail Safe Delegation Pattern, showing the behavior of the master and slave role </small></p>
</html>"));
    end Fail_Safe_Delegation;

    model Block_Execution
        annotation (Documentation(info="<html>
<H3> Block_Execution</H3>
<p> 
This pattern coordinates a blocking of actions, e.g., due to safety-critical reasons. Also known as Start-Stop, and
Guard.
</p>

<h4> Context </h4>
<p> 
A system operates under changing conditions.
</p>

<h4> Problem </h4>
<p> 
A system executes a certain task that must be stopped, e.g. if a safety-critical
station appears or if it is not necessary that it operates.
</p>

<h4> Solution </h4>
<p>
Respect the principle to separate concerns and therefore define a coordination
protocol between a guard and an executor. Enable the guard to monitor the environment
resp. the current situation. Only if acting is safe resp. necessary, the guards grants
permission to the executor to act. At first, the permission denied, because the guard first
has to explore the situation.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the roles guard and executor. The
role guard is an out-role; the role executor is an in-role.
Which message each role can receive and send is shown in the message interfaces. The guard may send the messages free and block to the executor.
The connector must not lose messages. The delay for sending a message is defined by
the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Block-Execution/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Block-Execution Pattern</small></p>
<p><img src=\"images/Block-Execution/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Block-Execution Pattern</small></p>

<h4> Behavior </h4>
<p>
The role guard consists of the initial state Blocked and the state Free. The guard sends
the message free to the executor as soon as the executor may work and changes to state
Free. As soon as the guard detects that the executor must stop his work, it sends the
message block and changes to state Blocked.
The role executor consists of the initial state Blocked and the state Free. When the
executor receives the message free, it change to state Free and starts its work. When the
executor is in state Free and receives the message block, it changes to state Block and
stops its work.
</p>
<p><img src=\"images/Block-Execution/Block-Execution-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the guard and executor role </small></p>
</html>"));
    end Block_Execution;

    model Synchronized_Collaboration
        annotation (Documentation(info="<html>
<h3> Synchronized-Collaboration Pattern </h3>
<p> 
This pattern synchronizes the activation and deactivation of a collaboration of two systems.
The pattern assumes that a safety-critical situation appears if the system, which initialized
the activation, is in collaboration mode and the other system is not in collaboration
mode. Therefore, the pattern ensures that this situation never happens.
</p>

<h4> Context </h4>
<p> 
Two independent systems can collaborate in a safety-critical environment,
though cooperation adds more hazards.
</p>

<h4> Problem </h4>
<p> 
If one system believes they are working together, but the other one does not
know this, this may create a safety-critical situation for the first system. This must be
avoided. This problem occurs, if the communication is asynchronous or the communication
channel may be unreliable.
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that enables to activate and deactivate the
collaboration while it considers the given problems. The systems should act with different
roles: One is the master and the other is the slave. The system where the aforementioned
safety-critical situation appears must be the master. The master is the one that
initiates the activation and the deactivation. The activation should be a proposal so that
the slave can decide if the collaboration is possible and useful. The deactivation should
be a direct command, because the master can deactivate the collaboration as soon as it is
no longer useful.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the two roles master and slave and a connector. Both roles are in/out roles. Which message each role can receive and send is
shown in the message interfaces. The master may send the messages activationProposal
and deactivation to the slave. The slave may send the messages activationAccepted
and activationRejected to the master. The time parameter of the role master
is $timeout, the time parameter of role slave is $eval-time. The connector may lose
messages. The delay for sending a message is defined by the time parameters $delay-min
and $delay-max.
</p> 
<p><img src=\"images/Synchronized_Collaboration/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Synchronized-Collaboration Pattern</small></p>
<p><img src=\"images/Synchronized_Collaboration/Interfaces.jpg\" ></p>
<p><small>Figure 2: Interfaces of the Synchronized-Collaboration Pattern</small></p>
<h4> Behavior </h4>
<p>
First, the collaboration is in both roles inactive. The slave is passive and has to wait
for the master that he decides to send a proposal for activating the collaboration. If this
is the case, the slave has a certain time to answer if he accepts or rejects the proposal. If
the slave rejects, the collaboration will remain inactive. If the slave accepts, he activates
the collaboration and informs the master so that he also activates the collaboration. If
the master receives no answer in a certain time (e.g. because the answer of the slave got
lost), he cancels its waiting and may send a new proposal. Only the master can decide to
deactivate the collaboration. He informs the slave so that he also deactivates it.
</p>

<p><img src=\"images/Synchronized_Collaboration/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts of the Master and Slave</small></p>
</html>
"));
    end Synchronized_Collaboration;

    model Periodic_Transmission
        annotation (Documentation(info="<html>
<H3> Periodic Transmission</H3>
<p> 
This pattern can be used to periodically transmit information from a sender to a receiver.
If the receiver does not get the information within a certain time, a specified
behavior must be activated to prevent a safety-critical situation.
</p>

<h4> Context </h4>
<p> 
Information exchange between two systems.
</p>

<h4> Problem </h4>
<p> 
If the receiver does not get the information within a certain time, a safetycritical
situation can occur. This must be prevented.
</p>

<h4> Solution </h4>
<p>
If the receiver does not get the information within a certain time, a specified
behavior must be activated to prevent the safety-critical situation. 
</p>
<h4> Structure </h4>
<p> 
The pattern consists of the two roles sender and receiver.
sender is an in-role. receiver is an out-role. Which message each role can receive resp. send is defined in the message interface. Here, the sender may send the message data to the receiver.
The time parameter of the role sender is $period, the time parameter of role slave is
$timeout. The connector may lose messages. The delay for sending a message is defined
by the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Periodic_Transmission/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Periodic Transmission Pattern</small></p>
<p><img src=\"images/Periodic_Transmission/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Periodic Transmission Pattern</small></p>

<h4> Behavior </h4>
<p>
The role sender consists of the initial state PeriodicSending only. The sender must
send each $period time units a message data to the receiver.
The role receiver consists of the initial state PeriodicReceiving and the state Timeout.
The standard case is that the receiver receivers a message data periodically. Though, if
the message data got lost or the sender falls out, the receiver changes to state Timeout and
activates a certain behavior to avoid the safety-critical situation. As soon as the receiver
receives a message data again, it changes back to state PeriodicReceiving.
</p>
<p><img src=\"images/Periodic_Transmission/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the sender and receiver role </small></p>
</html>"));
    end Periodic_Transmission;

    model Producer_Consumer
        annotation (Documentation(info="<html>
<H3> Producer-Consumer</H3>
<p> 
This pattern is used when two roles shall access a safety-critical section alternately,
e.g., one produces goods, the other consumes them. The pattern guarantees that only one
is in the critical section at the same time.
</p>

<h4> Context </h4>
<p> 
Working in a safety-critical section.
</p>

<h4> Problem </h4>
<p> 
There exists a section where information or goods can be stored. The size of
the section is 1. Furthermore, there exists two different systems. The one produces the
information/good, the other consumes/clears it. The consumer may not act, if nothing is
produced. Therefore, consuming and producing must alternate.
Moreover, you have to satisfy that only one system / component is in the critical section
at the same time. Otherwise, a safety-critical situation. Therefore, the participants must
be asure that nobody is in the critical section, when they enter it.
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that specifies a bidirectional alternating lock.
A producer produces the goods and informs the consumer as soon as the producing is
finished and blocks is activities as long as the consumer does not send that it consumed
the information/good.
</p>


<h4> Structure </h4>
<p> 
The pattern consist of two roles producer and consumer. Both roles are in/out-roles.
Which message each role can receive and send is shown in the message interfaces. The producer may send the message produced to the consumer. The slave
may send the message consumed to the producer. The connector must not lose messages. The delay for sending a message is defined by
the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Producer-Consumer/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Producer-Consumer Pattern</small></p>
<p><img src=\"images/Producer-Consumer/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Producer-Consumer Pattern</small></p>

<h4> Behavior </h4>
<p>
The role producer has the initial state Producing and has reserved the critical section.
If he leaves the critical section, with the message produced the consumer reaches the
state Consuming and no other resources can be produced. If the role consumer receives
the message produced, it knows the producer has leaved the critical section and it can
enter it by itself. If the producer receives the messages consumed, the consumer has
leaved the critical section and the producer can enter it again.
</p>
<p><img src=\"images/Producer-Consumer/Producer-Consumer-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the producer and consumer role </small></p>
</html>"));
    end Producer_Consumer;
    annotation (__Dymola_DocumentationClass=true, Documentation(info="<html>
<p><ol>
</ol></p>
</html>"));
  end Elements;

  class ReleaseNotes "Release notes"

    annotation (Documentation(info="<html>

</html>"));
  end ReleaseNotes;

  class Literature "Literature"

    annotation (Documentation(info="<html>
</html>"));

  end Literature;

class ModelicaLicense2 "Modelica License 2"

  annotation (Documentation(info="<html>
</html>"));

end ModelicaLicense2;

  class Contact "Contact"

    annotation (Documentation(info="<html>
</html>"));

  end Contact;

  annotation (__Dymola_DocumentationClass=true, Documentation(info="<html>
<p>
Library <b>Modelica_StateGraph2</b> is a <b>free</b> Modelica package providing
components to model <b>discrete event</b> and <b>reactive</b>
systems in a convenient
way. This package contains the <b>User's Guide</b> for
the library and has the following content:
</p>
<ol>
<li>&quot;<a href=\"modelica://CoordinationProtocolLibrary.UsersGuide.Elements\">Elements</a>&quot;
     gives an overview of the most important aspects of the Real-Time Coordination library.</li>
<li> &quot;<a href=\"modelica://CoordinationProtocolLibrary.UsersGuide.ReleaseNotes\">Release Notes</a>&quot;
    summarizes the version of this library.</li>
<li> &quot;<a href=\"modelica://CoordinationProtocolLibrary.UsersGuide.Literature\">Literature</a>&quot;
    provides references that have been used to design and implement this
    library.</li>
<li> &quot;<a href=\"modelica://CoordinationProtocolLibrary.UsersGuide.ModelicaLicense2\">Modelica License 2</a>&quot;
    is the license under which this package and all of its subpackages is
    released.</li>
<li> &quot;<a href=\"modelica://CoordinationProtocolLibrary.UsersGuide.Contact\">Contact</a>&quot;
    provides information about the authors of the library as well as
    acknowledgments.</li>
</ol>
<p>For an application example have a look at: <a href=\"modelica://CoordinationProtocolLibrary.Examples.Application.BeBotSystem\">BeBotSystem</a> </p>

</html>"));
end UsersGuide;

  package Examples
    model SingleRobot

      ParameterisedCoorinationProtocols.Synchronized_Collaboration.Collaboration_Slave
        collaboration_Slave(evaluationTime=3)
        annotation (Placement(transformation(extent={{-112,-100},{-28,-20}})));
      ParameterisedCoorinationProtocols.Synchronized_Collaboration.Collaboration_Master
        collaboration_Master(           timeout=3)
        annotation (Placement(transformation(extent={{-126,54},{-34,114}})));
      CoordinationProtocolLibrary.Examples.ParameterisedCoorinationProtocols.Turn_Transmission.Turn_Transmission_Partner
        turn_Transmission_Partner(timeout=3)
              annotation (Placement(transformation(extent={{-37,-42.5},{37,42.5}},
            rotation=0,
            origin={91,32.5})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort OutTurn(
        redeclare Integer integers[6] "integers[6]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{168,-16},{188,4}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        Out_ActivationRejected(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{168,-52},{188,-32}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        OutActivationAccepted(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{168,-80},{188,-60}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort InTurn(
        redeclare Integer integers[6] "integers[6]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-266,22},{-246,42}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        InActivationProposal(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]",
        redeclare Integer integers[3] "integers[3]")
        annotation (Placement(transformation(extent={{-266,-56},{-246,-36}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort InDeactivation(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-266,-86},{-246,-66}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Deactivation(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{168,86},{188,106}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        Out_ActivationProposal(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]",
        redeclare Integer integers[3] "integers[3]")
        annotation (Placement(transformation(extent={{168,114},{188,134}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        In_ActivationAccepted(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-266,62},{-246,82}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        In_ActivationRejected(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-266,100},{-246,120}})));
      Modelica.Blocks.Interfaces.BooleanInput ready
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-140,148})));
      Modelica.Blocks.Interfaces.BooleanInput startTransmission
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-116,148})));
      Modelica.Blocks.Interfaces.BooleanInput stopTransmission
        annotation (Placement(transformation(extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-94,148})));
      Modelica.Blocks.Interfaces.IntegerOutput weight annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-92,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput friction annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-78,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput height annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={-64,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput turn_time annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={72,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput x_pos annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={86,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput y_pos annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={100,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput z_pos annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={116,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput speed annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={130,-124})));
      Modelica.Blocks.Interfaces.IntegerOutput error annotation (Placement(
            transformation(
            extent={{-10,-10},{10,10}},
            rotation=270,
            origin={144,-124})));
      Modelica.Blocks.Interfaces.IntegerInput in_weight
                                                annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-68,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_friction
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-44,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_height
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-18,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_turn_time
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={42,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_x_pos
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={66,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_y_pos
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={92,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_z_pos
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={114,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_speed
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={138,146})));
      Modelica.Blocks.Interfaces.IntegerInput in_error
                                                 annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={164,146})));
      Modelica.Blocks.Interfaces.BooleanInput strike annotation (Placement(
            transformation(
            extent={{-20,-20},{20,20}},
            rotation=270,
            origin={-170,148})));
    equation
      connect(turn_Transmission_Partner.InTurn, InTurn) annotation (Line(
          points={{53.26,29.1},{53.26,33.6},{-256,33.6},{-256,32}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.OutTurn, OutTurn) annotation (Line(
          points={{126.52,0.2},{137.9,0.2},{137.9,-6},{178,-6}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.activationAcceptedOutputPort,
        OutActivationAccepted) annotation (Line(
          points={{-27.16,-56.8},{12,-56.8},{12,-70},{178,-70}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.activationRejectedOutputPort,
        Out_ActivationRejected) annotation (Line(
          points={{-27.16,-39.2},{-27.16,-48.98},{178,-48.98},{178,-42}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.deactivationInputPort, InDeactivation)
        annotation (Line(
          points={{-112,-56},{-184,-56},{-184,-76},{-256,-76}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Slave.activationProposalInputPort, InActivationProposal)
        annotation (Line(
          points={{-112,-46.4},{-159.81,-46.4},{-159.81,-46},{-256,-46}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master.deactivationOutputPort, Out_Deactivation)
        annotation (Line(
          points={{-33.08,88.2},{154.89,88.2},{154.89,96},{178,96}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Master.activationProposalOutputPort,
        Out_ActivationProposal) annotation (Line(
          points={{-34,102},{178,102},{178,124}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Master.activationRejectedInputPort,
        In_ActivationRejected) annotation (Line(
          points={{-126,102.6},{-126,104.7},{-256,104.7},{-256,110}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master.actiavtionAcceptedInputPort,
        In_ActivationAccepted) annotation (Line(
          points={{-126,72},{-256,72}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Slave.Slave, turn_Transmission_Partner.Slave)
        annotation (Line(
          points={{-28,-45.6},{203.18,-45.6},{203.18,51.2},{127.26,51.2}},
          color={255,128,0},
          smooth=Smooth.None));
      connect(collaboration_Master.Out_Begin, turn_Transmission_Partner.Master)
        annotation (Line(
          points={{-33.08,81},{56,81},{56,51.625},{53.63,51.625}},
          color={255,128,0},
          smooth=Smooth.None));
      connect(ready, collaboration_Slave.ready) annotation (Line(
          points={{-140,148},{-136,148},{-136,6},{-100.24,6},{-100.24,-18.4}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master.startTransmission, startTransmission)
        annotation (Line(
          points={{-112.2,115.2},{-112.2,128.6},{-116,128.6},{-116,148}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master.stopTransmission, stopTransmission)
        annotation (Line(
          points={{-101.62,114.9},{-101.62,126.45},{-94,126.45},{-94,148}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(collaboration_Slave.Out_Weight, weight) annotation (Line(
          points={{-90.16,-101.6},{-90.16,-109.8},{-92,-109.8},{-92,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.Out_Friction, friction) annotation (Line(
          points={{-82.6,-101.6},{-82.6,-108.8},{-78,-108.8},{-78,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.Out_Height, height) annotation (Line(
          points={{-74.2,-101.6},{-74.2,-108.8},{-64,-108.8},{-64,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_TurnTime, turn_time) annotation (
          Line(
          points={{85.08,-12.55},{85.08,-66.335},{72,-66.335},{72,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_X, x_pos) annotation (Line(
          points={{93.96,-12.55},{93.96,-66.335},{86,-66.335},{86,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_Y, y_pos) annotation (Line(
          points={{102.1,-12.55},{102.1,-66.335},{100,-66.335},{100,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_Z, z_pos) annotation (Line(
          points={{109.5,-12.55},{109.5,-66.335},{116,-66.335},{116,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_Speed, speed) annotation (Line(
          points={{116.16,-12.55},{116.16,-67.335},{130,-67.335},{130,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.Out_BatError, error) annotation (Line(
          points={{124.3,-12.55},{124.3,-66.335},{144,-66.335},{144,-124}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(in_weight, collaboration_Master.In_Weight)
                                                 annotation (Line(
          points={{-68,146},{-68,115.8},{-66.2,115.8}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(in_height, collaboration_Master.In_Height)
                                                  annotation (Line(
          points={{-18,146},{-35,146},{-35,115.8},{-53.32,115.8}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(collaboration_Master.In_Friction, in_friction)
                                                    annotation (Line(
          points={{-59.76,115.8},{-59.76,126.9},{-44,126.9},{-44,146}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.In_TurnTime, in_turn_time)
                                                         annotation (Line(
          points={{128.37,41.425},{140,41.425},{140,114},{42,114},{42,146}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(in_x_pos, turn_Transmission_Partner.In_X)
                                                  annotation (Line(
          points={{66,146},{66,116},{144,116},{144,34.625},{128.37,34.625}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.In_Y, in_y_pos)
                                                  annotation (Line(
          points={{128.37,26.975},{148,26.975},{148,120},{92,120},{92,146}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(in_z_pos, turn_Transmission_Partner.In_Z)
                                                  annotation (Line(
          points={{114,146},{114,122},{152,122},{152,19.325},{128.37,19.325}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.In_Speed, in_speed)
                                                      annotation (Line(
          points={{128.37,12.525},{158,12.525},{158,146},{138,146}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner.In_BatError, in_error)
                                                         annotation (Line(
          points={{128.37,4.875},{166,4.875},{166,146},{164,146}},
          color={255,127,0},
          smooth=Smooth.None));
      connect(stopTransmission, turn_Transmission_Partner.stopTransmission)
        annotation (Line(
          points={{-94,148},{-94,124},{75.09,124},{75.09,77.125}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(strike, turn_Transmission_Partner.strike) annotation (Line(
          points={{-170,148},{-170,118},{3,118},{3,92},{65.47,92},{65.47,77.125}},
          color={255,0,255},
          smooth=Smooth.None));

      connect(collaboration_Master.deactivate_Collaboration,
        turn_Transmission_Partner.StopCollaboration) annotation (Line(
          points={{-33.08,75},{10.46,75},{10.46,-10},{54,-10}},
          color={255,128,0},
          smooth=Smooth.None));
      connect(collaboration_Slave.collaboration_deactivated,
        turn_Transmission_Partner.StopCollaboration1) annotation (Line(
          points={{-28,-64},{0,-64},{0,-66},{30,-66},{30,-17.65},{54,-17.65}},
          color={255,128,0},
          smooth=Smooth.None));
      annotation (Diagram(coordinateSystem(extent={{-260,-120},{180,140}},
              preserveAspectRatio=false),graphics), Icon(coordinateSystem(extent={{-260,
                -120},{180,140}}, preserveAspectRatio=false), graphics={Bitmap(
              extent={{-128,102},{64,-110}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "CURI3jGRWOj9GVQtoXS/fFS6DlKDx8ffCyWpLRTT+n0yIVMdkCvp/QLCqCgcqAfp+cNNFIBNdT98Ek/U4deWh98H3ClW7zhUmxOfOQ1Xu9YUmC3VectFGuG6HICJOTD5ZukU3OL+GKWoQ5NusTohKhumriyi1cBIa9P/AHcb6xTFZfCmnwZDJiAFnDkVIaTa8f2++CzIS786zUbQnJj9HPL1gMJXycYnwDuLeOT+AxcBNCmjjeUVDCo74yqqsfsBqfMwxoa01BD77Hs4N6nf9AZTfKTyIYpjbpNKZX/kmnAa8TBpRaLl4YcyD549cVZCTJNPmemJpLsm3z5y+aTS8XE8WSbc45TYKhQc8YYYRBG6/wC/tgJJsjTtf+9VOw2rUb9zDQ5oVye2EBEKnI6Pz5wwGgAzvXOUCEhVnPeQRGqL5MCgpVUNLk3qNbJcCSow5JiofaDbOZkEKDOhrWaMjWtz64CLN8L6ER/QJopEiXhr8TAYijdeD8M2MD35bfpjxgGRfXn88YgAGahsw4w/xiDdvo5ETpw4OPt1IkreQx3i6DD2W8vOaBcvQvlhlS1HAEv2w+fn/wBvODRV7cF5+r6YMIQaMNby4MClbRA+M0WV2J2XvEOxjmzGAZxpeMFIlOqdZQ+GFcGiCfLkkikUacc0mhLFoy3cDVbxQwgklA+9wvf+P6AzdjdYA+/RYtNCGnS6uSE0CUshTKRYG71WMwzV12YINzfZzgg7a6nGdBgOHrEs7bCTNIgHDh7e+Nqi07J6OBugANhqYwuBK6VO8LU9P7/+4oi0s3wv7uAVWgXfvhEZIYok0r5cAMR2dUHWJRJOybcQnC3UxhGoOjhxvcDaXaYOAHEo+2bQENKp3iJI2jVlJ9MinHJDfpgC0Gj6Nfv+rg3+gPOpfxN4xCgcBKGtZAClbJ1lpQB52yZALsBZtwYkNcawTwPod4ogk3OXsxWgm3o44Xz6YavY1Yp6OGh0b2q+/wCdZpyCgCkBZrKRYkFs/wDdS/rkeC1vcfpX74DhREvJzXLfVFK3UIfrkgcAi8OB0psK4pQJFubwTLN60/ViCJhh6vrlBBuJ7vz4wNxDYaBhMIXAYZ4w13Z0O0DznGxb5oR+L+ucPl/X+gJrAonk/wCqD5xZyACX88OOyFLYUMa7hHGhhmoKqIr43g7go6TdtI+mEA0PdTvIKFmzrjrLBFkAIvq5MgAx/YuLQBOE0wcPOzWTaBf1wWNerQfthx18cf8Au2QGy9pWnxw1CMgu3pisQkgYQOXEuRopKvEwbyRCB6+uKG3Cppi9wNhdgyFFo1HMqZ0KLth9EyNDNG+fGBQNFFsG/ZhaojY16sldaDakx+vAn1v9ATPKSBjQZhWHoqIXbmzDHAKJ91mU8nJGw6wiGLyDsW895VCiaarXGVGGthfQfrgZZdGwDCpBwTvixyALYDl4RabienzzlTyHZyf4ZfQ2itsb+xiuaCBoXq+n/tfXh5wrsGdpc+zG9ghSAZgQGlQum698YoQcQEGhykKYLb734zks9TSG8B47g2COphcODbV8/XKQVgcdbF/O8QhC+JvWvzjAbE6GY6+mbsiiQvCZ4iGlNj+uDqx+mX0/fPt/90gyzGX6DL5RIN7XEl0Qu6CDjkupgcIbnQQsu8t5Jj1UKd5duByADJFV2Gz2vaicYdGCyqrqnv8ApjdjmoHWjAEEvCdPF8n75pgklBryJ8XEICIh5VblkQFKd5KKvYaZLzBRKGOhb4rZ+cOG+oNXi+N5ykWCNo18bzUlDN9YWCiAIPJnSFCy3409cBY/UU8cl8sZZ6k7rQyb7T1x0doOPK/nMv51g34Z6f8AiWT+8ynr6d3E7QLfKA4G6uVVcTwFnIJpYeuLiFFp3qAOux9cPVU2BLzLYddYGv55r6WQvUZ3AjZgYu0sfd7w3AmRF7OBOZ65XKC8hFt9NGs9DKDrkW88TWMtJlQTumSLlDShvXrUZlUsTezv+2/pkoA6BqVe/hyLSvYZbzjEBrytl498OBTSM+ty3GN2Oya8Es6Jl0U8mnkLqsXvDyfHr2XjHbJGFKYqClym6acuMMVQIG8Gneg8shVy1OCKiukPTL9+K4N/+15wVrYtA7OL3GgazDowF2xjFxodh6MU4aBjQpDOTPQ3BrABZYZ8igw/AAb98vmBVCrSqtu3qayqTlBlAyAIBAnLnAF5gCyVR4ffxiwGUlphw5PTEpWAwYP+mBUgQD3CneJzEgCrDX+MS+pAR+HOEjZJBpmNlAgWVIYlI0hsLvvDx0zSLozRrN1QMnKsX5w4QBUm/bNE7Cj3tTzNMzgowAHdQwYYVIeg747Prm41YUCgnRfp5cUolMbFCxVhBYBQlF06lXph6zdOxRKFS0FSV1Bdocf+F1ih32GAUjpsCWaaq96Yg/IQKSGAbJPYnaYq5adc94sKjSr9g2+JOsl2IXDSIQCeHnEOy2Tx445RnGnxjKaaDykG9ql6DDAJ4H11gGbgiD0598AYqMl9tnB1gkXqIEe+KW6AAt01uL4xDDHg3rG3JBiT5Y4R0ARtvLE3oDw/zjJVqDrdxw94wFHlQ653+mNyD1ZWMeIERbcT9/0irK7tOga1gIS6BQ8AS5u40qEFkPfAUYYXhQfW1QtExqlzENIPRdgbtC5nAcS4VU9wAA5Twf8A2qJA3kKCJ6kpgFcsUEOVnLty5PwJ7Nef1wmXuhA+s7/zj7wo92lg+cR2lFyx6hlSrgyh1GvtzgaEDEhjS7s8eMdCUWFBbwcd6zZfFPAREEmapYOQ73LkaLTEAXQluuDD1Lyrm1Xn41lBsm6O/RyczBMwj4H8uESDQPI2cawMQNbNee/b6Yn8gUmmOx2c+mJ10bsD2acKWNuSgeVTnj0wuACIzJwmaUbCkthD0jcmsweBCdRyKKIJMULssAEIaA1DgmNsJ7j15xkwSY2Uoem//C4NyOGEJBPX9MAgoVbQ6de2QgTogtu9en98pEER4JJ+cZReURKO616ZsOgInnXHvgPWCIJBAIj46yjFFgnPB34xIrhvIeDB6uMAZlV+J1xfpiEIVELfUxHULp/Oga3iYFSKK+eP2wjI2VRjsJjABfQvszKwnYhHiwZ3zjtkDCnpUB74MqQiL8ysPrlqlVIDZDTjNamgivTZfnDKYtsd7fphhLiAukDkI40nBIRCMNr6/tnKbulToin5vBVWkSmxPTX0jA2vn/7VCxaL2T50+cYXljpox4wcA1PfFWQ5Tc8B8n2ye25ubA31x2zwBebgJddnSPh1iITT0nUTj0yQKAulHQa/7zlg4b1BdDFpfsD+xrK4B6En1w23uGrIT8y4GyImbdS3FqeMtYh0oeLTAqpchY6d8snzCJC7gHziQLdjS+2FMvPY7uHhGbJT1+2NYBA4DW3Hod1+rK19ichb/fNRFAl5eIffDXQA+b/4dU4M2W150nS+n3sDxqsOz0yTaeaJp1kezwIVzb55yw2rVNW+uGiggNJ6fbDHhSBNVwps+zs/LjVOTIxw1coDXyUwBavG08+mTPl8U9OPXEp0FBk+JgZYIc61QAMANhNgMwSoDF59GG/MLJ85JKU3yFeW5pHua2aTnHU4lKpDJkKlYGuf3/bFAI6KDs+v+cEZGiOt44UgKz4P84IcHgpDFGgsXyPOG673xWn/ANqpmijQ2Aj+iAWSCVnU34FRuAlWsZOiWLwbXWUVChjgd95eKEQs3WPkMMMi9Gga6wGUrTLgvRE6XEAB6gxzRDTN+HFtXS+DjFx5J75RzvdwYiADnBsZwUWmSyh9FcTRPIPealGkO19cBbR4GvOINo9HTlQb/bgwEZqED0CfD5wasQ++tKHqs1zk4iQO+YxC/wB2I02yI1eOETnYLo3oYutji90D/wATxATkwS1hQPGWCBp5anoIp2vq4rGLyLBz4OCI+cFoo3noynOAdCUOEB8T4x7QLBQ9TrNzAFBT0L1kp2EUIfjlQ2bojv1/PTCZqByFXBwcHHq4qR/1iSJbl284aLAuw68/XEkCjSMMNa6eByhhRNdcZ70AwnCtlOjyswW4LssnxgTi77aAV+POPiQBEvKkPVHGJyc28+Hvv9MGOQvvcOzyPXocY3974qoKy1YIQ13f/tfHpjWr70t/P2z7igjgVcvJ3loPLsLVVH1azUqvFdUJ8e7NoVIG30Pvcmni18e3P1MVeFvziD6TCngtiPqL9MqYIwUfoLNwacFKeZWBylzFH4/2YDVq9ajFdMIFX4TgAUrsO+qMWJoi7fXk/wBML23lj84uAaEGvk/u8n6Qg/Q/opjxFwDepW+SZwAZAdtGH5uDBxhE9qT4ycehDJ+O8+//AJJ9e2c5He/fefU8j+bvX1xFMbKa54THPUxQaAPaMRxQe4HceJ8e7k06xoPGYomg0p/M/YyTfu2keNHKRcUQT3ALmy7Ao+u8XJq7rUwGFLycHQCsIJw2rPtXjaXiuvec0L1kt6XEMDPbc9VB9Moi0dUzyW/vnDNcT8P1M9LEs/CGQ/bjJxv/ADk9c+//AN/O/wD9T/8A/9k=",
              fileName=
                  "modelica://CoordinationProtocolLibrary/../../workspaces/svns/entime/trunk/Veroeffentlichungen/Paper/TdSE2012/Paper 3 Demonstrator/DemonstratorEinzel.jpg"),
              Rectangle(extent={{-260,138},{180,-122}}, lineColor={0,0,255})}));
    end SingleRobot;

    package ColloboratingRobots

      partial model CollaboratingRobots

        CoordinationProtocolLibrary.Examples.SingleRobot Master
          annotation (Placement(transformation(extent={{48,30},{4,56}})));
        CoordinationProtocolLibrary.Examples.SingleRobot Slave
                                 annotation (Placement(transformation(
              extent={{-22,13},{22,-13}},
              rotation=180,
              origin={-58,39})));

      equation
        connect(Slave.OutActivationAccepted, Master.In_ActivationAccepted)
          annotation (Line(
            points={{-71.8,33},{-78,33},{-78,20},{60,20},{60,49.2},{47.6,49.2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.Out_ActivationRejected, Master.In_ActivationRejected)
          annotation (Line(
            points={{-71.8,35.8},{-74,35.8},{-74,26},{56,26},{56,54},{47.6,54},
                {47.6,53}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Master.Out_ActivationProposal, Slave.InActivationProposal)
          annotation (Line(
            points={{4.2,54.4},{4.2,54},{-16,54},{-16,35.4},{-28.4,35.4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.InDeactivation, Master.Out_Deactivation) annotation (Line(
            points={{-28.4,32.4},{-17.1,32.4},{-17.1,51.6},{4.2,51.6}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.OutTurn, Master.InTurn) annotation (Line(
            points={{-71.8,39.4},{-80,39.4},{-80,40},{-88,40},{-88,16},{54,16},
                {54,45.2},{47.6,45.2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Master.OutTurn, Slave.InTurn) annotation (Line(
            points={{4.2,41.4},{0,41.4},{0,42},{-18,42},{-18,43.2},{-28.4,43.2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.In_ActivationRejected, Master.Out_ActivationRejected)
          annotation (Line(
            points={{-28.4,51},{-28.4,50},{-8,50},{-8,37.8},{4.2,37.8}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.In_ActivationAccepted, Master.OutActivationAccepted)
          annotation (Line(
            points={{-28.4,47.2},{-28.4,46},{-20,46},{-20,40},{-12,40},{-12,35},
                {4.2,35}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.Out_Deactivation, Master.InDeactivation) annotation (Line(
            points={{-71.8,49.6},{-80,49.6},{-80,24},{58,24},{58,34.4},{47.6,
                34.4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.Out_ActivationProposal, Master.InActivationProposal)
          annotation (Line(
            points={{-71.8,52.4},{-92,52.4},{-92,12},{62,12},{62,37.4},{47.6,
                37.4}},
            color={0,0,0},
            smooth=Smooth.None));

        annotation (Diagram(graphics));
      end CollaboratingRobots;

      package Test
        model testCounter

          Modelica.Blocks.Interfaces.IntegerOutput y
            annotation (Placement(transformation(extent={{92,-16},{112,4}})));
        algorithm
          when sample(0,1) then
          y := integer(time);
          end when;
        end testCounter;

        model CollaboratingRobotsMainTest

          CoordinationProtocolLibrary.Examples.SingleRobot Master
            annotation (Placement(transformation(extent={{48,30},{4,56}})));
          CoordinationProtocolLibrary.Examples.SingleRobot Slave
                                   annotation (Placement(transformation(
                extent={{-22,13},{22,-13}},
                rotation=180,
                origin={-58,39})));

          CoordinationProtocolLibrary.Examples.ColloboratingRobots.Test.testCounter
            triggeredAdd
            annotation (Placement(transformation(extent={{-104,60},{-92,72}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression
            annotation (Placement(transformation(extent={{-80,74},{-60,94}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
            annotation (Placement(transformation(extent={{-36,74},{-16,94}})));
          Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=2, startTime=
               1)
            annotation (Placement(transformation(extent={{-10,74},{10,94}})));
          Modelica.Blocks.Sources.BooleanPulse booleanPulse1(period=2,
              startTime=2)
            annotation (Placement(transformation(extent={{34,72},{54,92}})));
          Modelica.Blocks.Sources.BooleanStep booleanStep(startTime=18,
              startValue=false)
            annotation (Placement(transformation(extent={{-98,-28},{-78,-8}})));
          Modelica.Blocks.Sources.BooleanPulse booleanPulse2(
            period=30,
            startTime=2,
            width=1)
            annotation (Placement(transformation(extent={{-20,-30},{0,-10}})));
        equation

          connect(Slave.OutActivationAccepted, Master.In_ActivationAccepted)
            annotation (Line(
              points={{-71.8,33},{-78,33},{-78,20},{60,20},{60,49.2},{47.6,49.2}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.Out_ActivationRejected, Master.In_ActivationRejected)
            annotation (Line(
              points={{-71.8,35.8},{-74,35.8},{-74,26},{56,26},{56,54},{47.6,54},
                  {47.6,53}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Master.Out_ActivationProposal, Slave.InActivationProposal)
            annotation (Line(
              points={{4.2,54.4},{4.2,54},{-16,54},{-16,35.4},{-28.4,35.4}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.InDeactivation, Master.Out_Deactivation) annotation (Line(
              points={{-28.4,32.4},{-17.1,32.4},{-17.1,51.6},{4.2,51.6}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.OutTurn, Master.InTurn) annotation (Line(
              points={{-71.8,39.4},{-80,39.4},{-80,40},{-88,40},{-88,16},{54,16},
                  {54,45.2},{47.6,45.2}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Master.OutTurn, Slave.InTurn) annotation (Line(
              points={{4.2,41.4},{0,41.4},{0,42},{-18,42},{-18,43.2},{-28.4,
                  43.2}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.In_ActivationRejected, Master.Out_ActivationRejected)
            annotation (Line(
              points={{-28.4,51},{-28.4,50},{-8,50},{-8,37.8},{4.2,37.8}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.In_ActivationAccepted, Master.OutActivationAccepted)
            annotation (Line(
              points={{-28.4,47.2},{-28.4,46},{-20,46},{-20,40},{-12,40},{-12,
                  35},{4.2,35}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.Out_Deactivation, Master.InDeactivation) annotation (Line(
              points={{-71.8,49.6},{-80,49.6},{-80,24},{58,24},{58,34.4},{47.6,
                  34.4}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(Slave.Out_ActivationProposal, Master.InActivationProposal)
            annotation (Line(
              points={{-71.8,52.4},{-92,52.4},{-92,12},{62,12},{62,37.4},{47.6,
                  37.4}},
              color={0,0,0},
              smooth=Smooth.None));

          connect(triggeredAdd.y, Slave.in_speed) annotation (Line(
              points={{-91.88,65.64},{-68,65.64},{-68,54.6},{-67.8,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_height) annotation (Line(
              points={{-91.88,65.64},{-66,65.64},{-66,54.6},{-52.2,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_weight) annotation (Line(
              points={{-91.88,65.64},{-62,65.64},{-62,54.6},{-47.2,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_turn_time) annotation (Line(
              points={{-91.88,65.64},{-60,65.64},{-60,54.6},{-58.2,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_error) annotation (Line(
              points={{-91.88,65.64},{-58,65.64},{-58,54.6},{-70.4,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_y_pos) annotation (Line(
              points={{-91.88,65.64},{-52,65.64},{-52,54.6},{-63.2,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
           connect(triggeredAdd.y, Slave.in_x_pos) annotation (Line(
              points={{-91.88,65.64},{-70.2,65.64},{-70.2,54.6},{-60.6,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(triggeredAdd.y, Slave.in_z_pos) annotation (Line(
              points={{-91.88,65.64},{-70.2,65.64},{-70.2,54.6},{-65.4,54.6}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Slave.in_friction, triggeredAdd.y) annotation (Line(
              points={{-49.6,54.6},{-49.6,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));

          connect(Master.in_speed, triggeredAdd.y) annotation (Line(
              points={{8.2,56.6},{8.2,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_height, triggeredAdd.y) annotation (Line(
              points={{23.8,56.6},{23.8,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_weight, triggeredAdd.y) annotation (Line(
              points={{28.8,56.6},{28.8,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
               connect(Master.in_turn_time, triggeredAdd.y) annotation (Line(
              points={{17.8,56.6},{17.8,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
               connect(Master.in_error, triggeredAdd.y) annotation (Line(
              points={{5.6,56.6},{5.6,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_y_pos, triggeredAdd.y) annotation (Line(
              points={{12.8,56.6},{12.8,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_x_pos, triggeredAdd.y) annotation (Line(
              points={{15.4,56.6},{15.4,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_z_pos, triggeredAdd.y) annotation (Line(
              points={{10.6,56.6},{10.6,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Master.in_friction, triggeredAdd.y) annotation (Line(
              points={{26.4,56.6},{26.4,65.64},{-91.88,65.64}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(Slave.ready, booleanExpression1.y) annotation (Line(
              points={{-40,54.8},{-40,69.3},{-15,69.3},{-15,84}},
              color={255,0,255},
              smooth=Smooth.None));
           connect(Slave.startTransmission, booleanExpression.y) annotation (Line(
              points={{-42.4,54.8},{-42.4,69.3},{-59,69.3},{-59,84}},
              color={255,0,255},
              smooth=Smooth.None));

           connect(Master.ready, booleanExpression1.y) annotation (Line(
              points={{36,56.8},{36,69.3},{-15,69.3},{-15,84}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanPulse.y, Slave.strike) annotation (Line(
              points={{11,84},{-12,84},{-12,54.8},{-37,54.8}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanPulse1.y, Master.strike) annotation (Line(
              points={{55,82},{48,82},{48,56.8},{39,56.8}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanPulse2.y, Master.startTransmission) annotation (Line(
              points={{1,-20},{16,-20},{16,-18},{33.6,-18},{33.6,56.8}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanStep.y, Master.stopTransmission) annotation (Line(
              points={{-77,-18},{-52,-18},{-52,-16},{-26,-16},{-26,2},{31.4,2},
                  {31.4,56.8}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanExpression.y, Slave.stopTransmission) annotation (Line(
              points={{-59,84},{-44.6,84},{-44.6,54.8}},
              color={255,0,255},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,
                  extent={{-100,-100},{100,100}}),
                              graphics));
        end CollaboratingRobotsMainTest;

        model CollaboratingRobotsRealMainTest

          SingleRobot_Real singleRobot_Real
            annotation (Placement(transformation(extent={{-88,32},{-50,60}})));
          SingleRobot_Real singleRobot_Real1
            annotation (Placement(transformation(extent={{6,34},{44,62}})));
          testCounterReal testCounterReal1
            annotation (Placement(transformation(extent={{-160,60},{-140,80}})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-58,132})));
          Modelica.Blocks.Sources.BooleanExpression booleanExpression1(y=true)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-16,134})));
          Modelica.Blocks.Sources.BooleanPulse booleanPulse(period=2, startTime=
               1)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,122})));
          Modelica.Blocks.Sources.BooleanPulse booleanPulse1(period=2,
              startTime=2)
            annotation (Placement(transformation(extent={{-10,-10},{10,10}},
                rotation=270,
                origin={52,122})));
          Modelica.Blocks.Sources.BooleanStep booleanStep(startValue=false, startTime=12)
            annotation (Placement(transformation(extent={{-160,114},{-140,134}})));
        equation

          connect(singleRobot_Real1.InActivationProposal, singleRobot_Real.Out_ActivationProposal)
            annotation (Line(
              points={{6.18095,44.8267},{-21.9,44.8267},{-21.9,54.7733},{-50,
                  54.7733}},
              color={0,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real.InActivationProposal, singleRobot_Real1.Out_ActivationProposal)
            annotation (Line(
              points={{-87.819,42.8267},{-132,42.8267},{-132,106},{82,106},{82,
                  58},{44,58},{44,56.7733}},
              color={0,0,255},
              smooth=Smooth.None));

          connect(singleRobot_Real1.Out_Deactivation, singleRobot_Real.InDeactivation)
            annotation (Line(
              points={{44,54.16},{82,54.16},{82,-8},{-132,-8},{-132,40},{
                  -87.819,40},{-87.819,39.6533}},
              color={0,0,0},
              smooth=Smooth.None));

          connect(singleRobot_Real1.InDeactivation, singleRobot_Real.Out_Deactivation)
            annotation (Line(
              points={{6.18095,41.6533},{-25.9,41.6533},{-25.9,52.16},{-50,
                  52.16}},
              color={0,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real1.OutTurn, singleRobot_Real.InTurn) annotation (Line(
              points={{44,44.64},{62,44.64},{62,90},{-122,90},{-122,47.12},{
                  -87.819,47.12}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(singleRobot_Real1.OutActivationAccepted, singleRobot_Real.In_ActivationAccepted)
            annotation (Line(
              points={{44,38.6667},{58,40},{58,84},{-100,84},{-100,51.2267},{
                  -87.819,51.2267}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(singleRobot_Real1.Out_ActivationRejected, singleRobot_Real.In_ActivationRejected)
            annotation (Line(
              points={{44,41.28},{54,41.28},{54,76},{-96,76},{-96,54.4},{
                  -87.819,54.4}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(singleRobot_Real1.InTurn, singleRobot_Real.OutTurn) annotation (Line(
              points={{6.18095,49.12},{-31.9,49.12},{-31.9,42.64},{-50,42.64}},
              color={0,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real1.In_ActivationRejected, singleRobot_Real.Out_ActivationRejected)
            annotation (Line(
              points={{6.18095,56.4},{-16,56.4},{-16,39.28},{-50,39.28}},
              color={0,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real.OutActivationAccepted, singleRobot_Real1.In_ActivationAccepted)
            annotation (Line(
              points={{-50,36.6667},{-10,36.6667},{-10,53.2267},{6.18095,
                  53.2267}},
              color={0,0,0},
              smooth=Smooth.None));
          connect(testCounterReal1.y, singleRobot_Real.in_weight) annotation (Line(
              points={{-140.2,73},{-75.1,73},{-75.1,59.6267},{-74.6095,59.6267}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_height, testCounterReal1.y) annotation (Line(
              points={{-69.181,59.6267},{-68,59.6267},{-68,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_friction, testCounterReal1.y) annotation (Line(
              points={{-71.8952,59.6267},{-72,62},{-72,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_turn_time, testCounterReal1.y) annotation (Line(
              points={{-65.019,59.44},{-64.1,59.44},{-64.1,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_y_pos, testCounterReal1.y) annotation (Line(
              points={{-60.4952,59.44},{-60.6,59.44},{-60.6,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_x_pos, testCounterReal1.y) annotation (Line(
              points={{-62.6667,59.44},{-62.6667,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_z_pos, testCounterReal1.y) annotation (Line(
              points={{-58.5048,59.44},{-56.7,59.44},{-56.7,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_speed, testCounterReal1.y) annotation (Line(
              points={{-56.3333,59.44},{-55.5,59.44},{-55.5,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.in_error, testCounterReal1.y) annotation (Line(
              points={{-53.8,59.44},{-52.1,59.44},{-52.1,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_weight, testCounterReal1.y) annotation (Line(
              points={{19.3905,61.6267},{17.4,61.6267},{17.4,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_friction, testCounterReal1.y) annotation (Line(
              points={{22.1048,61.6267},{20.9,61.6267},{20.9,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_height, testCounterReal1.y) annotation (Line(
              points={{24.819,61.6267},{25.4,61.6267},{25.4,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_turn_time, testCounterReal1.y) annotation (Line(
              points={{28.981,61.44},{28.7,61.44},{28.7,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_x_pos, testCounterReal1.y) annotation (Line(
              points={{31.3333,61.44},{31.3333,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_y_pos, testCounterReal1.y) annotation (Line(
              points={{33.5048,61.44},{33.2,61.44},{33.2,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_z_pos, testCounterReal1.y) annotation (Line(
              points={{35.4952,61.44},{36.3,61.44},{36.3,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_speed, testCounterReal1.y) annotation (Line(
              points={{37.6667,61.44},{39.5,61.44},{39.5,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real1.in_error, testCounterReal1.y) annotation (Line(
              points={{40.2,61.44},{42.9,61.44},{42.9,73},{-140.2,73}},
              color={0,0,127},
              smooth=Smooth.None));
          connect(singleRobot_Real.Start_Transmission, booleanExpression1.y)
            annotation (Line(
              points={{-83.7476,59.5333},{-84,59.5333},{-84,112},{-16,112},{-16,
                  123}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real.ready, booleanExpression1.y) annotation (Line(
              points={{-85.5571,59.5333},{-88,59.5333},{-88,108},{-16,108},{-16,
                  123}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real.Strike, booleanPulse.y) annotation (Line(
              points={{-79.5857,59.5333},{-2,59.5333},{-2,80},{10,80},{10,111}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real1.Strike, booleanPulse1.y) annotation (Line(
              points={{14.4143,61.5333},{14,86},{52,86},{52,111}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(booleanExpression1.y, singleRobot_Real1.ready) annotation (Line(
              points={{-16,123},{-16,68},{8.44286,68},{8.44286,61.5333}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real1.Start_Transmission, booleanExpression.y)
            annotation (Line(
              points={{10.2524,61.5333},{-37.65,61.5333},{-37.65,121},{-58,121}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real1.Stop_Transmission, booleanExpression.y) annotation (
             Line(
              points={{12.4238,61.5333},{12,64},{12,66},{-24,66},{-24,121},{-58,
                  121}},
              color={255,0,255},
              smooth=Smooth.None));
          connect(singleRobot_Real.Stop_Transmission, booleanStep.y) annotation (Line(
              points={{-81.5762,59.5333},{-82,82},{-136,82},{-136,124},{-139,
                  124}},
              color={255,0,255},
              smooth=Smooth.None));
          annotation (Diagram(graphics));
        end CollaboratingRobotsRealMainTest;

        model testCounterReal

          Modelica.Blocks.Interfaces.RealOutput y
            annotation (Placement(transformation(extent={{88,20},{108,40}})));
        algorithm
          when sample(0,1) then
          y := time;
          end when;

          annotation (Diagram(graphics));
        end testCounterReal;
      end Test;

      partial model CollaboratingRobotsReal

        SingleRobot_Real singleRobot_Real
          annotation (Placement(transformation(extent={{-88,32},{-50,60}})));
        SingleRobot_Real singleRobot_Real1
          annotation (Placement(transformation(extent={{6,34},{44,62}})));
      equation

        connect(singleRobot_Real1.InActivationProposal, singleRobot_Real.Out_ActivationProposal)
          annotation (Line(
            points={{4.2,45.6},{-21.9,45.6},{-21.9,56.4},{-48,56.4}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(singleRobot_Real.InActivationProposal, singleRobot_Real1.Out_ActivationProposal)
          annotation (Line(
            points={{-89.8,43.6},{-132,43.6},{-132,106},{82,106},{82,84},{82,84},
                {82,58},{82,58},{82,58},{46,58},{46,58.4}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(singleRobot_Real1.Out_Deactivation, singleRobot_Real.InDeactivation)
          annotation (Line(
            points={{46,55.6},{82,55.6},{82,-8},{-132,-8},{-132,40},{-90,40},{
                -90,40},{-89.8,40.2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(singleRobot_Real1.InDeactivation, singleRobot_Real.Out_Deactivation)
          annotation (Line(
            points={{4.2,42.2},{-25.9,42.2},{-25.9,53.6},{-48,53.6}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(singleRobot_Real1.OutTurn, singleRobot_Real.InTurn) annotation (
           Line(
            points={{46,45.4},{62,45.4},{62,90},{-122,90},{-122,48},{-89.8,48.2}},
            color={0,0,0},
            smooth=Smooth.None));

        connect(singleRobot_Real1.OutActivationAccepted, singleRobot_Real.In_ActivationAccepted)
          annotation (Line(
            points={{46,39},{58,40},{58,84},{-100,84},{-100,52},{-89.8,52.6}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(singleRobot_Real1.Out_ActivationRejected, singleRobot_Real.In_ActivationRejected)
          annotation (Line(
            points={{46,41.8},{54,41.8},{54,76},{54,76},{-96,76},{-96,56},{
                -89.8,56}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(singleRobot_Real1.InTurn, singleRobot_Real.OutTurn) annotation (
           Line(
            points={{4.2,50.2},{-31.9,50.2},{-31.9,43.4},{-48,43.4}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(singleRobot_Real1.In_ActivationRejected, singleRobot_Real.Out_ActivationRejected)
          annotation (Line(
            points={{4.2,58},{-16,58},{-16,39.8},{-48,39.8}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(singleRobot_Real.OutActivationAccepted, singleRobot_Real1.In_ActivationAccepted)
          annotation (Line(
            points={{-48,37},{-10,37},{-10,54.6},{4.2,54.6}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end CollaboratingRobotsReal;
    end ColloboratingRobots;

    package ParameterisedCoorinationProtocols
      package Turn_Transmission
        model Turn_Transmission_Partner
        extends
            SyncronziedProtocols.Turn_Transmission.Turn_Transmission_Partner(
              mailbox(numberOfMessageIntegers=6), OutTurn(
              redeclare Integer integers[6] "integers[6]",
              redeclare Boolean booleans[0] "booelans[0]",
              redeclare Real reals[0] "reals[0]"),
            T1(numberOfMessageIntegers=6),
            T4(numberOfMessageIntegers=6),
            InTurn(redeclare Integer integers[6] "integers[6]"),
            message(numberOfMessageIntegers=6),
            T10(use_syncReceive=true));

          Modelica.Blocks.Interfaces.IntegerOutput Out_Y    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={30,-106})));
          Modelica.Blocks.Interfaces.IntegerInput In_TurnTime
                                                            annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,21})));
          Modelica.Blocks.Interfaces.IntegerInput In_Speed  annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-47})));
          Modelica.Blocks.Interfaces.IntegerInput In_X      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,5})));
          Modelica.Blocks.Interfaces.IntegerInput In_Y      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-13})));
          Modelica.Blocks.Interfaces.IntegerInput In_Z      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-31})));
          Modelica.Blocks.Interfaces.IntegerInput In_BatError
                                                            annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-65})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_X    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={8,-106})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_TurnTime
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-16,-106})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_Z    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={50,-106})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_Speed
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={68,-106})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_BatError
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={90,-106})));

        algorithm
          Out_TurnTime := T4.transition_input_port[1].integers[1];
          Out_X := T4.transition_input_port[1].integers[2];
          Out_Y := T4.transition_input_port[1].integers[3];
          Out_Z := T4.transition_input_port[1].integers[4];
          Out_Speed := T4.transition_input_port[1].integers[5];
          Out_BatError := T4.transition_input_port[1].integers[6];

        equation
          connect(In_TurnTime, message.u_integers[1]) annotation (Line(
              points={{101,21},{83,21},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_X, message.u_integers[2]) annotation (Line(
              points={{101,5},{83,5},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Y, message.u_integers[3]) annotation (Line(
              points={{101,-13},{83,-13},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Z, message.u_integers[4]) annotation (Line(
              points={{101,-31},{83,-31},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Speed, message.u_integers[5]) annotation (Line(
              points={{101,-47},{83,-47},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_BatError, message.u_integers[6]) annotation (Line(
              points={{101,-65},{83,-65},{83,-66.8},{-73,-66.8}},
              color={255,127,0},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -100},{100,100}}),
                              graphics));
        end Turn_Transmission_Partner;

        model Turn_Transmission_Partner_Real
        extends
            SyncronziedProtocols.Turn_Transmission.Turn_Transmission_Partner(
              mailbox(numberOfMessageReals=6), OutTurn(
              redeclare Integer integers[0] "integers[0]",
              redeclare Boolean booleans[0] "booelans[0]",
              redeclare Real reals[6] "reals[6]"),
            T1(numberOfMessageReals=6),
            T4(numberOfMessageReals=6),
            InTurn(redeclare Real reals[6] "reals[6]"),
            message(numberOfMessageReals=6));

          Modelica.Blocks.Interfaces.RealOutput Out_Y    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={32,-132})));
          Modelica.Blocks.Interfaces.RealInput In_TurnTime  annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,21})));
          Modelica.Blocks.Interfaces.RealInput In_Speed  annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-47})));
          Modelica.Blocks.Interfaces.RealInput In_X      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,3})));
          Modelica.Blocks.Interfaces.RealInput In_Y      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-13})));
          Modelica.Blocks.Interfaces.RealInput In_Z      annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-31})));
          Modelica.Blocks.Interfaces.RealInput In_BatError  annotation (Placement(
                transformation(
                extent={{7,-7},{-7,7}},
                rotation=0,
                origin={101,-65})));
          Modelica.Blocks.Interfaces.RealOutput Out_X    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={10,-132})));
          Modelica.Blocks.Interfaces.RealOutput Out_TurnTime
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-14,-132})));
          Modelica.Blocks.Interfaces.RealOutput Out_Z    annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={52,-132})));
          Modelica.Blocks.Interfaces.RealOutput Out_Speed   annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={70,-132})));
          Modelica.Blocks.Interfaces.RealOutput Out_BatError
                                                            annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={92,-132})));

        algorithm
          when T4.fire then
            Out_TurnTime := T4.transition_input_port[1].reals[1];
          Out_X := T4.transition_input_port[1].reals[2];
          Out_Y := T4.transition_input_port[1].reals[3];
          Out_Z := T4.transition_input_port[1].reals[4];
          Out_Speed := T4.transition_input_port[1].reals[5];
          Out_BatError := T4.transition_input_port[1].reals[6];
          end when;

          when T1.fire then
            Out_TurnTime := T1.transition_input_port[1].reals[1];
          Out_X := T1.transition_input_port[1].reals[2];
          Out_Y := T1.transition_input_port[1].reals[3];
          Out_Z := T1.transition_input_port[1].reals[4];
          Out_Speed := T1.transition_input_port[1].reals[5];
          Out_BatError := T1.transition_input_port[1].reals[6];
          end when;

        equation
          connect(In_TurnTime, message.u_reals[1]) annotation (Line(
              points={{101,21},{83,21},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_X, message.u_reals[2]) annotation (Line(
              points={{101,3},{83,3},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Y, message.u_reals[3]) annotation (Line(
              points={{101,-13},{83,-13},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Z, message.u_reals[4]) annotation (Line(
              points={{101,-31},{83,-31},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Speed, message.u_reals[5]) annotation (Line(
              points={{101,-47},{83,-47},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_BatError, message.u_reals[6]) annotation (Line(
              points={{101,-65},{83,-65},{83,-76},{-73,-76}},
              color={255,127,0},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -120},{100,100}}),
                              graphics), Icon(coordinateSystem(extent={{-100,
                    -120},{100,100}})));
        end Turn_Transmission_Partner_Real;
      end Turn_Transmission;

      package Synchronized_Collaboration
        model Collaboration_Slave
           extends
            SyncronziedProtocols.Synchronized_Collaboration.Collaboration_Slave(
            T1(numberOfMessageIntegers=3),
            activationProposal(numberOfMessageIntegers=3),
            activationProposalInputPort(redeclare Integer integers[3]
                "integers[3]"));

          Modelica.Blocks.Interfaces.IntegerOutput Out_Weight annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-48,-104})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_Friction annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-30,-104})));
          Modelica.Blocks.Interfaces.IntegerOutput Out_Height annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-10,-104})));
          Modelica.Blocks.Interfaces.BooleanInput ready annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-72,104})));

        algorithm
          Out_Weight := T1.transition_input_port[1].integers[1];
          Out_Friction := T1.transition_input_port[1].integers[2];
          Out_Height := T1.transition_input_port[1].integers[3];
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -100},{100,100}}),
                              graphics));
        end Collaboration_Slave;

        model Collaboration_Master
          extends
            SyncronziedProtocols.Synchronized_Collaboration.Collaboration_Master(
            activationProposal(numberOfMessageIntegers=3),
            activationProposalOutputPort(redeclare Integer integers[3]
                "integers[3]"),
            activationAccepted(numberOfMessageIntegers=0),
            T3(numberOfMessageIntegers=0));
          Modelica.Blocks.Interfaces.IntegerInput In_Weight annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={30,106})));
          Modelica.Blocks.Interfaces.IntegerInput In_Friction annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={44,106})));
          Modelica.Blocks.Interfaces.IntegerInput In_Height annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={58,106})));
        equation
          connect(In_Weight, activationProposal.u_integers[1]) annotation (Line(
              points={{30,106},{30,69.2},{49,69.2}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Friction, activationProposal.u_integers[2]) annotation (
              Line(
              points={{44,106},{46,106},{46,69.2},{49,69.2}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Height, activationProposal.u_integers[3]) annotation (Line(
              points={{58,106},{54,106},{54,69.2},{49,69.2}},
              color={255,127,0},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -100},{100,100}}),
                              graphics));
        end Collaboration_Master;

        model Collaboration_Slave_Real
           extends
            SyncronziedProtocols.Synchronized_Collaboration.Collaboration_Slave(
            T1(numberOfMessageReals=3),
            activationProposal(numberOfMessageReals=3),
            activationProposalInputPort(redeclare Real reals[3] "reals[3]"));

          Modelica.Blocks.Interfaces.RealOutput Out_Weight annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-48,-104})));
          Modelica.Blocks.Interfaces.RealOutput Out_Friction annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-30,-104})));
          Modelica.Blocks.Interfaces.RealOutput Out_Height annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-10,-104})));
          Modelica.Blocks.Interfaces.BooleanInput ready annotation (Placement(
                transformation(
                extent={{-10,-10},{10,10}},
                rotation=270,
                origin={-72,104})));

        algorithm
          Out_Weight := T1.transition_input_port[1].reals[1];
          Out_Friction := T1.transition_input_port[1].reals[2];
          Out_Height := T1.transition_input_port[1].reals[3];
        equation

          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -100},{100,100}}),
                              graphics));
        end Collaboration_Slave_Real;

        model Collaboration_Master_Real
          extends
            SyncronziedProtocols.Synchronized_Collaboration.Collaboration_Master(
            activationProposal(numberOfMessageReals=3),
            activationProposalOutputPort(redeclare Real reals[3] "reals[3]"),
            activationAccepted(numberOfMessageReals=0),
            T3(numberOfMessageReals=0,
              use_syncReceive=false,
              use_syncSend=true));
          Modelica.Blocks.Interfaces.RealInput In_Weight annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={30,106})));
          Modelica.Blocks.Interfaces.RealInput In_Friction annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={44,106})));
          Modelica.Blocks.Interfaces.RealInput In_Height annotation (Placement(
                transformation(
                extent={{-12,-12},{12,12}},
                rotation=270,
                origin={58,106})));
        equation
          connect(In_Weight, activationProposal.u_reals[1]) annotation (Line(
              points={{30,106},{30,60},{49,60}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Friction, activationProposal.u_reals[2]) annotation (
              Line(
              points={{44,106},{46,106},{46,60},{49,60}},
              color={255,127,0},
              smooth=Smooth.None));
          connect(In_Height, activationProposal.u_reals[3]) annotation (Line(
              points={{58,106},{54,106},{54,60},{49,60}},
              color={255,127,0},
              smooth=Smooth.None));
          annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                    -100},{100,100}}),
                              graphics));
        end Collaboration_Master_Real;
      end Synchronized_Collaboration;
    end ParameterisedCoorinationProtocols;

    model SingleRobot_Real

      ParameterisedCoorinationProtocols.Synchronized_Collaboration.Collaboration_Slave_Real
        collaboration_Slave_Real(evaluationTime=1)
        annotation (Placement(transformation(extent={{-136,-98},{-66,-46}})));
      ParameterisedCoorinationProtocols.Synchronized_Collaboration.Collaboration_Master_Real
        collaboration_Master_Real(timeout=20)
        annotation (Placement(transformation(extent={{-140,14},{-62,66}})));
      ParameterisedCoorinationProtocols.Turn_Transmission.Turn_Transmission_Partner_Real
        turn_Transmission_Partner_Real(           T11(afterTime=0.1, use_after=
              true), timeout=20)
        annotation (Placement(transformation(extent={{18,-50},{124,22}})));
      Modelica.Blocks.Interfaces.RealInput in_weight annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={-72,116})));
      Modelica.Blocks.Interfaces.RealInput in_turn_time annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={34,114})));
      Modelica.Blocks.Interfaces.RealInput in_height annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={-12,116})));
      Modelica.Blocks.Interfaces.RealInput in_error annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={158,114})));
      Modelica.Blocks.Interfaces.RealInput in_speed annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={130,114})));
      Modelica.Blocks.Interfaces.RealInput in_y_pos annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={84,114})));
      Modelica.Blocks.Interfaces.RealInput in_friction annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={-42,116})));
      Modelica.Blocks.Interfaces.RealInput in_x_pos annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={60,114})));
      Modelica.Blocks.Interfaces.RealInput in_z_pos annotation (Placement(
            transformation(
            extent={{-12,-12},{12,12}},
            rotation=270,
            origin={106,114})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        In_ActivationAccepted(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-228,16},{-208,36}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        In_ActivationRejected(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-228,50},{-208,70}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort InTurn(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Integer integers[0] "integers[0]",
        redeclare Real reals[6] "reals[6]")
        annotation (Placement(transformation(extent={{-228,-28},{-208,-8}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
        InActivationProposal(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Integer integers[0] "integers[0]",
        redeclare Real reals[3] "reals[3]")
        annotation (Placement(transformation(extent={{-228,-74},{-208,-54}})));
      RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort InDeactivation(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{-228,-108},{-208,-88}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort OutTurn(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Integer integers[0] "integers[0]",
        redeclare Real reals[6] "reals[6]")
        annotation (Placement(transformation(extent={{190,-76},{210,-56}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        Out_ActivationRejected(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{190,-112},{210,-92}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        OutActivationAccepted(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{190,-140},{210,-120}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Deactivation(
        redeclare Integer integers[0] "integers[0]",
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Real reals[0] "reals[0]")
        annotation (Placement(transformation(extent={{190,26},{210,46}})));
      RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
        Out_ActivationProposal(
        redeclare Boolean booleans[0] "booelans[0]",
        redeclare Integer integers[0] "integers[0]",
        redeclare Real reals[3] "reals[3]")
        annotation (Placement(transformation(extent={{190,54},{210,74}})));
      Modelica.Blocks.Interfaces.BooleanInput Start_Transmission annotation (
          Placement(transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-173,115})));
      Modelica.Blocks.Interfaces.BooleanInput Stop_Transmission annotation (
          Placement(transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-149,115})));
      Modelica.Blocks.Interfaces.BooleanInput Strike annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-127,115})));
      Modelica.Blocks.Interfaces.BooleanInput ready annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-193,115})));
      Modelica.Blocks.Interfaces.RealOutput out_weight annotation (Placement(
            transformation(
            extent={{-14,-14},{14,14}},
            rotation=270,
            origin={-140,-192})));
      Modelica.Blocks.Interfaces.RealOutput out_height annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-97,-193}), iconTransformation(
            extent={{-14,-14},{14,14}},
            rotation=270,
            origin={-98,-192})));
      Modelica.Blocks.Interfaces.RealOutput out_friction annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={-119,-193}), iconTransformation(
            extent={{-14,-14},{14,14}},
            rotation=270,
            origin={-120,-192})));
      Modelica.Blocks.Interfaces.RealOutput out_turn_time annotation (Placement(
            transformation(
            extent={{-14,-14},{14,14}},
            rotation=270,
            origin={36,-190}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={35,-189})));
      Modelica.Blocks.Interfaces.RealOutput out_y_pos annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={79,-191}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={77,-189})));
      Modelica.Blocks.Interfaces.RealOutput out_in_x_pos annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={57,-191}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={55,-189})));
      Modelica.Blocks.Interfaces.RealOutput out_z_pos annotation (Placement(
            transformation(
            extent={{-14,-14},{14,14}},
            rotation=270,
            origin={104,-190}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={103,-189})));
      Modelica.Blocks.Interfaces.RealOutput out_error annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={147,-191}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={145,-189})));
      Modelica.Blocks.Interfaces.RealOutput out_speed annotation (Placement(
            transformation(
            extent={{-15,-15},{15,15}},
            rotation=270,
            origin={125,-191}), iconTransformation(
            extent={{-13,-13},{13,13}},
            rotation=270,
            origin={123,-189})));
    equation
      connect(in_weight, collaboration_Master_Real.In_Weight) annotation (Line(
          points={{-72,116},{-72,98},{-90,98},{-90,67.56},{-89.3,67.56}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(collaboration_Master_Real.In_Friction, in_friction) annotation (
          Line(
          points={{-83.84,67.56},{-83.84,92.45},{-42,92.45},{-42,116}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.In_Height, in_height) annotation (Line(
          points={{-78.38,67.56},{-78,86},{-12,86},{-12,116}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(in_turn_time, turn_Transmission_Partner_Real.In_TurnTime)
        annotation (Line(
          points={{34,114},{34,78},{130,78},{130,-3.85455},{124.53,-3.85455}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(in_x_pos, turn_Transmission_Partner_Real.In_X) annotation (Line(
          points={{60,114},{60,82},{134,82},{134,-9.74545},{124.53,-9.74545}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(in_y_pos, turn_Transmission_Partner_Real.In_Y) annotation (Line(
          points={{84,114},{84,86},{140,86},{140,-14.9818},{124.53,-14.9818}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(in_z_pos, turn_Transmission_Partner_Real.In_Z) annotation (Line(
          points={{106,114},{106,90},{144,90},{144,-20.8727},{124.53,-20.8727}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(in_speed, turn_Transmission_Partner_Real.In_Speed) annotation (
          Line(
          points={{130,114},{130,94},{152,94},{152,-26.1091},{124.53,-26.1091}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.In_BatError, in_error) annotation (
         Line(
          points={{124.53,-32},{156,-38},{156,114},{158,114}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(InTurn, turn_Transmission_Partner_Real.InTurn) annotation (Line(
          points={{-218,-18},{16.94,-18},{16.94,-13.3455}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.actiavtionAcceptedInputPort,
        In_ActivationAccepted) annotation (Line(
          points={{-140,29.6},{-180,29.6},{-180,26},{-218,26}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.activationRejectedInputPort,
        In_ActivationRejected) annotation (Line(
          points={{-140,56.12},{-180,56.12},{-180,60},{-218,60}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(InActivationProposal, collaboration_Slave_Real.activationProposalInputPort)
        annotation (Line(
          points={{-218,-64},{-177,-64},{-177,-63.16},{-136,-63.16}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Slave_Real.deactivationInputPort, InDeactivation)
        annotation (Line(
          points={{-136,-69.4},{-176,-69.4},{-176,-98},{-218,-98}},
          color={0,0,255},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.activationProposalOutputPort,
        Out_ActivationProposal) annotation (Line(
          points={{-62,55.6},{70,55.6},{70,64},{200,64}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.deactivationOutputPort,
        Out_Deactivation) annotation (Line(
          points={{-61.22,43.64},{71.39,43.64},{71.39,36},{200,36}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.OutTurn, OutTurn) annotation (Line(
          points={{121.88,-35.6},{161.94,-35.6},{161.94,-66},{200,-66}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Slave_Real.activationRejectedOutputPort,
        Out_ActivationRejected) annotation (Line(
          points={{-65.3,-58.48},{67.35,-58.48},{67.35,-102},{200,-102}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Slave_Real.activationAcceptedOutputPort,
        OutActivationAccepted) annotation (Line(
          points={{-65.3,-69.92},{-6,-70},{54,-70},{54,-130},{200,-130}},
          color={0,0,0},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.Out_Begin,
        turn_Transmission_Partner_Real.Master) annotation (Line(
          points={{-61.22,37.4},{-21.61,37.4},{-21.61,4},{17.47,4}},
          color={255,128,0},
          smooth=Smooth.None));
      connect(ready, collaboration_Slave_Real.ready) annotation (Line(
          points={{-193,115},{-193,-33.5},{-126.2,-33.5},{-126.2,-44.96}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(Start_Transmission, collaboration_Master_Real.startTransmission)
        annotation (Line(
          points={{-173,115},{-173,76.5},{-128.3,76.5},{-128.3,67.04}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(Stop_Transmission, collaboration_Master_Real.stopTransmission)
        annotation (Line(
          points={{-149,115},{-149,81.5},{-119.33,81.5},{-119.33,66.78}},
          color={255,0,255},
          smooth=Smooth.None));
      connect(Strike, turn_Transmission_Partner_Real.strike) annotation (Line(
          points={{-127,115},{-128,90},{-46,90},{-46,46},{34.43,46},{34.43,
              23.6364}},
          color={255,0,255},
          smooth=Smooth.None));

      connect(turn_Transmission_Partner_Real.Out_TurnTime, out_turn_time)
        annotation (Line(
          points={{63.58,-53.9273},{63.58,-117.08},{36,-117.08},{36,-190}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.Out_X, out_in_x_pos) annotation (
          Line(
          points={{76.3,-53.9273},{76.3,-127.08},{57,-127.08},{57,-191}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.Out_Y, out_y_pos) annotation (Line(
          points={{87.96,-53.9273},{87.96,-133.08},{79,-133.08},{79,-191}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.Out_Z, out_z_pos) annotation (Line(
          points={{98.56,-53.9273},{98.56,-126.08},{104,-126.08},{104,-190}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.Out_Speed, out_speed) annotation (
          Line(
          points={{108.1,-53.9273},{108.1,-118.08},{125,-118.08},{125,-191}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(turn_Transmission_Partner_Real.Out_BatError, out_error)
        annotation (Line(
          points={{119.76,-53.9273},{119.76,-110.08},{147,-110.08},{147,-191}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(collaboration_Slave_Real.Out_Weight, out_weight) annotation (Line(
          points={{-117.8,-99.04},{-117.8,-141.52},{-140,-141.52},{-140,-192}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(collaboration_Slave_Real.Out_Friction, out_friction) annotation (
          Line(
          points={{-111.5,-99.04},{-111.5,-145.52},{-119,-145.52},{-119,-193}},
          color={0,0,127},
          smooth=Smooth.None));

      connect(collaboration_Slave_Real.Out_Height, out_height) annotation (Line(
          points={{-104.5,-99.04},{-104.5,-143.52},{-97,-143.52},{-97,-193}},
          color={0,0,127},
          smooth=Smooth.None));
      connect(collaboration_Master_Real.deactivate_Collaboration,
        turn_Transmission_Partner_Real.StopCollaboration) annotation (Line(
          points={{-61.22,32.2},{-38,32},{-38,-43.4545},{18,-43.4545}},
          color={255,128,0},
          smooth=Smooth.None));
      connect(collaboration_Slave_Real.collaboration_deactivated,
        turn_Transmission_Partner_Real.StopCollaboration1) annotation (Line(
          points={{-66,-74.6},{-34,-74.6},{-34,-74},{-2,-74},{-2,-49.3455},{18,
              -49.3455}},
          color={255,128,0},
          smooth=Smooth.None));

      annotation (Diagram(coordinateSystem(extent={{-220,-180},{200,120}},
              preserveAspectRatio=true), graphics), Icon(coordinateSystem(
              extent={{-220,-180},{200,120}}, preserveAspectRatio=true),
                                               graphics={               Bitmap(
              extent={{-104,68},{88,-144}},
              imageSource=
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "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"
                   +
                  ""
                   +
                  ""
                   +
                  "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"
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  ""
                   +
                  "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",
              fileName=
                  "modelica://CoordinationProtocolLibrary/../../workspaces/svns/entime/trunk/Veroeffentlichungen/Paper/TdSE2012/Paper 3 Demonstrator/DemonstratorEinzel.jpg")}));
    end SingleRobot_Real;

    package Fail_Operational_Delegation_Test
      model Test_Fail_Operational_Delegation_Main

        CoordinationProtocols.Fail_Operational_Delegation.Delegation_Master
          delegation_Master(timeout=2)
          annotation (Placement(transformation(extent={{-46,36},{-26,56}})));
        CoordinationProtocols.Fail_Operational_Delegation.Delegation_Slave
          delegation_Slave(worktime=1)
          annotation (Placement(transformation(extent={{20,36},{40,56}})));
      equation
        connect(delegation_Master.Out_Order_Delegation, delegation_Slave.In_Order_Delegation)
          annotation (Line(
            points={{-26.2,55.2},{-3.1,55.2},{-3.1,55.4},{19.8,55.4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(delegation_Slave.Out_Delegation_Failed, delegation_Master.In_DelegationFailed)
          annotation (Line(
            points={{40,45.4},{54,46},{54,70},{-52,70},{-52,44},{-46.2,44}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(delegation_Master.In_Delegation_Succeded, delegation_Slave.Out_Delegation_Succeded)
          annotation (Line(
            points={{-46.2,40.4},{-60,40.4},{-60,22},{54,22},{54,38.2},{40,38.2}},
            color={0,0,255},
            smooth=Smooth.None));

        annotation (Diagram(graphics));
      end Test_Fail_Operational_Delegation_Main;
    end Fail_Operational_Delegation_Test;

    package Master_Slave_Assignment_Test
      model Test_Master_Slave_Assignment
        CoordinationProtocols.Master_Slave_Assignment.Peer peer(
          tries=2,
          period=1,
          timeoutSlave=1,
          timeoutMasterProposed=1,
          waittime=1,
          i(start=0))
          annotation (Placement(transformation(extent={{-62,74},{-22,96}})));
        CoordinationProtocols.Master_Slave_Assignment.Peer peer1(
          tries=2,
          period=1,
          timeoutSlave=1,
          timeoutMasterProposed=1,
          waittime=2,
          i(start=0)) annotation (Placement(transformation(
              extent={{20,-11},{-20,11}},
              rotation=0,
              origin={-42,-85})));
      equation
        connect(peer1.In_Confirm, peer.Out_Cofirm) annotation (Line(
            points={{-34.1667,-96},{-34.1667,-112},{48,-112},{48,108},{-26,108},
                {-26,96.6875},{-25,96.6875}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(peer.Out_NoSlave, peer1.In_NoSlave) annotation (Line(
            points={{-42.3333,96.6875},{-42,130},{124,130},{124,-136},{-47.6667,
                -136},{-47.6667,-96}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer.Out_Alive2, peer1.In_Alive2) annotation (Line(
            points={{-33.6667,96.6875},{-34,120},{110,120},{110,-128},{-40.5,
                -128},{-40.5,-96}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer.Out_YouSlave, peer1.In_YouSlave) annotation (Line(
            points={{-48.1667,96.6875},{-48,114},{-132,114},{-132,-112},{-52,
                -112},{-52,-96},{-52.1667,-96}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer.Out_Alive, peer1.In_Alive) annotation (Line(
            points={{-53.6667,96.6875},{-54,96},{-54,124},{-138,124},{-138,-126},
                {-58,-126},{-58,-96},{-57.5,-96}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer1.Out_Cofirm, peer.In_Confirm) annotation (Line(
            points={{-59,-73.3125},{-60,-73.3125},{-60,74},{-49.8333,74}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer1.Out_NoSlave, peer.In_NoSlave) annotation (Line(
            points={{-41.6667,-73.3125},{-40,-73.3125},{-40,74},{-36.3333,74}},
            color={0,0,0},
            smooth=Smooth.None));

        connect(peer1.Out_Alive2, peer.In_Alive2) annotation (Line(
            points={{-50.3333,-73.3125},{-50,-73.3125},{-50,6},{-43.5,6},{-43.5,
                74}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer1.Out_YouSlave, peer.In_YouSlave) annotation (Line(
            points={{-35.8333,-73.3125},{-36,-48},{-32,-48},{-32,74},{-31.8333,
                74}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(peer.In_Alive, peer1.Out_Alive) annotation (Line(
            points={{-26.5,74},{-26.5,-50.6},{-30.3333,-50.6},{-30.3333,
                -73.3125}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end Test_Master_Slave_Assignment;
    end Master_Slave_Assignment_Test;

    package Fail_Safe_Delegatoin_Test
      model Fail_Safe_Delegation_Test_Main
        CoordinationProtocols.Fail_Safe_Delegation.Safe_Delegation_Master
          safe_Delegation_Master(timeout=1)
          annotation (Placement(transformation(extent={{-82,28},{-50,48}})));
        CoordinationProtocols.Fail_Safe_Delegation.Safe_Delegation_Slave
          safe_Delegation_Slave(worktime=1)
          annotation (Placement(transformation(extent={{24,26},{56,50}})));
      equation
        connect(safe_Delegation_Master.Out_Continue, safe_Delegation_Slave.In_Continue)
          annotation (Line(
            points={{-49.8,36},{-12.8,36},{-12.8,35.9},{24.2,35.9}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(safe_Delegation_Slave.Out_Fail, safe_Delegation_Master.In_Fail)
          annotation (Line(
            points={{56.2,33.8},{64,33.8},{64,-4},{-68,-4},{-67,28.4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(safe_Delegation_Slave.In_Order, safe_Delegation_Master.Out_Order)
          annotation (Line(
            points={{23.8,44.4},{22,44},{22,56},{-92,56},{-92,38.8},{-82,38.8}},
            color={0,0,255},
            smooth=Smooth.None));

        connect(safe_Delegation_Master.In_Done, safe_Delegation_Slave.Out_Done)
          annotation (Line(
            points={{-82,46.2},{-104,46.2},{-104,74},{78,74},{78,46},{56,46},{
                56,45.8}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end Fail_Safe_Delegation_Test_Main;
    end Fail_Safe_Delegatoin_Test;

    package Limit_Observation_Test
      model Limit_Observation_Test_Main
        CoordinationProtocols.Limit_Observation.Provider provider annotation (
            Placement(transformation(
              extent={{-14,-9},{14,9}},
              rotation=0,
              origin={-20,73})));
        CoordinationProtocols.Limit_Observation.Observer observer annotation (
            Placement(transformation(
              extent={{-13,-10},{13,10}},
              rotation=0,
              origin={-19,20})));
      equation
        connect(provider.Out_Limit_Violated, observer.In_LimitViolated)
          annotation (Line(
            points={{-34.2,73.4},{-64,73.4},{-64,24},{-32.2,24},{-32.2,23.4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(provider.Out_LimitRedeemed, observer.In_LimitRedeemed)
          annotation (Line(
            points={{-6,73},{18,73},{18,23.2},{-6,23.2}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end Limit_Observation_Test_Main;
    end Limit_Observation_Test;

    package Test_Periodic_Transmission
      model Test_Periodic_Transmission_Main
        CoordinationProtocols.Periodic_Transmission.Sender sender(period=2)
          annotation (Placement(transformation(extent={{-30,58},{-10,78}})));
        CoordinationProtocols.Periodic_Transmission.Receicer receicer(timeout=2)
          annotation (Placement(transformation(extent={{-28,10},{-8,30}})));
      equation
        connect(sender.Out_Data, receicer.In_Data) annotation (Line(
            points={{-12.4,70},{-12.4,70},{12,70},{12,20.8},{-7.6,20.8}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics), experiment(StopTime=10));
      end Test_Periodic_Transmission_Main;
    end Test_Periodic_Transmission;

    package TestAsynchronousBehavior
      model sender
        RealTimeCoordinationLibrary.Step step1(
          initialStep=true,
          nOut=1,
          nIn=1)
          annotation (Placement(transformation(extent={{-28,48},{-20,56}})));
        RealTimeCoordinationLibrary.Transition T1(
          use_after=true,
          afterTime=1,
          use_firePort=true)
          annotation (Placement(transformation(extent={{4,16},{12,24}})));
        RealTimeCoordinationLibrary.Message message(nIn=1)
          annotation (Placement(transformation(extent={{72,4},{92,24}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          outputDelegationPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{80,-44},{100,-24}})));
      equation
        connect(step1.outPort[1], T1.inPort) annotation (Line(
            points={{-24,47.4},{-8,47.4},{-8,24},{8,24}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, step1.inPort[1]) annotation (Line(
            points={{8,15},{26,15},{26,56},{-24,56}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, message.conditionPort[1]) annotation (Line(
            points={{12.2,20},{46,20},{46,4.4},{70,4.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(message.message_output_port, outputDelegationPort) annotation (
            Line(
            points={{91,13},{91,-8.5},{90,-8.5},{90,-34}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end sender;

      model receiver
        RealTimeCoordinationLibrary.Step step1(
          initialStep=true,
          nOut=1,
          nIn=1)
          annotation (Placement(transformation(extent={{-64,40},{-56,48}})));
        RealTimeCoordinationLibrary.Transition T1(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-40,0})));
        RealTimeCoordinationLibrary.Mailbox mailbox(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{-14,-46},{-34,-26}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          inputDelegationPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{88,-42},{108,-22}})));
      equation
        connect(step1.outPort[1], T1.inPort) annotation (Line(
            points={{-60,39.4},{-60,2.44929e-016},{-44,2.44929e-016}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, step1.inPort[1]) annotation (Line(
            points={{-35,-3.06162e-016},{6,-3.06162e-016},{6,48},{-60,48}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.transition_input_port[1], mailbox.mailbox_output_port[1])
          annotation (Line(
            points={{-42.12,-4.9},{-42.12,-21.45},{-33,-21.45},{-33,-37}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox.mailbox_input_port[1], inputDelegationPort) annotation
          (Line(
            points={{-15,-37},{8.5,-37},{8.5,-32},{98,-32}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end receiver;

      model TestClassMain
        receiver receiver1
          annotation (Placement(transformation(extent={{-20,32},{0,52}})));
        sender sender1
          annotation (Placement(transformation(extent={{-8,-8},{12,12}})));
      equation
        connect(receiver1.inputDelegationPort, sender1.outputDelegationPort)
          annotation (Line(
            points={{-0.2,38.8},{-0.2,38},{32,38},{32,-1.4},{11,-1.4}},
            color={0,0,255},
            smooth=Smooth.None));
        annotation (Diagram(graphics));
      end TestClassMain;
    end TestAsynchronousBehavior;
  end Examples;

  package SyncronziedProtocols
    package Turn_Transmission
      model Turn_Transmission_Partner
      extends CoordinationProtocols.Turn_Transmission.Turn_Transmission_Partner(
          T10(
            condition=stopTransmission, use_syncReceive=false),
          T12(
            condition=stopTransmission, use_syncReceive=false),
          Inactive(initialStep=false, nIn=4),
          T2(use_syncReceive=true, numberOfSyncReceive=1));
      Boolean stopTransmission(start=false);
          RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.receiver Master
          annotation (Placement(transformation(extent={{-106,40},{-96,50}})));

        RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.receiver
          StopCollaboration
          annotation (Placement(transformation(extent={{-106,-106},{-94,-94}})));
        RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.receiver
          StopCollaboration1
          annotation (Placement(transformation(extent={{-106,-124},{-94,-112}})));
        Modelica_StateGraph2.Parallel step1(nEntry=2, initialStep=true)
          annotation (Placement(transformation(extent={{-92,-140},{204,142}})));
        RealTimeCoordinationLibrary.Step SynchWorkaround_1(nOut=1, nIn=2)
          annotation (Placement(transformation(extent={{132,68},{140,76}})));
        RealTimeCoordinationLibrary.Step step4(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{134,26},{142,34}})));
        RealTimeCoordinationLibrary.Transition T11(use_syncReceive=true,
            numberOfSyncReceive=2,
          use_after=true,
          afterTime=0.1)
          annotation (Placement(transformation(extent={{134,46},{142,54}})));
        RealTimeCoordinationLibrary.Transition T14(use_after=true, afterTime=0.1)
                                                   annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={118,46})));
      algorithm

        when T2.fire or T1.fire then
          stopTransmission :=false;
        end when;
        when T14.fire then
          stopTransmission :=true;
        end when;

      equation
        connect(step1.entry[1], Inactive.inPort[4]) annotation (Line(
            points={{48.6,127.9},{48.6,71.45},{-16,71.45},{-16,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(SynchWorkaround_1.outPort[1], T11.inPort) annotation (Line(
            points={{136,67.4},{138,67.4},{138,54}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T11.outPort, step4.inPort[1]) annotation (Line(
            points={{138,45},{138,34}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(step4.outPort[1], T14.inPort) annotation (Line(
            points={{138,25.4},{128,25.4},{128,42},{118,42}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T14.outPort, SynchWorkaround_1.inPort[1]) annotation (Line(
            points={{118,51},{128,51},{128,76},{135,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(step1.entry[2], SynchWorkaround_1.inPort[2]) annotation (Line(
            points={{63.4,127.9},{136,127.9},{136,76},{137,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(StopCollaboration, T11.receiver[1]) annotation (Line(
            points={{-100,-100},{150,-100},{150,54},{142,54},{142,53.67},{135.18,53.67}},
            color={255,128,0},
            smooth=Smooth.None));

        connect(StopCollaboration1, T11.receiver[2]) annotation (Line(
            points={{-100,-118},{160,-118},{160,54},{148,54},{148,54.37},{
                135.18,54.37}},
            color={255,128,0},
            smooth=Smooth.None));

        connect(T2.receiver[1], Master) annotation (Line(
            points={{-29.18,12.02},{-30.59,12.02},{-30.59,45},{-101,45}},
            color={255,128,0},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<p>ToDo:</p>
<p>Insert synchronization channel which cancels the collaboration</p>
</html>"));
      end Turn_Transmission_Partner;

    end Turn_Transmission;

    package Synchronized_Collaboration
      model Collaboration_Slave
        extends
          CoordinationProtocols.SynchronizedCollaboration.Collaboration_Slave(
            T2(use_syncSend=false),                    T3(use_syncSend=true,
              numberOfSyncSend=1));
        RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.sender
          collaboration_deactivated
          annotation (Placement(transformation(extent={{96,-14},{104,-6}})));
      equation

        connect(T3.sender[1], collaboration_deactivated) annotation (Line(
            points={{-55.4,3.94},{-56,-10},{100,-10}},
            color={255,128,0},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<p>ToDo:</p>
<p>Insert synchronization channel which cancels the collaboration</p>
</html>"));
      end Collaboration_Slave;

      model Collaboration_Master
        extends
          CoordinationProtocols.SynchronizedCollaboration.Collaboration_Master(
                               T4(use_syncSend=true,
              numberOfSyncSend=1),
          T3(use_syncSend=true, numberOfSyncSend=1));
        RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.sender Out_Begin
          annotation (Placement(transformation(extent={{96,-16},{108,-4}})));

        RealTimeCoordinationLibrary.Internal.Interfaces.Synchron.sender
          deactivate_Collaboration
          annotation (Placement(transformation(extent={{96,-36},{108,-24}})));
      equation
        connect(T4.sender[1], deactivate_Collaboration) annotation (Line(
            points={{-82.6,23.94},{-84,24},{-84,-30},{102,-30}},
            color={255,128,0},
            smooth=Smooth.None));
        connect(T3.sender[1], Out_Begin) annotation (Line(
            points={{-57.4,-15.94},{20.3,-15.94},{20.3,-10},{102,-10}},
            color={255,128,0},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<p>ToDo:</p>
<p>Insert synchronization channel which cancels the collaboration</p>
</html>"));
      end Collaboration_Master;

    end Synchronized_Collaboration;
  end SyncronziedProtocols;

  package CoordinationProtocols
    package Turn_Transmission
      model Turn_Transmission_Partner

      parameter Real timeout;

        RealTimeCoordinationLibrary.Step Inactive(nIn=3,
          initialStep=true,
          nOut=2)
          annotation (Placement(transformation(extent={{-20,50},{-12,58}})));
        RealTimeCoordinationLibrary.Step TimedOut(nOut=1, nIn=2) annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={22,0})));
        RealTimeCoordinationLibrary.Step MyTurn(nIn=2, nOut=3,
          use_activePort=true)                          annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-14,-34})));
        RealTimeCoordinationLibrary.Step YourTurn(nIn=2, nOut=3,
          use_activePort=true)
          annotation (Placement(transformation(extent={{-38,-12},{-30,-4}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=4)
          annotation (Placement(transformation(extent={{-10,-10},{10,10}},
              rotation=0,
              origin={34,80})));
        RealTimeCoordinationLibrary.Mailbox mailbox(nIn=1, nOut=2,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          numberOfMessageIntegers=0)
          annotation (Placement(transformation(extent={{-106,4},{-86,24}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort InTurn(
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]",
          redeclare Integer integers[0] "integers[0]")
          annotation (Placement(transformation(extent={{-112,-18},{-92,2}})));
        RealTimeCoordinationLibrary.Message message(nIn=2)
          annotation (Placement(transformation(extent={{-72,-86},{-52,-66}})));
        RealTimeCoordinationLibrary.Transition T1(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=0.1,
          numberOfMessageIntegers=0,
          use_firePort=true)
          annotation (Placement(transformation(extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-8,10})));
        RealTimeCoordinationLibrary.Transition T2(use_firePort=true,
          use_after=true,
          afterTime=0.1,
          use_conditionPort=false,
          condition=true)
          annotation (Placement(transformation(extent={{-28,4},{-36,12}})));
        RealTimeCoordinationLibrary.Transition T3(use_firePort=true,
          use_after=true,
          afterTime=0.1,
          use_conditionPort=true)                                annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-64,-12})));
        RealTimeCoordinationLibrary.Transition T4(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          afterTime=0.1,
          use_firePort=true,
          numberOfMessageIntegers=0)  annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-28,-26})));
        RealTimeCoordinationLibrary.Transition T5(                afterTime=
              0.001, use_after=false)      annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={22,22})));
        RealTimeCoordinationLibrary.Transition T6(
          use_after=true,
          use_firePort=false,
          afterTime=timeout,
          use_conditionPort=false)         annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={10,-54})));
        RealTimeCoordinationLibrary.Transition T7(
          use_after=true,
          afterTime=timeout,
          use_conditionPort=false)         annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={60,-48})));

        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=timeout + 1)
          annotation (Placement(transformation(extent={{-4,-4},{4,4}},
              rotation=0,
              origin={2,-32})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort OutTurn(
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]",
          redeclare Integer integers[0] "integers[0]")
          annotation (Placement(transformation(extent={{86,-86},{106,-66}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual1(bound=timeout + 1)
          annotation (Placement(transformation(extent={{60,66},{80,86}})));
        RealTimeCoordinationLibrary.Transition T10(
          afterTime=0.1,
          use_after=false)                                    annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={6,-16})));

        Modelica.Blocks.Interfaces.BooleanInput strike annotation (Placement(
              transformation(
              extent={{-11,-11},{11,11}},
              rotation=270,
              origin={-69,105})));
        Modelica_StateGraph2.Blocks.MathBoolean.RisingEdge rising1
          annotation (Placement(transformation(extent={{-110,66},{-102,74}})));
        RealTimeCoordinationLibrary.Transition T12 annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={94,-8})));
      equation
        connect(InTurn, mailbox.mailbox_input_port[1]) annotation (Line(
            points={{-102,-8},{-113.5,-8},{-113.5,13},{-105,13}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(TimedOut.outPort[1], T5.inPort) annotation (Line(
            points={{22,4.6},{22,18}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, Inactive.inPort[1]) annotation (Line(
            points={{22,27},{22,58},{-17.3333,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, MyTurn.inPort[1]) annotation (Line(
            points={{-3,10},{-3,-30},{-15,-30}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MyTurn.outPort[3], T3.inPort) annotation (Line(
            points={{-12.6667,-38.6},{-62.7,-38.6},{-62.7,-16},{-64,-16}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, YourTurn.inPort[1]) annotation (Line(
            points={{-64,-7},{-64,-4},{-35,-4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YourTurn.outPort[2], T4.inPort) annotation (Line(
            points={{-34,-12.6},{-34,-26},{-32,-26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, MyTurn.inPort[2]) annotation (Line(
            points={{-23,-26},{-23,-16},{-13,-16},{-13,-30}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MyTurn.outPort[1], T6.inPort) annotation (Line(
            points={{-15.3333,-38.6},{-16,-38.6},{-16,-58},{10,-58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T6.outPort, TimedOut.inPort[1]) annotation (Line(
            points={{10,-49},{10,-40},{18,-40},{18,-4},{23,-4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YourTurn.outPort[1], T7.inPort) annotation (Line(
            points={{-35.3333,-12.6},{-40,-12.6},{-40,-64},{60,-64},{60,-52}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T7.outPort, TimedOut.inPort[2]) annotation (Line(
            points={{60,-43},{60,-4},{21,-4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, YourTurn.inPort[2]) annotation (Line(
            points={{-32,3},{-32,2},{-33,2},{-33,-4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.firePort, message.conditionPort[1]) annotation (Line(
            points={{-36.2,8},{-46,8},{-46,-86.6},{-74,-86.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(mailbox.mailbox_output_port[1], T1.transition_input_port[1])
          annotation (Line(
            points={{-87,12.5},{-39.5,12.5},{-39.5,5.1},{-10.12,5.1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox.mailbox_output_port[2], T4.transition_input_port[1])
          annotation (Line(
            points={{-87,13.5},{-87,-43.5},{-30.12,-43.5},{-30.12,-21.1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.firePort, message.conditionPort[2]) annotation (Line(
            points={{-59.8,-12},{-48,-12},{-48,-84.6},{-74,-84.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{45,80},{50,80},{50,-28},{24,-28},{24,-28.56},{-2.6,-28.56},
                {-2.6,-30.56}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeInvariantLessOrEqual.conditionPort, MyTurn.activePort)
          annotation (Line(
            points={{-2.48,-33.44},{-2.48,-33.8},{-9.28,-33.8},{-9.28,-34}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(message.message_output_port, OutTurn) annotation (Line(
            points={{-53,-77},{-26,-77},{-26,-78},{0,-78},{0,-76},{96,-76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual1.clockValue) annotation (Line(
            points={{45,80},{54,80},{54,79.6},{58.5,79.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(YourTurn.activePort, timeInvariantLessOrEqual1.conditionPort)
          annotation (Line(
            points={{-29.28,-8},{2,-8},{2,14},{24,14},{24,72.4},{58.8,72.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(MyTurn.outPort[2], T10.inPort) annotation (Line(
            points={{-14,-38.6},{-14,-38.6},{-14,-42},{6,-42},{6,-20}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T10.outPort, Inactive.inPort[2]) annotation (Line(
            points={{6,-11},{6,58},{-16,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.firePort, clock.u[1]) annotation (Line(
            points={{-59.8,-12},{-58,-12},{-58,82.55},{23.9,82.55}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T4.firePort, clock.u[2]) annotation (Line(
            points={{-28,-30.2},{-84,-30.2},{-84,80.85},{23.9,80.85}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[3]) annotation (Line(
            points={{-8,14.2},{0,14.2},{0,79.15},{23.9,79.15}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T2.firePort, clock.u[4]) annotation (Line(
            points={{-36.2,8},{-50,8},{-50,77.45},{23.9,77.45}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(strike, rising1.u) annotation (Line(
            points={{-69,105},{-69,91.5},{-111.2,91.5},{-111.2,70}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(rising1.y, T3.conditionPort) annotation (Line(
            points={{-101.2,70},{-74,70},{-74,-12},{-69,-12}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T12.outPort, Inactive.inPort[3]) annotation (Line(
            points={{94,-3},{94,64},{-14.6667,64},{-14.6667,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YourTurn.outPort[3], T12.inPort) annotation (Line(
            points={{-32.6667,-12.6},{-32.6667,-20},{94,-20},{94,-12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Inactive.outPort[1], T2.inPort) annotation (Line(
            points={{-17,49.4},{-24,49.4},{-24,12},{-32,12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Inactive.outPort[2], T1.inPort) annotation (Line(
            points={{-15,49.4},{-15,29.7},{-12,29.7},{-12,10}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<h3> Turn-Transmission Partner </h3>
<p>This class implements the behavior of the role partner of the Turn-Transmission-Pattern. This is the only role of the pattern. In order to distinguish between the two partners in this section, they are called partner1 and partner2. Both, partner1 or partner2, may start the cooperation. Assuming partner1 wants to start the cooperation, then it sends the message turn() to partner2 and changes its state to 'YourTurn', which means that partner1 is not actively solving this task anymore but gives it turn to partner1. Consequently, by receiving the turn() message from partner1, partner2 is now the acitve partner and changes its state to 'MyTurn'. Now both partners may change their 'roles' between 'MyTurn' and 'YourTurn'sequentially, such that they are always in the corresponding 'counterstate'. If a partner decides to end the cooperation, either because the task is fullfilled or in case of a failure, it can always change its state back to inactive. Furthermore if a partner does not receive any message from the counterpart, then after a certain amount of time units it changes it changes its state back to inactive via the timeout transition. 

 More information concerning the pattern can be found 
&QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Turn_Transmission\">here</a>&QUOT; 
The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Turn_Transmission/Behavior.jpg\" ></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the partner</small></p>



<p>The partner has a parameter &timeout, specifying the maximum amount of time units that the partner waits for the message of the other partner. </p>
<p><img src=\"images/Turn_Transmission/Parameters.jpg\"/> </p>
<p><small>Figure 2: Realtimestatechart, showing the parameters of the partner role </small></p>
</html>"));
      end Turn_Transmission_Partner;
      annotation (Documentation(info="<html>
<h3> Turn-Transmission Pattern </h3>
<p> 
This pattern synchronizes the behavior of two systems in such a way, that never two systems are active at the same time. But both systems may be inactive at the same time.
</p>

<h4> Context </h4>
<p> 
Two systems are cooperating in a safety crititcal environment, where both systems may not be active at the same time.
</p>

<h4> Problem </h4>
<p> 
Both systems want to fulfill a task together. In order to accieve this, they have to be active sequentially. So, when active, one system always waits until the other is finished and vice versa.
</p>

<h4> Solution </h4>
<p>
Define a pattern which ensures that both systems may never be active at the same time by defining two partners, which implement the same behavior but if one partner starts the cooperation, they act exactly in the opposite way. S

</p>


<h4> Structure </h4>
<p> 
The pattern consists of the role partner, which is a in/out role. The message the partners exchange can be seen in the message interface. The partner may send the message turn() to the other partner and vice versa. The connector must not loose messages. The delay for sending a message is defined by the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Turn_Transmission/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Turn-Transmission Pattern</small></p>
<p><img src=\"images/Turn_Transmission/Interfaces.jpg\" ></p>
<p><small>Figure 2: Interfaces of the Turn-Transmission Pattern</small></p>
<h4> Behavior </h4>
<p>
In order to distinguish between the two partners in this section, they are called partner1 and partner2. Both, partner1 or partner2, may start the cooperation. Assuming partner1 wants to start the cooperation, then it sends the message turn() to partner2 and changes its state to 'YourTurn', which means that partner1 is not actively solving this task anymore but gives it turn to partner1. Consequently, by receiving the turn() message from partner1, partner2 is now the acitve partner and changes its state to 'MyTurn'. Now both partners may change their 'roles' between 'MyTurn' and 'YourTurn'sequentially, such that they are always in the corresponding 'counterstate'. If a partner decides to end the cooperation, either because the task is fullfilled or in case of a failure, it can always change its state back to inactive. Furthermore if a partner does not receive any message from the counterpart, then after a certain amount of time units it changes it changes its state back to inactive via the timeout transition. 
</p>

<p><img src=\"images/Turn_Transmission/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatechart, showing the behavior of the partner</small></p>
</html>
"));
    end Turn_Transmission;

    package SynchronizedCollaboration
      model Collaboration_Slave
      parameter Real evaluationTime;
        RealTimeCoordinationLibrary.Step Default(nIn=2, nOut=1,
          initialStep=true)
          annotation (Placement(transformation(extent={{-32,76},{-24,84}})));
        RealTimeCoordinationLibrary.Step EvaluatueProposal(
          nIn=1,
          nOut=2,
          use_activePort=true) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=0,
              origin={-28,44})));
        RealTimeCoordinationLibrary.Step CollaborationActive(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-28,-22})));
        RealTimeCoordinationLibrary.Transition T1(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          afterTime=0.1,
          numberOfMessageIntegers=0,
          use_firePort=true)          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-28,62})));
        RealTimeCoordinationLibrary.Transition T2(use_firePort=true,
          use_after=true,
          afterTime=0.1,
          condition=ready,
          use_syncSend=false)
          annotation (Placement(transformation(extent={{-30,-4},{-22,4}})));
        RealTimeCoordinationLibrary.Transition T3(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          use_syncSend=false,
          afterTime=0.1)              annotation (Placement(transformation(
              extent={{-4,4},{4,-4}},
              rotation=0,
              origin={-58,8})));
        RealTimeCoordinationLibrary.Mailbox activationProposal(nIn=1, nOut=1,
          numberOfMessageIntegers=0)
          annotation (Placement(transformation(extent={{-80,26},{-60,46}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          activationProposalInputPort(
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]",
          redeclare Integer integers[0] "integers[0]")
          annotation (Placement(transformation(extent={{-110,24},{-90,44}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          deactivationInputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-110,0},{-90,20}})));
        RealTimeCoordinationLibrary.Mailbox deactivation(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-88,-2},{-68,18}})));
        RealTimeCoordinationLibrary.Message actiavtionAccepted(nIn=1)
          annotation (Placement(transformation(extent={{64,0},{84,20}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          activationAcceptedOutputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{92,-2},{112,18}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          activationRejectedOutputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{92,42},{112,62}})));
        RealTimeCoordinationLibrary.Message activationRejected(nIn=1)
          annotation (Placement(transformation(extent={{42,72},{62,92}})));
        Modelica.Blocks.Interfaces.BooleanInput ready annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=270,
              origin={-72,104})));
        RealTimeCoordinationLibrary.Transition T5(condition=not ready,
          use_conditionPort=false,
          use_after=true,
          use_firePort=true,
          afterTime=0.1)                                               annotation (
            Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-8,46})));
        RealTimeCoordinationLibrary.TimeElements.Clock evalTime(nu=1)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-38,22})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=evaluationTime)
          annotation (Placement(transformation(extent={{-8,6},{12,26}})));
      equation

        connect(Default.outPort[1], T1.inPort) annotation (Line(
            points={{-28,75.4},{-28,66}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, EvaluatueProposal.inPort[1]) annotation (Line(
            points={{-28,57},{-28,48}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(EvaluatueProposal.outPort[1], T2.inPort) annotation (Line(
            points={{-27,39.4},{-26,38},{-26,4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, CollaborationActive.inPort[1]) annotation (Line(
            points={{-26,-5},{-26,-18},{-28,-18}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(CollaborationActive.outPort[1], T3.inPort) annotation (Line(
            points={{-28,-26.6},{-58,-26.6},{-58,4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Default.inPort[1]) annotation (Line(
            points={{-58,13},{-58,60},{-42,60},{-42,84},{-29,84}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(activationProposalInputPort, activationProposal.mailbox_input_port[1])
          annotation (Line(
            points={{-100,34},{-88.5,34},{-88.5,35},{-79,35}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(activationProposal.mailbox_output_port[1], T1.transition_input_port[1])
          annotation (Line(
            points={{-61,35},{-32.9,35},{-32.9,64.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(deactivationInputPort, deactivation.mailbox_input_port[1])
          annotation (Line(
            points={{-100,10},{-94,10},{-94,7},{-87,7}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(deactivation.mailbox_output_port[1], T3.transition_input_port[1])
          annotation (Line(
            points={{-69,7},{-69,7.5},{-62.9,7.5},{-62.9,5.88}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.firePort, actiavtionAccepted.conditionPort[1]) annotation (Line(
            points={{-21.8,0},{48,0},{48,0.4},{62,0.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(actiavtionAccepted.message_output_port, activationAcceptedOutputPort)
          annotation (Line(
            points={{83,9},{82,9},{82,8},{102,8}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(activationRejected.message_output_port, activationRejectedOutputPort)
          annotation (Line(
            points={{61,81},{80.5,81},{80.5,52},{102,52}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(EvaluatueProposal.outPort[2], T5.inPort) annotation (Line(
            points={{-29,39.4},{-24,39.4},{-24,30},{-8,30},{-8,42}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, Default.inPort[2]) annotation (Line(
            points={{-8,51},{-8,88},{-27,88},{-27,84}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.firePort, activationRejected.conditionPort[1]) annotation (
            Line(
            points={{-3.8,46},{28,46},{28,72.4},{40,72.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(EvaluatueProposal.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{-32.72,44},{-54,44},{-54,12.4},{-9.2,12.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T1.firePort, evalTime.u[1]) annotation (Line(
            points={{-23.8,62},{-52,62},{-52,22},{-48.1,22}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(evalTime.y, timeInvariantLessOrEqual.clockValue) annotation (
            Line(
            points={{-27,22},{-18,22},{-18,19.6},{-9.5,19.6}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<h3> Collaboration_Slave </h3>
<p>This class implements the behavior of the role Slave of the Synchronized-Collaboration Pattern. The master wants to collaborate with the slave in order to fulfill a certain task. The slave receives the proposal and has to determine, wether it wants to collaborate with the master or not. The evalution result is reported to the master. If the collaboration is accepted by the slave, both (master and slave) change their state to 'CollaborationActive'. Only the master can decide to quit the collaboration.

 More information concerning the pattern can be found 
&QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Operational_Delegation\">here</a>&QUOT; 
The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Synchronized_Collaboration/Behavior_Slave.jpg\"/> </p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the slave role </small></p>
<p>The slave has a parameter $evaluationtime, specifying the time that the slave may need at most to evaluate the collaboration proposal. </p>
<p><img src=\"images/Synchronized_Collaboration/Paramaters_Slave.jpg\"/> </p>
<p><small>Figure 2: Realtimestatechart, showing the parameters of the slave role </small></p>
</html>"));
      end Collaboration_Slave;

      model Collaboration_Master
       parameter Real timeout;
        Modelica_StateGraph2.Step Default(nIn=3, nOut=1,
          initialStep=true)                              annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-62,64})));
        Modelica_StateGraph2.Step Waiting(
          nOut=3,
          nIn=1,
          use_activePort=true) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-62,32})));
        RealTimeCoordinationLibrary.Transition T2(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          afterTime=0.00001)               annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-78,82})));
        Modelica_StateGraph2.Step CollaborationActive(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-62,-40})));
        RealTimeCoordinationLibrary.Transition T3(
          use_after=true,
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_syncSend=false,
          afterTime=0.1)
          annotation (Placement(transformation(extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-60,-20})));
        RealTimeCoordinationLibrary.Transition T4(use_firePort=true,
          condition=stopTransmission,
          afterTime=0.00001,
          use_after=false)                 annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-80,28})));
        RealTimeCoordinationLibrary.Transition T5(
          use_after=true,
          afterTime=timeout,
          use_conditionPort=false)                                 annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-38,66})));
        RealTimeCoordinationLibrary.Message activationProposal(nIn=1) annotation (Placement(
              transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={60,60})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          activationProposalOutputPort(
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]",
          redeclare Integer integers[0] "integers[0]")
          annotation (Placement(transformation(extent={{90,50},{110,70}})));
        RealTimeCoordinationLibrary.Mailbox activationRejected(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-7,-5},{7,5}},
              rotation=0,
              origin={-99,85})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          activationRejectedInputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-110,52},{-90,72}})));
        RealTimeCoordinationLibrary.Transition T1(use_firePort=true,
          afterTime=0.1,
          use_after=false,
          use_syncSend=false,
          condition=startTransmission and not stopTransmission)
                                                              annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-62,50})));
        RealTimeCoordinationLibrary.Mailbox activationAccepted(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{10,10},{-10,-10}},
              rotation=180,
              origin={-100,-16})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          actiavtionAcceptedInputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-110,-50},{-90,-30}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          deactivationOutputPort(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{92,4},{112,24}})));
        RealTimeCoordinationLibrary.Message deactivation(nIn=1) annotation (Placement(
              transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-104,38})));
        Modelica.Blocks.Interfaces.BooleanInput startTransmission
                                                         annotation (Placement(
              transformation(
              extent={{-12,-12},{12,12}},
              rotation=270,
              origin={-70,104})));
        Modelica.Blocks.Interfaces.BooleanInput stopTransmission
                                                        annotation (Placement(
              transformation(
              extent={{-11,-11},{11,11}},
              rotation=270,
              origin={-47,103})));
        RealTimeCoordinationLibrary.TimeElements.Clock Clock(nu=1)
          annotation (Placement(transformation(extent={{10,-10},{-10,10}},
              rotation=180,
              origin={-22,40})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=timeout + 1)
          annotation (Placement(transformation(extent={{-4,22},{16,42}})));
      equation
        connect(Waiting.outPort[1], T2.inPort) annotation (Line(
            points={{-63.3333,27.4},{-70,27.4},{-70,20},{20,20},{20,86},{-78,86}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Default.inPort[1]) annotation (Line(
            points={{-78,77},{-72,77},{-72,68},{-63.3333,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, CollaborationActive.inPort[1]) annotation (Line(
            points={{-60,-25},{-60,-36},{-62,-36}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(CollaborationActive.outPort[1], T4.inPort) annotation (Line(
            points={{-62,-44.6},{-80,-44.6},{-80,24}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, Default.inPort[2]) annotation (Line(
            points={{-80,33},{-80,68},{-62,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[2], T5.inPort) annotation (Line(
            points={{-62,27.4},{-62,22},{-38,22},{-38,62}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, Default.inPort[3]) annotation (Line(
            points={{-38,71},{-38,84},{-64,84},{-64,68},{-60.6667,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(activationProposal.message_output_port, activationProposalOutputPort)
          annotation (Line(
            points={{69,59},{77.5,59},{77.5,60},{100,60}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(activationRejected.mailbox_input_port[1], activationRejectedInputPort)
          annotation (Line(
            points={{-105.3,84.5},{-110,84.5},{-110,82},{-108,82},{-108,62},{-100,
                62}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Default.outPort[1], T1.inPort) annotation (Line(
            points={{-62,59.4},{-62,54}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Waiting.inPort[1]) annotation (Line(
            points={{-62,45},{-62,36}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, activationProposal.conditionPort[1]) annotation (Line(
            points={{-57.8,50},{28,50},{28,50.4},{48,50.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(activationRejected.mailbox_output_port[1], T2.transition_input_port[1])
          annotation (Line(
            points={{-92.7,84.5},{-86,84.5},{-86,84},{-84,84},{-84,84.12},{-82.9,
                84.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(actiavtionAcceptedInputPort, activationAccepted.mailbox_input_port[1])
          annotation (Line(
            points={{-100,-40},{-114,-40},{-114,-17},{-109,-17}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(T4.firePort, deactivation.conditionPort[1]) annotation (Line(
            points={{-84.2,28},{-92,28},{-92,28.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(deactivation.message_output_port, deactivationOutputPort) annotation (
           Line(
            points={{-113,37},{-126,37},{-126,-90},{96,-90},{96,16},{98,16},{98,
                14},{102,14}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.transition_input_port[1], activationAccepted.mailbox_output_port[
          1]) annotation (Line(
            points={{-64.9,-17.88},{-84,-17.88},{-84,-17},{-91,-17}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[3], T3.inPort) annotation (Line(
            points={{-60.6667,27.4},{-60.6667,-16},{-60,-16}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, Clock.u[1]) annotation (Line(
            points={{-57.8,50},{-48,50},{-48,40},{-32.1,40}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{-11,40},{-8,40},{-8,35.6},{-5.5,35.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Waiting.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{-57.28,32},{-28,32},{-28,28.4},{-5.2,28.4}},
            color={255,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(preserveAspectRatio=true,  extent={{-100,
                  -100},{100,100}}),
                            graphics), Documentation(info="<html>
<h3> Collaboration_Master </h3>
<p>This class implements the behavior of the role Master of the Synchronized-Collaboration Pattern. The master wants to collaborate with the slave in order to fulfill a certain task. The slave receives the proposal and has to determine, wether it wants to collaborate with the master or not. The evalution result is reported to the master. If the collaboration is accepted by the slave, both (master and slave) change their state to 'CollaborationActive'. Only the master can decide to quit the collaboration.

 More information concerning the pattern can be found 
&QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Operational_Delegation\">here</a>&QUOT; 
The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Synchronized_Collaboration/Behavior_Master.jpg\"/> </p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the master role </small></p>

<p>The master has a parameter $timeout, specifying the time that the master waits at most for the report of the slave. </p>
<p><img src=\"images/Synchronized_Collaboration/Paramaters_Master.jpg\"/> </p>
<p><small>Figure 2: Realtimestatechart, showing the parameters of the master role </small></p>
</html>"));
      end Collaboration_Master;
      annotation (Documentation(info="<html>
<h3> Synchronized-Collaboration Pattern </h3>
<p> 
This pattern synchronizes the activation and deactivation of a collaboration of two systems.
The pattern assumes that a safety-critical situation appears if the system, which initialized
the activation, is in collaboration mode and the other system is not in collaboration
mode. Therefore, the pattern ensures that this situation never happens.
</p>

<h4> Context </h4>
<p> 
Two independent systems can collaborate in a safety-critical environment,
though cooperation adds more hazards.
</p>

<h4> Problem </h4>
<p> 
If one system believes they are working together, but the other one does not
know this, this may create a safety-critical situation for the first system. This must be
avoided. This problem occurs, if the communication is asynchronous or the communication
channel may be unreliable.
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that enables to activate and deactivate the
collaboration while it considers the given problems. The systems should act with different
roles: One is the master and the other is the slave. The system where the aforementioned
safety-critical situation appears must be the master. The master is the one that
initiates the activation and the deactivation. The activation should be a proposal so that
the slave can decide if the collaboration is possible and useful. The deactivation should
be a direct command, because the master can deactivate the collaboration as soon as it is
no longer useful.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the two roles master and slave and a connector. Both roles are in/out roles. Which message each role can receive and send is
shown in the message interfaces. The master may send the messages activationProposal
and deactivation to the slave. The slave may send the messages activationAccepted
and activationRejected to the master. The time parameter of the role master
is $timeout, the time parameter of role slave is $eval-time. The connector may lose
messages. The delay for sending a message is defined by the time parameters $delay-min
and $delay-max.
</p> 
<p><img src=\"images/Synchronized_Collaboration/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Synchronized-Collaboration Pattern</small></p>
<p><img src=\"images/Synchronized_Collaboration/Interfaces.jpg\" ></p>
<p><small>Figure 2: Interfaces of the Synchronized-Collaboration Pattern</small></p>
<h4> Behavior </h4>
<p>
First, the collaboration is in both roles inactive. The slave is passive and has to wait
for the master that he decides to send a proposal for activating the collaboration. If this
is the case, the slave has a certain time to answer if he accepts or rejects the proposal. If
the slave rejects, the collaboration will remain inactive. If the slave accepts, he activates
the collaboration and informs the master so that he also activates the collaboration. If
the master receives no answer in a certain time (e.g. because the answer of the slave got
lost), he cancels its waiting and may send a new proposal. Only the master can decide to
deactivate the collaboration. He informs the slave so that he also deactivates it.
</p>

<p><img src=\"images/Synchronized_Collaboration/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts of the Master and Slave</small></p>
</html>
"));
    end SynchronizedCollaboration;

    package Fail_Operational_Delegation
      model Delegation_Master
      parameter Real timeout;
        RealTimeCoordinationLibrary.Step Inactive(
          initialStep=true,
          nOut=1,
          nIn=3) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-76,64})));
        RealTimeCoordinationLibrary.Step Waiting(nIn=1, nOut=3,
          use_activePort=true)
          annotation (Placement(transformation(extent={{50,60},{42,68}})));
        RealTimeCoordinationLibrary.Transition T1(use_firePort=true,
          use_after=true,
          afterTime=0.1)                                             annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-8,80})));
        RealTimeCoordinationLibrary.Transition T2(use_after=true, afterTime=
              timeout)                            annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-14,50})));
        RealTimeCoordinationLibrary.Transition T3(use_messageReceive=true,
            numberOfMessageReceive=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-14,28})));
        RealTimeCoordinationLibrary.Transition T4(use_messageReceive=true,
            numberOfMessageReceive=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-14,10})));
        RealTimeCoordinationLibrary.Message message(nIn=1)
          annotation (Placement(transformation(extent={{58,84},{78,104}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Order_Delegation(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{88,82},{108,102}})));
        RealTimeCoordinationLibrary.Mailbox mailbox(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-80,-28},{-60,-8}})));
        RealTimeCoordinationLibrary.Mailbox mailbox1(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-78,-66},{-58,-46}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_DelegationFailed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-112,-30},{-92,-10}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Delegation_Succeded(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-112,-66},{-92,-46}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-20,108})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=timeout)
          annotation (Placement(transformation(extent={{-82,86},{-62,106}})));
      equation
        connect(Inactive.outPort[1], T1.inPort) annotation (Line(
            points={{-71.4,64},{-22,64},{-22,80},{-12,80}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Waiting.inPort[1]) annotation (Line(
            points={{-3,80},{32,80},{32,68},{46,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[1], T2.inPort) annotation (Line(
            points={{47.3333,59.4},{40,59.4},{40,50},{-10,50}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[2], T3.inPort) annotation (Line(
            points={{46,59.4},{46,28},{-10,28}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[3], T4.inPort) annotation (Line(
            points={{44.6667,59.4},{50,59.4},{50,10},{-10,10}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Inactive.inPort[1]) annotation (Line(
            points={{-19,50},{-92,50},{-92,62.6667},{-80,62.6667}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Inactive.inPort[2]) annotation (Line(
            points={{-19,28},{-94,28},{-94,64},{-80,64}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, Inactive.inPort[3]) annotation (Line(
            points={{-19,10},{-96,10},{-96,65.3333},{-80,65.3333}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(message.message_output_port, Out_Order_Delegation) annotation (Line(
            points={{77,93},{95.5,93},{95.5,92},{98,92}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, message.conditionPort[1]) annotation (Line(
            points={{-8,84.2},{24,84.2},{24,84.4},{56,84.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(In_DelegationFailed, mailbox.mailbox_input_port[1]) annotation (Line(
            points={{-102,-20},{-90.5,-20},{-90.5,-19},{-79,-19}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(In_Delegation_Succeded, mailbox1.mailbox_input_port[1]) annotation (
            Line(
            points={{-102,-56},{-89,-56},{-89,-57},{-77,-57}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mailbox.mailbox_output_port[1], T3.transition_input_port[1])
          annotation (Line(
            points={{-61,-19},{-61,36.5},{-11.88,36.5},{-11.88,32.9}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox1.mailbox_output_port[1], T4.transition_input_port[1])
          annotation (Line(
            points={{-59,-57},{20,-58},{20,14.9},{-11.88,14.9}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[1]) annotation (Line(
            points={{-8,84.2},{0,84.2},{0,108},{-9.9,108}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{-31,108},{-98,108},{-98,99.6},{-83.5,99.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Waiting.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{41.28,64},{36,64},{36,114},{-100,114},{-100,92},{-83.2,
                92.4}},
            color={255,0,255},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Documentation(info="<html>
<h3> Delegation_Master </h3>
<p>This class implements the behavior of the role Delegation_Master in the &QUOT;Fail-Operational Delegation&QUOT; pattern. The master component wants to delegate a task to the slave component, being responsible for executing the task. The slave component can report the task execuition with either &QUOT;done&QUOT; or &QUOT;fail&QUOT;, informing the master wether the delegation was successful or not. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Operational_Delegation\">here</a>&QUOT; The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Master.jpg\"/> </p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the master role </small></p>
<p>The master has a parameter &QUOT;timeout&QUOT;, specifying the time that the master waits for a reply of the slave (which can be either &QUOT;fail&QUOT; or &QUOT;done&QUOT; in case of a failure or a success resp.). </p>
<p><img src=\"images/Fail_Operational_Delegation/Parameters_Master.jpg\"/> </p>
<p><small>Figure 2: Realtimestatechart, showing the parameters of the master role </small></p>
</html>
"));
      end Delegation_Master;

      model Delegation_Slave
      parameter Real worktime;
        RealTimeCoordinationLibrary.Step Inactive(
          initialStep=true,
          nOut=1,
          nIn=2) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-66,54})));
        RealTimeCoordinationLibrary.Step Working(
          nIn=1,
          nOut=2,
          use_activePort=true)
          annotation (Placement(transformation(extent={{28,46},{36,54}})));
        RealTimeCoordinationLibrary.Transition T1(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_firePort=true,
          use_after=true,
          afterTime=0.1)     annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-20,68})));
        RealTimeCoordinationLibrary.Transition T2(use_firePort=true,
          use_after=true,
          afterTime=0.1)                                             annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-18,22})));
        RealTimeCoordinationLibrary.Transition T3(use_firePort=true,
          use_after=true,
          afterTime=0.1)                                             annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-14,-50})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Delegation_Failed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{90,-16},{110,4}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Delegation_Succeded(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{90,-88},{110,-68}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Order_Delegation(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-112,84},{-92,104}})));
        RealTimeCoordinationLibrary.Mailbox mailbox(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-74,86},{-54,106}})));
        RealTimeCoordinationLibrary.Message message(nIn=1)
          annotation (Placement(transformation(extent={{-6,-86},{14,-66}})));
        RealTimeCoordinationLibrary.Message message1(nIn=1)
          annotation (Placement(transformation(extent={{-6,-16},{14,4}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1)
          annotation (Placement(transformation(extent={{14,82},{34,102}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=worktime)
          annotation (Placement(transformation(extent={{62,76},{82,96}})));
      equation
        connect(Inactive.outPort[1], T1.inPort) annotation (Line(
            points={{-61.4,54},{-42,54},{-42,68},{-24,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Working.inPort[1]) annotation (Line(
            points={{-15,68},{10,68},{10,54},{32,54}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Working.outPort[1], T2.inPort) annotation (Line(
            points={{31,45.4},{10,45.4},{10,22},{-14,22}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Working.outPort[2], T3.inPort) annotation (Line(
            points={{33,45.4},{34,45.4},{34,-50},{-10,-50}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Inactive.inPort[1]) annotation (Line(
            points={{-23,22},{-76,22},{-76,53},{-70,53}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Inactive.inPort[2]) annotation (Line(
            points={{-19,-50},{-82,-50},{-82,55},{-70,55}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(In_Order_Delegation, mailbox.mailbox_input_port[1]) annotation (Line(
            points={{-102,94},{-87.5,94},{-87.5,95},{-73,95}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(mailbox.mailbox_output_port[1], T1.transition_input_port[1])
          annotation (Line(
            points={{-55,95},{-38.5,95},{-38.5,63.1},{-22.12,63.1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(message.conditionPort[1], T3.firePort) annotation (Line(
            points={{-8,-85.6},{-12,-85.6},{-12,-54.2},{-14,-54.2}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T2.firePort, message1.conditionPort[1]) annotation (Line(
            points={{-18,17.8},{-14,17.8},{-14,-15.6},{-8,-15.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(message1.message_output_port, Out_Delegation_Failed)
                                                                    annotation (Line(
            points={{13,-7},{56.5,-7},{56.5,-6},{100,-6}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(message.message_output_port, Out_Delegation_Succeded)
                                                                    annotation (Line(
            points={{13,-77},{54.5,-77},{54.5,-78},{100,-78}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[1]) annotation (Line(
            points={{-20,72.2},{-4,72.2},{-4,92},{13.9,92}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{35,92},{48,92},{48,89.6},{60.5,89.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Working.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{36.72,50},{48,50},{48,82.4},{60.8,82.4}},
            color={255,0,255},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Documentation(info="<html>
<h3> Delegation_Slave </h3>
<p>This class implements the behavior of the role Delegation_Slave in the &QUOT;Fail-Operational Delegation&QUOT; pattern. The master component wants to delegate a task to the slave component, being responsible for executing the task. The slave component can report the task execuition with either &QUOT;done&QUOT; or &QUOT;fail&QUOT;, informing the master wether the delegation was successful or not. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Operational_Delegation\">here</a>&QUOT; The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Slave.jpg\"/> </p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the slave role </small></p>
<p>The slave has a parameter &QUOT;worktime&QUOT;, specifying the maximum amount of time that the slave may use to execute the task. </p>
<p><img src=\"images/Fail_Operational_Delegation/Parameters_Slave.jpg\"/> </p>
<p><small>Figure 2: Realtimestatechart, showing the parameters of the slave role </small></p>
</html>"));
      end Delegation_Slave;
      annotation (Documentation(info="<html>
<h3> Fail_Operational_Delegation Pattern </h3>
<p> 
This pattern realizes a delegation of a task from a role master to a role slave. The
slave executes the task in a certain time and answers regarding success or failure. The
pattern assumes that a failure is not safety-critical, though only one delegation at a time
is allowed. 
</p>

<h4> Context </h4>
<p> 
Delegate tasks between communicating actors. 
</p>

<h4> Problem </h4>
<p> 
If the communication is asynchronous and the communication channel is
unreliable, the role that sends the task, does not know if the other role has received it.
Though, the task has to be done. 
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that enables a role master to delegate tasks
to a slave. A failed task execution does not need to be handled before a new task can be
delegated. The master delegates the task and wait for its completion. After a specified
time, the master cancels the waiting. The slave executes this task in a certain time and
reports if the task was done successfully or if the execution failed.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the two roles master and slave. Both
roles are in/out roles.Which message each role can receive and send is shown in the message interfaces. The master may send the message order to the slave. 
The slave may send the messages done and fail to the master. The time parameter of the role master is $timeout, the time parameter of role slave
is $worktime. The connector may lose messages. The delay for sending a message is
defined by the time parameters $delay-min and $delay-max.
</p> 
<p><img width = \"706\" height = \"405\" src=\"images/Fail_Operational_Delegation/Structure_Fail-OperationalDelegation.jpg\" ></p>
<p><small>Figure 1: Structure and Interfaces of the Fail-Operational-Pattern </small></p>
<h4> Behavior </h4>
<p>
The role master consists of the initial state Inactive and the state Waiting. From state
Inactive, the message order() can be send to the slave and the state changes to Waiting.
Upon the activation of Waiting the clock c0 is reset via an entry-action. An invariant using
c0 ensures that Waiting is left not later than $timeout units of time after its activation.
There are three outgoing transitions from which the one with the highest priority is
triggered by the message done and leads to Inactive. The message fail triggers the other
transition and leads also to Inactive. If there is a timeout, the state changes also back to
Inactive.
</p>
</p>
The role slave represents the counter-part to the master role and consist of the initial
state Inactive and the state Working. The message order() triggers the transition from
Inactive to Working. Upon the activation of Working the clock c0 is reset via an entryaction.
An invariant using c0 ensures that Working is left not later than $worktime units of time after its activation. 
There are two outgoing transitions. The one with the highest priority sends the message done() to the master and the state changes back to Inactive. If
an error occurs, the message fail() will be send to the master and the state changes also
back to Inactive, too.
</p>

<p><img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Master.jpg\" >
<img src=\"images/Fail_Operational_Delegation/RTS_Fail-OperationalDelegation_Slave.jpg\" ></p>
<p><small>Figure 2: Realtimestatechart, showing the behavior of the slave and master role </small></p>

</html>
"));
    end Fail_Operational_Delegation;

    package Master_Slave_Assignment
      model Peer
      parameter Integer tries;
      parameter Integer period;
      parameter Integer timeoutSlave;
      parameter Integer timeoutMasterProposed;
      parameter Integer waittime;
      Integer i(start = 0);
        RealTimeCoordinationLibrary.Step NoAssignment(
          initialStep=true,
          nOut=3,
          nIn=7) annotation (Placement(transformation(extent={{-6,68},{2,76}})));
        RealTimeCoordinationLibrary.Step MasterProposed(nIn=1, nOut=3,
          use_activePort=true)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-72,58})));
        RealTimeCoordinationLibrary.Transition T1(use_firePort=true,
          use_after=true,
          afterTime=waittime)                     annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-34,58})));
        RealTimeCoordinationLibrary.Step Master(nIn=3, nOut=4,
          use_activePort=true)
          annotation (Placement(transformation(extent={{-64,-8},{-72,0}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_firePort=true,
          use_messageReceive=true,
          numberOfMessageReceive=1,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-64,18},{-72,26}})));
        RealTimeCoordinationLibrary.Step Slave(nIn=3, nOut=4,
          use_activePort=true)                                annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={68,58})));
        RealTimeCoordinationLibrary.Transition T3(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_firePort=true,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={32,58})));
        RealTimeCoordinationLibrary.Transition T4(use_messageReceive=true,
            numberOfMessageReceive=1,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={42,84})));
        RealTimeCoordinationLibrary.Transition T6(use_firePort=true, condition=i <
              tries,
          use_messageReceive=false,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-110,32})));
        RealTimeCoordinationLibrary.Transition T7(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_firePort=true,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{114,20},{122,28}})));
        RealTimeCoordinationLibrary.Transition T8(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_firePort=true,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{94,20},{102,28}})));
        RealTimeCoordinationLibrary.Mailbox YouSlave(nIn=1, nOut=3)
          annotation (Placement(transformation(extent={{74,-80},{94,-60}})));
        RealTimeCoordinationLibrary.Mailbox alive(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{134,-82},{154,-62}})));
        RealTimeCoordinationLibrary.Mailbox alive2(nIn=1, nOut=2)
          annotation (Placement(transformation(extent={{-10,-80},{10,-60}})));
        RealTimeCoordinationLibrary.Mailbox confirm(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{-46,-80},{-26,-60}})));
        RealTimeCoordinationLibrary.Mailbox noSlave(nIn=1, nOut=1)
          annotation (Placement(transformation(extent={{46,-80},{66,-60}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_YouSlave(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{72,-130},{92,-110}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_Alive(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
                               annotation (Placement(transformation(extent={{136,-130},
                  {156,-110}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_Alive2(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-68,-130},{-48,-110}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_NoSlave(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{18,-130},{38,-110}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_Confirm(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
                               annotation (Placement(transformation(extent={{-144,-130},
                  {-124,-110}})));
        RealTimeCoordinationLibrary.Message YouSlaveMessage(nIn=1)
                                                    annotation (Placement(
              transformation(extent={{-232,86},{-252,106}})));
        RealTimeCoordinationLibrary.Message NoSlaveMessage(nIn=1)
          annotation (Placement(transformation(extent={{-232,30},{-252,50}})));
        RealTimeCoordinationLibrary.Message ConfirmMessage(nIn=2)
          annotation (Placement(transformation(extent={{216,40},{236,60}})));
        RealTimeCoordinationLibrary.Message Alive2Message(nIn=1)
          annotation (Placement(transformation(extent={{222,6},{242,26}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Cofirm(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{154,200},{174,220}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Alive2(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{50,200},{70,220}})));
        RealTimeCoordinationLibrary.Transition T9(use_messageReceive=true,
            numberOfMessageReceive=1,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)             annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-8,30})));
        RealTimeCoordinationLibrary.Transition T10(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_firePort=true,
          numberOfMessageIntegers=0,
          numberOfMessageBooleans=0,
          numberOfMessageReals=0,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-70,-40},{-78,-32}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_NoSlave(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-54,200},{-34,220}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_YouSlave(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-124,200},{-104,220}})));
        RealTimeCoordinationLibrary.Transition T11(
          condition=i < tries,
          use_after=true,
          afterTime=period,
          use_firePort=true)
          annotation (Placement(transformation(extent={{-46,-26},{-54,-18}})));
        RealTimeCoordinationLibrary.Transition T12(
          condition=i >= tries,
          use_after=true,
          afterTime=period) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-138,44})));
        RealTimeCoordinationLibrary.Transition T13(use_after=true, afterTime=
              timeoutSlave) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={42,106})));

        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=4) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={-18,134})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=timeoutSlave)
          annotation (Placement(transformation(extent={{184,110},{204,130}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual1(bound=timeoutMasterProposed)
          annotation (Placement(transformation(extent={{-194,58},{-174,78}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual2(bound=period)
          annotation (Placement(transformation(extent={{-168,-58},{-148,-38}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock1(nu=3) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={126,140})));
        RealTimeCoordinationLibrary.Message AliveMessage(nIn=1)
          annotation (Placement(transformation(extent={{-224,-86},{-244,-66}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Alive(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-190,200},{-170,220}})));
        RealTimeCoordinationLibrary.Transition T5(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-58,82})));
        RealTimeCoordinationLibrary.Transition T14(use_after=true, afterTime=
              timeoutMasterProposed) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-56,100})));
      algorithm
      when pre(T2.fire) or pre(T10.fire) then
        i := 0;
      end when;
      when pre(T11.fire) then
        i:= i+1;
      end when;

      equation
        connect(NoAssignment.outPort[1], T1.inPort) annotation (Line(
            points={{-3.33333,67.4},{-16,67.4},{-16,58},{-30,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, MasterProposed.inPort[1]) annotation (Line(
            points={{-39,58},{-68,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, YouSlaveMessage.conditionPort[1]) annotation (Line(
            points={{-34,53.8},{-34,42},{-96,42},{-96,86.4},{-230,86.4}},
            color={255,0,255},
            smooth=Smooth.None));
       connect(T1.firePort, clock.u[3])
         annotation (Line(
            points={{-34,53.8},{-24,53.8},{-24,123.9},{-17.15,123.9}},
            color={255,0,255},
            smooth=Smooth.None));
       connect(T2.firePort, clock.u[4]) annotation (Line(
            points={{-72.2,22},{-258,22},{-258,176},{2,176},{2,123.9},{-15.45,
                123.9}},
            color={255,0,255},
            smooth=Smooth.None));

        connect(NoAssignment.outPort[2], T3.inPort) annotation (Line(
            points={{-2,67.4},{14,67.4},{14,58},{28,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Slave.inPort[1]) annotation (Line(
            points={{37,58},{44.5,58},{44.5,56.6667},{64,56.6667}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.outPort[1], T4.inPort) annotation (Line(
            points={{72.6,56.5},{84,56.5},{84,84},{46,84}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, NoAssignment.inPort[1]) annotation (Line(
            points={{37,84},{-3.71429,84},{-3.71429,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Master.outPort[1], T6.inPort) annotation (Line(
            points={{-66.5,-8.6},{-66,-16},{-110,-16},{-110,28}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T6.outPort, NoAssignment.inPort[2]) annotation (Line(
            points={{-110,37},{-110,92},{-2,92},{-2,76},{-3.14286,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(In_Confirm, confirm.mailbox_input_port[1])
          annotation (Line(
            points={{-134,-120},{-134,-71},{-45,-71}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(In_NoSlave, noSlave.mailbox_input_port[1])
          annotation (Line(
            points={{28,-120},{48,-120},{46,-72},{47,-71}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(In_Alive2, alive2.mailbox_input_port[1])            annotation (
           Line(
            points={{-58,-120},{-14,-120},{-14,-74},{-9,-74},{-9,-71}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(In_Alive, alive.mailbox_input_port[1])             annotation (
            Line(
            points={{146,-120},{132,-120},{132,-73},{135,-73}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(In_YouSlave, YouSlave.mailbox_input_port[1])
          annotation (Line(
            points={{82,-120},{72,-120},{72,-71},{75,-71}},
            color={0,0,255},
            smooth=Smooth.None));
        connect(Slave.outPort[2], T8.inPort) annotation (Line(
            points={{72.6,57.5},{98,57.5},{98,28}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.outPort[3], T7.inPort) annotation (Line(
            points={{72.6,58.5},{118,58.5},{118,28}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T8.outPort, Slave.inPort[2]) annotation (Line(
            points={{98,19},{62,19},{62,58},{64,58}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T7.outPort, Slave.inPort[3]) annotation (Line(
            points={{118,19},{118,8},{54,8},{54,59.3333},{64,59.3333}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YouSlave.mailbox_output_port[1], T8.transition_input_port[1])
          annotation (Line(
            points={{93,-71.6667},{93,-31.5},{93.1,-31.5},{93.1,26.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(alive.mailbox_output_port[1], T7.transition_input_port[1])
          annotation (Line(
            points={{153,-73},{154,-68},{154,-48},{110,-48},{110,26.12},{113.1,26.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T6.firePort, NoSlaveMessage.conditionPort[1]) annotation (Line(
            points={{-114.2,32},{-134,32},{-134,30.4},{-230,30.4}},
            color={255,0,255},
            smooth=Smooth.None));

        connect(T8.firePort, ConfirmMessage.conditionPort[1]) annotation (Line(
            points={{102.2,24},{108,24},{108,39.4},{214,39.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T7.firePort, Alive2Message.conditionPort[1]) annotation (Line(
            points={{122.2,24},{134,24},{134,6.4},{220,6.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(ConfirmMessage.message_output_port, Out_Cofirm)
          annotation (Line(
            points={{235,49},{272,48},{272,210},{164,210}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Alive2Message.message_output_port, Out_Alive2)
          annotation (Line(
            points={{241,15},{258,18},{258,188},{60,188},{60,210}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(noSlave.mailbox_output_port[1], T4.transition_input_port[1])
          annotation (Line(
            points={{65,-71},{65,8.5},{44.12,8.5},{44.12,88.9}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(NoAssignment.outPort[3], T9.inPort) annotation (Line(
            points={{-0.666667,67.4},{-8,67.4},{-8,34}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T9.outPort, NoAssignment.inPort[3]) annotation (Line(
            points={{-8,25},{-8,8},{-130,8},{-130,108},{-2,108},{-2,76},{
                -2.57143,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(alive2.mailbox_output_port[1], T9.transition_input_port[1])
          annotation (Line(
            points={{9,-71.5},{9,-24},{-12.9,-24},{-12.9,32.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Master.outPort[2], T10.inPort) annotation (Line(
            points={{-67.5,-8.6},{-74,-8.6},{-74,-32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T10.outPort, Master.inPort[1]) annotation (Line(
            points={{-74,-41},{-92,-41},{-92,2.22045e-016},{-66.6667,
                2.22045e-016}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(alive2.mailbox_output_port[2], T10.transition_input_port[1])
          annotation (Line(
            points={{9,-70.5},{44.5,-70.5},{44.5,-33.88},{-69.1,-33.88}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(NoSlaveMessage.message_output_port, Out_NoSlave)
          annotation (Line(
            points={{-251,39},{-296,39},{-296,196},{-44,196},{-44,210}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YouSlaveMessage.message_output_port, Out_YouSlave)
          annotation (Line(
            points={{-251,95},{-286,95},{-286,188},{-114,188},{-114,210}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(YouSlave.mailbox_output_port[2], T3.transition_input_port[1])
          annotation (Line(
            points={{93,-71},{100,-70},{100,-10},{29.88,-10},{29.88,53.1}},
            color={0,0,0},
            smooth=Smooth.None));

        connect(Master.outPort[3], T11.inPort) annotation (Line(
            points={{-68.5,-8.6},{-62,-8.6},{-62,-18},{-50,-18}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T11.outPort, Master.inPort[2]) annotation (Line(
            points={{-50,-27},{-50,-32},{-34,-32},{-34,4},{-68,4},{-68,
                2.22045e-016}},
            color={0,0,0},
            smooth=Smooth.None));

        connect(Master.outPort[4], T12.inPort) annotation (Line(
            points={{-69.5,-8.6},{-68,-26},{-138,-26},{-138,40}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T12.outPort, NoAssignment.inPort[4]) annotation (Line(
            points={{-138,49},{-138,116},{0,116},{0,76},{-2,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Slave.outPort[4], T13.inPort) annotation (Line(
            points={{72.6,59.5},{92,59.5},{92,106},{46,106}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T13.outPort, NoAssignment.inPort[5]) annotation (Line(
            points={{37,106},{2,106},{2,76},{-1.42857,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual1.clockValue) annotation (Line(
            points={{-18,145},{-224,145},{-224,71.6},{-195.5,71.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(timeInvariantLessOrEqual2.clockValue, clock.y) annotation (Line(
            points={{-169.5,-44.4},{-170,-44},{-224,-44},{-224,146},{-18,146},{-18,145}},
            color={0,0,127},
            smooth=Smooth.None));

        connect(T10.firePort, clock.u[1]) annotation (Line(
            points={{-78.2,-36},{-216,-36},{-216,123.9},{-20.55,123.9}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T11.firePort, clock.u[2]) annotation (Line(
            points={{-54.2,-22},{-214,-22},{-214,123.9},{-18.85,123.9}},
            color={255,0,255},
            smooth=Smooth.None));

        connect(clock1.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{126,151},{142,151},{142,123.6},{182.5,123.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T3.firePort, clock1.u[1]) annotation (Line(
            points={{32,62.2},{32,129.9},{123.733,129.9}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T8.firePort, clock1.u[2]) annotation (Line(
            points={{102.2,24},{108,24},{108,129.9},{126,129.9}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T7.firePort, clock1.u[3]) annotation (Line(
            points={{122.2,24},{130,24},{130,129.9},{128.267,129.9}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Slave.activePort, timeInvariantLessOrEqual.conditionPort) annotation (
           Line(
            points={{68,62.72},{150,62.72},{150,116.4},{182.8,116.4}},
            color={255,0,255},
            smooth=Smooth.None));

        connect(Master.activePort, timeInvariantLessOrEqual2.conditionPort)
          annotation (Line(
            points={{-72.72,-4},{-186,-4},{-186,-51.6},{-169.2,-51.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(AliveMessage.message_output_port, Out_Alive)
                                                        annotation (Line(
            points={{-243,-77},{-309.5,-77},{-309.5,210},{-180,210}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(AliveMessage.conditionPort[1], T11.firePort)
                                                        annotation (Line(
            points={{-222,-85.6},{-64,-85.6},{-64,-22},{-54.2,-22}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(MasterProposed.outPort[1], T2.inPort) annotation (Line(
            points={{-76.6,59.3333},{-72,59.3333},{-72,26},{-68,26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Master.inPort[3]) annotation (Line(
            points={{-68,17},{-68,2.22045e-016},{-69.3333,2.22045e-016}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MasterProposed.outPort[2], T5.inPort) annotation (Line(
            points={{-76.6,58},{-86,58},{-86,82},{-62,82}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, NoAssignment.inPort[6]) annotation (Line(
            points={{-53,82},{-28,82},{-28,76},{-0.857143,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(confirm.mailbox_output_port[1], T2.transition_input_port[1])
          annotation (Line(
            points={{-27,-71},{-27,24},{-64,24},{-63.1,24.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(timeInvariantLessOrEqual1.conditionPort, MasterProposed.activePort)
          annotation (Line(
            points={{-195.2,64.4},{-133.6,64.4},{-133.6,53.28},{-72,53.28}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(MasterProposed.outPort[3], T14.inPort) annotation (Line(
            points={{-76.6,56.6667},{-92,56.6667},{-92,100},{-60,100}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T14.outPort, NoAssignment.inPort[7]) annotation (Line(
            points={{-51,100},{-8,100},{-8,76},{-0.285714,76}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.transition_input_port[1], YouSlave.mailbox_output_port[3])
          annotation (Line(
            points={{-60.12,77.1},{-60,-98},{94,-98},{94,-70.3333},{93,-70.3333}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.firePort, ConfirmMessage.conditionPort[2]) annotation (Line(
            points={{32,62.2},{42,62.2},{42,41.4},{214,41.4}},
            color={255,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(extent={{-320,-120},{280,220}},
                preserveAspectRatio=true), graphics), Icon(coordinateSystem(
                extent={{-320,-120},{280,220}})),
          Documentation(info="<html>
<h3> Master_Slave_Assignment_Peer </h3>
<p>This class implements the behavior of the role Peer in the &QUOT;Master-Slave-Assignment&QUOT; pattern. The peers should dynamically assign a master or a slave role to each other. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Master_Slave_Assignment\">here</a>&QUOT; The corresponding Realtime Statechart is shown in the following figure: </p>
<p><img src=\"images/Master_Slave_Assignment/MasterSlaveBehavior.jpg\"/> </p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the peer role </small></p>
<p>The peer has the following parameters (The paramter names may differ in the Realtimestatechart and in the Modelica Model. So if there exist two names for the same parameter, both are listed as \"name in Realtimestatechart\"/\"name in Modelica\":
 <ul>

<li> $tries: </li>
	<ul> Specifies the number of times that a peer that wants to act as a master tries to establish this assignment, i. e. the number of times that the master peer sends an alive() message to the slave. If there is no response after $tries times and the master is already \"period\" times in the master state, then the current assignment is cancelled and the master and slave peers go to there initial states. </ul>
<li>$waittime:</li>
	<ul>The time a peer waits until it initiates a Master-Slave Assignment with itself as master.</ul>
<li>$timeout2/$timeoutSlave:</li> 
	<ul>Specifies the time that the slave peer stays at most in the \"slave\" state. If the slave peer  has not received any youSlave() or alive() message from the master peer, it changes after $timeout2 time units its state to the \"NoAssignment\" state. </ul>
<li>$timeout1/$timeoutMasterProposed:</li> 
	<ul>
		Specifies the time the peer that tries to be the master peer waits for a reply of the slave peer. If there is no reply after $timeout1 time units, the assignment was not successfull and the peer changes its state to the \"NoAssignment\" state.
	</ul>
<li>$period:</li> 
	<ul>
		 A peer must leave the Master state after $period time units. This can be done either by sending an alive() message to the slave, which will keep the current assignment (only possible if the number of alive() messages is smaller than $tries), or by sending a noSlave() message, which cancels the current assignment(always possible). Furthermore, the state is left if there are no more tries for sending an alive() message left.
	</ul>
</ul>

</p>
<p><img src=\"images/Master_Slave_Assignment/ParametersPeer.jpg\"/> </p>
<p><small>Figure 2: parameters of the peer </small></p>
</html>
"));
      end Peer;
      annotation (Documentation(info="<html>
<h3> Master_Slave_Assignment </h3>
<p> 
This pattern is used if two systems can dynamically change between one state in which
they have equal rights and another state in which one is the master and the other one is
the slave.
</p>

<h4> Context </h4>
<p> 
Equal, independent systems want to cooperate.
</p>

<h4> Problem </h4>
<p> 
A system wants to cooperate with another system. During this time, they depend
on each other and a safety-critical situation occurs, if they remain self-determined.
Furthermore, the communication channel may be unreliable and the systems and the
communication channel may fall out fully.
</p>

<h4> Solution </h4>
<p>
Define a pattern so that two equal roles can dynamically change into a state
where one is the master that may delegate tasks or proposals to the other role (the slave).
If the master or the communication channel falls out, the slave will recognize this, because
master and slave exchange alive-messages with each other, and will leave his slave
position.
</p>


<h4> Structure </h4>
<p> 
There are two peer roles, because they have the identical behavior. Each role can become the master or slave at run-time. Both roles are in/out
roles and have the same message interfaces for sending and receiving.
Thus, both peers may send the messages youSlave, confirm, noSlave, alive, and alive2 to
the other peer.
The time parameters of a peer are $timeout1, $timeout2, and $period. The connector
may lose messages. The delay for sending a message is defined by the time parameters
$delay-min and $delay-max.
</p> 
<p><img src=\"images/Master_Slave_Assignment/MasterSlavePattern.jpg\" ></p>
<p><small>Figure 1: Structure of the Master-Slave-Assignment Pattern </small></p>
<p><img src=\"images/Master_Slave_Assignment/MasterSlaveInterface.jpg\"></p>
<p><small>Figure 2: Interfaces of the Master-Slave-Assignment Pattern </small></p>

<h4> Behavior </h4>
<p>
Both peers are in the initial state NoAssignment. A peer may send the message
youSlave if it had rested in this state at least $waittime time units. After sending this
messages the state changes to MasterProposed. If the other peer receives this message,
it confirms this using the message confirm and changes to state Slave. If both peers had
send the message youSlave, they both return to state NoAssignment. If messages are
lost, they return from state MasterProposed after $timeout1 time units.
</p>
</p>
If a peer confirms the proposal and the initiator receives it, it changes to state Master.
The state Master must be leaved after $period time units either with (i) sending an alive
message to the slave, (ii) consuming an alive2 message that was send from the slave,
(iii) breaking the assignment by sending the noSlave message to the slave, or (iv) with a
timeout that occurs if no alive2 message was received for a certain number of times (this
is defined by the variable $tries).
</p>
<p>
A slave (i) can receive an alive message from the master and has to answer with an
alive2 message, (ii) can receive an youSlave message and has to answer with a confirm
message, (iii) has to leave the assignment if it receives the noSlave message and has to
change to state NoAssignment, or (iv) has to change to state NoAssignment, because no
message was received after $timeout1 time units. This state change is allowed, because
after that time, the slave can assume that the master or the communication channel has
fallen out.
</p>
<p><img src=\"images/Master_Slave_Assignment/MasterSlaveBehavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatechart, showing the behavior of the peer role </small></p>
</html>
"));
    end Master_Slave_Assignment;

    package Producer_Consumer
      model Producer
        RealTimeCoordinationLibrary.Transition T1(
          use_firePort=true,
          use_messageReceive=false,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-48,26},{-56,34}})));
        RealTimeCoordinationLibrary.Step Producing(
          initialStep=true,
          nOut=1,
          nIn=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-30,68})));
        RealTimeCoordinationLibrary.Step ProducingBlocked(nIn=1, nOut=1)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-30,-6})));
        RealTimeCoordinationLibrary.Transition T2(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={4,30})));
        RealTimeCoordinationLibrary.Mailbox Consumed(nOut=1, nIn=1) annotation (
           Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={34,30})));
        RealTimeCoordinationLibrary.Message Produced_Message(nIn=1) annotation (
           Placement(transformation(
              extent={{-10,10},{10,-10}},
              rotation=180,
              origin={-98,30})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Produced(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-150,20},{-130,40}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Consumed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{62,20},{82,40}})));
      equation
        connect(Producing.outPort[1], T1.inPort) annotation (Line(
            points={{-34.6,68},{-52,68},{-52,34}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, ProducingBlocked.inPort[1]) annotation (Line(
            points={{-52,25},{-52,-6},{-34,-6}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(ProducingBlocked.outPort[1], T2.inPort) annotation (Line(
            points={{-25.4,-6},{4,-6},{4,26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Producing.inPort[1]) annotation (Line(
            points={{4,35},{4,68},{-26,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.transition_input_port[1], Consumed.mailbox_output_port[1])
          annotation (Line(
            points={{8.9,27.88},{8.45,27.88},{8.45,29},{25,29}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Produced_Message.conditionPort[1], T1.firePort) annotation (
            Line(
            points={{-86,20.4},{-74,20.4},{-74,30},{-56.2,30}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Consumed.mailbox_input_port[1], In_Consumed) annotation (Line(
            points={{43,29},{72,30}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Produced_Message.message_output_port, Out_Produced) annotation (
           Line(
            points={{-107,29},{-141.5,29},{-141.5,30},{-140,30}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(extent={{-140,-100},{120,100}},
                preserveAspectRatio=true), graphics),
          Icon(coordinateSystem(extent={{-140,-100},{120,100}})),
          Documentation(info="<html>
<h3> Producer </h3>
This class implements the behavior of the role producer of the Producer-Consumer-Pattern. The producer has reserved the critical section at first. By sending the produced() message it leaves the critical section and the consumer will reserve it. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Producer_Consumer\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The producer has no parameters. </p>
<p><img src=\"images/Producer-Consumer/Producer-Behavior.jpg\" ></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the producer role </small></p>
</html>"));
      end Producer;

      model Consumer
        RealTimeCoordinationLibrary.Step ConsumingBlocked(
          nOut=1,
          nIn=1,
          initialStep=true) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-6,70})));
        RealTimeCoordinationLibrary.Step Consuming(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-8,4})));
        RealTimeCoordinationLibrary.Transition T1(
          use_after=true,
          afterTime=1e-8,
          use_messageReceive=true,
          numberOfMessageReceive=1)
          annotation (Placement(transformation(extent={{-46,34},{-38,42}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_after=true,
          afterTime=1e-8,
          use_firePort=true) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={42,36})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Consumed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{108,24},{128,44}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Produced(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-112,28},{-92,48}})));
        RealTimeCoordinationLibrary.Mailbox Produced(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{-82,32},{-62,52}})));
        RealTimeCoordinationLibrary.Message ConsumedMessage(nIn=1)
          annotation (Placement(transformation(extent={{72,24},{92,44}})));
      equation
        connect(ConsumingBlocked.outPort[1], T1.inPort) annotation (Line(
            points={{-10.6,70},{-42,70},{-42,42}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Consuming.inPort[1]) annotation (Line(
            points={{-42,33},{-42,4},{-12,4}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Consuming.outPort[1], T2.inPort) annotation (Line(
            points={{-3.4,4},{42,4},{42,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, ConsumingBlocked.inPort[1]) annotation (Line(
            points={{42,41},{42,70},{-2,70}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Produced.mailbox_output_port[1], T1.transition_input_port[1])
          annotation (Line(
            points={{-63,41},{-54.5,41},{-54.5,40.12},{-46.9,40.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Produced.mailbox_input_port[1], In_Produced) annotation (Line(
            points={{-81,41},{-91.5,41},{-91.5,38},{-102,38}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.firePort, ConsumedMessage.conditionPort[1]) annotation (Line(
            points={{46.2,36},{60,36},{60,24.4},{70,24.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(ConsumedMessage.message_output_port, Out_Consumed) annotation (
            Line(
            points={{91,33},{103.5,33},{103.5,34},{118,34}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(extent={{-100,-100},{120,100}},
                preserveAspectRatio=true), graphics),
          Icon(coordinateSystem(extent={{-100,-100},{120,100}})),
          Documentation(info="<html>
<h3> Consumer </h3>
This class implements the behavior of the role consumer of the Producer-Consumer-Pattern. The producer has reserved the critical section at first. By sending the produced() message it leaves the critical section and the consumer will reserve it. The consumer can leave the critical section by sending the consumed() message, which enables the producer to reserve it. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Producer_Consumer\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The consumer has no parameters. </p>
<p><img src=\"images/Producer-Consumer/Consumer-Behavior.jpg\" ></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the consumer role </small></p>
</html>"));
      end Consumer;
      annotation (Documentation(info="<html>
<H3> Producer-Consumer</H3>
<p> 
This pattern is used when two roles shall access a safety-critical section alternately,
e.g., one produces goods, the other consumes them. The pattern guarantees that only one
is in the critical section at the same time.
</p>

<h4> Context </h4>
<p> 
Working in a safety-critical section.
</p>

<h4> Problem </h4>
<p> 
There exists a section where information or goods can be stored. The size of
the section is 1. Furthermore, there exists two different systems. The one produces the
information/good, the other consumes/clears it. The consumer may not act, if nothing is
produced. Therefore, consuming and producing must alternate.
Moreover, you have to satisfy that only one system / component is in the critical section
at the same time. Otherwise, a safety-critical situation. Therefore, the participants must
be asure that nobody is in the critical section, when they enter it.
</p>

<h4> Solution </h4>
<p>
Define a coordination protocol that specifies a bidirectional alternating lock.
A producer produces the goods and informs the consumer as soon as the producing is
finished and blocks is activities as long as the consumer does not send that it consumed
the information/good.
</p>


<h4> Structure </h4>
<p> 
The pattern consist of two roles producer and consumer. Both roles are in/out-roles.
Which message each role can receive and send is shown in the message interfaces. The producer may send the message produced to the consumer. The slave
may send the message consumed to the producer. The connector must not lose messages. The delay for sending a message is defined by
the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Producer-Consumer/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Producer-Consumer Pattern</small></p>
<p><img src=\"images/Producer-Consumer/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Producer-Consumer Pattern</small></p>

<h4> Behavior </h4>
<p>
The role producer has the initial state Producing and has reserved the critical section.
If he leaves the critical section, with the message produced the consumer reaches the
state Consuming and no other resources can be produced. If the role consumer receives
the message produced, it knows the producer has leaved the critical section and it can
enter it by itself. If the producer receives the messages consumed, the consumer has
leaved the critical section and the producer can enter it again.
</p>
<p><img src=\"images/Producer-Consumer/Producer-Consumer-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the producer and consumer role </small></p>
</html>"));
    end Producer_Consumer;

    package Block_Execution
      model Guard
        RealTimeCoordinationLibrary.Step Blocked(
          initialStep=true,
          nOut=1,
          nIn=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-20,64})));
        RealTimeCoordinationLibrary.Step Free(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-12,12})));
        RealTimeCoordinationLibrary.Transition T1(
          use_firePort=true,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-62,34},{-70,42}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_firePort=true,
          use_after=true,
          afterTime=1e-8) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={42,36})));
        RealTimeCoordinationLibrary.Message Free_Message(nIn=1)
          annotation (Placement(transformation(extent={{-92,34},{-112,54}})));
        RealTimeCoordinationLibrary.Message Blocked_Message(nIn=1)
          annotation (Placement(transformation(extent={{64,30},{84,50}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Free(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-148,34},{-128,54}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Blocked(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{114,26},{134,46}})));
      equation
        connect(Blocked.outPort[1], T1.inPort) annotation (Line(
            points={{-24.6,64},{-66,64},{-66,42}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Free.inPort[1]) annotation (Line(
            points={{-66,33},{-66,12},{-16,12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Free.outPort[1], T2.inPort) annotation (Line(
            points={{-7.4,12},{42,12},{42,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Blocked.inPort[1], T2.outPort) annotation (Line(
            points={{-16,64},{42,64},{42,41}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, Free_Message.conditionPort[1]) annotation (Line(
            points={{-70.2,38},{-86,38},{-86,34.4},{-90,34.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Free_Message.message_output_port, Out_Free) annotation (Line(
            points={{-111,43},{-139.5,43},{-139.5,44},{-138,44}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.firePort, Blocked_Message.conditionPort[1]) annotation (Line(
            points={{46.2,36},{58,36},{58,30.4},{62,30.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Blocked_Message.message_output_port, Out_Blocked) annotation (
            Line(
            points={{83,39},{106.5,39},{106.5,36},{124,36}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(extent={{-140,-100},{120,100}},
                preserveAspectRatio=true), graphics),
          Icon(coordinateSystem(extent={{-140,-100},{120,100}})),
          Documentation(info="<html>
<h3> Producer </h3>
This class implements the behavior of the role guard of the Block-Execution-Pattern. The guard controls the exection of a certain task, which is done by a different component, which implements the executor role. It can start and stop the exectution by sending the free() and the block() message to the executor. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Block_Execution\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The guard has no parameters. </p>
<p><img src=\"images/Block-Execution/Guard-Behavior.jpg\" ></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the producer role </small></p>
</html>"));
      end Guard;

      model Executor
        RealTimeCoordinationLibrary.Step Blocked(
          initialStep=true,
          nOut=1,
          nIn=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-2,74})));
        RealTimeCoordinationLibrary.Step Free(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-6,32})));
        RealTimeCoordinationLibrary.Mailbox Mailbox_Free(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{-96,52},{-76,72}})));
        RealTimeCoordinationLibrary.Mailbox Mailbox_Blocked(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{90,48},{70,68}})));
        RealTimeCoordinationLibrary.Transition T1(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-58,54},{-50,62}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_firePort=false,
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={42,58})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Free(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-130,52},{-110,72}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Blocked(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{110,46},{130,66}})));
      equation
        connect(Blocked.outPort[1], T1.inPort) annotation (Line(
            points={{-6.6,74},{-54,74},{-54,62}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Free.inPort[1]) annotation (Line(
            points={{-54,53},{-54,32},{-10,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Free.outPort[1], T2.inPort) annotation (Line(
            points={{-1.4,32},{42,32},{42,54}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Mailbox_Free.mailbox_output_port[1], T1.transition_input_port[1])
          annotation (Line(
            points={{-77,61},{-73.5,61},{-73.5,60.12},{-58.9,60.12}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.transition_input_port[1], Mailbox_Blocked.mailbox_output_port[
          1]) annotation (Line(
            points={{46.9,55.88},{68.45,55.88},{68.45,57},{71,57}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Mailbox_Free.mailbox_input_port[1], In_Free) annotation (Line(
            points={{-95,61},{-108.5,61},{-108.5,62},{-120,62}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Mailbox_Blocked.mailbox_input_port[1], In_Blocked) annotation (
            Line(
            points={{89,57},{104.5,57},{104.5,56},{120,56}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Blocked.inPort[1]) annotation (Line(
            points={{42,63},{42,74},{2,74}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(extent={{-120,-100},{120,100}},
                preserveAspectRatio=true), graphics),
          Icon(coordinateSystem(extent={{-120,-100},{120,100}})),
          Documentation(info="<html>
<h3> Executor </h3>
This class implements the behavior of the role executor of the Block-Execution-Pattern. The executor is responsible for executing a certain task. The execution is controlled by a component which implements the gurad role. The guard can start and stop the exectution by sending the free() and the block() message to the executor. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Block_Execution\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The executor has no parameters. </p>
<p><img src=\"images/Block-Execution/Executor-Behavior.jpg\" ></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the executor role </small></p>
</html>"));
      end Executor;
      annotation (Documentation(info="<html>
<H3> Block_Execution</H3>
<p> 
This pattern coordinates a blocking of actions, e.g., due to safety-critical reasons. Also known as Start-Stop, and
Guard.
</p>

<h4> Context </h4>
<p> 
A system operates under changing conditions.
</p>

<h4> Problem </h4>
<p> 
A system executes a certain task that must be stopped, e.g. if a safety-critical
station appears or if it is not necessary that it operates.
</p>

<h4> Solution </h4>
<p>
Respect the principle to separate concerns and therefore define a coordination
protocol between a guard and an executor. Enable the guard to monitor the environment
resp. the current situation. Only if acting is safe resp. necessary, the guards grants
permission to the executor to act. At first, the permission denied, because the guard first
has to explore the situation.
</p>


<h4> Structure </h4>
<p> 
The pattern consists of the roles guard and executor. The
role guard is an out-role; the role executor is an in-role.
Which message each role can receive and send is shown in the message interfaces. The guard may send the messages free and block to the executor.
The connector must not lose messages. The delay for sending a message is defined by
the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Block-Execution/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Block-Execution Pattern</small></p>
<p><img src=\"images/Block-Execution/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Block-Execution Pattern</small></p>

<h4> Behavior </h4>
<p>
The role guard consists of the initial state Blocked and the state Free. The guard sends
the message free to the executor as soon as the executor may work and changes to state
Free. As soon as the guard detects that the executor must stop his work, it sends the
message block and changes to state Blocked.
The role executor consists of the initial state Blocked and the state Free. When the
executor receives the message free, it change to state Free and starts its work. When the
executor is in state Free and receives the message block, it changes to state Block and
stops its work.
</p>
<p><img src=\"images/Block-Execution/Block-Execution-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the guard and executor role </small></p>
</html>"));
    end Block_Execution;

    package Limit_Observation
      model Provider
      parameter Integer worktime;
        RealTimeCoordinationLibrary.Step MeasuringLimit(
          initialStep=true,
          nOut=2,
          use_activePort=true)
          annotation (Placement(transformation(extent={{-30,122},{-22,130}})));
        RealTimeCoordinationLibrary.Step LimiRedeemed(nOut=1, nIn=2)
          annotation (Placement(transformation(extent={{24,24},{32,32}})));
        RealTimeCoordinationLibrary.Step LimitViolated(nIn=2, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-74,32})));
        RealTimeCoordinationLibrary.Transition T1(
          use_firePort=true,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-86,54},{-94,62}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_after=true,
          afterTime=1e-8,
          use_firePort=true) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-30,32})));
        RealTimeCoordinationLibrary.Transition T3(
          use_after=true,
          afterTime=1e-8,
          use_firePort=true)
          annotation (Placement(transformation(extent={{24,48},{32,56}})));
        RealTimeCoordinationLibrary.Transition T4(
          use_after=true,
          afterTime=1e-8,
          use_firePort=true) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-30,2})));
        RealTimeCoordinationLibrary.Message LimitViolated_Message(nIn=2)
          annotation (Placement(transformation(extent={{-124,62},{-144,82}})));
        RealTimeCoordinationLibrary.Message Limit_Redeemed_Message(nIn=2)
          annotation (Placement(transformation(extent={{66,62},{86,82}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_LimitRedeemed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{110,60},{130,80}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Limit_Violated(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-172,64},{-152,84}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1)
          annotation (Placement(transformation(extent={{8,144},{28,164}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=worktime)
          annotation (Placement(transformation(extent={{52,136},{72,156}})));
      equation
        connect(LimiRedeemed.outPort[1], T4.inPort) annotation (Line(
            points={{28,23.4},{28,2},{-26,2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, LimiRedeemed.inPort[1]) annotation (Line(
            points={{-25,32},{27,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, LimiRedeemed.inPort[2]) annotation (Line(
            points={{28,47},{28,32},{29,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, LimitViolated.inPort[1]) annotation (Line(
            points={{-90,53},{-90,42},{-78,42},{-78,31}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(LimitViolated.outPort[1], T2.inPort) annotation (Line(
            points={{-69.4,32},{-34,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, LimitViolated.inPort[2]) annotation (Line(
            points={{-35,2},{-96,2},{-96,33},{-78,33}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(LimitViolated_Message.message_output_port, Out_Limit_Violated)
          annotation (Line(
            points={{-143,71},{-155.5,71},{-155.5,74},{-162,74}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Limit_Redeemed_Message.message_output_port, Out_LimitRedeemed)
          annotation (Line(
            points={{85,71},{106.5,71},{106.5,70},{120,70}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.firePort, Limit_Redeemed_Message.conditionPort[1]) annotation (
            Line(
            points={{32.2,52},{50,52},{50,61.4},{64,61.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T4.firePort, LimitViolated_Message.conditionPort[1]) annotation (Line(
            points={{-30,-2.2},{-116,-2.2},{-116,61.4},{-122,61.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T2.firePort, Limit_Redeemed_Message.conditionPort[2]) annotation (
            Line(
            points={{-30,36.2},{-30,63.4},{64,63.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T1.firePort, LimitViolated_Message.conditionPort[2]) annotation (Line(
            points={{-94.2,58},{-108,58},{-108,63.4},{-122,63.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(MeasuringLimit.outPort[1], T1.inPort) annotation (Line(
            points={{-27,121.4},{-30,118},{-38,118},{-38,74},{-90,74},{-90,62}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MeasuringLimit.outPort[2], T3.inPort) annotation (Line(
            points={{-25,121.4},{-22,118},{-22,74},{28,74},{28,56}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MeasuringLimit.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{-21.28,126},{14,126},{14,142.4},{50.8,142.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(MeasuringLimit.activePort, clock.u[1]) annotation (Line(
            points={{-21.28,126},{-6,126},{-6,154},{7.9,154}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{29,154},{40,154},{40,149.6},{50.5,149.6}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (
          Documentation(info="<html>
<h3> Provider </h3>
This class implements the role Provider of the Limit-Observation-Pattern. The provider is responsible for collecting numerical information. The observer wants to know, wether this information violated a certain limit or not. Therefore the provider sends the limitViolated() message to the observer, if the information violates a certain limit, and it sends the limitRedeemed() message to the observer, if the violation has stopped.More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Limit_Observation\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The provider has the parameter $worktime, which specifies the number of time units, that the initial measurement of the numerical information shuold need at most. </p>
<p><img src=\"images/Limit-Observation/parameters_provider.jpg\"></p>
<p><small>Figure 1: Parameters of the provider </small></p>
<p><img src=\"images/Limit-Observation/Provider-Behavior.jpg\"></p>
<p><small>Figure 2: Realtimestatechart, showing the behavior of the provider role </small></p>
</html>"),Diagram(coordinateSystem(extent={{-160,-20},{120,160}}, preserveAspectRatio=true),
                        graphics),
          Icon(coordinateSystem(extent={{-160,-20},{120,160}})));
      end Provider;

      model Observer
        RealTimeCoordinationLibrary.Step Waiting(initialStep=true, nOut=2)
          annotation (Placement(transformation(extent={{-10,56},{-2,64}})));
        RealTimeCoordinationLibrary.Step LimiRedeemed(nOut=1, nIn=2)
          annotation (Placement(transformation(extent={{44,-6},{52,2}})));
        RealTimeCoordinationLibrary.Step LimitViolated(nIn=2, nOut=1)
          annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-54,2})));
        RealTimeCoordinationLibrary.Transition T1(
          use_after=true,
          afterTime=1e-8,
          use_firePort=false,
          use_messageReceive=true,
          numberOfMessageReceive=1)
          annotation (Placement(transformation(extent={{-74,24},{-66,32}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_after=true,
          afterTime=1e-8,
          use_firePort=false,
          use_messageReceive=true,
          numberOfMessageReceive=1) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-10,2})));
        RealTimeCoordinationLibrary.Transition T3(
          use_after=true,
          afterTime=1e-8,
          use_firePort=false,
          use_messageReceive=true,
          numberOfMessageReceive=1)
          annotation (Placement(transformation(extent={{52,18},{44,26}})));
        RealTimeCoordinationLibrary.Transition T4(
          use_after=true,
          afterTime=1e-8,
          use_firePort=false,
          use_messageReceive=true,
          numberOfMessageReceive=1) annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=270,
              origin={-10,-28})));
        RealTimeCoordinationLibrary.Mailbox MB_LimitViolated(nOut=2, nIn=1)
          annotation (Placement(transformation(extent={{-124,24},{-104,44}})));
        RealTimeCoordinationLibrary.Mailbox MB_LimitRedeemed(nOut=2, nIn=1)
          annotation (Placement(transformation(extent={{94,32},{74,52}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_LimitViolated(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-152,24},{-132,44}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_LimitRedeemed(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{110,22},{130,42}})));
      equation
        connect(LimiRedeemed.outPort[1], T4.inPort) annotation (Line(
            points={{48,-6.6},{48,-28},{-6,-28}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, LimiRedeemed.inPort[1]) annotation (Line(
            points={{-5,2},{22,2},{22,2},{47,2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[1], T3.inPort) annotation (Line(
            points={{-7,55.4},{-2,54},{-2,48},{48,48},{48,26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, LimiRedeemed.inPort[2]) annotation (Line(
            points={{48,17},{48,2},{49,2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[2], T1.inPort) annotation (Line(
            points={{-5,55.4},{-10,54},{-10,48},{-70,48},{-70,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, LimitViolated.inPort[1]) annotation (Line(
            points={{-70,23},{-70,12},{-58,12},{-58,1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(LimitViolated.outPort[1], T2.inPort) annotation (Line(
            points={{-49.4,2},{-40,2},{-40,2},{-32,2},{-32,2},{-14,2}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, LimitViolated.inPort[2]) annotation (Line(
            points={{-15,-28},{-76,-28},{-76,3},{-58,3}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.transition_input_port[1], MB_LimitRedeemed.mailbox_output_port[
          1]) annotation (Line(
            points={{52.9,24.12},{69.45,24.12},{69.45,40.5},{75,40.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MB_LimitRedeemed.mailbox_input_port[1], In_LimitRedeemed)
          annotation (Line(
            points={{93,41},{105.5,41},{105.5,32},{120,32}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(MB_LimitViolated.mailbox_input_port[1], In_LimitViolated)
          annotation (Line(
            points={{-123,33},{-129.5,33},{-129.5,34},{-142,34}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.transition_input_port[1], MB_LimitViolated.mailbox_output_port[
          1]) annotation (Line(
            points={{-7.88,-32.9},{-97.94,-32.9},{-97.94,32.5},{-105,32.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.transition_input_port[1], MB_LimitViolated.mailbox_output_port[
          2]) annotation (Line(
            points={{-74.9,30.12},{-89.45,30.12},{-89.45,33.5},{-105,33.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.transition_input_port[1], MB_LimitRedeemed.mailbox_output_port[
          2]) annotation (Line(
            points={{-12.12,6.9},{-11.06,6.9},{-11.06,41.5},{75,41.5}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (
          Diagram(coordinateSystem(extent={{-140,-100},{120,100}},
                preserveAspectRatio=true), graphics),
          Icon(coordinateSystem(extent={{-140,-100},{120,100}})),
          Documentation(info="<html>
<h3> Observer </h3>
This class implements the role Provider of the Limit-Observation-Pattern. The provider is responsible for collecting numerical information. The observer wants to know, wether this information violated a certain limit or not. Therefore the provider sends the limitViolated() message to the observer, if the information violates a certain limit, and it sends the limitRedeemed() message to the observer, if the violation has stopped.More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Limit_Observation\">here</a>&QUOT;. <p>The behavoir can be seen in the following statechart. 
The observer has no parameters. </p>
<p><img src=\"images/Limit-Observation/Observer-Behavior.jpg\"></p>
<p><small>Figure 1: Realtimestatechart, showing the behavior of the observer role </small></p>
</html>"));
      end Observer;
      annotation (Documentation(info="<html>
<H3> Limit Observation</H3>
<p> 
This pattern is used to communicate if a certain value violates a defined limit or not.
</p>

<h4> Context </h4>
<p> 
Information exchange between participants.
</p>

<h4> Problem </h4>
<p> 
Two participants exist within a system. One collects numerical information,
the other wants the know them. In particular, he wants to know if the numerical information
violates a certain limit or not.
</p>

<h4> Solution </h4>
<p>
The goal should be to avoid as much communication as possible. Therefore,
define a coordination protocol that consists of the two roles provider and observer.
The provider collects the data and only informs the observer if the limit is violated or redeemed.
At first, it is unknown if the limit is violated or redeemed, because the provider
first has to explore the situation.
In addition, the pattern warranted a disjunction of the observation and the processing
and analysis of the environment situation.
</p>
<h4> Structure </h4>
<p> 
The pattern consists of the roles provider and observer.
The role provider is an out-role; the role observer is an in-role.
Which message each role can receive and send is shown in the message interfaces. The provider may send the messages limitViolated and limitRedeemed to
the observer.
The connector must not lose messages. The time parameter of the role provider is
$worktime. The delay for sending a message is defined by the time parameters $delaymin
and $delay-max.
</p> 
<p><img src=\"images/Limit-Observation/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Limit Observation Pattern</small></p>
<p><img src=\"images/Limit-Observation/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Limit Observation Pattern</small></p>

<h4> Behavior </h4>
<p>
The role provider starts in state MeasuringLimit and stays there not longer than $worktime
units of time. In this state the first measurement will be done and the provider
checks if the limit is redeemed or violated. If it is redeemed the state changes to LimitRedeemed
and the message limitRedeemed is send to the observer. If the limit is violated,
the state changes to LimitViolated and the message limitViolated is send to the observer. If
the provider is in state LimitViolated and recognizes that the results of the measurements
changes so that the limit is not violated anymore, the provider changes to state LimitRedeemed
and sends the message limitRedeemed. If the provider is in state LimitRedeemed
and recognizes that the results of the measurements changes so that the limit is
violated, the provider changes to state LimitViolated and sends the message limitViolated.
The observer is the correspondent part of the provider and is initially waiting for the
provider if the limit is violated or redeemed. It reacts on the messages of the provider
and changes to state LimitExceeded if the value exceeds the limit or to LimitRedeemed
if value redeems the limit.
</p>
<p><img src=\"images/Limit-Observation/Limit-Observation-Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts of the Limit-Observation Pattern, showing the behavior of the observer and provider role </small></p>
</html>"));
    end Limit_Observation;

    package Fail_Safe_Delegation
      model Safe_Delegation_Master
      parameter Integer timeout;
        RealTimeCoordinationLibrary.Step Idle(
          initialStep=true,
          nOut=1,
          nIn=3) annotation (Placement(transformation(extent={{-80,80},{-72,88}})));
        RealTimeCoordinationLibrary.Step Waiting(nIn=1, nOut=3,
          use_activePort=true)                                  annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={36,78})));
        RealTimeCoordinationLibrary.Step Failsafe(nIn=1, nOut=1) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-100,30})));
        RealTimeCoordinationLibrary.Transition T1(use_firePort=true,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-16,70})));
        RealTimeCoordinationLibrary.Transition T2(use_after=true, afterTime=
              timeout)                            annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-16,96})));
        RealTimeCoordinationLibrary.Transition T3(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-16,114})));
        RealTimeCoordinationLibrary.Transition T4(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=270,
              origin={-14,22})));
        RealTimeCoordinationLibrary.Transition T5(use_firePort=true,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{-4,-4},{4,4}},
              rotation=180,
              origin={-98,58})));
        RealTimeCoordinationLibrary.Message Order_Message(nIn=1)
          annotation (Placement(transformation(extent={{-124,58},{-144,78}})));
        RealTimeCoordinationLibrary.Message Continue_Message(nIn=1)
          annotation (Placement(transformation(extent={{92,28},{112,48}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Order(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-190,58},{-170,78}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort
          Out_Continue(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{132,30},{152,50}})));
        RealTimeCoordinationLibrary.Mailbox mailbox_Fail(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{-30,-10},{-10,10}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Fail(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-40,-46},{-20,-26}})));
        RealTimeCoordinationLibrary.Mailbox mailbox_done(nOut=1, nIn=1)
          annotation (Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=0,
              origin={-66,142})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Done(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]") annotation (Placement(
              transformation(extent={{-190,132},{-170,152}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=90,
              origin={102,110})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=timeout)
          annotation (Placement(transformation(extent={{36,132},{16,152}})));
      equation
        connect(Idle.outPort[1], T1.inPort) annotation (Line(
            points={{-76,79.4},{-76,70},{-20,70}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Waiting.inPort[1]) annotation (Line(
            points={{-11,70},{32,70},{32,78}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[1], T4.inPort) annotation (Line(
            points={{40.6,76.6667},{46,76.6667},{46,22},{-10,22}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[2], T3.inPort) annotation (Line(
            points={{40.6,78},{66,78},{66,114},{-12,114}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Idle.inPort[1]) annotation (Line(
            points={{-21,96},{-77.3333,96},{-77.3333,88}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Idle.inPort[2]) annotation (Line(
            points={{-21,114},{-76,114},{-76,88}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Waiting.outPort[3], T2.inPort) annotation (Line(
            points={{40.6,79.3333},{60,79.3333},{60,96},{-12,96}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, Failsafe.inPort[1]) annotation (Line(
            points={{-19,22},{-100,22},{-100,26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Failsafe.outPort[1], T5.inPort) annotation (Line(
            points={{-100,34.6},{-100,54},{-98,54}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, Idle.inPort[3]) annotation (Line(
            points={{-98,63},{-98,88},{-74.6667,88}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.firePort, Order_Message.conditionPort[1]) annotation (Line(
            points={{-102.2,58},{-120,58},{-120,58.4},{-122,58.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T1.firePort, Continue_Message.conditionPort[1]) annotation (Line(
            points={{-16,65.8},{64,65.8},{64,28.4},{90,28.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Order_Message.message_output_port, Out_Order) annotation (Line(
            points={{-143,67},{-143,67.5},{-180,67.5},{-180,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Continue_Message.message_output_port, Out_Continue) annotation (Line(
            points={{111,37},{111,37.5},{142,37.5},{142,40}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.transition_input_port[1], mailbox_Fail.mailbox_output_port[1])
          annotation (Line(
            points={{-11.88,17.1},{-11.88,4.55},{-11,4.55},{-11,-1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox_Fail.mailbox_input_port[1], In_Fail) annotation (Line(
            points={{-29,-1},{-29,-18.5},{-30,-18.5},{-30,-36}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.transition_input_port[1], mailbox_done.mailbox_output_port[1])
          annotation (Line(
            points={{-13.88,118.9},{-13.88,137.45},{-57,137.45},{-57,141}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox_done.mailbox_input_port[1], In_Done) annotation (Line(
            points={{-75,141},{-180,142}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[1]) annotation (Line(
            points={{-16,65.8},{100,65.8},{100,99.9},{102,99.9}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{102,121},{102,145.6},{37.5,145.6}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(Waiting.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{36,82.72},{37.2,82.72},{37.2,138.4}},
            color={255,0,255},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(extent={{-180,-40},{140,160}},
                preserveAspectRatio=true), graphics), Icon(coordinateSystem(extent={{-180,
                  -40},{140,160}})),
          Documentation(info="<html>
<p><b></font><font style=\"font-size: 10pt; \">Safe_Delegation_Master </b></p>
<p>This class implements the role Master of the Fail-Safe-Delgation-Pattern. The master component wants to delegate a task to the slave component, being responsible for executing the task. The slave component can report the task execuition with either &QUOT;done&QUOT; or &QUOT;fail&QUOT;, informing the master wether the delegation was successful or not. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Safe_Delegation\">here</a>&QUOT;. </p>
<p>The behavoir can be seen in the following statechart. </p>
<p><img src=\"images/Fail_Safe_Delegation/Behavior_Master.jpg\"/></p>
<p><small>Figure 1:  Realtimestatechart showing the behavior of the role master</small></p>
<p>The Master has a paramter $timeout, which is specifies the time the master may stay at most in the state of &apos;Waiting&apos;, e. g. it specifies the maximum time the Master waits for a reply of the slave after ordering the delegation. </p>
<p><img src=\"images/Fail_Safe_Delegation/Paramater_Master.jpg\"/></p>
<p><small>Figure 2: Parameters of the role master.</small></p>
</html>"));
      end Safe_Delegation_Master;

      model Safe_Delegation_Slave
      parameter Integer worktime;
        RealTimeCoordinationLibrary.Step Idle(
          initialStep=true,
          nIn=2,
          nOut=1) annotation (Placement(transformation(extent={{-62,56},{-54,64}})));
        RealTimeCoordinationLibrary.Step Working(nOut=2, nIn=1,
          use_activePort=true)                                  annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={32,48})));
        RealTimeCoordinationLibrary.Step Failsafe(nIn=2, nOut=2) annotation (
            Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=270,
              origin={-12,2})));
        RealTimeCoordinationLibrary.Transition T1(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8,
          use_firePort=true)          annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-4,48})));
        RealTimeCoordinationLibrary.Transition T2(use_firePort=true,
          use_after=true,
          afterTime=1e-8)                                            annotation (
            Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=270,
              origin={-8,68})));
        RealTimeCoordinationLibrary.Transition T3(use_firePort=true,
            use_messageReceive=false,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{46,6},{54,14}})));
        RealTimeCoordinationLibrary.Transition T4(use_messageReceive=true,
            numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)             annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=180,
              origin={-74,10})));
        RealTimeCoordinationLibrary.Transition T5(
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_firePort=true,
          use_after=true,
          afterTime=1e-8)    annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=90,
              origin={-28,-36})));
        RealTimeCoordinationLibrary.Mailbox mailbox_Continue(nOut=1, nIn=1)
          annotation (Placement(transformation(extent={{-138,-10},{-118,10}})));
        RealTimeCoordinationLibrary.Mailbox mailbox_Order(nOut=2, nIn=1)
          annotation (Placement(transformation(extent={{-136,18},{-116,38}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_Order(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-192,74},{-172,94}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort In_Continue(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{-188,-12},{-168,10}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Done(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{130,88},{150,108}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Fail(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{132,-32},{152,-12}})));
        RealTimeCoordinationLibrary.Message message(nIn=1)
          annotation (Placement(transformation(extent={{-12,92},{8,112}})));
        RealTimeCoordinationLibrary.Message message1(nIn=2)
          annotation (Placement(transformation(extent={{72,-32},{92,-12}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1)
          annotation (Placement(transformation(extent={{-30,14},{-10,34}})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=worktime)
          annotation (Placement(transformation(extent={{20,30},{40,10}})));
      equation
        connect(Working.outPort[1], T2.inPort) annotation (Line(
            points={{36.6,49},{58,49},{58,68},{-4,68}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.outPort, Idle.inPort[1]) annotation (Line(
            points={{-13,68},{-36,68},{-36,64},{-59,64}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Working.outPort[2], T3.inPort) annotation (Line(
            points={{36.6,47},{50,46},{50,14}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, Failsafe.inPort[1]) annotation (Line(
            points={{50,5},{50,2},{22,2},{22,3},{-8,3}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Failsafe.outPort[1], T5.inPort) annotation (Line(
            points={{-16.6,3},{-32,3},{-32,-36}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.outPort, Failsafe.inPort[2]) annotation (Line(
            points={{-23,-36},{2,-36},{2,1},{-8,1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.outPort, Idle.inPort[2]) annotation (Line(
            points={{-74,15},{-74,76},{-56,76},{-56,64},{-57,64}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Idle.outPort[1], T1.inPort) annotation (Line(
            points={{-58,55.4},{-58,48},{-8,48}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Working.inPort[1]) annotation (Line(
            points={{1,48},{28,48}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Failsafe.outPort[2], T4.inPort) annotation (Line(
            points={{-16.6,1},{-74,1},{-74,6}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox_Order.mailbox_output_port[1], T5.transition_input_port[1])
          annotation (Line(
            points={{-117,26.5},{-115.5,26.5},{-115.5,-40.9},{-30.12,-40.9}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.transition_input_port[1], mailbox_Order.mailbox_output_port[2])
          annotation (Line(
            points={{-6.12,52.9},{-117,52.9},{-117,27.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox_Order.mailbox_input_port[1], In_Order) annotation (Line(
            points={{-135,27},{-156.5,27},{-156.5,84},{-182,84}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T4.transition_input_port[1], mailbox_Continue.mailbox_output_port[1])
          annotation (Line(
            points={{-78.9,7.88},{-99.45,7.88},{-99.45,-1},{-119,-1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(mailbox_Continue.mailbox_input_port[1], In_Continue) annotation (Line(
            points={{-137,-1},{-178,-1}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.firePort, message.conditionPort[1]) annotation (Line(
            points={{-8,72.2},{-16,72.2},{-16,92.4},{-14,92.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(message.message_output_port, Out_Done) annotation (Line(
            points={{7,101},{33.5,101},{33.5,98},{140,98}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T5.firePort, message1.conditionPort[1]) annotation (Line(
            points={{-28,-31.8},{-4,-31.8},{-4,-32.6},{70,-32.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T3.firePort, message1.conditionPort[2]) annotation (Line(
            points={{54.2,10},{62,10},{62,-30.6},{70,-30.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(message1.message_output_port, Out_Fail) annotation (Line(
            points={{91,-23},{104,-23},{104,-22},{142,-22}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Working.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{32,43.28},{8,43.28},{8,23.6},{18.8,23.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[1]) annotation (Line(
            points={{-4,43.8},{-40,43.8},{-40,24},{-30.1,24}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{-9,24},{6,24},{6,16.4},{18.5,16.4}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(coordinateSystem(extent={{-180,-100},{140,140}},
                preserveAspectRatio=true), graphics), Icon(coordinateSystem(extent={{-180,
                  -100},{140,140}})),
          Documentation(info="<html>
<p><b></font><font style=\"font-size: 10pt; \">Safe_Delegation_Master </b></p>
<p>This class implements the role Master of the Fail-Safe-Delgation-Pattern. TThis class implements the behavior of the role Delegation_Slave in the &QUOT;Fail-Operational Delegation&QUOT; pattern. The master component wants to delegate a task to the slave component, being responsible for executing the task. The slave component can report the task execuition with either &QUOT;done&QUOT; or &QUOT;fail&QUOT;, informing the master wether the delegation was successful or not. More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Fail_Safe_Delegation\">here</a>&QUOT;. </p>
<p>The behavior can be seen in the following statechart. </p>
<p><img src=\"images/Fail_Safe_Delegation/Behavior_Slave.jpg\"/></p>
<p><small>Figure 1:  Realtimestatechart showing the behavior of the role slave</small></p>
<p>The slave has a paramter $worktime, which specifies the time the slave may stay at most in the state of &apos;Working&apos;, e. g. it specifies the maximum time the Slave may be working on the task. </p>
<p><img src=\"images/Fail_Safe_Delegation/Paramater_Slave.jpg\"/></p>
<p><small>Figure 2: Parmaters of the role slave.</small></p>
</html>"));
      end Safe_Delegation_Slave;
      annotation (Documentation(info="<html>
<p><b></font><font style=\"font-size: 10pt; \">Fail-Safe Delegation</b></p>
<p>This pattern realizes a delegation of a task from a role master to a role slave. The slave executes the task in a certain time and answers regarding success or failure. If the execution fails, no other task may be delegated until the master ensures that the failure has been corrected. Moreover, only one delegation at a time is allowed. </p>
<p><h4>Context </h4></p>
<p>Delegate tasks between communicating actors. </p>
<p><h4>Problem </h4></p>
<p>If the communication is asynchronous and the communication channel is unreliable, the role that sends the task, does not know if the other role has received it. Though, the task has to be done. </p>
<p><h4>Solution </h4></p>
<p>Define a coordination protocol that enables a role master to delegate tasks to a slave. A failed task execution is handled before a new task can be delegated. The master delegates the task and wait for its completion. After a specified time, the master cancels the waiting. The slave executes this task in a certain time and reports if the task was done successfully or if the execution failed. If it failed, the slave does not execute new tasks until the master sends the signal that the error is resolved. </p>
<p><h4>Structure </h4></p>
<p>The pattern consists of the two roles master and slave. Both roles are in/out roles.Which message each role can receive and send is shown in the message interfaces. The master may send the messages order and continue tthe slave. The slave may send the messages done and fail to the master. The time parameter of the role master is $timeout, the time parameter of role slave is $worktime. The connector may lose messages. The delay for sending a message is defined by the time parameters $delay-min and $delay-max. </p>
<p><img src=\"images/Fail_Safe_Delegation/Structure.jpg\"/> </p><p></font><font style=\"font-size: 7pt; \">Figure 1: Structure of Fail Safe Delegation </p>
<p><img src=\"images/Fail_Safe_Delegation/Interfaces.jpg\"/></p>
<p><small>Figure 2: Interfaces of Fail Safe Delegation </small></p>
<p><h4>Behavior </h4></p>
<p>The role master has the initial state Idle. From this state the master can send the message order() to the slave and the state changes to Waiting. An entry-action in this state resets the clock c0. If the clock c0 reaches the value of $timeout, the master assumes that the order or the answer message got lost or that the slave has fallen out. Then, the state will leave to Idle. If the master receives the message fail() the state will change to FailSafe. If the master receives the message done() the state changes back to Idle. When the master receives the message fail(), it changes to state FailSafe. The pattern assumes that if the master is in state FailSafe, the master execute actions to resolve the problem. Afterward, it sends message continue() changes back to Idle. The role slave is the correspondent part to the master and consists of the initial state Idle and the statesWorking and FailSafe. If it receives the message order the state changes to Working. This state can be leave as soon as the order is done. Then the slave sends done to the master and the state changes back to Idle. An entry-action in the state Working resets the clock c0. If the clock c0 reaches the value of $worktime and the order is not finished yet, the slave has to cancel the order, sends the message fail to the master, and changes to state FailSafe. If the order fails, the slave changes to state FailSafe, too. This state can be leave with the message continue. Then the slave changes back to state Idle. It may happen that the slave receives the message order while it is in state FailSafe. This is only the case, if a message before got lost. As the slave is not allowed to execute the order, it sends the message fail immeditiately and remains in state FailSafe. </p>
<p><img src=\"images/Fail_Safe_Delegation/Behavior.jpg\"/></p>
<p><small>Figure 3: Realtimestatecharts of the Fail Safe Delegation Pattern, showing the behavior of the master and slave role </small></p>
</html>"));
    end Fail_Safe_Delegation;

    package Periodic_Transmission
      model Sender
      parameter Integer period;
        RealTimeCoordinationLibrary.Step PeriodicSending(
          initialStep=true,
          nOut=1,
          nIn=1,
          use_activePort=true)
                 annotation (Placement(transformation(extent={{-68,40},{-76,48}})));
        RealTimeCoordinationLibrary.Message Data_Message(nIn=1)
          annotation (Placement(transformation(extent={{22,12},{42,32}})));
        RealTimeCoordinationLibrary.MessageInterface.OutputDelegationPort Out_Data(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{66,10},{86,30}})));
        RealTimeCoordinationLibrary.Transition T1(use_firePort=true,
          use_after=true,
          afterTime=period)                                          annotation (
            Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={-40,26})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=1) annotation (
            Placement(transformation(
              extent={{-10,-10},{10,10}},
              rotation=180,
              origin={-64,8})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=20)
          annotation (Placement(transformation(extent={{-82,-40},{-62,-20}})));
      equation
        connect(T1.firePort, Data_Message.conditionPort[1])
                                                       annotation (Line(
            points={{-40,21.8},{-26,21.8},{-26,12.4},{20,12.4}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(Data_Message.message_output_port, Out_Data)        annotation (Line(
            points={{41,21},{45.5,21},{45.5,20},{76,20}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(PeriodicSending.outPort[1], T1.inPort) annotation (Line(
            points={{-72,39.4},{-72,26},{-44,26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, PeriodicSending.inPort[1]) annotation (Line(
            points={{-35,26},{-20,26},{-20,64},{-72,64},{-72,48}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.firePort, clock.u[1]) annotation (Line(
            points={{-40,21.8},{-50,21.8},{-50,8},{-53.9,8}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(PeriodicSending.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{-76.72,44},{-106,44},{-106,-33.6},{-83.2,-33.6}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(timeInvariantLessOrEqual.clockValue, clock.y) annotation (Line(
            points={{-83.5,-26.4},{-84,-26},{-98,-26},{-98,8},{-75,8}},
            color={0,0,127},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Documentation(info="<html>
<h3> Sender </h3>
This class implements the role Sender of the Periodic-Transmission Pattern. 
The sender sends every $period time units a message data() to the receiver. The receiver receives this message periodically. If the receiver gets no message from the sender, the message was lost or the receiver has fallen out. In this case the receiver has to react in a certain way in order to prevent this safety critical situation.

More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Periodic_Transmission\">here</a>&QUOT;.

<p> The provider has the parameter $period, which specifies the period, in which the sender sends the data() message to the receiver. </p>
<p><img src=\"images/Periodic_Transmission/parameters_sender.jpg\"></p>
<p><small>Figure 1: Parameters of the sender </small></p>
<p>The behavior can be seen in the following statechart.</p>
<p><img src=\"images/Periodic_Transmission/Behavior_Sender.jpg\"></p>
<p><small>Figure 2: Realtimestatechart, showing the behavior of the sender role </small></p>
</html>"));
      end Sender;

      model Receicer
      parameter Integer timeout;
        RealTimeCoordinationLibrary.Step PeriodicReceiving(
          initialStep=true,
          nIn=2,
          nOut=2,
          use_activePort=true)
                  annotation (Placement(transformation(
              extent={{4,-4},{-4,4}},
              rotation=0,
              origin={-16,56})));
        RealTimeCoordinationLibrary.Step Timeout(
          initialStep=false,
          nOut=1,
          nIn=1) annotation (Placement(transformation(
              extent={{-4,-4},{4,4}},
              rotation=0,
              origin={-14,-4})));
        RealTimeCoordinationLibrary.Transition T1(use_after=true, afterTime=timeout)
          annotation (Placement(transformation(extent={{-18,22},{-10,30}})));
        RealTimeCoordinationLibrary.Transition T2(
          use_firePort=true,
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)                         annotation (Placement(
              transformation(
              extent={{4,-4},{-4,4}},
              rotation=90,
              origin={22,50})));
        RealTimeCoordinationLibrary.Transition T3(
          use_firePort=true,
          use_messageReceive=true,
          numberOfMessageReceive=1,
          use_after=true,
          afterTime=1e-8)
          annotation (Placement(transformation(extent={{-10,-34},{-18,-26}})));
        RealTimeCoordinationLibrary.TimeElements.Clock clock(nu=2)
          annotation (Placement(transformation(extent={{-8,-8},{8,8}},
              rotation=90,
              origin={-58,20})));
        RealTimeCoordinationLibrary.TimeElements.TimeInvariant.TimeInvariantLessOrEqual
          timeInvariantLessOrEqual(bound=20)
          annotation (Placement(transformation(extent={{-54,50},{-40,36}})));
        RealTimeCoordinationLibrary.Mailbox Mailbox_Data(nOut=2, nIn=1)
          annotation (Placement(transformation(extent={{74,0},{54,20}})));
        RealTimeCoordinationLibrary.MessageInterface.InputDelegationPort
          In_Data(
          redeclare Integer integers[0] "integers[0]",
          redeclare Boolean booleans[0] "booelans[0]",
          redeclare Real reals[0] "reals[0]")
          annotation (Placement(transformation(extent={{94,-2},{114,18}})));
      equation
        connect(T2.outPort, PeriodicReceiving.inPort[1]) annotation (Line(
            points={{27,50},{34,50},{34,80},{-16,80},{-16,60},{-15,60}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T3.outPort, PeriodicReceiving.inPort[2]) annotation (Line(
            points={{-14,-35},{-14,-44},{-84,-44},{-84,76},{-18,76},{-18,60},{
                -17,60}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Timeout.outPort[1], T3.inPort) annotation (Line(
            points={{-14,-8.6},{-14,-26}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T1.outPort, Timeout.inPort[1]) annotation (Line(
            points={{-14,21},{-14,2.22045e-016}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(PeriodicReceiving.outPort[1], T2.inPort) annotation (Line(
            points={{-15,51.4},{-10,51.4},{-10,50},{18,50}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(PeriodicReceiving.outPort[2], T1.inPort) annotation (Line(
            points={{-17,51.4},{-17,30},{-14,30}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(PeriodicReceiving.activePort, timeInvariantLessOrEqual.conditionPort)
          annotation (Line(
            points={{-20.72,56},{-72,56},{-72,45.52},{-54.84,45.52}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T2.firePort, clock.u[1]) annotation (Line(
            points={{22,45.8},{22,11.92},{-59.36,11.92}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(T3.firePort, clock.u[2]) annotation (Line(
            points={{-18.2,-30},{-58,-30},{-58,11.92},{-56.64,11.92}},
            color={255,0,255},
            smooth=Smooth.None));
        connect(clock.y, timeInvariantLessOrEqual.clockValue) annotation (Line(
            points={{-58,28.8},{-64,28.8},{-64,40.48},{-55.05,40.48}},
            color={0,0,127},
            smooth=Smooth.None));
        connect(T3.transition_input_port[1], Mailbox_Data.mailbox_output_port[1])
          annotation (Line(
            points={{-9.1,-27.88},{46.45,-27.88},{46.45,8.5},{55,8.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(T2.transition_input_port[1], Mailbox_Data.mailbox_output_port[2])
          annotation (Line(
            points={{19.88,54.9},{19.88,61.45},{55,61.45},{55,9.5}},
            color={0,0,0},
            smooth=Smooth.None));
        connect(Mailbox_Data.mailbox_input_port[1], In_Data) annotation (Line(
            points={{73,9},{84.5,9},{84.5,8},{104,8}},
            color={0,0,0},
            smooth=Smooth.None));
        annotation (Diagram(graphics), Documentation(info="<html>
<h3> Sender </h3>
This class implements the role Sender of the Periodic-Transmission Pattern. 
The sender sends every $period time units a message data() to the receiver. The receiver receives this message periodically. If the receiver gets no message from the sender, the message was lost or the receiver has fallen out. In this case the receiver has to react in a certain way in order to prevent this safety critical situation.
More information concerning the pattern can be found &QUOT;<a href=\"modelica://CoordinationProtocolLibrary.CoordinationProtocols.Periodic_Transmission\">here</a>&QUOT;.
<p> The provider has a parameter $timeout, which specifies number of time units the receiver waits for a message of the sender. If there was no message received during the time, the receiver changes its state to 'Timeout'.
After receiving the data() message, the receiver changes back to state 'PeriodicReceiving'. </p>
<p><img src=\"images/Periodic_Transmission/parameters_receiver.jpg\"></p>
<p><small>Figure 1: Parameters of the sender </small></p>
<p>The behavior can be seen in the following statechart.</p>
<p><img src=\"images/Periodic_Transmission/Behavior_Receiver.jpg\"></p>
<p><small>Figure 2: Realtimestatechart, showing the behavior of the receiver role </small></p>
</html>"));
      end Receicer;
      annotation (Documentation(info="<html>
<H3> Periodic Transmission</H3>
<p> 
This pattern can be used to periodically transmit information from a sender to a receiver.
If the receiver does not get the information within a certain time, a specified
behavior must be activated to prevent a safety-critical situation.
</p>

<h4> Context </h4>
<p> 
Information exchange between two systems.
</p>

<h4> Problem </h4>
<p> 
If the receiver does not get the information within a certain time, a safetycritical
situation can occur. This must be prevented.
</p>

<h4> Solution </h4>
<p>
If the receiver does not get the information within a certain time, a specified
behavior must be activated to prevent the safety-critical situation. 
</p>
<h4> Structure </h4>
<p> 
The pattern consists of the two roles sender and receiver.
sender is an in-role. receiver is an out-role. Which message each role can receive resp. send is defined in the message interface. Here, the sender may send the message data to the receiver.
The time parameter of the role sender is $period, the time parameter of role slave is
$timeout. The connector may lose messages. The delay for sending a message is defined
by the time parameters $delay-min and $delay-max.
</p> 
<p><img src=\"images/Periodic_Transmission/Structure.jpg\" ></p>
<p><small>Figure 1: Structure of the Periodic Transmission Pattern</small></p>
<p><img src=\"images/Periodic_Transmission/Interfaces.jpg\"></p>
<p><small>Figure 2: Interfaces of the Periodic Transmission Pattern</small></p>

<h4> Behavior </h4>
<p>
The role sender consists of the initial state PeriodicSending only. The sender must
send each $period time units a message data to the receiver.
The role receiver consists of the initial state PeriodicReceiving and the state Timeout.
The standard case is that the receiver receivers a message data periodically. Though, if
the message data got lost or the sender falls out, the receiver changes to state Timeout and
activates a certain behavior to avoid the safety-critical situation. As soon as the receiver
receives a message data again, it changes back to state PeriodicReceiving.
</p>
<p><img src=\"images/Periodic_Transmission/Behavior.jpg\" ></p>
<p><small>Figure 3: Realtimestatecharts, showing the behavior of the sender and receiver role </small></p>
</html>"));
    end Periodic_Transmission;
  end CoordinationProtocols;

  annotation (uses(
      Modelica_StateGraph2(version="2.0.1"),
      Modelica(version="3.2"),
      RealTimeCoordinationLibrary(version="1.0.1")));
end CoordinationProtocolLibrary;
