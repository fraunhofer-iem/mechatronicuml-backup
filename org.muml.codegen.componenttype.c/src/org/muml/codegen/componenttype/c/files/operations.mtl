[comment encoding = UTF-8 /]
[**
 * The documentation of the module operations.
 */]
[module operations('http://www.muml.org/pim/connector/1.0.0', 'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')/]

[import org::muml::codegen::componenttype::c::queries::stringQueries/]
[import org::muml::codegen::componenttype::c::queries::modelQueries/]
[import org::muml::codegen::componenttype::c::actionlanguage::operation_queries/]
[import org::muml::codegen::componenttype::c::actionlanguage::expression/]
[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationFiles(COs : OrderedSet(Component), path : String, useSubDir: Boolean)]
[let opRepos : Sequence(OperationRepository) = COs->selectByKind(AtomicComponent)->select(c:AtomicComponent| not c.behavior.oclIsUndefined()).behavior.oclAsType(RealtimeStatechart).usedOperationRepositories]
[if opRepos->notEmpty()]
[for (opRep: OperationRepository | opRepos)]
	[comment generate separate files for each repository /]	
	[generateOperationRepositoryHeader(opRep, path, useSubDir)/]
	[generateOperationRepositoryClass(opRep, path, useSubDir)/]

	[comment generate includes for each repository into the operations.h /]
	#include "[opRep.getFileName(true, false)/]"

[/for]
[/if]
[/let]
[/template]




[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationRepositoryHeader(opRep : OperationRepository, path : String, useSubDir: Boolean)]

[file (path+getFileName(opRep, true, useSubDir), false, 'UTF-8')]
#ifndef [opRep.getName().toUpper()/]_H_
#define [opRep.getName().toUpper()/]_H_
#ifdef __cplusplus
  extern "C" {
#endif

	#include "[if (useSubDir)]../types/[/if]standardTypes.h"
	#include "[if (useSubDir)]../types/[/if]customTypes.h"


			
		[for (operation : Operation | opRep.operations)]
		/**
		 * @brief Implementation stub of operation [operation.name/]
 		 * @details This function shall contain the implementation of the operation [operation.name/].
		 * [for (p: Parameter | operation.parameters)]@param [p.getName()/] [/for]
		 */
		[operation.returnType.getTypeName()/] [operation.getName()/]([for (p: Parameter | operation.parameters) separator(', ')][p.dataType.getTypeName()/] [p.getName()/][/for]);
[/for]


#ifdef __cplusplus
  }
#endif
#endif /*[opRep.getName().toUpper()/]_H_ */
[/file]
[/template]

[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationRepositoryClass(opRep: OperationRepository, path : String, useSubDir: Boolean)]

[file (path+getFileName(opRep, false, useSubDir), false, 'UTF-8')]

#include "[getFileName(opRep, true, false)/]"
/** [protected ('User includes **/')] 


/**[/protected]**/
[for (operation : Operation | opRep.operations)]

[operation.returnType.getTypeName()/] [operation.getName()/]([for (p: Parameter | operation.parameters) separator (', ')][p.dataType.getTypeName()/] [p.getName()/][/for]){

[if (operation.implementations->at(1).oclIsUndefined())]
/** [protected (operation.getName()+' **/')] 
//@TODO: add your implementation here
#warning Missing implemenation of repository operation '[operation.getName()/]'
	[if not (operation.returnType.name = 'VOID' or operation.returnType.name = 'void')]
	//default return value
	[operation.returnType.getTypeName()/] ret = [operation.returnType.getDefaultValue()/];
	return ret;
	[/if]
/**[/protected]**/
[else]
 /** auto generated implementation **/
[if not (operation.returnType.name = 'VOID' or operation.returnType.name = 'void')]
	[operation.returnType.getTypeName()/] [operation.getOperationOutputVariableName()/] = [operation.returnType.getDefaultValue()/];
[/if]
	[generateExpression(operation.implementations->at(1),'')/]
[if not (operation.returnType.name = 'VOID' or operation.returnType.name = 'void')]
	return [operation.getOperationOutputVariableName()/];
[/if]
[/if]

}


[/for]


[/file]
[/template]

