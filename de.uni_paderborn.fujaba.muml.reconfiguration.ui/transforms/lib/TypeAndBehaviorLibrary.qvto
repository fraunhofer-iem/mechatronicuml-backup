
--core models
modeltype core uses core('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype modelinst uses modelinstance("http://www.fujaba.de/modelinstance/0.3.15");

-- muml models 
modeltype behavior uses muml::behavior("http://www.fujaba.de/muml/0.2.2");
modeltype types uses muml::types("http://www.fujaba.de/muml/0.2.2");
modeltype valuetype uses muml::valuetype("http://www.fujaba.de/muml/0.2.2");

modeltype reconf uses reconfiguration("http://www.fujaba.de/muml/reconfiguration/0.3.18");
modeltype reconf_datatype uses reconfiguration::structdatatype("http://www.fujaba.de/muml/reconfiguration/0.3.18");

library TypeAndBehaviorLibrary;

-- define string representations of the muml types
property voidType : String = PrimitiveTypes::VOID.repr();
property boolType : String = PrimitiveTypes::BOOLEAN.repr();
property byteType : String = PrimitiveTypes::BYTE.repr();
property shortType : String = PrimitiveTypes::SHORT.repr();
property intType : String = PrimitiveTypes::INT.repr();
property longType : String = PrimitiveTypes::LONG.repr();
property doubleType : String = PrimitiveTypes::DOUBLE.repr();

------------ helper functions --------------


------------ helper queries ---------------

-- returns the model element category for real-time statecharts.
query RootNode::getTypesCategory() : ModelElementCategory {
	return self.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.types.category') -> any(true);
}

-- return the primitive type with the given name which is contained in the types category of the rootNode
query RootNode::getPrimitiveType(in typeName : String) : DataType{
	var typeCategory : ModelElementCategory := self.getTypesCategory();
	var theType : DataType := (typeCategory.modelElements -> select(t : ExtendableElement | t.oclIsKindOf(PrimitiveDataType) and t.oclAsType(PrimitiveDataType).name = typeName) -> any(true)).oclAsType(DataType);
	return theType;
}

------------- constructors -----------------

constructor Parameter::Parameter(in newName : String, in type : DataType){
	name := newName;
	dataType := type;
}

constructor ParameterBinding::ParameterBinding(in param : Parameter, in valueExpr : Expression){
	parameter := param;
	value := valueExpr;
}

constructor Variable::Variable(in newName : String, in type : DataType){
	name := newName;
	dataType := type;
}

constructor Operation::Operation(in newName : String, in type : DataType){
	name := newName;
	returnType := type;
}

constructor Operation::Operation(in newName : String, in type : DataType, in impl : Expression){
	name := newName;
	returnType := type;
	implementations := impl;
}