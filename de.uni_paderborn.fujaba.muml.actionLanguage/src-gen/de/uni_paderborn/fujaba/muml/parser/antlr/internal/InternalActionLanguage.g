/*
* generated by Xtext
*/
grammar InternalActionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.fujaba.muml.services.ActionLanguageGrammarAccess;

}

@parser::members {

 	private ActionLanguageGrammarAccess grammarAccess;
 	
    public InternalActionLanguageParser(TokenStream input, ActionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Block";	
   	}
   	
   	@Override
   	protected ActionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpressionStartRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"ExpressionStartRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	 iv_ruleForLoop=ruleForLoop 
	 { $current=$iv_ruleForLoop.current; } 
	 EOF 
;

// Rule ForLoop
ruleForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getInitalizeExpressionAssignmentParserRuleCall_2_0()); 
	    }
		lv_initalizeExpression_2_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"initalizeExpression",
        		lv_initalizeExpression_2_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); 
	    }
		lv_loopTest_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); 
	    }
		lv_countingExpression_5_0=ruleForLoopCountingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"countingExpression",
        		lv_countingExpression_5_0, 
        		"ForLoopCountingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	 iv_ruleWhileLoop=ruleWhileLoop 
	 { $current=$iv_ruleWhileLoop.current; } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); 
	    }
		lv_loopTest_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	 iv_ruleDoWhileLoop=ruleDoWhileLoop 
	 { $current=$iv_ruleDoWhileLoop.current; } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileLoopAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); 
	    }
		lv_loopTest_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=');' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileLoopAccess().getRightParenthesisSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_ifCondition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifCondition",
        		lv_ifCondition_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); 
	    }
		lv_ifBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifBlock",
        		lv_ifBlock_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='elseif' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseifKeyword_5_0());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); 
	    }
		lv_elseIfConditions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfConditions",
        		lv_elseIfConditions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); 
	    }
		lv_elseIfBlocks_9_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfBlocks",
        		lv_elseIfBlocks_9_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_10='else' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); 
	    }
		lv_elseBlock_11_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_11_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleExpressionStartRule
entryRuleExpressionStartRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStartRuleRule()); }
	 iv_ruleExpressionStartRule=ruleExpressionStartRule 
	 { $current=$iv_ruleExpressionStartRule.current; } 
	 EOF 
;

// Rule ExpressionStartRule
ruleExpressionStartRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); 
    }
    this_ForLoop_1=ruleForLoop
    { 
        $current = $this_ForLoop_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); 
    }
    this_WhileLoop_2=ruleWhileLoop
    { 
        $current = $this_WhileLoop_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); 
    }
    this_DoWhileLoop_3=ruleDoWhileLoop
    { 
        $current = $this_DoWhileLoop_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); 
    }
    this_IfStatement_4=ruleIfStatement
    { 
        $current = $this_IfStatement_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getAttributeAttributeCrossReference_0_0()); 
	}

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); 
	    }
		lv_assignOperator_1_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_1_0, 
        		"AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignExpressionExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_assignExpression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignExpression",
        		lv_assignExpression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_incrementDecrementOperator_3_0=ruleIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_3_0, 
        		"IncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleForLoopCountingExpression
entryRuleForLoopCountingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopCountingExpressionRule()); }
	 iv_ruleForLoopCountingExpression=ruleForLoopCountingExpression 
	 { $current=$iv_ruleForLoopCountingExpression.current; } 
	 EOF 
;

// Rule ForLoopCountingExpression
ruleForLoopCountingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getForLoopCountingExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getForLoopCountingExpressionAccess().getAttributeAttributeCrossReference_0_0()); 
	}

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_incrementDecrementOperator_1_0=ruleIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_1_0, 
        		"IncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_assignOperator_2_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_2_0, 
        		"AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getAssignExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_assignExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"assignExpression",
        		lv_assignExpression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getArithmeticExpressionParserRuleCall()); 
    }
    this_ArithmeticExpression_0=ruleArithmeticExpression
    { 
        $current = $this_ArithmeticExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	 iv_ruleArithmeticExpression=ruleArithmeticExpression 
	 { $current=$iv_ruleArithmeticExpression.current; } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getComparisonExpressionParserRuleCall_0()); 
    }
    this_ComparisonExpression_0=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArithmeticExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getOperatorArithmeticOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleArithmeticOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ArithmeticOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleComparisonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"ComparisonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getLogicalExpressionParserRuleCall_0()); 
    }
    this_LogicalExpression_0=ruleLogicalExpression
    { 
        $current = $this_LogicalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparingOperatorEnumRuleCall_1_0_1_0()); 
	    }
		lv_operator_2_0=ruleComparingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"ComparingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightExpressionLogicalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightExpression_3_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getUnaryExpressionParserRuleCall_0_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getAttributeExpressionParserRuleCall_0_1()); 
    }
    this_AttributeExpression_1=ruleAttributeExpression
    { 
        $current = $this_AttributeExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getOperatorLogicOperatorEnumRuleCall_1_0_1_0()); 
	    }
		lv_operator_3_0=ruleLogicOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"LogicOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightExpressionUnaryExpressionParserRuleCall_1_1_0_0()); 
	    }
		lv_rightExpression_4_1=ruleUnaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_1, 
        		"UnaryExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightExpressionAttributeExpressionParserRuleCall_1_1_0_1()); 
	    }
		lv_rightExpression_4_2=ruleAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_2, 
        		"AttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOperatorUnaryOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleUnaryOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"UnaryOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getEnclosedExpressionAttributeExpressionParserRuleCall_2_0()); 
	    }
		lv_enclosedExpression_2_0=ruleAttributeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"enclosedExpression",
        		lv_enclosedExpression_2_0, 
        		"AttributeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeExpression
entryRuleAttributeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeExpressionRule()); }
	 iv_ruleAttributeExpression=ruleAttributeExpression 
	 { $current=$iv_ruleAttributeExpression.current; } 
	 EOF 
;

// Rule AttributeExpression
ruleAttributeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeExpressionAccess().getOperationCallParserRuleCall_0()); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAttributeExpressionAccess().getAttributeExpressionAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getAttributeExpressionAccess().getAttributeAttributeCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationCallAccess().getLiteralExpressionParserRuleCall_0()); 
    }
    this_LiteralExpression_0=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationCallAccess().getOperationCallAction_1_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_1_1_0()); 
	}

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterValuesForBindingExpressionParserRuleCall_1_3_0()); 
	    }
		lv_parameterValuesForBinding_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterValuesForBinding",
        		lv_parameterValuesForBinding_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterValuesForBindingExpressionParserRuleCall_1_4_1_0()); 
	    }
		lv_parameterValuesForBinding_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterValuesForBinding",
        		lv_parameterValuesForBinding_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_1_5());
    }
))
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLiteralExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLiteralExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueIdentifierOrValueParserRuleCall_1_1_0()); 
	    }
		lv_value_4_0=ruleIdentifierOrValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"IdentifierOrValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleIdentifierOrValue
entryRuleIdentifierOrValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierOrValueRule()); } 
	 iv_ruleIdentifierOrValue=ruleIdentifierOrValue 
	 { $current=$iv_ruleIdentifierOrValue.current.getText(); }  
	 EOF 
;

// Rule IdentifierOrValue
ruleIdentifierOrValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getIdentifierOrValueAccess().getNUMBERTerminalRuleCall_0()); 
    }

    |    this_BOOLEAN_1=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_1);
    }

    { 
    newLeafNode(this_BOOLEAN_1, grammarAccess.getIdentifierOrValueAccess().getBOOLEANTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getIdentifierOrValueAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Rule AssignOperator
ruleAssignOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0=':=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='=+' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getEQUAL_PLUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignOperatorAccess().getEQUAL_PLUSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='-=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='=-' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getEQUAL_MINUSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getAssignOperatorAccess().getEQUAL_MINUSEnumLiteralDeclaration_4()); 
    }
));



// Rule IncrementDecrementOperator
ruleIncrementDecrementOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



// Rule LogicOperator
ruleLogicOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='|' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='xor' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getXOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLogicOperatorAccess().getXOREnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='=>' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getLogicOperatorAccess().getIMPLYEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=>' 
	{
        $current = grammarAccess.getLogicOperatorAccess().getEQUIVALENTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getLogicOperatorAccess().getEQUIVALENTEnumLiteralDeclaration_4()); 
    }
));



// Rule ArithmeticOperator
ruleArithmeticOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getArithmeticOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArithmeticOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getArithmeticOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getArithmeticOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getArithmeticOperatorAccess().getTIMESEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getArithmeticOperatorAccess().getTIMESEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='/' 
	{
        $current = grammarAccess.getArithmeticOperatorAccess().getDIVIDEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getArithmeticOperatorAccess().getDIVIDEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='%' 
	{
        $current = grammarAccess.getArithmeticOperatorAccess().getMODULOEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getArithmeticOperatorAccess().getMODULOEnumLiteralDeclaration_4()); 
    }
));



// Rule ComparingOperator
ruleComparingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='==' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<>' 
	{
        $current = grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_5()); 
    }
));



// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='+' 
	{
        $current = grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOperatorAccess().getPLUSEnumLiteralDeclaration_2()); 
    }
));



RULE_NUMBER : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


