// automatically generated by Xtext
grammar de.uni_paderborn.fujaba.muml.ActionLanguage with org.eclipse.xtext.common.Terminals 

import "platform:/resource/de.uni_paderborn.fujaba.muml.model.actionLanguage/model/actionLanguage.ecore" as actionLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.storydriven.core/model/core.ecore" as modeling

import "platform:/resource/de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart" as rtsc

import "platform:/resource/de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/core" as core

import "platform:/resource/org.storydriven.core/model/core.ecore#//expressions" as expressions

import "platform:/resource/org.storydriven.core/model/core.ecore#//expressions/common" as commonExpressions


Block returns actionLanguage::Block hidden(WS, ML_COMMENT, SL_COMMENT):
	{actionLanguage::Block}
	'{'(expressions+=ExpressionStartRule*)'}' | expressions+=ArithmeticExpression
;

ForLoop returns actionLanguage::ForLoop:
 'for' '(' initalizeExpression=Assignment  loopTest=Expression';'  countingExpression=ForLoopCountingExpression ')' 
block=Block  ;

WhileLoop returns actionLanguage::WhileLoop: 'while' '('  loopTest=Expression ')' 
block=Block ;

DoWhileLoop returns actionLanguage::DoWhileLoop: 'do'  
block=Block
'while' '('  loopTest=Expression ');'
;

IfStatement returns actionLanguage::IfStatement:
'if' '(' ifCondition=Expression ')' ifBlock=Block 
('elseif' '(' elseIfConditions+=Expression ')' elseIfBlocks+=Block)*
('else' elseBlock=Block)?
;

ReturnStatement returns actionLanguage::ReturnStatement:
{actionLanguage::ReturnStatement}
'return' expression=Expression';'
;

	
ExpressionStartRule returns expressions::Expression:
	Assignment |  ForLoop | 
	WhileLoop | DoWhileLoop | 
	IfStatement | ReturnStatement
	;	
	
  Assignment returns actionLanguage::Assignment:
	(lhs_attributeExpression=AttributeLeafExpression
	((assignOperator=AssignOperator rhs_assignExpression=Expression) | incrementDecrementOperator=IncrementDecrementOperator) ';');

    ForLoopCountingExpression returns actionLanguage::Assignment:
	(lhs_attributeExpression=AttributeLeafExpression
	 (incrementDecrementOperator=IncrementDecrementOperator |(assignOperator=AssignOperator rhs_assignExpression=Expression)) );	

Expression returns expressions::Expression:
	ArithmeticExpression;		
	

ArithmeticExpression returns expressions::Expression:
ComparisonExpression (({commonExpressions::ArithmeticExpression.leftExpression=current} ) operator=ArithmeticOperator rightExpression=ComparisonExpression)*;
	

ComparisonExpression returns expressions::Expression:
LogicalExpression 
(({commonExpressions::ComparisonExpression.leftExpression=current} operator=ComparingOperator ) rightExpression=LogicalExpression)*;

LogicalExpression returns expressions::Expression:
(UnaryExpression| AttributeExpression )
(({commonExpressions::LogicalExpression.leftExpression=current} operator=LogicOperator ) rightExpression=(UnaryExpression| AttributeExpression))*
;

UnaryExpression returns expressions::Expression:
{commonExpressions::UnaryExpression}
	operator=UnaryOperator enclosedExpression=AttributeExpression
	;	
	


	
AttributeExpression returns expressions::Expression:
	 OperationCall|
	AttributeLeafExpression
	;	
	
AttributeLeafExpression returns actionLanguage::AttributeExpression:
	{actionLanguage::AttributeExpression}  attribute=[core::Attribute]('['indices+=Expression']')*
	;	
	
OperationCall returns expressions::Expression:
	LiteralExpression |
	{actionLanguage::OperationCall} operation=[core::Operation]'('(parameterBinding+=ParamaterBinding(',' parameterBinding+=ParamaterBinding)*)?')'
	;				
	
ParamaterBinding returns core::ParameterBinding:
 {core::ParameterBinding}parameter=[core::Parameter]':='value=Expression
 ;	

LiteralExpression returns expressions::Expression:
	'(' Expression ')' |
	{commonExpressions::LiteralExpression} value=IdentifierOrValue 
	;	
	
	
IdentifierOrValue returns ecore::EString:
NUMBER|BOOLEAN|INT
;	
	
enum AssignOperator returns actionLanguage::AssignOperator:   ASSIGN=':=' | PLUS_EQUAL='+='| EQUAL_PLUS='=+' | MINUS_EQUAL='-='| EQUAL_MINUS='=-' ;	

enum IncrementDecrementOperator returns actionLanguage::IncrementDecrementOperator:
 INCREMENT='++'|DECREMENT='--';

enum LogicOperator returns commonExpressions::LogicOperator: 
AND='&' | OR='|' | XOR='xor' | IMPLY='=>' | EQUIVALENT='<=>' 
;


enum ArithmeticOperator returns commonExpressions::ArithmeticOperator: PLUS='+' | MINUS='-'
|TIMES='*' | DIVIDE='/' | MODULO='%' ;

enum ComparingOperator returns commonExpressions::ComparingOperator:  
LESS='<' | LESS_OR_EQUAL='<=' | EQUAL='==' | GREATER_OR_EQUAL='>=' | GREATER='>' | UNEQUAL='<>' 
;


enum UnaryOperator returns commonExpressions::UnaryOperator: NOT='not' | MINUS='-' | PLUS='+';

terminal NUMBER returns ecore::EBigDecimal:
	INT'.' INT;
terminal BOOLEAN returns ecore::EBoolean:
'true' | 'false';	
	