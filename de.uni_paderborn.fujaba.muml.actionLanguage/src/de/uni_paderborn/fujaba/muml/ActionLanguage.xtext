// automatically generated by Xtext
grammar de.uni_paderborn.fujaba.muml.ActionLanguage with org.eclipse.xtext.common.Terminals 

import "platform:/resource/de.uni_paderborn.fujaba.muml.model.actionLanguage/model/actionLanguage.ecore" as actionLanguage

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.storydriven.modeling/model/sdm.ecore" as modeling

import "platform:/resource/de.uni_paderborn.fujaba.muml.model/model/muml.ecore#//model/realtimestatechart" as rtsc

import "platform:/resource/org.storydriven.modeling/model/sdm.ecore#//expressions" as expressions


Block returns actionLanguage::Block:
	{actionLanguage::Block}
	'{'(expressions+=ExpressionStartRule*)'}';

ForLoop returns actionLanguage::ForLoop:
 'for' '(' initalizeExpression=Assignment  loopTest=Expression';'  countingExpression=ForLoopCountingExpression ')' 
block=Block  ;

WhileLoop returns actionLanguage::WhileLoop: 'while' '('  loopTest=Expression ')' 
block=Block ;

DoWhileLoop returns actionLanguage::DoWhileLoop: 'do'  
block=Block
'while' '('  loopTest=Expression ')'
;

IfStatement returns actionLanguage::IfStatement:
'if' '(' ifCondition=Expression ')' ifBlock=Block 
('elseif' '(' elseIfConditions+=Expression ')' elseIfBlocks+=Block)*
('else' elseBlock=Block)?
;

	
ExpressionStartRule returns expressions::Expression:
	Assignment |  ForLoop | 
	WhileLoop | DoWhileLoop | 
	IfStatement 
	;	
	
  Assignment returns actionLanguage::Assignment:
	(attribute=[ecore::EAttribute]
	((assignOperator=AssignOperator assignExpression=Expression) | incrementDecrementOperator=IncrementDecrementOperator) ';');

    ForLoopCountingExpression returns actionLanguage::Assignment:
	(attribute=[ecore::EAttribute]
	 (incrementDecrementOperator=IncrementDecrementOperator |(assignOperator=AssignOperator assignExpression=Expression)) );	

Expression returns expressions::Expression:
	ArithmeticExpression;		
	

ArithmeticExpression returns expressions::Expression:
ComparisonExpression (({actionLanguage::ArithmeticExpression.leftExpression=current} ) operator=ArithmeticOperator rightExpression=ComparisonExpression)*;
	

ComparisonExpression returns expressions::Expression:
BinaryLogicExpression 
(({actionLanguage::ComparisonExpression.leftExpression=current} operator=ComparingOperator ) rightExpression=BinaryLogicExpression)*;

BinaryLogicExpression returns expressions::Expression:
(UnaryExpression| AttributeExpression )
(({actionLanguage::BinaryLogicExpression.leftExpression=current} operator=LogicOperator ) rightExpression=(UnaryExpression| AttributeExpression))*
;

UnaryExpression returns expressions::Expression:
{actionLanguage::UnaryExpression}
	unaryOperator=UnaryOperator unaryExpression=AttributeExpression
	;	
	
LiteralExpression returns expressions::Expression:
	'(' Expression ')' |
	{actionLanguage::LiteralExpression} value=IdentifierOrValue
	;	
	
AttributeExpression returns expressions::Expression:
	 LiteralExpression  |
	{actionLanguage::AttributeExpression}  attribute=[ecore::EAttribute]
	;			
	
IdentifierOrValue returns ecore::EString:
NUMBER
;	
	
enum AssignOperator returns actionLanguage::AssignOperator: EQUAL='=' | ASSIGN2=':=' | PLUS_EQUAL='+='| EQUAL_PLUS='=+' | MINUS_EQUAL='-='| EQUAL_MINUS='=-' ;	

enum IncrementDecrementOperator returns actionLanguage::IncrementDecrementOperator:
INCREMENT='++'|DECREMENT='--';

enum LogicOperator returns actionLanguage::LogicOperator: 
AND='&' | AND_AND='&&' | OR='|' | OR_OR='||' | XOR='xor' | IMPLY='=>' | EQUIVALENT='<=>' 
;


enum ArithmeticOperator returns actionLanguage::ArithmeticOperator: PLUS='+' | MINUS='-'
|TIMES='*' | DIVIDE='/' | MODULO='%' | EXP='^' ;

enum ComparingOperator returns actionLanguage::ComparingOperator:  
LESS='<' | LESS_OR_EQUAL='<=' | EQUAL='==' | GREATER_OR_EQUAL='>=' | GREATER='>' | UNEQUAL='<>' 
;

enum UnaryOperator returns actionLanguage::UnaryOperator: NOT='not' | MINUS='-' | PLUS='+';

terminal NUMBER returns ecore::EBigDecimal:
	('0'..'9')* ('.' ('0'..'9')+)?;
	