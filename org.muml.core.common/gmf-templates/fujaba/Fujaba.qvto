-- comment by bingo:
-- this file shows errors for me, although it works fine.
-- possibly it does not know about the templates in org.eclipse.gmf.codegen/templates
-- maybe we need to define template-folders as source directories or
-- create a plugin dependency to org.eclipse.gmf.codegen etc.

import gmf.GenModelUtils;
import xpt.StringOperations;
import MetaModel;

modeltype genmodel uses "http://www.eclipse.org/emf/2002/GenModel";
modeltype ecore uses "http://www.eclipse.org/emf/2002/Ecore";
modeltype gmfgen uses "http://www.eclipse.org/gmf/2009/GenModel";

library Fujaba;

-- GenDiagram#usesModelElementCategory
helper usesModelElementCategory(genDiagram : gmfgen::GenDiagram) : Boolean {
	return genDiagram.domainDiagramElement.ecoreClass.eAllSuperTypes->including(genDiagram.domainDiagramElement.ecoreClass)->one(ePackage.name = 'modelinstance' and name = 'ModelElementCategory')
}

helper modelElementCategoryKey(genDiagram : gmfgen::GenDiagram) : String {
	switch {
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'ResourceRepository'){
			return 'org.muml.pm.hardware.hwresource.category';
		}
		
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'ResourceInstanceRepository'){
						return 'org.muml.pm.hardware.hwresource.category';
		}
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'HWPlatformInstanceConfiguration'){
				return 'org.muml.pm.hardware.hwplatform.category';
		}
		
		else{
			return getReflectionPackageName(genDiagram.topLevelNodes->first().getDomainMetaClass().genPackage).xpandReplaceAll('\\.model', '').xpandReplaceAll('\\.component', '\\.components').xpandReplaceAll('\\.msgtype', '\\.messagetype').xpandReplaceAll('\\.platforminstance', '\\.platform') + ".category";
			}
	};
}

helper modelElementCategoryName(genDiagram : gmfgen::GenDiagram) : String {
switch {
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'ResourceRepository'){
			return 'hwresource';
		}
		
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'ResourceInstanceRepository'){
				return 'hwresource';
		}
		case (genDiagram.domainDiagramElement.ecoreClass.name = 'HWPlatformInstanceConfiguration'){
				return 'hwplatform';
		}
		
		else{
				return genDiagram.topLevelNodes->first().getDomainMetaClass().genPackage.ecorePackage.name	
		}
	
	};
}