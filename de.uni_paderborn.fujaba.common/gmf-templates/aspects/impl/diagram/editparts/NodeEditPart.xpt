
«REM»The AROUND-Statement cannot used with overloading, as it seems.«ENDREM» 
«AROUND setupNodePlate FOR gmfgen::GenNode»
	«REM»Call mySetupNodePlate, which is overloaded for different types.«ENDREM»
	«EXPAND mySetupNodePlate»
«ENDAROUND»


«REM»Copied from original NodeEditPart.xpt«ENDREM»
«DEFINE mySetupNodePlate FOR gmfgen::GenChildSideAffixedNode»
	//FIXME: workaround for #154536
	result.getBounds().setSize(result.getPreferredSize());
«ENDDEFINE»

«REM»Copied from original NodeEditPart.xpt«ENDREM»
«DEFINE mySetupNodePlate FOR gmfgen::GenNode»

	// Ensures that the element can be shrinked (Muml Bug #62).
	result.setMinimumSize(new org.eclipse.draw2d.geometry.Dimension(0, 0));

«ENDDEFINE»

«REM» FIX: Muml-Bug #58 «ENDREM»
«AROUND borderItemSelectionEP FOR gmfgen::GenNode-»
new org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy() {

	// BEGIN FIX: Muml-Bug #58
	// (Copied from NonResizableLabelEditPolicy and slightly modified, see comments below)
	private org.eclipse.draw2d.Polyline tether = null;

	protected void eraseChangeBoundsFeedback(org.eclipse.gef.requests.ChangeBoundsRequest request) {
		super.eraseChangeBoundsFeedback(request);
		if (tether != null)
			removeFeedback(tether);
		tether = null;
	}

	protected org.eclipse.draw2d.IFigure createDragSourceFeedbackFigure() {
		org.eclipse.draw2d.IFigure feedback = super.createDragSourceFeedbackFigure();
		tether = new org.eclipse.draw2d.Polyline();
		tether.setLineStyle(org.eclipse.draw2d.Graphics.LINE_DASHDOT);
		tether.setForegroundColor(((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost()).getFigure()
			.getForegroundColor());
		addFeedback(tether);
		return feedback;
	}

	protected void showChangeBoundsFeedback(org.eclipse.gef.requests.ChangeBoundsRequest request) {

		org.eclipse.draw2d.IFigure p = getDragSourceFeedbackFigure();
		org.eclipse.draw2d.geometry.Rectangle r = p.getBounds();
		org.eclipse.draw2d.geometry.Point refPoint = ((org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart) getHost()).getReferencePoint();

		// translate the feedback figure
		org.eclipse.draw2d.geometry.PrecisionRectangle rect = new org.eclipse.draw2d.geometry.PrecisionRectangle(
			getInitialFeedbackBounds().getCopy());
		getHostFigure().translateToAbsolute(rect);
		rect.translate(request.getMoveDelta());
		rect.resize(request.getSizeDelta());
		p.translateToRelative(rect);
		
		
		/* BEGIN MODIFIED for Muml-Bug #58 */
		/* Commented out the following line ... */
		
		//p.setBounds(rect);
		
		/* ... and replaced it with super call */
		super.showChangeBoundsFeedback(request);
		/* END MODIFIED for Muml-Bug #58 */
		

		org.eclipse.draw2d.geometry.Rectangle centerMain = null;
		// TODO: remove this hack. We should be using the reference point for
		// the teher end, however,
		// the reference point is causing miscaculation when positioning. This
		// has to be redone in version 2.
		if (((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost().getParent()).getFigure() instanceof org.eclipse.draw2d.Connection) {
			centerMain = new org.eclipse.draw2d.geometry.Rectangle(refPoint.x, refPoint.y, 0, 0);
			getHostFigure().translateToAbsolute(centerMain);
			p.translateToRelative(centerMain);
		} else {
			centerMain = ((org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart) getHost().getParent())
				.getFigure().getBounds().getCopy();
			centerMain.translate(centerMain.width / 2, centerMain.height / 2);
			getHostFigure().translateToAbsolute(centerMain);
			p.translateToRelative(centerMain);
		}

		org.eclipse.draw2d.geometry.PrecisionRectangle ref = new org.eclipse.draw2d.geometry.PrecisionRectangle(centerMain);

		org.eclipse.draw2d.geometry.Point midTop = new org.eclipse.draw2d.geometry.Point(r.x + r.width / 2, r.y);
		org.eclipse.draw2d.geometry.Point midBottom = new org.eclipse.draw2d.geometry.Point(r.x + r.width / 2, r.y + r.height);
		org.eclipse.draw2d.geometry.Point midLeft = new org.eclipse.draw2d.geometry.Point(r.x, r.y + r.height / 2);
		org.eclipse.draw2d.geometry.Point midRight = new org.eclipse.draw2d.geometry.Point(r.x + r.width, r.y + r.height / 2);

		org.eclipse.draw2d.geometry.Point startPoint = midTop;

		int x = r.x + r.width / 2 - refPoint.x;
		int y = r.y + r.height / 2 - refPoint.y;

		if (y > 0 && y > x && y > -x)
			startPoint = midTop;
		else if (y < 0 && y < x && y < -x)
			startPoint = midBottom;
		else if (x < 0 && y > x && y < -x)
			startPoint = midRight;
		else
			startPoint = midLeft;

		tether.setStart(startPoint);
		tether.setEnd(ref.getLocation());
	}

	// END FIX: Muml-Bug #58

	protected java.util.List createSelectionHandles() {
		org.eclipse.gef.handles.MoveHandle mh = new org.eclipse.gef.handles.MoveHandle((org.eclipse.gef.GraphicalEditPart) getHost());
		mh.setBorder(null);
		return java.util.Collections.singletonList(mh);
	}
}
«ENDAROUND»


«REM»
	When creating a connection with this node as start or end,
	we store our edit part in the ConfigureRequest for that connection.
	See MUML Bug #455 and depending bugs for a more detailed explanation.
«ENDREM»
«AROUND createDefaultEditPoliciesBody FOR gmfgen::GenNode-»
	«targetDef.proceed()»
	installEditPolicy(org.eclipse.gef.EditPolicy.GRAPHICAL_NODE_ROLE,
		new de.uni_paderborn.fujaba.muml.common.edit.policies.ConnectionConfigureHelperGraphicalNodeEditPolicy());
«ENDAROUND»