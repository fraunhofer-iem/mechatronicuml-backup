/*
 * Copyright (c) 2010 Artem Tikhomirov and others
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (independent) - Initial API and implementation
 */

«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«REM» Not changed, but calls _evaluateAndReturnExpressionResult «ENDREM»
«AROUND accessEditExpression FOR gmfgen::ExpressionLabelParser-»
«IF editExpression.oclIsUndefined()-»
	return getPrintString(element, flags);
«ELSE-»
«EXPAND _evaluateAndReturnExpressionResult(self, 'evaluateEditExpression', editExpression) FOR editExpression.provider-»
«ENDIF-»
«ENDAROUND»

«REM» Not changed, but calls _evaluateAndReturnExpressionResult «ENDREM»
«AROUND accessViewExpression FOR gmfgen::ExpressionLabelParser-»
«IF viewExpression.oclIsUndefined()-»
	// TODO
	throw new UnsupportedOperationException();
«ELSE-»
«EXPAND _evaluateAndReturnExpressionResult(self, 'evaluatePrintExpression', viewExpression) FOR viewExpression.provider-»
«ENDIF-»
«ENDAROUND»

«REM» Using AROUND does not work «ENDREM»
«DEFINE _evaluateAndReturnExpressionResult(gmfgen::ExpressionLabelParser parser, String javaMethodName, ValueExpression expression) FOR gmfgen::GenExpressionProviderBase»«ERROR 'Abstract template call: _evaluateAndReturnExpressionResult'»«ENDDEFINE»
«DEFINE _evaluateAndReturnExpressionResult(gmfgen::ExpressionLabelParser parser, String javaMethodName, ValueExpression expression) FOR gmfgen::GenExpressionInterpreter-»
org.eclipse.emf.ecore.EObject target = (org.eclipse.emf.ecore.EObject) element.getAdapter(org.eclipse.emf.ecore.EObject.class);
java.util.Map<java.lang.String, org.eclipse.emf.ecore.EClassifier> typeEnv = new java.util.HashMap<java.lang.String, org.eclipse.emf.ecore.EClassifier>();
java.util.Map<java.lang.String, java.lang.Object> env = new java.util.HashMap<java.lang.String, java.lang.Object>();
initializeEnvironment(typeEnv, env, target);
Object result = «EXPAND xpt::expressions::getExpression::getExpression(expression, parser.expressionContext,
'typeEnv'
)».evaluate(target, env);
return String.valueOf(result);
«ENDDEFINE»
«DEFINE _evaluateAndReturnExpressionResult(gmfgen::ExpressionLabelParser parser, String javaMethodName, ValueExpression expression) FOR gmfgen::GenJavaExpressionProvider-»
return «javaMethodName»((org.eclipse.emf.ecore.EObject) element.getAdapter(org.eclipse.emf.ecore.EObject.class));
«ENDDEFINE»
«DEFINE _evaluateAndReturnExpressionResult(gmfgen::ExpressionLabelParser parser, String javaMethodName, ValueExpression expression) FOR gmfgen::GenLiteralExpressionProvider-»
return «expression.body»;
«ENDDEFINE»
