«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION gmf::GenModelUtils»


«EXTENSION aspects::xpt::diagram::PhantomElement»

«REM»
We add a special treatment of the case that a reference to a phantom node is of the same type as our type.
In this case we use ourselves as child.
«ENDREM»

«AROUND getSemanticChildrenOfView FOR gmfgen::GenContainerBase-»
	«EXPAND xpt::Common::generatedMemberComment»
public static «EXPAND CodeStyle::G('java.util.List', getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName())» «EXPAND xpt::diagram::updater::DiagramUpdater::getSemanticChildrenMethodName»(org.eclipse.gmf.runtime.notation.View view) {
	«IF getSemanticChildrenChildFeatures(self)->size() > 0 or self.getPhantomNodes()->size() > 0-»
		«EXPAND xpt::diagram::updater::DiagramUpdater::defineModelElement-»
		«EXPAND CodeStyle::newGenericInstance('result', 'java.util.LinkedList', getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName())»();
«REM»childMetaFeature can be null here!«ENDREM»«-»
		«FOREACH getSemanticChildrenChildFeatures(self) AS childMetaFeature-»
			«IF null = childMetaFeature-»
	{ /*FIXME no containment/child feature found in the genmodel, toolsmith need to specify Class here manually*/ childElement = /*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/;
			«ELSEIF isListType(childMetaFeature)-»
	for («EXPAND CodeStyle::G('java.util.Iterator', '?')» it = «EXPAND MetaModel::getFeatureValue('modelElement', self.getModelElementType()) FOR childMetaFeature».iterator(); it.hasNext();) {
		«EXPAND MetaModel::DeclareAndAssign('childElement', 'it.next()', true) FOR getTypeGenClassX(childMetaFeature)»
			«ELSE-»
	{ «EXPAND MetaModel::DeclareAndAssign('childElement', 'modelElement', self.getModelElementType(), childMetaFeature) FOR getTypeGenClassX(childMetaFeature)»
			«ENDIF-»
		int visualID = «EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR getDiagram()»(view, «EXPAND MetaModel::DowncastToEObject('childElement') FOR getTypeGenClassX(childMetaFeature)»);
			«EXPAND xpt::diagram::updater::DiagramUpdater::checkChildElementVisualID(null <> childMetaFeature and isListType(childMetaFeature)) FOREACH getSemanticChildren(self, childMetaFeature)-»
	}
		«ENDFOREACH-»
		
		«IF self.getPhantomNodes()->select(x | not derivesContainer(x))->notEmpty()-»
			org.eclipse.emf.ecore.resource.Resource resource = modelElement.eResource();
			«EXPAND CodeStyle::iterate('childElement', 'org.eclipse.emf.ecore.EObject', 'it', 'getPhantomNodesIterator(resource)')-»
				if (childElement == modelElement) {
					continue;
				}
				«EXPAND xpt::diagram::updater::DiagramUpdater::addNextIfPhantom FOREACH self.getPhantomNodes()->select(x | not derivesContainer(x))-»
			}
		«ENDIF-»
		
		«IF self.getPhantomNodes()->select(x | derivesContainer(x))->notEmpty()-»
			«FOREACH self.getPhantomNodes()->select(x | derivesContainer(x)) AS node»
				if («EXPAND xpt::editor::VisualIDRegistry::getNodeVisualIDMethodCall FOR node.getDiagram()»(view, modelElement) == «EXPAND xpt::editor::VisualIDRegistry::visualID FOR node») {
					result.add(new «node.getDiagram().editorGen.diagramUpdater.getNodeDescriptorQualifiedClassName()»(modelElement, «EXPAND xpt::editor::VisualIDRegistry::visualID FOR node»));
				}
			«ENDFOREACH»
		«ENDIF-»	

	return result;
	«ELSE-»
	return «EXPAND CodeStyle::emptyList»;
	«ENDIF-»	
}
«ENDAROUND»



«REM»
	Enhancement for MUML-BUG #446
«ENDREM»
«AROUND defineLinkSource(inLoop : Boolean) FOR gmfgen::TypeLinkModelFacet-»
	«IF isListType(sourceMetaFeature)-»
java.util.List sources = «EXPAND MetaModel::getFeatureValue('link', metaClass) FOR sourceMetaFeature»;
Object theSource = !sources.isEmpty() ? sources.get(0) : null; // Adapted for MUML-BUG #446
if («EXPAND MetaModel::NotInstance('theSource') FOR getSourceType()») {
	«EXPAND stopLinkProcessing(inLoop)-»
}
«EXPAND MetaModel::DeclareAndAssign('src', 'theSource', true) FOR getSourceType()»
	«ELSE-»
«EXPAND MetaModel::DeclareAndAssign('src', 'link', metaClass, sourceMetaFeature) FOR getSourceType()»
	«ENDIF-»
«ENDAROUND»


«REM»
	Enhancement for MUML-BUG #446
«ENDREM»
«AROUND defineLinkDestination(inLoop : Boolean) FOR gmfgen::TypeLinkModelFacet-»
	«IF isListType(targetMetaFeature)-»
java.util.List targets = «EXPAND MetaModel::getFeatureValue('link', metaClass) FOR targetMetaFeature»;
Object theTarget = !targets.isEmpty() ? targets.get(targets.size() - 1) : null; // Adapted for MUML-BUG #446
if («EXPAND MetaModel::NotInstance('theTarget') FOR getTargetType()») {
	«EXPAND stopLinkProcessing(inLoop)-»
}
«EXPAND MetaModel::DeclareAndAssign('dst', 'theTarget', true) FOR getTargetType()»
	«ELSE-»
«EXPAND MetaModel::DeclareAndAssign('dst', 'link', metaClass, targetMetaFeature) FOR getTargetType()»
	«ENDIF-»
«ENDAROUND»


«REM» Just copied so that it can be called from this file «ENDREM»
«DEFINE stopLinkProcessing(inLoop : Boolean) FOR gmfgen::TypeLinkModelFacet-»
«IF inLoop-»
continue;
«ELSE-»
return result;
«ENDIF-»
«ENDDEFINE»