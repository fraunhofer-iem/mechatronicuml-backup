import Util;
import VariableHelper;
import Sort;
import TupleAccessor;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library Expressions;

constructor LiteralExpression::LiteralExpression(value : String) {
	result.value := value;
}

constructor VariableExpression::VariableExpression(variable : Variable) {
	result.variable := variable;
}

constructor ArithmeticExpression::ArithmeticExpression(lhs : Expression, rhs : Expression,
	operator : Operator) {
	leftExpression := lhs;
	rightExpression := rhs;
	result.operator := operator;
}

constructor ConstraintExpression::ConstraintExpression(lhs : Expression, rhs : Expression,
	operator : Operator, comment : String) {
	leftExpression := lhs;
	rightExpression := rhs;
	result.operator := operator;
	if (not comment.oclIsUndefined()) then {
		result.comment := comment;
	} endif;
}

helper Sequence(Sequence(OclAny))::createAdditionExpression() : Expression {
	var lhs : Expression := null;
	self->reverse()->forEach(seq) {
		var variableExpression : VariableExpression := new VariableExpression(seq->getVariable()); 
		if (lhs.oclIsUndefined()) then
			lhs := variableExpression
		else
			lhs := new ArithmeticExpression(variableExpression, lhs, Operator::PLUS)
		endif;
	};
	return lhs;
}

helper Sequence(Sequence(OclAny))::createAdditionConstraintExpression(op : Operator, lit : String, comment : String)
	: ConstraintExpression {
	-- no forEach here (we want to call the "real" operation)
	var lhs : Expression := self->createAdditionExpression();
	return new ConstraintExpression(lhs, new LiteralExpression(lit),
		op, comment);
}

helper Sequence(TupleValue)::createWeightingComponentResourceTuplesAdditionExpression(tupleDescriptor : WeightTupleDescriptor, expression : Expression) : Expression {
	var expr : Expression := expression;
	self->asOrderedSet()->reverse()->collect(oclAsType(TupleValue))->forEach(tv) {
		var tmp : Expression := new ArithmeticExpression(
			new LiteralExpression(tv.getWeighting(tupleDescriptor)), // getWeighting is imported via the Sort lib
			new VariableExpression(tv.toSequence()->sortComponentResourceSequence()->getVariable()),
			Operator::TIMES
		);
		if (expr.oclIsUndefined()) then
			expr := tmp
		else
			expr := new ArithmeticExpression(tmp, expr, Operator::PLUS)
		endif;
	};
	return expr;
}
