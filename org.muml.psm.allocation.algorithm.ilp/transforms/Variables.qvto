import Expressions;
import Util;
import VariableHelper;

modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/expressions/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');

library Variables;

helper Sequence(OclAny)::createHelperVariableAndConstraints(inout ilp : IntegerLinearProgram) : Variable {
	var variable : Variable := self->getVariable();
	if (not variable.oclIsUndefined()) then {
		return variable;
	} endif;
	variable := self->map createBinaryVariable();
	ilp.variables += variable;
	var sequences : Sequence(Sequence(OclAny)) := self->getSequences();
	sequences->forEach(seq) {
		var seqVariable : Variable := seq->getVariable();
		assert fatal (not variable.oclIsUndefined()) with
			log("no variable for sequence found");
		ilp.constraints += new ConstraintExpression(new VariableExpression(variable),
			new VariableExpression(seqVariable), ComparingOperator::LESS_OR_EQUAL,
			null);
	};
	var lhs : Expression := sequences->createAdditionExpression();
	var rhs : Expression := new ArithmeticExpression(
		new LiteralExpression((sequences->size() - 1).toString()),
		new VariableExpression(variable), ArithmeticOperator::PLUS);
	ilp.constraints += new ConstraintExpression(lhs, rhs,
		ComparingOperator::LESS_OR_EQUAL, null);
	return variable;
}

query Sequence(OclAny)::getSequences() : Sequence(Sequence(OclAny)) {
	assert fatal (self->size() > 2 and self->size().mod(2) = 0) with
		log("illegal sequence");
	return getOddNumbers(1, self->size())->collectNested(i |
		Sequence { self->at(i), self->at(i + 1) }
	);
}

// binary

mapping Sequence(OclAny)::createBinaryVariable() : Variable {
	log("binary called for: " + self->getVariableName());
	name := self->getVariableName();
	dataType := ILPDataType::BINARY;
}

query Variable::getBinaryVariableSequence() : Sequence(OclAny) {
	return self.invresolveoneIn(
		Sequence(OclAny)::createBinaryVariable,
		Sequence(OclAny)
	);
}