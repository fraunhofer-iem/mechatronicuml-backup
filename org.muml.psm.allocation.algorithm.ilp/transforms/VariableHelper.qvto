import Util;

modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/expressions/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');
modeltype instance uses pim::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/hwresourceinstance/1.0.0');
modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');

library VariableHelper;

property nameProvider : NameProvider;

query ILLEGAL_VARIABLE_CHARS() : OrderedSet(String) {
	return OrderedSet{' '};
}

query OclAny::getVariableName() : String {
	return this.nameProvider.getName(self);
}

query Sequence(OclAny)::getVariableName() : String {
	return '_'.join(self->collect(getVariableName()));
}

query Sequence(NamedElement)::getVariable() : Variable {
	return Sequence{self}.resolveone(Variable);
}

helper initialize(nameProvider : NameProvider) {
	this.nameProvider := nameProvider;
}