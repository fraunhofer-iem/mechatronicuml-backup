import Expressions;
import OCLEvaluator;
import TupleAccessor;
import Sort;
import Variables;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library ResourceConstraintLib;

// In this lib we do a lot of sorting: this is only needed to get
// a reproducable output (and it indirectly reduces the number of
// needed variables in some cases (see
// resourceConstraint/resourceConstraintMultipleConstraintsAndDescriptorsOrder.allocation_specification
// fixture file)). All this sorting is needed, because we often
// switch between a tuple value and its sequence representation
// (we cannot solely use the sequence representation, because we need access
// to the lhs value (and maintaining the lhs value in the sequence is awkward
// (OclAny + Real => common supertype OclAny))).

helper Specification::createResourceConstraints(inout ilp : IntegerLinearProgram,
	oclContext : OclAny) {
	self.getResourceConstraints()->createResourceConstraint(ilp, oclContext);
}

helper ResourceConstraint::createResourceConstraint(inout ilp : IntegerLinearProgram,
	oclContext : OclAny) {
	var sequences : Sequence(TupleValue) := self.evaluateOCL(oclContext)
		.asTupleValueSequence();
	sequences->sortOuterResultSequence(self)->createResourceConstraint(ilp, self);
}

query Sequence(TupleValue)::sortOuterResultSequence(constraint : ResourceConstraint) : Sequence(TupleValue) {
	return self->sortedBy(tv : TupleValue | tv.getOuterId(constraint));
}

query TupleValue::getOuterId(constraint : ResourceConstraint) : String {
	// the outer id consists of the rhs + the join of all inner ids
	// this uniquely identifies an outer tuple (because the outer tuples
	// are contained in a set => no duplicates)
	return let char : String = ILLEGAL_VARIABLE_CHARS()->at(1)
	in
	self.getRhsValue(constraint) + char + char.join(
		self.getSequence(constraint.tupleDescriptor.weight)
			->sortWeightingComponentResourceTuples(constraint.tupleDescriptor)
			->collect(tv : TupleValue | tv.getWeightingComponentResourceTupleSortId(constraint.tupleDescriptor))
	);
}

helper TupleValue::createResourceConstraint(inout ilp : IntegerLinearProgram, constraint : ResourceConstraint) {
	var sequence : Sequence(TupleValue) := self.getSortedInnerResultSequence(constraint);
	log("invalid? " + sequence->oclIsInvalid().toString());
	sequence->collectNested(tv : TupleValue |
		tv.toSequence()->sortComponentResourceSequence() // sort the sequence
	)->forEach(seq) {
		seq->createHelperVariableAndConstraints(ilp);
	};
	sequence->createResourceConstraintExpression(ilp, constraint, self.getRhsValue(constraint));
}

query TupleValue::getSortedInnerResultSequence(constraint : ResourceConstraint) : Sequence(TupleValue) {
	return self.getSequence(constraint.tupleDescriptor.weight)
		->sortWeightingComponentResourceTuples(constraint.tupleDescriptor);
}

helper Sequence(TupleValue)::createResourceConstraintExpression(inout ilp : IntegerLinearProgram,
	constraint : ResourceConstraint, rhsValue : String) {
	var comment : String := if constraint.name <> '' then constraint.name else constraint.repr() endif;
	ilp.constraints += new ConstraintExpression(
		self->createWeightingComponentResourceTuplesAdditionExpression(constraint.tupleDescriptor, null),
		new LiteralExpression(rhsValue),
		ComparingOperator::LESS_OR_EQUAL, comment);
}

query TupleValue::getRhsValue(constraint : ResourceConstraint) : String {
	return self.getValue(constraint.tupleDescriptor.bound);
}

query TupleValue::getValue(namedPart : String) : String {
	return self.get(namedPart).oclAsType(Real).toString();
}

query Specification::getResourceConstraints() : OrderedSet(ResourceConstraint) {
	return self.constraints
		->select(oclIsKindOf(ResourceConstraint))
		->collect(oclAsType(ResourceConstraint))
		->asOrderedSet();
}
