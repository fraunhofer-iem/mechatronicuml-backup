import Expressions;
import OCLEvaluator;
import TupleAccessor;
import VariableHelper;
import Variables;
import Util;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library GeneralConstraint;

helper Specification::createRelationConstraints(ilp : IntegerLinearProgram, oclContext : OclAny) {
	self.relations->createConstraint(ilp, oclContext);
}

helper Relation::createConstraint(inout ilp : IntegerLinearProgram, oclContext : OclAny) {
	var lower : Integer := self.lowerBound.evaluateOCL(oclContext).asInteger();
	var upper : Integer := self.upperBound.evaluateOCL(oclContext).asInteger();
	-- a negative lower bound makes no sense (probably a specification error?)
	assert fatal (lower >= 0) with
		log("lower bound >= 0 expected (" + self.name + ")");
	-- -1 means "unbounded", which is just for usability (since the model has
	-- has a finite number of model elements, an explicit bound could be
	-- computed)
	-- an upper bound of 0 is questionable (could be used to quickly disable
	-- a relation (set lower and upper bound to 0) => do not complain for now)
	assert fatal (upper >= -1) with
		log("upper bound >= -1 expected (" + self.name + ")");

	var relation : Sequence(Sequence(OclAny)) := self.evaluateOCL(oclContext)
		.asTupleValueSequence()
		->collectNested(tv : TupleValue |
			tv.toSequence()
		);
	relation->createVariables(ilp);
	var sources : OrderedSet(OclAny) := relation->collect(seq : Sequence(OclAny) |
		seq->at(1)
	)->asOrderedSet()->sortedBy(
		getVariableName()
	);
	sources->forEach(source) {
		ilp.constraints += source.getRelations(relation)
			->createAdditionConstraintExpressions(lower, upper, self.name);
	};
}

helper Sequence(Sequence(OclAny))::createVariables(inout ilp : IntegerLinearProgram) {
	self->select(seq : Sequence(OclAny) |
		seq->getVariable().oclIsUndefined()
	)->sortedBy(seq : Sequence(OclAny) |
		seq->getVariableName()
	)->forEach(seq) {
		ilp.variables += seq->map createBinaryVariable()
	};
}

query OclAny::getRelations(relation : Sequence(Sequence(OclAny))) : Sequence(Sequence(OclAny)) {
	return relation->select(seq : Sequence(OclAny) |
		seq->at(1) = self
	)->sortedBy(seq : Sequence(OclAny) |
		seq->getVariableName()
	);
}

helper Sequence(Sequence(OclAny))::createAdditionConstraintExpressions(lower : Integer,
	upper : Integer, relationName : String) : Sequence(ConstraintExpression) {
	assert fatal (self->size() >= 1 and self->at(1)->size() = 2)
		with log("unexpected sequence size");
	var comment : String := if relationName.oclIsUndefined() or relationName = '' then
		''
	else
		relationName + '_'
	endif;
	comment := comment + self->at(1)->at(1).getVariableName();
	if (lower = upper) {
		return Sequence {
			self->createAdditionConstraintExpression(
				Operator::EQUAL_TO, lower.toString(), comment
			)
		};
	} endif;
	return self->createAdditionConstraintExpression(
		Operator::GREATER_THAN_OR_EQUAL_TO, lower.toString(), comment
	)->asSequence()->union(
		if (upper = -1) then
			-- -1 means "unbounded" => no constraint for the upper bound
			Sequence{}
		else
			self->createAdditionConstraintExpression(
				Operator::LESS_THAN_OR_EQUAL_TO, upper.toString(), comment
			)->asSequence()
		endif
	);
}