import InputHelper;
import Expressions;
import GeneralConstraint;
import LocationConstraint;
import RequiredHardwareResourceInstanceConstraint;
import ResourceConstraint;
import ObjectiveFunction;
import Util;
import Variables;

modeltype allocationSpecification uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype oclcontext uses oclcontext('http://www.muml.org/psm/allocation/language/oclcontext/1.0.0');
//modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/expressions/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');
modeltype instance uses pim::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/hwresourceinstance/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype ocl uses essentialoclcs('http://www.eclipse.org/ocl/2015/EssentialOCLCS');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

transformation Specification2ILP(in specification : allocationSpecification, in ins : instance, in hwpi : hwpinstance, out ilpOut : ilptype);

main() {
	var specificationCS : SpecificationCS := specification.getSpecification();
	var cic : ComponentInstanceConfiguration := ins.getRootCIC();
	var hpic : HWPlatformInstanceConfiguration := hwpi.getRootHPIC();
	var ilp : IntegerLinearProgram := object IntegerLinearProgram {};
	var startTime : Integer;
	var endTime : Integer;
	startTime := getCurrentTime();
	ilp.map createGeneralConstraints(cic, hpic);
	endTime := getCurrentTime();
	log("Time for create GeneralConstraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specificationCS.createLocationConstraints(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create LocationConstraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specificationCS.createHWResInstanceConstraints(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create required Location constraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specificationCS.createResourceConstraints(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create required resource constraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specificationCS.createObjectiveFunction(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create objective functions:"+((endTime-startTime)/1000).toString()+" seconds");
	//specificationCS.getSameLocationConstraints()->createSameLocationConstraint(ilp, cic, hpic);
	ilpOut.removeOrphans();
	//log(cic.toString());
	//var ctx : OCLContext := createOCLContext(cic, null);
	//log(ctx.toString());
	//log("in qvto ocl result: " + evaluateOCL(null, ctx).toString());
}

helper ilptype::removeOrphans() {
	self.removeElement(createOCLContext(ins.getRootCIC(), hwpi.getRootHPIC()));
}