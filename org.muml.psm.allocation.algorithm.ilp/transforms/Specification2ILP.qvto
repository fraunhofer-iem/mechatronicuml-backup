import InputHelper;
import Expressions;
import GeneralConstraint;
import LocationConstraint;
import RequiredHardwareResourceInstanceConstraint;
import ResourceConstraint;
import ObjectiveFunction;
import Util;
import Variables;
import VariableHelper;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype allocationSpecificationCS uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype oclcontext uses oclcontext('http://www.muml.org/psm/allocation/language/oclcontext/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation Specification2ILP(in specificationCS : allocationSpecificationCS, in oclContextIn : ecore, out ilpOut : ilptype);

main() {
	var specification : Specification := specificationCS.getSpecification();
	var oclContext : OclAny = oclContextIn.getOclContext();
	var ilp : IntegerLinearProgram := object IntegerLinearProgram {};
	var startTime : Integer;
	var endTime : Integer;
	startTime := getCurrentTime();
	VariableHelper::initialize(specification.nameProvider);
	specification.createRelationConstraints(ilp, oclContext);
	endTime := getCurrentTime();
	log("Time for create GeneralConstraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specification.createLocationConstraints(ilp, oclContext);
	endTime := getCurrentTime();
	log("Time for create LocationConstraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specification.createHWResInstanceConstraints(ilp, oclContext);
	endTime := getCurrentTime();
	log("Time for create required Location constraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specification.createResourceConstraints(ilp, oclContext);
	endTime := getCurrentTime();
	log("Time for create required resource constraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	specification.createObjectiveFunction(ilp, oclContext);
	endTime := getCurrentTime();
	log("Time for create objective functions:"+((endTime-startTime)/1000).toString()+" seconds");
}