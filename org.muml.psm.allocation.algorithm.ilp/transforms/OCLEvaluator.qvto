import org.muml.psm.allocation.algorithm.ocl.OCLEvaluatorBlackboxUnit;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');

library OCLEvaluator;

//blackbox query evaluate(oclExpression : Context, contextObject : OclAny) : OclAny;
//blackbox query evaluateLocationConstraint(oclExpression : Context, contextObject : OclAny) : OrderedSet(TupleValue);

helper EvaluatableElement::evaluateOCL(contextObject : OclAny) : OclAny {
	var res : OclAny := evaluateEvaluatableElement(self, contextObject);
	log("evaluateOCL");
	res.map createTrace(self);
	return res;
}

mapping OclAny::createTrace(evaluatableElement : EvaluatableElement) : EvaluatableElement {
	init {
		result := evaluatableElement;
		log("createTrace called");
	}
}

// XXX: actually this belongs to a separate "Conversion" lib
// (see also the comment in the OCLEvaluator class)
helper OclAny::asInteger() : Integer {
	return convertToInteger(self);
}