modeltype allocationSpecificationCS uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

// This library provides queries so that different transformations/libraries
// can access the input models (provided by the "input" extents) in a unified
// way.

library InputHelper;

query OclAny::getSpecification() : Specification {
	assert fatal (self.oclIsKindOf(allocationSpecificationCS)) with log("allocationSpecification type expected");
	var specificationSet : Set(SpecificationCS) := self.oclAsType(allocationSpecification)
		.rootObjects()[SpecificationCS];
	assert fatal (specificationSet->size() = 1) with log("expected exactly one allocation specification");
	return specificationSet->any(true).pivot.oclAsType(Specification);
}

query OclAny::getOclContext() : OclAny {
	assert fatal (self.oclIsKindOf(ecore)) with log("ecore type expected");
	var rootObjects : Set(OclAny) := self.oclAsType(ecore).rootObjects();
	assert fatal (rootObjects->size() = 1) with log("expected exactly one root object");
	return rootObjects->any(true);
}
