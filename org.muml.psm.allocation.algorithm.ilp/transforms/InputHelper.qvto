modeltype allocationSpecificationCS uses cs('http://www.muml.org/psm/allocation/language/cs/1.0.0');
modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype instance uses pim::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');

// This library provides queries so that different transformations/libraries
// can access the input models (provided by the "input" extents) in a unified
// way.

library InputHelper;

query OclAny::getRootCIC() : ComponentInstanceConfiguration {
	assert fatal (self.oclIsKindOf(instance)) with log("instance type expected");
	var cicSet : Set(ComponentInstanceConfiguration) := self.oclAsType(instance)
		.rootObjects()[ComponentInstanceConfiguration];
	assert fatal (cicSet->size() = 1) with log("expected exactly one root cic");
	return cicSet->any(true);
}

query OclAny::getRootHPIC() : HWPlatformInstanceConfiguration {
	assert fatal (self.oclIsKindOf(hwpinstance)) with log("hwpinstance type expected");
	var hpicSet : Set(HWPlatformInstanceConfiguration) := self.oclAsType(hwpinstance)
		.rootObjects()[HWPlatformInstanceConfiguration];
	log("hpicSet: " + hpicSet->size().toString());
	assert fatal (hpicSet->size() = 1) with log("expected exactly one root hpic");
	return hpicSet->any(true);
}

query OclAny::getSpecification() : Specification {
	assert fatal (self.oclIsKindOf(allocationSpecificationCS)) with log("allocationSpecification type expected");
	var specificationSet : Set(SpecificationCS) := self.oclAsType(allocationSpecification)
		.rootObjects()[SpecificationCS];
	assert fatal (specificationSet->size() = 1) with log("expected exactly one allocation specification");
	return specificationSet->any(true).pivot.oclAsType(Specification);
}