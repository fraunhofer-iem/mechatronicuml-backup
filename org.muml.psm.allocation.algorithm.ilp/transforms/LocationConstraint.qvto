import Expressions;
import HWUtil;
import OCLEvaluator;
import Util;
import VariableHelper;
import Variables;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype oclcontext uses oclcontext('http://www.muml.org/psm/allocation/language/oclcontext/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/expressions/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');
modeltype instance uses pim::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');
modeltype hwrinstance uses hardware::hwresourceinstance('http://www.muml.org/pm/hardware/hwresourceinstance/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');


library LocationConstraintLib;

// the implementation of the differentLocation constraint differs from the approach,
// which was described in my thesis

helper Specification::createLocationConstraints(inout ilp : IntegerLinearProgram,
	cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) {
	var startTime : Integer;
	var endTime : Integer;
	startTime := getCurrentTime();
	self.getSameLocationConstraints()->createLocationConstraint(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create collocation Constraints:"+((endTime-startTime)/1000).toString()+" seconds");
	startTime := getCurrentTime();
	self.getDifferentLocationConstraints()->createLocationConstraint(ilp, cic, hpic);
	endTime := getCurrentTime();
	log("Time for create separate location Constraints:"+((endTime-startTime)/1000).toString()+" seconds");
}

helper LocationConstraint::createLocationConstraint(inout ilp : IntegerLinearProgram,
	cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) {
	var sequences : Sequence(Sequence(OclAny)) := self.getHelperVariableSequences(cic, hpic);
	sequences->forEach(seq) {
		seq->createHelperVariablesAndConstraints(ilp);
	};
	var instances : OrderedSet(OclAny) := sequences->collect(seq : Sequence(OclAny) |
		seq->at(1)
	)->asOrderedSet()->sortedBy(getVariableName());
	ilp.constraints += instances->createLocationConstraintConstraintExpression(sequences, self);
}

helper OclAny::createLocationConstraintConstraintExpression(sequences : Sequence(Sequence(OclAny)),
	locationConstraint : LocationConstraint) : ConstraintExpression {
	var mySequences : Sequence(Sequence(OclAny)) := self.getSequences(sequences)->asSequence();
	var comment : String := if locationConstraint.name <> '' then locationConstraint.name else locationConstraint.repr() endif;
	var lit : String := if locationConstraint.type = LocationConstraintTypes::SAME_LOCATION then
			mySequences->collect(seq : Sequence(OclAny) | seq->at(3))
				->asSet()->size().toString()
		else
			'0'
		endif;
	return mySequences->createAdditionConstraintExpression(lit, comment);
}

// returns "my" sequences
query OclAny::getSequences(sequences : Sequence(Sequence(OclAny))) : OrderedSet(Sequence(OclAny)) {
	return sequences->select(seq : Sequence(OclAny) | seq->at(1) = self)
		->asOrderedSet()->sortedBy(getVariableName());
}

// removed

query LocationConstraint::getHelperVariableSequences(cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) : Sequence(Sequence(OclAny)) {
	var oclContext : oclcontext::OCLContext := createOCLContext(cic, hpic);
	var res : Sequence(TupleValue) := self.evaluateOCL(oclContext);
	return res->getLocationConstraintHelperVariableSequences(hpic.getResourceInstances());
}

query Sequence(TupleValue)::getLocationConstraintHelperVariableSequences(resourceInstanceSet : OrderedSet(ResourceInstance))
	: Sequence(Sequence(OclAny)) {
	return self->iterate(it : TupleValue; acc : Sequence(Sequence(OclAny)) = Sequence{} |
		acc->union(it.getLocationConstraintHelperVariableSequences(resourceInstanceSet))
	)->sortedBy(getVariableName());
}

query TupleValue::getLocationConstraintHelperVariableSequences(resourceInstanceSet : OrderedSet(ResourceInstance))
	: Sequence(Sequence(OclAny)) {
	// sort by instance set by variable name
	var sequence : Sequence(OclAny) := self.toSequence()->sortedBy(getVariableName());
	var size : Integer = sequence->size();
	assert fatal (size = 2) with log("unexpected sequence size: " + size.toString());
	return resourceInstanceSet->sortedBy(getVariableName())->collectNested(ri : ResourceInstance |
		Sequence{sequence->at(1), ri, sequence->at(2), ri}
	);
}

mapping inout IntegerLinearProgram::createSameLocationConstraints(cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) {
}

query Specification::getLocationConstraints(wantedType : LocationConstraintTypes) : OrderedSet(LocationConstraint) {
	return self.constraints->select(oclIsKindOf(LocationConstraint))
		->collect(oclAsType(LocationConstraint))
		->select(type = wantedType)
		->asOrderedSet();	
}

query Specification::getSameLocationConstraints() : OrderedSet(LocationConstraint) {
	return self.getLocationConstraints(LocationConstraintTypes::SAME_LOCATION);
}

query Specification::getDifferentLocationConstraints() : OrderedSet(LocationConstraint) {
	return self.getLocationConstraints(LocationConstraintTypes::DIFFERENT_LOCATION);
}