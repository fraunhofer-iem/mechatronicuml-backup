import InputHelper;
import Specification2ILP;
import SolverConstants;

import org.muml.common._blackbox.SaveXMIBlackbox;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');

/* Abstract library for ILP-based algorithms */
library AbstractILPBasedAlgorithm;

configuration property STORE_ILP_MODEL : Boolean;

helper computeAllocation() {
	var ilpOut : ilptype := ilptype.createEmptyModel().oclAsType(ilptype);
	var ret : Status := new Specification2ILP(getAllocationSpecificationIn().oclAsType(allocationSpecification),
		getOclContextIn().oclAsType(ecore),
		ilpOut).transform();
	log("ret: " + ret.toString());
	assert fatal (ret.succeeded()) with log("Specification2ILP transformation failed: " + ret.toString());
	var ilpModel : IntegerLinearProgram := ilpOut.rootObjects()![IntegerLinearProgram];
	if (STORE_ILP_MODEL) then {
		save(ilpModel->asBag(), "ILP Model", "ilp.lp");
	} endif;
	createAllocation(ilpModel);
}

query getAllocationSpecificationIn() : OclAny {
	assert fatal (false) with log("implement me in a sub transformation");
	return null;  // never reached
}

query getOclContextIn() : OclAny {
	assert fatal (false) with log("implement me in a sub transformation");
	return null;  // never reached
}

// assumption: there is only a single out extent
mapping OclAny::addToOutExtent() : EObject
	when { self.oclIsKindOf(EObject) }
{
	init {
		result := self.oclAsType(EObject);
	}
}

helper createAllocation(ilpModel : IntegerLinearProgram) {
	var solution : Dict(Variable, Integer) := Dict{};
	var ret : Integer := solveILP(ilpModel, solution);
	// in case of an error an empty SystemAllocation is returned 
	if (ret = INFEASIBLE()) then {
		log("solveILP: problem is infeasible (no allocation exists)");
	} elif (ret != SUCCESS()) then {
		log("solveILP: solver returned code " + ret.toString());
	} endif;
	var specification : Specification := getAllocationSpecificationIn()
		.getSpecification();
	var oclContext : OclAny := getOclContextIn()
		.getOclContext();
	specification.storageProvider.initialize(oclContext);
	var startTime : Integer;
	var endTime : Integer;
	startTime := getCurrentTime();
	var todo : OrderedSet(Variable) := solution->keys()
		->select(k | solution->get(k) = 1)
		->sortedBy(name)->asOrderedSet();
	if (todo->isEmpty()) {
		specification.storageProvider.noRelationFound().map addToOutExtent();
	};

	todo->addRelation(specification);
	endTime := getCurrentTime();
	log("Time for create allocation model:"+((endTime-startTime)/1000).toString()+" seconds");		
}

helper solveILP(ilpModel : IntegerLinearProgram, solution : Dict(Variable, Integer)) : Integer {
	assert fatal (false) with log("solveILP has be implemented in a sub transformation");
	return INFEASIBLE();  // never reached
}

helper Variable::addRelation(specification : Specification) {
	var seq : Sequence(OclAny) := self.getBinaryVariableSequence();
	// just some sanity checks (should never happen in "production")
	assert fatal (not seq->oclIsUndefined()) with log("seq is undefined");
	assert fatal (not seq->oclIsInvalid()) with log("seq is invalid");
	assert fatal (seq->notEmpty()) with log("seq is empty");
	assert fatal (seq->size().mod(2) = 0) with log("unexpected size: " + seq->size().toString());
	if (seq->size() != 2) then {
		return;
	} endif;
	specification.storageProvider.store(seq->at(1), seq->at(2)).map addToOutExtent();
}