import org.muml.psm.allocation.algorithm.ocl.TupleAccessorBlackboxUnit;
import Util;
import OCLEvaluator;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library TupleAccessor;

helper OclAny::asTupleValueSequence() : Sequence(TupleValue) {
	log("asTupleValueSequence called for: " + self.toString());
	var evaluableElement : EvaluableElement := self.resolveone(EvaluableElement);
	log(evaluableElement.toString());
	assert fatal (not evaluableElement.oclIsUndefined()) with log("no OCLEvaluator::createTrace call?");
	var res : Sequence(TupleValue) := convertToTupleValueSequence(self);
	evaluableElement.createTrace(res);
	return res;
}

-- we need to associate each tuple value with the evaluable element
helper EvaluableElement::createTrace(tupleValues : Sequence(TupleValue)) {
	createTrace(self, tupleValues);
}

-- here we do the same, but also each "inner" tuple value is associated
-- with the evaluable element
helper ResourceConstraint::createTrace(tupleValues : Sequence(TupleValue)) {
	-- do this first, otherwise the tv.getSequence call below fails
	-- (which is, of course, expected)
	createTrace(self, tupleValues);
	createTrace(self,
		tupleValues->collect(tv : TupleValue |
			tv.getSequence(self.tupleDescriptor.weight)
		)->collect(oclAsType(TupleValue)));
}

-- associate each tuple value in tupleValues with the passed evaluableElement
helper createTrace(evaluableElement : EvaluableElement, tupleValues : Sequence(TupleValue)) {
	tupleValues->map OCLEvaluator::createTrace(evaluableElement);
}

helper TupleValue::get(namedPart : String) : OclAny {
	//log("resolve call: ");res.
	log("TupleValue::get called");
	var evaluableElement : EvaluableElement := self.resolveone(EvaluableElement);
	//log(source.toString());
	return getPart(self, namedPart, evaluableElement);
}

helper TupleValue::getSequence(namedPart : String) : Sequence(TupleValue) {
	var evaluableElement : EvaluableElement := self.resolveone(EvaluableElement);
	return getSequencePart(self, namedPart, evaluableElement);
}

query TupleValue::toSequence() : Sequence(OclAny) {
	// it might be possible that evaluableElement is not the
	// evaluableElement we expect: evaluableElement might
	// be a previously transformed constraint. This is no problem,
	// because the toSequence call will return the _expected_ sequence.
	// Alternatively, we can fix this be doing an resolve(...)->last() or
	// ->first() (to be investigated) to get the "correct"/expected constraint
	// (implicit assumption: the tuple value is only accessed during the transformation
	// of the constraint)
	var evaluableElement : EvaluableElement := self.resolveone(EvaluableElement);
	return evaluableElement.toSequence(self);
}

query Relation::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	// there should be exactly one typedPair
	return self.tupleDescriptor.toSequence(tupleValue);
}

query CoherenceConstraint::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	// there should be exactly one typedPair
	return self.tupleDescriptor.toSequence(tupleValue); 
}

query TupleDescriptor::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	return self.typedPairs->collect(typedPair : TypedPair |
		Sequence{
			tupleValue.get(typedPair.first.name),
			tupleValue.get(typedPair.second.name)
		}
	);
}

query LocationConstraint::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	return self.tupleDescriptor.toSequence(tupleValue);
}

// Note: it is not possible to generalize the next two queries into
// WeightingComponentResourceTupleElement::toSequence, because WeightingComponentResourceTupleElement
// is just a "secondary" superclass in ResourceConstraint' and QoSDimensionConstraint'
// inheritance hierarchy. As a consequence the "catch-call" EvaluableElement::toSequence
// query is called and the transformation fails. XXX: how does qvto's "linearization" algo work?
query ResourceConstraint::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	// unfortunately we cannot check if tupleValue corresponds to an "inner" tuple
	// (well... we could do this via a blackbox but it is probably not worth the effort)
	// => we assume that the caller knows what he/she is doing
	return self.tupleDescriptor.toSequence(tupleValue);
}

query QoSDimension::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	return self.tupleDescriptor.toSequence(tupleValue);
}

query EvaluableElement::toSequence(tupleValue : TupleValue) : Sequence(OclAny) {
	// should not happen
	assert fatal (false) with log("add element specific ::toSequence mapping for " + self.toString());
	return null;
}