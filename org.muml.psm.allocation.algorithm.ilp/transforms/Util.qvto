library Util;

query String::join(wordList : Sequence(String)) : String {
	return wordList->iterate(s : String; acc : String = '' |
		if acc = '' then
			s
		else
			acc + self + s
		endif
	)
}

// XXX: the above isn't true anymore for the qvto that is shipped with neon
// => commented it for now (will be removed after some further testing)
// hmm this is a standard ocl library operation - why doesn't qvto provide it?
--query OrderedSet(OclAny)::reverse() : OrderedSet(OclAny) {
--	return OrderedSet{1 .. self->size()}->iterate(i : Integer; acc : OrderedSet(OclAny) = OrderedSet{} |
--		acc->append(self->at(self->size() - i + 1))
--	);
--}

query Sequence(OclAny)::orderedProduct(sequence : Sequence(OclAny)) : OrderedSet(Tuple(first : OclAny, second : OclAny)) {
	log("orderedProduct start");
	var res : OrderedSet(Tuple(first : OclAny, second : OclAny)) := OrderedSet{};
	self->forEach(itm1) {
		sequence->forEach(itm2) {
			res := res->append(Tuple{first = itm1, second = itm2});
		};
	};
	log("product end: " + res->isEmpty().toString());
	res->forEach(t) {
		log("product: " + t.toString());
	};
	return res;
}

query getOddNumbers(lower : Integer, upper : Integer) : OrderedSet(Integer) {
	return OrderedSet{lower .. upper}->select(i | i.mod(2) = 1);
}

helper Sequence(OclAny)::print() {
	log("##: " + self->size().toString());
	self->forEach(itm) {
		log(itm.toString());
	};
	log("##")
}
