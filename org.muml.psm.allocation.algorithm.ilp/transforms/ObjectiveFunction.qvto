import Expressions;
import OCLEvaluator;
import TupleAccessor;
import Sort;
import Variables;
import Util;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype oclcontext uses oclcontext('http://www.muml.org/psm/allocation/language/oclcontext/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/expressions/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/expressions/common/1.0.0');
modeltype instance uses pim::instance('http://www.muml.org/pim/instance/1.0.0');
modeltype hwpinstance uses hardware::hwplatforminstance('http://www.muml.org/pm/hardware/hwplatforminstance/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library ObjectiveFunctionLib;

helper Specification::createObjectiveFunction(inout ilp : IntegerLinearProgram,
	cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) {
	var expression : Expression := self.createAdditionExpression(ilp, cic, hpic);
	if (expression.oclIsUndefined()) then {
		expression := new LiteralExpression('1');
	} endif;
	ilp.objectiveFunction := new ObjectiveFunctionExpression(self.getGoal(),
		expression);
}

helper Specification::createAdditionExpression(inout ilp : IntegerLinearProgram,
	cic : ComponentInstanceConfiguration,
	hpic : HWPlatformInstanceConfiguration) : Expression {
	var oclContext : oclcontext::OCLContext := createOCLContext(cic, hpic);
	var expression : Expression := null;
	self.getQoSDimensions()->asOrderedSet()->reverse()->collect(oclAsType(QoSDimension))->forEach(qosDimension) {
		var sequence : Sequence(TupleValue) := qosDimension.evaluateOCL(oclContext)
			.asTupleValueSequence()
			->sortWeightingComponentResourceTuples(qosDimension.tupleDescriptor);
		sequence->collectNested(tv : TupleValue |
			tv.toSequence()->sortComponentResourceSequence()
		)->forEach(seq) {
			seq->createHelperVariablesAndConstraints(ilp);
		};
		expression := sequence->createWeightingComponentResourceTuplesAdditionExpression(qosDimension.tupleDescriptor, expression);
	};
	return expression;
}

constructor ObjectiveFunctionExpression::ObjectiveFunctionExpression(goal : ObjectiveGoal,
	objectiveFunction : Expression) {
	result.goal := goal;
	result.objectiveFunction := objectiveFunction;
}

query Specification::getQoSDimensions() : Sequence(QoSDimension) {
	return if self.measure.oclIsUndefined() then
		Sequence{}
	else
		self.measure.services->collect(dimensions)
	endif
}

query Specification::getGoal() : ObjectiveGoal {
	return if self.goal = Goal::MAX then
		ObjectiveGoal::MAX
	else
		ObjectiveGoal::MIN
	endif;
}