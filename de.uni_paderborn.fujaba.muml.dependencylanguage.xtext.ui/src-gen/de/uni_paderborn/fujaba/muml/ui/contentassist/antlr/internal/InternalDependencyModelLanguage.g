/*
* generated by Xtext
*/
grammar InternalDependencyModelLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.uni_paderborn.fujaba.muml.services.DependencyModelLanguageGrammarAccess;

}

@parser::members {
 
 	private DependencyModelLanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DependencyModelLanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDependencyModel
entryRuleDependencyModel 
:
{ before(grammarAccess.getDependencyModelRule()); }
	 ruleDependencyModel
{ after(grammarAccess.getDependencyModelRule()); } 
	 EOF 
;

// Rule DependencyModel
ruleDependencyModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDependencyModelAccess().getGroup()); }
(rule__DependencyModel__Group__0)
{ after(grammarAccess.getDependencyModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDependency
entryRuleDependency 
:
{ before(grammarAccess.getDependencyRule()); }
	 ruleDependency
{ after(grammarAccess.getDependencyRule()); } 
	 EOF 
;

// Rule Dependency
ruleDependency
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDependencyAccess().getGroup()); }
(rule__Dependency__Group__0)
{ after(grammarAccess.getDependencyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSynchronization
entryRuleSynchronization 
:
{ before(grammarAccess.getSynchronizationRule()); }
	 ruleSynchronization
{ after(grammarAccess.getSynchronizationRule()); } 
	 EOF 
;

// Rule Synchronization
ruleSynchronization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup()); }
(rule__Synchronization__Group__0)
{ after(grammarAccess.getSynchronizationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForbiddenStateCombination
entryRuleForbiddenStateCombination 
:
{ before(grammarAccess.getForbiddenStateCombinationRule()); }
	 ruleForbiddenStateCombination
{ after(grammarAccess.getForbiddenStateCombinationRule()); } 
	 EOF 
;

// Rule ForbiddenStateCombination
ruleForbiddenStateCombination
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getGroup()); }
(rule__ForbiddenStateCombination__Group__0)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoundedActiveState
entryRuleBoundedActiveState 
:
{ before(grammarAccess.getBoundedActiveStateRule()); }
	 ruleBoundedActiveState
{ after(grammarAccess.getBoundedActiveStateRule()); } 
	 EOF 
;

// Rule BoundedActiveState
ruleBoundedActiveState
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getGroup()); }
(rule__BoundedActiveState__Group__0)
{ after(grammarAccess.getBoundedActiveStateAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionalDependency
entryRuleConditionalDependency 
:
{ before(grammarAccess.getConditionalDependencyRule()); }
	 ruleConditionalDependency
{ after(grammarAccess.getConditionalDependencyRule()); } 
	 EOF 
;

// Rule ConditionalDependency
ruleConditionalDependency
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionalDependencyAccess().getAlternatives()); }
(rule__ConditionalDependency__Alternatives)
{ after(grammarAccess.getConditionalDependencyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEffect
entryRuleEffect 
:
{ before(grammarAccess.getEffectRule()); }
	 ruleEffect
{ after(grammarAccess.getEffectRule()); } 
	 EOF 
;

// Rule Effect
ruleEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectAccess().getAlternatives()); }
(rule__Effect__Alternatives)
{ after(grammarAccess.getEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLimitedEffect
entryRuleLimitedEffect 
:
{ before(grammarAccess.getLimitedEffectRule()); }
	 ruleLimitedEffect
{ after(grammarAccess.getLimitedEffectRule()); } 
	 EOF 
;

// Rule LimitedEffect
ruleLimitedEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimitedEffectAccess().getAlternatives()); }
(rule__LimitedEffect__Alternatives)
{ after(grammarAccess.getLimitedEffectAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnableDisableEffect
entryRuleEnableDisableEffect 
:
{ before(grammarAccess.getEnableDisableEffectRule()); }
	 ruleEnableDisableEffect
{ after(grammarAccess.getEnableDisableEffectRule()); } 
	 EOF 
;

// Rule EnableDisableEffect
ruleEnableDisableEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getGroup()); }
(rule__EnableDisableEffect__Group__0)
{ after(grammarAccess.getEnableDisableEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataAssignmentEffect
entryRuleDataAssignmentEffect 
:
{ before(grammarAccess.getDataAssignmentEffectRule()); }
	 ruleDataAssignmentEffect
{ after(grammarAccess.getDataAssignmentEffectRule()); } 
	 EOF 
;

// Rule DataAssignmentEffect
ruleDataAssignmentEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getGroup()); }
(rule__DataAssignmentEffect__Group__0)
{ after(grammarAccess.getDataAssignmentEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClockResetEffect
entryRuleClockResetEffect 
:
{ before(grammarAccess.getClockResetEffectRule()); }
	 ruleClockResetEffect
{ after(grammarAccess.getClockResetEffectRule()); } 
	 EOF 
;

// Rule ClockResetEffect
ruleClockResetEffect
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockResetEffectAccess().getGroup()); }
(rule__ClockResetEffect__Group__0)
{ after(grammarAccess.getClockResetEffectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataMerge
entryRuleDataMerge 
:
{ before(grammarAccess.getDataMergeRule()); }
	 ruleDataMerge
{ after(grammarAccess.getDataMergeRule()); } 
	 EOF 
;

// Rule DataMerge
ruleDataMerge
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataMergeAccess().getAlternatives()); }
(rule__DataMerge__Alternatives)
{ after(grammarAccess.getDataMergeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClockMerge
entryRuleClockMerge 
:
{ before(grammarAccess.getClockMergeRule()); }
	 ruleClockMerge
{ after(grammarAccess.getClockMergeRule()); } 
	 EOF 
;

// Rule ClockMerge
ruleClockMerge
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockMergeAccess().getGroup()); }
(rule__ClockMerge__Group__0)
{ after(grammarAccess.getClockMergeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getAlternatives()); }
(rule__Event__Alternatives)
{ after(grammarAccess.getEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMessageEvent
entryRuleMessageEvent 
:
{ before(grammarAccess.getMessageEventRule()); }
	 ruleMessageEvent
{ after(grammarAccess.getMessageEventRule()); } 
	 EOF 
;

// Rule MessageEvent
ruleMessageEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMessageEventAccess().getGroup()); }
(rule__MessageEvent__Group__0)
{ after(grammarAccess.getMessageEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransitionEvent
entryRuleTransitionEvent 
:
{ before(grammarAccess.getTransitionEventRule()); }
	 ruleTransitionEvent
{ after(grammarAccess.getTransitionEventRule()); } 
	 EOF 
;

// Rule TransitionEvent
ruleTransitionEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransitionEventAccess().getGroup()); }
(rule__TransitionEvent__Group__0)
{ after(grammarAccess.getTransitionEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateEvent
entryRuleStateEvent 
:
{ before(grammarAccess.getStateEventRule()); }
	 ruleStateEvent
{ after(grammarAccess.getStateEventRule()); } 
	 EOF 
;

// Rule StateEvent
ruleStateEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateEventAccess().getGroup()); }
(rule__StateEvent__Group__0)
{ after(grammarAccess.getStateEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateCombinationEvent
entryRuleStateCombinationEvent 
:
{ before(grammarAccess.getStateCombinationEventRule()); }
	 ruleStateCombinationEvent
{ after(grammarAccess.getStateCombinationEventRule()); } 
	 EOF 
;

// Rule StateCombinationEvent
ruleStateCombinationEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateCombinationEventAccess().getGroup()); }
(rule__StateCombinationEvent__Group__0)
{ after(grammarAccess.getStateCombinationEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSynchronizationEvent
entryRuleSynchronizationEvent 
:
{ before(grammarAccess.getSynchronizationEventRule()); }
	 ruleSynchronizationEvent
{ after(grammarAccess.getSynchronizationEventRule()); } 
	 EOF 
;

// Rule SynchronizationEvent
ruleSynchronizationEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSynchronizationEventAccess().getGroup()); }
(rule__SynchronizationEvent__Group__0)
{ after(grammarAccess.getSynchronizationEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComplexEvent
entryRuleComplexEvent 
:
{ before(grammarAccess.getComplexEventRule()); }
	 ruleComplexEvent
{ after(grammarAccess.getComplexEventRule()); } 
	 EOF 
;

// Rule ComplexEvent
ruleComplexEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComplexEventAccess().getAlternatives()); }
(rule__ComplexEvent__Alternatives)
{ after(grammarAccess.getComplexEventAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositionEvent
entryRuleCompositionEvent 
:
{ before(grammarAccess.getCompositionEventRule()); }
	 ruleCompositionEvent
{ after(grammarAccess.getCompositionEventRule()); } 
	 EOF 
;

// Rule CompositionEvent
ruleCompositionEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositionEventAccess().getGroup()); }
(rule__CompositionEvent__Group__0)
{ after(grammarAccess.getCompositionEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCountedEvent
entryRuleCountedEvent 
:
{ before(grammarAccess.getCountedEventRule()); }
	 ruleCountedEvent
{ after(grammarAccess.getCountedEventRule()); } 
	 EOF 
;

// Rule CountedEvent
ruleCountedEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCountedEventAccess().getGroup()); }
(rule__CountedEvent__Group__0)
{ after(grammarAccess.getCountedEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDelayedEvent
entryRuleDelayedEvent 
:
{ before(grammarAccess.getDelayedEventRule()); }
	 ruleDelayedEvent
{ after(grammarAccess.getDelayedEventRule()); } 
	 EOF 
;

// Rule DelayedEvent
ruleDelayedEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDelayedEventAccess().getGroup()); }
(rule__DelayedEvent__Group__0)
{ after(grammarAccess.getDelayedEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getCompositionOrConditionParserRuleCall()); }
	ruleCompositionOrCondition
{ after(grammarAccess.getConditionAccess().getCompositionOrConditionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositionOrCondition
entryRuleCompositionOrCondition 
:
{ before(grammarAccess.getCompositionOrConditionRule()); }
	 ruleCompositionOrCondition
{ after(grammarAccess.getCompositionOrConditionRule()); } 
	 EOF 
;

// Rule CompositionOrCondition
ruleCompositionOrCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getGroup()); }
(rule__CompositionOrCondition__Group__0)
{ after(grammarAccess.getCompositionOrConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositionAndCondition
entryRuleCompositionAndCondition 
:
{ before(grammarAccess.getCompositionAndConditionRule()); }
	 ruleCompositionAndCondition
{ after(grammarAccess.getCompositionAndConditionRule()); } 
	 EOF 
;

// Rule CompositionAndCondition
ruleCompositionAndCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getGroup()); }
(rule__CompositionAndCondition__Group__0)
{ after(grammarAccess.getCompositionAndConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionWithoutKeyword
entryRuleConditionWithoutKeyword 
:
{ before(grammarAccess.getConditionWithoutKeywordRule()); }
	 ruleConditionWithoutKeyword
{ after(grammarAccess.getConditionWithoutKeywordRule()); } 
	 EOF 
;

// Rule ConditionWithoutKeyword
ruleConditionWithoutKeyword
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getGroup()); }
(rule__ConditionWithoutKeyword__Group__0)
{ after(grammarAccess.getConditionWithoutKeywordAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStateStatusCondition
entryRuleStateStatusCondition 
:
{ before(grammarAccess.getStateStatusConditionRule()); }
	 ruleStateStatusCondition
{ after(grammarAccess.getStateStatusConditionRule()); } 
	 EOF 
;

// Rule StateStatusCondition
ruleStateStatusCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStateStatusConditionAccess().getGroup()); }
(rule__StateStatusCondition__Group__0)
{ after(grammarAccess.getStateStatusConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEventConstrainedIntervalCondition
entryRuleEventConstrainedIntervalCondition 
:
{ before(grammarAccess.getEventConstrainedIntervalConditionRule()); }
	 ruleEventConstrainedIntervalCondition
{ after(grammarAccess.getEventConstrainedIntervalConditionRule()); } 
	 EOF 
;

// Rule EventConstrainedIntervalCondition
ruleEventConstrainedIntervalCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup()); }
(rule__EventConstrainedIntervalCondition__Group__0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClockCondition
entryRuleClockCondition 
:
{ before(grammarAccess.getClockConditionRule()); }
	 ruleClockCondition
{ after(grammarAccess.getClockConditionRule()); } 
	 EOF 
;

// Rule ClockCondition
ruleClockCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClockConditionAccess().getAlternatives()); }
(rule__ClockCondition__Alternatives)
{ after(grammarAccess.getClockConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAuxiliaryClockCondition
entryRuleAuxiliaryClockCondition 
:
{ before(grammarAccess.getAuxiliaryClockConditionRule()); }
	 ruleAuxiliaryClockCondition
{ after(grammarAccess.getAuxiliaryClockConditionRule()); } 
	 EOF 
;

// Rule AuxiliaryClockCondition
ruleAuxiliaryClockCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getGroup()); }
(rule__AuxiliaryClockCondition__Group__0)
{ after(grammarAccess.getAuxiliaryClockConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHybridClockCondition
entryRuleHybridClockCondition 
:
{ before(grammarAccess.getHybridClockConditionRule()); }
	 ruleHybridClockCondition
{ after(grammarAccess.getHybridClockConditionRule()); } 
	 EOF 
;

// Rule HybridClockCondition
ruleHybridClockCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHybridClockConditionAccess().getGroup()); }
(rule__HybridClockCondition__Group__0)
{ after(grammarAccess.getHybridClockConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicClockCondition
entryRuleBasicClockCondition 
:
{ before(grammarAccess.getBasicClockConditionRule()); }
	 ruleBasicClockCondition
{ after(grammarAccess.getBasicClockConditionRule()); } 
	 EOF 
;

// Rule BasicClockCondition
ruleBasicClockCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicClockConditionAccess().getGroup()); }
(rule__BasicClockCondition__Group__0)
{ after(grammarAccess.getBasicClockConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataCondition
entryRuleDataCondition 
:
{ before(grammarAccess.getDataConditionRule()); }
	 ruleDataCondition
{ after(grammarAccess.getDataConditionRule()); } 
	 EOF 
;

// Rule DataCondition
ruleDataCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataConditionAccess().getExpressionAssignment()); }
(rule__DataCondition__ExpressionAssignment)
{ after(grammarAccess.getDataConditionAccess().getExpressionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypedNamedElementExpression
entryRuleTypedNamedElementExpression 
:
{ before(grammarAccess.getTypedNamedElementExpressionRule()); }
	 ruleTypedNamedElementExpression
{ after(grammarAccess.getTypedNamedElementExpressionRule()); } 
	 EOF 
;

// Rule TypedNamedElementExpression
ruleTypedNamedElementExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getGroup()); }
(rule__TypedNamedElementExpression__Group__0)
{ after(grammarAccess.getTypedNamedElementExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationCall
entryRuleOperationCall 
:
{ before(grammarAccess.getOperationCallRule()); }
	 ruleOperationCall
{ after(grammarAccess.getOperationCallRule()); } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationCallAccess().getGroup()); }
(rule__OperationCall__Group__0)
{ after(grammarAccess.getOperationCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeValue
entryRuleTimeValue 
:
{ before(grammarAccess.getTimeValueRule()); }
	 ruleTimeValue
{ after(grammarAccess.getTimeValueRule()); } 
	 EOF 
;

// Rule TimeValue
ruleTimeValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeValueAccess().getGroup()); }
(rule__TimeValue__Group__0)
{ after(grammarAccess.getTimeValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLONG
entryRuleLONG 
:
{ before(grammarAccess.getLONGRule()); }
	 ruleLONG
{ after(grammarAccess.getLONGRule()); } 
	 EOF 
;

// Rule LONG
ruleLONG
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLONGAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getLONGAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimeUnit
entryRuleTimeUnit 
:
{ before(grammarAccess.getTimeUnitRule()); }
	 ruleTimeUnit
{ after(grammarAccess.getTimeUnitRule()); } 
	 EOF 
;

// Rule TimeUnit
ruleTimeUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
(rule__TimeUnit__Alternatives)
{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleBlock
entryRuleBlock 
@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
}
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Block
ruleBlock
    @init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}



// Entry rule entryRuleForLoop
entryRuleForLoop 
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForLoopAccess().getGroup()); }
(rule__ForLoop__Group__0)
{ after(grammarAccess.getForLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForLoopCountingExpression
entryRuleForLoopCountingExpression 
:
{ before(grammarAccess.getForLoopCountingExpressionRule()); }
	 ruleForLoopCountingExpression
{ after(grammarAccess.getForLoopCountingExpressionRule()); } 
	 EOF 
;

// Rule ForLoopCountingExpression
ruleForLoopCountingExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getGroup()); }
(rule__ForLoopCountingExpression__Group__0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileLoop
entryRuleWhileLoop 
:
{ before(grammarAccess.getWhileLoopRule()); }
	 ruleWhileLoop
{ after(grammarAccess.getWhileLoopRule()); } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileLoopAccess().getGroup()); }
(rule__WhileLoop__Group__0)
{ after(grammarAccess.getWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop 
:
{ before(grammarAccess.getDoWhileLoopRule()); }
	 ruleDoWhileLoop
{ after(grammarAccess.getDoWhileLoopRule()); } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoWhileLoopAccess().getGroup()); }
(rule__DoWhileLoop__Group__0)
{ after(grammarAccess.getDoWhileLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationCallStatement
entryRuleOperationCallStatement 
:
{ before(grammarAccess.getOperationCallStatementRule()); }
	 ruleOperationCallStatement
{ after(grammarAccess.getOperationCallStatementRule()); } 
	 EOF 
;

// Rule OperationCallStatement
ruleOperationCallStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationCallStatementAccess().getGroup()); }
(rule__OperationCallStatement__Group__0)
{ after(grammarAccess.getOperationCallStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStartRule
entryRuleExpressionStartRule 
:
{ before(grammarAccess.getExpressionStartRuleRule()); }
	 ruleExpressionStartRule
{ after(grammarAccess.getExpressionStartRuleRule()); } 
	 EOF 
;

// Rule ExpressionStartRule
ruleExpressionStartRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStartRuleAccess().getAlternatives()); }
(rule__ExpressionStartRule__Alternatives)
{ after(grammarAccess.getExpressionStartRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializeExpression
entryRuleInitializeExpression 
:
{ before(grammarAccess.getInitializeExpressionRule()); }
	 ruleInitializeExpression
{ after(grammarAccess.getInitializeExpressionRule()); } 
	 EOF 
;

// Rule InitializeExpression
ruleInitializeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitializeExpressionAccess().getAlternatives()); }
(rule__InitializeExpression__Alternatives)
{ after(grammarAccess.getInitializeExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayInitializeExpression
entryRuleArrayInitializeExpression 
:
{ before(grammarAccess.getArrayInitializeExpressionRule()); }
	 ruleArrayInitializeExpression
{ after(grammarAccess.getArrayInitializeExpressionRule()); } 
	 EOF 
;

// Rule ArrayInitializeExpression
ruleArrayInitializeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getGroup()); }
(rule__ArrayInitializeExpression__Group__0)
{ after(grammarAccess.getArrayInitializeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalVariableOrConstantDeclarationStatement
entryRuleLocalVariableOrConstantDeclarationStatement 
:
{ before(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule()); }
	 ruleLocalVariableOrConstantDeclarationStatement
{ after(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule()); } 
	 EOF 
;

// Rule LocalVariableOrConstantDeclarationStatement
ruleLocalVariableOrConstantDeclarationStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAssignment()); }
(rule__LocalVariableOrConstantDeclarationStatement__VariableAssignment)
{ after(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration 
:
{ before(grammarAccess.getLocalVariableDeclarationRule()); }
	 ruleLocalVariableDeclaration
{ after(grammarAccess.getLocalVariableDeclarationRule()); } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
(rule__LocalVariableDeclaration__Group__0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalConstantDeclaration
entryRuleLocalConstantDeclaration 
:
{ before(grammarAccess.getLocalConstantDeclarationRule()); }
	 ruleLocalConstantDeclaration
{ after(grammarAccess.getLocalConstantDeclarationRule()); } 
	 EOF 
;

// Rule LocalConstantDeclaration
ruleLocalConstantDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getGroup()); }
(rule__LocalConstantDeclaration__Group__0)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNondeterministicChoiceExpression
entryRuleNondeterministicChoiceExpression 
:
{ before(grammarAccess.getNondeterministicChoiceExpressionRule()); }
	 ruleNondeterministicChoiceExpression
{ after(grammarAccess.getNondeterministicChoiceExpressionRule()); } 
	 EOF 
;

// Rule NondeterministicChoiceExpression
ruleNondeterministicChoiceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getGroup()); }
(rule__NondeterministicChoiceExpression__Group__0)
{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getGroup()); }
(rule__Range__Group__0)
{ after(grammarAccess.getRangeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); }
	ruleLogicalExpression
{ after(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression 
:
{ before(grammarAccess.getLogicalExpressionRule()); }
	 ruleLogicalExpression
{ after(grammarAccess.getLogicalExpressionRule()); } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
	ruleLogicalOrExpression
{ after(grammarAccess.getLogicalExpressionAccess().getLogicalOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression 
:
{ before(grammarAccess.getLogicalOrExpressionRule()); }
	 ruleLogicalOrExpression
{ after(grammarAccess.getLogicalOrExpressionRule()); } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
(rule__LogicalOrExpression__Group__0)
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression 
:
{ before(grammarAccess.getLogicalAndExpressionRule()); }
	 ruleLogicalAndExpression
{ after(grammarAccess.getLogicalAndExpressionRule()); } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
(rule__LogicalAndExpression__Group__0)
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonHigherOpExpression
entryRuleComparisonHigherOpExpression 
:
{ before(grammarAccess.getComparisonHigherOpExpressionRule()); }
	 ruleComparisonHigherOpExpression
{ after(grammarAccess.getComparisonHigherOpExpressionRule()); } 
	 EOF 
;

// Rule ComparisonHigherOpExpression
ruleComparisonHigherOpExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup()); }
(rule__ComparisonHigherOpExpression__Group__0)
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression 
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticExpressionAccess().getAdditionExpressionParserRuleCall()); }
	ruleAdditionExpression
{ after(grammarAccess.getArithmeticExpressionAccess().getAdditionExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression 
:
{ before(grammarAccess.getAdditionExpressionRule()); }
	 ruleAdditionExpression
{ after(grammarAccess.getAdditionExpressionRule()); } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup()); }
(rule__AdditionExpression__Group__0)
{ after(grammarAccess.getAdditionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression 
:
{ before(grammarAccess.getMultiplicationExpressionRule()); }
	 ruleMultiplicationExpression
{ after(grammarAccess.getMultiplicationExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getAlternatives()); }
(rule__MultiplicationExpression__Alternatives)
{ after(grammarAccess.getMultiplicationExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryPreExpression
entryRuleUnaryPreExpression 
:
{ before(grammarAccess.getUnaryPreExpressionRule()); }
	 ruleUnaryPreExpression
{ after(grammarAccess.getUnaryPreExpressionRule()); } 
	 EOF 
;

// Rule UnaryPreExpression
ruleUnaryPreExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getGroup()); }
(rule__UnaryPreExpression__Group__0)
{ after(grammarAccess.getUnaryPreExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperand
entryRuleOperand 
:
{ before(grammarAccess.getOperandRule()); }
	 ruleOperand
{ after(grammarAccess.getOperandRule()); } 
	 EOF 
;

// Rule Operand
ruleOperand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperandAccess().getAlternatives()); }
(rule__Operand__Alternatives)
{ after(grammarAccess.getOperandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup()); }
(rule__LiteralExpression__Group__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtendedTypedNamedElementExpression
entryRuleExtendedTypedNamedElementExpression 
:
{ before(grammarAccess.getExtendedTypedNamedElementExpressionRule()); }
	 ruleExtendedTypedNamedElementExpression
{ after(grammarAccess.getExtendedTypedNamedElementExpressionRule()); } 
	 EOF 
;

// Rule ExtendedTypedNamedElementExpression
ruleExtendedTypedNamedElementExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup()); }
(rule__ExtendedTypedNamedElementExpression__Group__0)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoAttributeSelectorExpression
entryRuleNoAttributeSelectorExpression 
:
{ before(grammarAccess.getNoAttributeSelectorExpressionRule()); }
	 ruleNoAttributeSelectorExpression
{ after(grammarAccess.getNoAttributeSelectorExpressionRule()); } 
	 EOF 
;

// Rule NoAttributeSelectorExpression
ruleNoAttributeSelectorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionAssignment()); }
(rule__NoAttributeSelectorExpression__PositionAssignment)
{ after(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePositionSelectorExpression
entryRulePositionSelectorExpression 
:
{ before(grammarAccess.getPositionSelectorExpressionRule()); }
	 rulePositionSelectorExpression
{ after(grammarAccess.getPositionSelectorExpressionRule()); } 
	 EOF 
;

// Rule PositionSelectorExpression
rulePositionSelectorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getGroup()); }
(rule__PositionSelectorExpression__Group__0)
{ after(grammarAccess.getPositionSelectorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParamaterBinding
entryRuleParamaterBinding 
:
{ before(grammarAccess.getParamaterBindingRule()); }
	 ruleParamaterBinding
{ after(grammarAccess.getParamaterBindingRule()); } 
	 EOF 
;

// Rule ParamaterBinding
ruleParamaterBinding
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamaterBindingAccess().getGroup()); }
(rule__ParamaterBinding__Group__0)
{ after(grammarAccess.getParamaterBindingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTriggerMessageExpression
entryRuleTriggerMessageExpression 
:
{ before(grammarAccess.getTriggerMessageExpressionRule()); }
	 ruleTriggerMessageExpression
{ after(grammarAccess.getTriggerMessageExpressionRule()); } 
	 EOF 
;

// Rule TriggerMessageExpression
ruleTriggerMessageExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getGroup()); }
(rule__TriggerMessageExpression__Group__0)
{ after(grammarAccess.getTriggerMessageExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDATATYPE
entryRuleDATATYPE 
:
{ before(grammarAccess.getDATATYPERule()); }
	 ruleDATATYPE
{ after(grammarAccess.getDATATYPERule()); } 
	 EOF 
;

// Rule DATATYPE
ruleDATATYPE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDATATYPEAccess().getGroup()); }
(rule__DATATYPE__Group__0)
{ after(grammarAccess.getDATATYPEAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule OrOperator
ruleOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
(	'or' 
)
{ after(grammarAccess.getOrOperatorAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AndOperator
ruleAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
(	'and' 
)
{ after(grammarAccess.getAndOperatorAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicOperator
ruleLogicOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
(rule__LogicOperator__Alternatives)
{ after(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparingOperator
ruleComparingOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingOperatorAccess().getAlternatives()); }
(rule__ComparingOperator__Alternatives)
{ after(grammarAccess.getComparingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NaturalLanguageComparingOperator
ruleNaturalLanguageComparingOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getAlternatives()); }
(rule__NaturalLanguageComparingOperator__Alternatives)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule StateEventKind
ruleStateEventKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventKindAccess().getAlternatives()); }
(rule__StateEventKind__Alternatives)
{ after(grammarAccess.getStateEventKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule StateStatusKind
ruleStateStatusKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusKindAccess().getAlternatives()); }
(rule__StateStatusKind__Alternatives)
{ after(grammarAccess.getStateStatusKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MessageEventKind
ruleMessageEventKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventKindAccess().getAlternatives()); }
(rule__MessageEventKind__Alternatives)
{ after(grammarAccess.getMessageEventKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryPostIncrementDecrementOperator
ruleUnaryPostIncrementDecrementOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getAlternatives()); }
(rule__UnaryPostIncrementDecrementOperator__Alternatives)
{ after(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule IncrementDecrementOperatorExpression
ruleIncrementDecrementOperatorExpression
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getAlternatives()); }
(rule__IncrementDecrementOperatorExpression__Alternatives)
{ after(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AssignOperator
ruleAssignOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
(rule__AssignOperator__Alternatives)
{ after(grammarAccess.getAssignOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalOrOperator
ruleLogicalOrOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration()); }
(	'||' 
)
{ after(grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule LogicalAndOperator
ruleLogicalAndOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration()); }
(	'&&' 
)
{ after(grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparingEQNEQOperator
ruleComparingEQNEQOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingEQNEQOperatorAccess().getAlternatives()); }
(rule__ComparingEQNEQOperator__Alternatives)
{ after(grammarAccess.getComparingEQNEQOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ComparingRelOperator
ruleComparingRelOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingRelOperatorAccess().getAlternatives()); }
(rule__ComparingRelOperator__Alternatives)
{ after(grammarAccess.getComparingRelOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AdditionOperator
ruleAdditionOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
(rule__AdditionOperator__Alternatives)
{ after(grammarAccess.getAdditionOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiplicationOperator
ruleMultiplicationOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
(rule__MultiplicationOperator__Alternatives)
{ after(grammarAccess.getMultiplicationOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryPreOperator
ruleUnaryPreOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreOperatorAccess().getAlternatives()); }
(rule__UnaryPreOperator__Alternatives)
{ after(grammarAccess.getUnaryPreOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule PositionSelectorKind
rulePositionSelectorKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorKindAccess().getAlternatives()); }
(rule__PositionSelectorKind__Alternatives)
{ after(grammarAccess.getPositionSelectorKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DependencyModel__CommentAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getCommentML_COMMENTTerminalRuleCall_1_0_0()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getDependencyModelAccess().getCommentML_COMMENTTerminalRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getDependencyModelAccess().getCommentSL_COMMENTTerminalRuleCall_1_0_1()); }
	RULE_SL_COMMENT
{ after(grammarAccess.getDependencyModelAccess().getCommentSL_COMMENTTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getSynchronizationParserRuleCall_0_0()); }
	ruleSynchronization
{ after(grammarAccess.getDependencyAccess().getSynchronizationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getForbiddenStateCombinationParserRuleCall_0_1()); }
	ruleForbiddenStateCombination
{ after(grammarAccess.getDependencyAccess().getForbiddenStateCombinationParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getConditionalDependencyParserRuleCall_0_2()); }
	ruleConditionalDependency
{ after(grammarAccess.getDependencyAccess().getConditionalDependencyParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getBoundedActiveStateParserRuleCall_0_3()); }
	ruleBoundedActiveState
{ after(grammarAccess.getDependencyAccess().getBoundedActiveStateParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getDataMergeParserRuleCall_0_4()); }
	ruleDataMerge
{ after(grammarAccess.getDependencyAccess().getDataMergeParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getClockMergeParserRuleCall_0_5()); }
	ruleClockMerge
{ after(grammarAccess.getDependencyAccess().getClockMergeParserRuleCall_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__CommentAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getCommentML_COMMENTTerminalRuleCall_2_0_0()); }
	RULE_ML_COMMENT
{ after(grammarAccess.getDependencyAccess().getCommentML_COMMENTTerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getDependencyAccess().getCommentSL_COMMENTTerminalRuleCall_2_0_1()); }
	RULE_SL_COMMENT
{ after(grammarAccess.getDependencyAccess().getCommentSL_COMMENTTerminalRuleCall_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_0()); }
(rule__Synchronization__Group_0_0__0)
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_1()); }
(rule__Synchronization__Group_0_1__0)
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getGroup_0()); }
(rule__ConditionalDependency__Group_0__0)
{ after(grammarAccess.getConditionalDependencyAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getConditionalDependencyAccess().getGroup_1()); }
(rule__ConditionalDependency__Group_1__0)
{ after(grammarAccess.getConditionalDependencyAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Effect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectAccess().getEnableDisableEffectParserRuleCall_0()); }
	ruleEnableDisableEffect
{ after(grammarAccess.getEffectAccess().getEnableDisableEffectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getDataAssignmentEffectParserRuleCall_1()); }
	ruleDataAssignmentEffect
{ after(grammarAccess.getEffectAccess().getDataAssignmentEffectParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEffectAccess().getClockResetEffectParserRuleCall_2()); }
	ruleClockResetEffect
{ after(grammarAccess.getEffectAccess().getClockResetEffectParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LimitedEffect__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLimitedEffectAccess().getDataAssignmentEffectParserRuleCall_0()); }
	ruleDataAssignmentEffect
{ after(grammarAccess.getLimitedEffectAccess().getDataAssignmentEffectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLimitedEffectAccess().getClockResetEffectParserRuleCall_1()); }
	ruleClockResetEffect
{ after(grammarAccess.getLimitedEffectAccess().getClockResetEffectParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnableDisableEffect__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getIsEnableAssignment_0_0()); }
(rule__EnableDisableEffect__IsEnableAssignment_0_0)
{ after(grammarAccess.getEnableDisableEffectAccess().getIsEnableAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getEnableDisableEffectAccess().getDisableKeyword_0_1()); }

	'disable' 

{ after(grammarAccess.getEnableDisableEffectAccess().getDisableKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getGroup_2_0()); }
(rule__DataAssignmentEffect__Group_2_0__0)
{ after(grammarAccess.getDataAssignmentEffectAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorAssignment_2_1()); }
(rule__DataAssignmentEffect__IncrementDecrementOperatorAssignment_2_1)
{ after(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getGroup_0()); }
(rule__DataMerge__Group_0__0)
{ after(grammarAccess.getDataMergeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDataMergeAccess().getGroup_1()); }
(rule__DataMerge__Group_1__0)
{ after(grammarAccess.getDataMergeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getTransitionEventParserRuleCall_0()); }
	ruleTransitionEvent
{ after(grammarAccess.getEventAccess().getTransitionEventParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEventAccess().getStateEventParserRuleCall_1()); }
	ruleStateEvent
{ after(grammarAccess.getEventAccess().getStateEventParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getEventAccess().getStateCombinationEventParserRuleCall_2()); }
	ruleStateCombinationEvent
{ after(grammarAccess.getEventAccess().getStateCombinationEventParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getEventAccess().getMessageEventParserRuleCall_3()); }
	ruleMessageEvent
{ after(grammarAccess.getEventAccess().getMessageEventParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexEventAccess().getGroup_0()); }
(rule__ComplexEvent__Group_0__0)
{ after(grammarAccess.getComplexEventAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getComplexEventAccess().getEventParserRuleCall_1()); }
	ruleEvent
{ after(grammarAccess.getComplexEventAccess().getEventParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexEventAccess().getCompositionEventParserRuleCall_0_1_0()); }
	ruleCompositionEvent
{ after(grammarAccess.getComplexEventAccess().getCompositionEventParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getComplexEventAccess().getCountedEventParserRuleCall_0_1_1()); }
	ruleCountedEvent
{ after(grammarAccess.getComplexEventAccess().getCountedEventParserRuleCall_0_1_1()); }
)

    |(
{ before(grammarAccess.getComplexEventAccess().getDelayedEventParserRuleCall_0_1_2()); }
	ruleDelayedEvent
{ after(grammarAccess.getComplexEventAccess().getDelayedEventParserRuleCall_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionWithoutKeyword__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getClockConditionParserRuleCall_1_0()); }
	ruleClockCondition
{ after(grammarAccess.getConditionWithoutKeywordAccess().getClockConditionParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getStateStatusConditionParserRuleCall_1_1()); }
	ruleStateStatusCondition
{ after(grammarAccess.getConditionWithoutKeywordAccess().getStateStatusConditionParserRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getEventConstrainedIntervalConditionParserRuleCall_1_2()); }
	ruleEventConstrainedIntervalCondition
{ after(grammarAccess.getConditionWithoutKeywordAccess().getEventConstrainedIntervalConditionParserRuleCall_1_2()); }
)

    |(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getDataConditionParserRuleCall_1_3()); }
	ruleDataCondition
{ after(grammarAccess.getConditionWithoutKeywordAccess().getDataConditionParserRuleCall_1_3()); }
)

    |(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getCompositionOrConditionParserRuleCall_1_4()); }
	ruleCompositionOrCondition
{ after(grammarAccess.getConditionWithoutKeywordAccess().getCompositionOrConditionParserRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_0()); }
(rule__StateStatusCondition__StatesAssignment_0_0)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_0()); }
)

    |(
{ before(grammarAccess.getStateStatusConditionAccess().getGroup_0_1()); }
(rule__StateStatusCondition__Group_0_1__0)
{ after(grammarAccess.getStateStatusConditionAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_0()); }
(rule__EventConstrainedIntervalCondition__Group_1_0__0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_1()); }
(rule__EventConstrainedIntervalCondition__Group_1_1__0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_2()); }
(rule__EventConstrainedIntervalCondition__Group_1_2__0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Alternatives_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_2_2_0()); }
(rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_2_2_0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_2_2_0()); }
)

    |(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteAssignment_1_2_2_1()); }
(rule__EventConstrainedIntervalCondition__EnabledInfiteAssignment_1_2_2_1)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteAssignment_1_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockCondition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockConditionAccess().getBasicClockConditionParserRuleCall_0()); }
	ruleBasicClockCondition
{ after(grammarAccess.getClockConditionAccess().getBasicClockConditionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getClockConditionAccess().getAuxiliaryClockConditionParserRuleCall_1()); }
	ruleAuxiliaryClockCondition
{ after(grammarAccess.getClockConditionAccess().getAuxiliaryClockConditionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getClockConditionAccess().getHybridClockConditionParserRuleCall_2()); }
	ruleHybridClockCondition
{ after(grammarAccess.getClockConditionAccess().getHybridClockConditionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0()); }
	RULE_NUMBER
{ after(grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBOOLEANTerminalRuleCall_1()); }
	RULE_BOOLEAN
{ after(grammarAccess.getLiteralAccess().getBOOLEANTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3()); }
	RULE_STRING
{ after(grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullKeyword_4()); }

	'null' 

{ after(grammarAccess.getLiteralAccess().getNullKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeUnitAccess().getNsKeyword_0()); }

	'ns' 

{ after(grammarAccess.getTimeUnitAccess().getNsKeyword_0()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getSKeyword_1()); }

	'\u00C2\u00B5s' 

{ after(grammarAccess.getTimeUnitAccess().getSKeyword_1()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getMsKeyword_2()); }

	'ms' 

{ after(grammarAccess.getTimeUnitAccess().getMsKeyword_2()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getSKeyword_3()); }

	's' 

{ after(grammarAccess.getTimeUnitAccess().getSKeyword_3()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getMinKeyword_4()); }

	'min' 

{ after(grammarAccess.getTimeUnitAccess().getMinKeyword_4()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getHKeyword_5()); }

	'h' 

{ after(grammarAccess.getTimeUnitAccess().getHKeyword_5()); }
)

    |(
{ before(grammarAccess.getTimeUnitAccess().getDKeyword_6()); }

	'D' 

{ after(grammarAccess.getTimeUnitAccess().getDKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopCountingExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorAssignment_1_0()); }
(rule__ForLoopCountingExpression__IncrementDecrementOperatorAssignment_1_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getGroup_1_1()); }
(rule__ForLoopCountingExpression__Group_1_1__0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStartRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); }
	ruleAssignment
{ after(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); }
	ruleForLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); }
	ruleWhileLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); }
	ruleDoWhileLoop
{ after(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); }
	ruleIfStatement
{ after(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getReturnStatementParserRuleCall_5()); }
	ruleReturnStatement
{ after(grammarAccess.getExpressionStartRuleAccess().getReturnStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getLocalVariableOrConstantDeclarationStatementParserRuleCall_6()); }
	ruleLocalVariableOrConstantDeclarationStatement
{ after(grammarAccess.getExpressionStartRuleAccess().getLocalVariableOrConstantDeclarationStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getExpressionStartRuleAccess().getOperationCallStatementParserRuleCall_7()); }
	ruleOperationCallStatement
{ after(grammarAccess.getExpressionStartRuleAccess().getOperationCallStatementParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
(rule__Assignment__Group_1_0__0)
{ after(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorAssignment_1_1()); }
(rule__Assignment__IncrementDecrementOperatorAssignment_1_1)
{ after(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitializeExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializeExpressionAccess().getArrayInitializeExpressionParserRuleCall_0()); }
	ruleArrayInitializeExpression
{ after(grammarAccess.getInitializeExpressionAccess().getArrayInitializeExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInitializeExpressionAccess().getNondeterministicChoiceExpressionParserRuleCall_1()); }
	ruleNondeterministicChoiceExpression
{ after(grammarAccess.getInitializeExpressionAccess().getNondeterministicChoiceExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInitializeExpressionAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getInitializeExpressionAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableOrConstantDeclarationStatement__VariableAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalVariableDeclarationParserRuleCall_0_0()); }
	ruleLocalVariableDeclaration
{ after(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalVariableDeclarationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalConstantDeclarationParserRuleCall_0_1()); }
	ruleLocalConstantDeclaration
{ after(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalConstantDeclarationParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getUnaryPreExpressionParserRuleCall_0()); }
	ruleUnaryPreExpression
{ after(grammarAccess.getMultiplicationExpressionAccess().getUnaryPreExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
(rule__MultiplicationExpression__Group_1__0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightExpressionAlternatives_1_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionUnaryPreExpressionParserRuleCall_1_1_2_0_0()); }
	ruleUnaryPreExpression
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionUnaryPreExpressionParserRuleCall_1_1_2_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_1_2_0_1()); }
	ruleOperand
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_1_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getGroup_0()); }
(rule__Operand__Group_0__0)
{ after(grammarAccess.getOperandAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getLiteralExpressionParserRuleCall_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getOperandAccess().getLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getExtendedTypedNamedElementExpressionParserRuleCall_2()); }
	ruleExtendedTypedNamedElementExpression
{ after(grammarAccess.getOperandAccess().getExtendedTypedNamedElementExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getOperationCallParserRuleCall_3()); }
	ruleOperationCall
{ after(grammarAccess.getOperandAccess().getOperationCallParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getTriggerMessageExpressionParserRuleCall_4()); }
	ruleTriggerMessageExpression
{ after(grammarAccess.getOperandAccess().getTriggerMessageExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getOperandAccess().getNoAttributeSelectorExpressionParserRuleCall_5()); }
	ruleNoAttributeSelectorExpression
{ after(grammarAccess.getOperandAccess().getNoAttributeSelectorExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_0()); }
(rule__ExtendedTypedNamedElementExpression__Group_1_0__0)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_1()); }
(rule__ExtendedTypedNamedElementExpression__Group_1_1__0)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_0()); }
(	'or' 
)
{ after(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_1()); }
(	'and' 
)
{ after(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); }
(	'<>' 
)
{ after(grammarAccess.getComparingOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getComparingOperatorAccess().getLESSEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3()); }
(	'<=' 
)
{ after(grammarAccess.getComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); }
(	'>=' 
)
{ after(grammarAccess.getComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_5()); }
(	'>' 
)
{ after(grammarAccess.getComparingOperatorAccess().getGREATEREnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NaturalLanguageComparingOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
(	'since exactly' 
)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESSEnumLiteralDeclaration_1()); }
(	'strictly short than' 
)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESSEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_2()); }
(	'shorter than' 
)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATEREnumLiteralDeclaration_3()); }
(	'strictly longer than' 
)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATEREnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); }
(	'longer than' 
)
{ after(grammarAccess.getNaturalLanguageComparingOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateEventKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventKindAccess().getENTRYEnumLiteralDeclaration_0()); }
(	'entering state' 
)
{ after(grammarAccess.getStateEventKindAccess().getENTRYEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStateEventKindAccess().getEXITEnumLiteralDeclaration_1()); }
(	'leaving state' 
)
{ after(grammarAccess.getStateEventKindAccess().getEXITEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusKindAccess().getACTIVEEnumLiteralDeclaration_0()); }
(	'is active' 
)
{ after(grammarAccess.getStateStatusKindAccess().getACTIVEEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getStateStatusKindAccess().getINACTIVEEnumLiteralDeclaration_1()); }
(	'is inactive' 
)
{ after(grammarAccess.getStateStatusKindAccess().getINACTIVEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEventKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventKindAccess().getCONSUMINGEnumLiteralDeclaration_0()); }
(	'consuming' 
)
{ after(grammarAccess.getMessageEventKindAccess().getCONSUMINGEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMessageEventKindAccess().getSENDINGEnumLiteralDeclaration_1()); }
(	'sending' 
)
{ after(grammarAccess.getMessageEventKindAccess().getSENDINGEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPostIncrementDecrementOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); }
(	'++' 
)
{ after(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); }
(	'--' 
)
{ after(grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncrementDecrementOperatorExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0()); }
(	'++' 
)
{ after(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1()); }
(	'--' 
)
{ after(grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); }
(	':=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1()); }
(	'+=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2()); }
(	'-=' 
)
{ after(grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparingEQNEQOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); }
(	'<>' 
)
{ after(grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparingRelOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); }
(	'<=' 
)
{ after(grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); }
(	'>=' 
)
{ after(grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0()); }
(	'not' 
)
{ after(grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0()); }
(	'self' 
)
{ after(grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1()); }
(	'first' 
)
{ after(grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2()); }
(	'last' 
)
{ after(grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3()); }
(	'prev' 
)
{ after(grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4()); }
(	'next' 
)
{ after(grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__DependencyModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyModel__Group__0__Impl
	rule__DependencyModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getDependencyModelAction_0()); }
(

)
{ after(grammarAccess.getDependencyModelAccess().getDependencyModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyModel__Group__1__Impl
	rule__DependencyModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getCommentAssignment_1()); }
(rule__DependencyModel__CommentAssignment_1)?
{ after(grammarAccess.getDependencyModelAccess().getCommentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyModel__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getGroup_2()); }
(rule__DependencyModel__Group_2__0)?
{ after(grammarAccess.getDependencyModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DependencyModel__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyModel__Group_2__0__Impl
	rule__DependencyModel__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_0()); }
(rule__DependencyModel__DependenciesAssignment_2_0)
{ after(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DependencyModel__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DependencyModel__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_1()); }
(rule__DependencyModel__DependenciesAssignment_2_1)*
{ after(grammarAccess.getDependencyModelAccess().getDependenciesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Dependency__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dependency__Group__0__Impl
	rule__Dependency__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getAlternatives_0()); }
(rule__Dependency__Alternatives_0)
{ after(grammarAccess.getDependencyAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dependency__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dependency__Group__1__Impl
	rule__Dependency__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getDependencyAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Dependency__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Dependency__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getCommentAssignment_2()); }
(rule__Dependency__CommentAssignment_2)?
{ after(grammarAccess.getDependencyAccess().getCommentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Synchronization__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group__0__Impl
	rule__Synchronization__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getAlternatives_0()); }
(rule__Synchronization__Alternatives_0)
{ after(grammarAccess.getSynchronizationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group__1__Impl
	rule__Synchronization__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_1()); }
(rule__Synchronization__Group_1__0)?
{ after(grammarAccess.getSynchronizationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_2()); }
(rule__Synchronization__Group_2__0)?
{ after(grammarAccess.getSynchronizationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Synchronization__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__0__Impl
	rule__Synchronization__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_0_0()); }

	'synchronize' 

{ after(grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__1__Impl
	rule__Synchronization__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_1()); }
(rule__Synchronization__SendingEventsAssignment_0_0_1)
{ after(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__2__Impl
	rule__Synchronization__Group_0_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_0_2()); }
(rule__Synchronization__Group_0_0_2__0)*
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__3__Impl
	rule__Synchronization__Group_0_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getWithKeyword_0_0_3()); }

	'with' 

{ after(grammarAccess.getSynchronizationAccess().getWithKeyword_0_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__4__Impl
	rule__Synchronization__Group_0_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_4()); }
(rule__Synchronization__ReceivingEventsAssignment_0_0_4)
{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_0_5()); }
(rule__Synchronization__Group_0_0_5__0)*
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Synchronization__Group_0_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0_2__0__Impl
	rule__Synchronization__Group_0_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_2_0()); }

	',' 

{ after(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_2_1()); }
(rule__Synchronization__SendingEventsAssignment_0_0_2_1)
{ after(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Synchronization__Group_0_0_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0_5__0__Impl
	rule__Synchronization__Group_0_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_5_0()); }

	',' 

{ after(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_0_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_0_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_5_1()); }
(rule__Synchronization__ReceivingEventsAssignment_0_0_5_1)
{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_0_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Synchronization__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__0__Impl
	rule__Synchronization__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_1_0()); }

	'synchronize' 

{ after(grammarAccess.getSynchronizationAccess().getSynchronizeKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__1__Impl
	rule__Synchronization__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_1()); }
(rule__Synchronization__SendingEventsAssignment_0_1_1)
{ after(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__2__Impl
	rule__Synchronization__Group_0_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_1_2()); }
(rule__Synchronization__Group_0_1_2__0)*
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__3__Impl
	rule__Synchronization__Group_0_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getWithKeyword_0_1_3()); }

	'with' 

{ after(grammarAccess.getSynchronizationAccess().getWithKeyword_0_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__4__Impl
	rule__Synchronization__Group_0_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_4()); }
(rule__Synchronization__ReceivingEventsAssignment_0_1_4)
{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGroup_0_1_5()); }
(rule__Synchronization__Group_0_1_5__0)*
{ after(grammarAccess.getSynchronizationAccess().getGroup_0_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Synchronization__Group_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1_2__0__Impl
	rule__Synchronization__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_2_0()); }

	',' 

{ after(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_2_1()); }
(rule__Synchronization__SendingEventsAssignment_0_1_2_1)
{ after(grammarAccess.getSynchronizationAccess().getSendingEventsAssignment_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Synchronization__Group_0_1_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1_5__0__Impl
	rule__Synchronization__Group_0_1_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_5_0()); }

	',' 

{ after(grammarAccess.getSynchronizationAccess().getCommaKeyword_0_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_0_1_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_0_1_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_0_1_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_5_1()); }
(rule__Synchronization__ReceivingEventsAssignment_0_1_5_1)
{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsAssignment_0_1_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Synchronization__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_1__0__Impl
	rule__Synchronization__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getUsingKeyword_1_0()); }

	'using' 

{ after(grammarAccess.getSynchronizationAccess().getUsingKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getChannelNameAssignment_1_1()); }
(rule__Synchronization__ChannelNameAssignment_1_1)
{ after(grammarAccess.getSynchronizationAccess().getChannelNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Synchronization__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_2__0__Impl
	rule__Synchronization__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getSynchronizationAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_2__1__Impl
	rule__Synchronization__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionAssignment_2_1()); }
(rule__Synchronization__GeneralSelectorExpressionAssignment_2_1)
{ after(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_2__2__Impl
	rule__Synchronization__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getSynchronizationAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_2__3__Impl
	rule__Synchronization__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getOfTypeKeyword_2_3()); }

	'of type' 

{ after(grammarAccess.getSynchronizationAccess().getOfTypeKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Synchronization__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Synchronization__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSelectorTypeAssignment_2_4()); }
(rule__Synchronization__SelectorTypeAssignment_2_4)
{ after(grammarAccess.getSynchronizationAccess().getSelectorTypeAssignment_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForbiddenStateCombination__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForbiddenStateCombination__Group__0__Impl
	rule__ForbiddenStateCombination__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getForbidStateCombinationOfKeyword_0()); }

	'forbid state combination of' 

{ after(grammarAccess.getForbiddenStateCombinationAccess().getForbidStateCombinationOfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForbiddenStateCombination__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForbiddenStateCombination__Group__1__Impl
	rule__ForbiddenStateCombination__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_1()); }
(rule__ForbiddenStateCombination__StatesAssignment_1)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForbiddenStateCombination__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForbiddenStateCombination__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getGroup_2()); }
(rule__ForbiddenStateCombination__Group_2__0)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getGroup_2()); }
)
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getGroup_2()); }
(rule__ForbiddenStateCombination__Group_2__0)*
{ after(grammarAccess.getForbiddenStateCombinationAccess().getGroup_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ForbiddenStateCombination__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForbiddenStateCombination__Group_2__0__Impl
	rule__ForbiddenStateCombination__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getForbiddenStateCombinationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForbiddenStateCombination__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForbiddenStateCombination__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_2_1()); }
(rule__ForbiddenStateCombination__StatesAssignment_2_1)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoundedActiveState__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__0__Impl
	rule__BoundedActiveState__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getBoundStatesKeyword_0()); }

	'bound states' 

{ after(grammarAccess.getBoundedActiveStateAccess().getBoundStatesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__1__Impl
	rule__BoundedActiveState__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_1()); }
(rule__BoundedActiveState__StatesAssignment_1)
{ after(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__2__Impl
	rule__BoundedActiveState__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getGroup_2()); }
(rule__BoundedActiveState__Group_2__0)*
{ after(grammarAccess.getBoundedActiveStateAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__3__Impl
	rule__BoundedActiveState__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getByKeyword_3()); }

	'by' 

{ after(grammarAccess.getBoundedActiveStateAccess().getByKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__4__Impl
	rule__BoundedActiveState__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getLeftSquareBracketKeyword_4()); }

	'[' 

{ after(grammarAccess.getBoundedActiveStateAccess().getLeftSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__5__Impl
	rule__BoundedActiveState__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getConstraintAssignment_5()); }
(rule__BoundedActiveState__ConstraintAssignment_5)
{ after(grammarAccess.getBoundedActiveStateAccess().getConstraintAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getBoundedActiveStateAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__BoundedActiveState__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group_2__0__Impl
	rule__BoundedActiveState__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getBoundedActiveStateAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoundedActiveState__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoundedActiveState__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_2_1()); }
(rule__BoundedActiveState__StatesAssignment_2_1)
{ after(grammarAccess.getBoundedActiveStateAccess().getStatesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalDependency__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__0__Impl
	rule__ConditionalDependency__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getIfKeyword_0_0()); }

	'if' 

{ after(grammarAccess.getConditionalDependencyAccess().getIfKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__1__Impl
	rule__ConditionalDependency__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_0_1()); }
(rule__ConditionalDependency__ConditionAssignment_0_1)
{ after(grammarAccess.getConditionalDependencyAccess().getConditionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__2__Impl
	rule__ConditionalDependency__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_0_2()); }

	'{' 

{ after(grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__3__Impl
	rule__ConditionalDependency__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_3()); }
(rule__ConditionalDependency__EffectsAssignment_0_3)
{ after(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__4__Impl
	rule__ConditionalDependency__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getGroup_0_4()); }
(rule__ConditionalDependency__Group_0_4__0)*
{ after(grammarAccess.getConditionalDependencyAccess().getGroup_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__5__Impl
	rule__ConditionalDependency__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_5()); }
(
	';' 
)?
{ after(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_0_6()); }

	'}' 

{ after(grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_0_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ConditionalDependency__Group_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0_4__0__Impl
	rule__ConditionalDependency__Group_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_4_0()); }

	';' 

{ after(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_4_1()); }
(rule__ConditionalDependency__EffectsAssignment_0_4_1)
{ after(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionalDependency__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__0__Impl
	rule__ConditionalDependency__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getWhenKeyword_1_0()); }

	'when' 

{ after(grammarAccess.getConditionalDependencyAccess().getWhenKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__1__Impl
	rule__ConditionalDependency__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getLeftSquareBracketKeyword_1_1()); }

	'[' 

{ after(grammarAccess.getConditionalDependencyAccess().getLeftSquareBracketKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__2__Impl
	rule__ConditionalDependency__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEventAssignment_1_2()); }
(rule__ConditionalDependency__EventAssignment_1_2)
{ after(grammarAccess.getConditionalDependencyAccess().getEventAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__3__Impl
	rule__ConditionalDependency__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getRightSquareBracketKeyword_1_3()); }

	']' 

{ after(grammarAccess.getConditionalDependencyAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__4__Impl
	rule__ConditionalDependency__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_1_4()); }

	'{' 

{ after(grammarAccess.getConditionalDependencyAccess().getLeftCurlyBracketKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__5__Impl
	rule__ConditionalDependency__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_5()); }
(rule__ConditionalDependency__EffectsAssignment_1_5)
{ after(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__6__Impl
	rule__ConditionalDependency__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getGroup_1_6()); }
(rule__ConditionalDependency__Group_1_6__0)*
{ after(grammarAccess.getConditionalDependencyAccess().getGroup_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__7__Impl
	rule__ConditionalDependency__Group_1__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_7()); }
(
	';' 
)?
{ after(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_1_8()); }

	'}' 

{ after(grammarAccess.getConditionalDependencyAccess().getRightCurlyBracketKeyword_1_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__ConditionalDependency__Group_1_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1_6__0__Impl
	rule__ConditionalDependency__Group_1_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_6_0()); }

	';' 

{ after(grammarAccess.getConditionalDependencyAccess().getSemicolonKeyword_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalDependency__Group_1_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionalDependency__Group_1_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__Group_1_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_6_1()); }
(rule__ConditionalDependency__EffectsAssignment_1_6_1)
{ after(grammarAccess.getConditionalDependencyAccess().getEffectsAssignment_1_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnableDisableEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnableDisableEffect__Group__0__Impl
	rule__EnableDisableEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnableDisableEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getAlternatives_0()); }
(rule__EnableDisableEffect__Alternatives_0)
{ after(grammarAccess.getEnableDisableEffectAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnableDisableEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnableDisableEffect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnableDisableEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getEventAssignment_1()); }
(rule__EnableDisableEffect__EventAssignment_1)
{ after(grammarAccess.getEnableDisableEffectAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataAssignmentEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAssignmentEffect__Group__0__Impl
	rule__DataAssignmentEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getAssignKeyword_0()); }

	'assign' 

{ after(grammarAccess.getDataAssignmentEffectAccess().getAssignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataAssignmentEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAssignmentEffect__Group__1__Impl
	rule__DataAssignmentEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionAssignment_1()); }
(rule__DataAssignmentEffect__Lhs_typedNamedElementExpressionAssignment_1)
{ after(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataAssignmentEffect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAssignmentEffect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getAlternatives_2()); }
(rule__DataAssignmentEffect__Alternatives_2)
{ after(grammarAccess.getDataAssignmentEffectAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DataAssignmentEffect__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAssignmentEffect__Group_2_0__0__Impl
	rule__DataAssignmentEffect__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignment_2_0_0()); }
(rule__DataAssignmentEffect__AssignOperatorAssignment_2_0_0)
{ after(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignment_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataAssignmentEffect__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataAssignmentEffect__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionAssignment_2_0_1()); }
(rule__DataAssignmentEffect__Rhs_assignExpressionAssignment_2_0_1)
{ after(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClockResetEffect__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockResetEffect__Group__0__Impl
	rule__ClockResetEffect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getResetClocksKeyword_0()); }

	'reset clocks' 

{ after(grammarAccess.getClockResetEffectAccess().getResetClocksKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockResetEffect__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockResetEffect__Group__1__Impl
	rule__ClockResetEffect__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksAssignment_1()); }
(rule__ClockResetEffect__ClocksAssignment_1)
{ after(grammarAccess.getClockResetEffectAccess().getClocksAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockResetEffect__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockResetEffect__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getGroup_2()); }
(rule__ClockResetEffect__Group_2__0)*
{ after(grammarAccess.getClockResetEffectAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClockResetEffect__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockResetEffect__Group_2__0__Impl
	rule__ClockResetEffect__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getAndKeyword_2_0()); }

	'and' 

{ after(grammarAccess.getClockResetEffectAccess().getAndKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockResetEffect__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockResetEffect__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksAssignment_2_1()); }
(rule__ClockResetEffect__ClocksAssignment_2_1)
{ after(grammarAccess.getClockResetEffectAccess().getClocksAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataMerge__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_0__0__Impl
	rule__DataMerge__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getMergeVariableKeyword_0_0()); }

	'merge variable' 

{ after(grammarAccess.getDataMergeAccess().getMergeVariableKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_0__1__Impl
	rule__DataMerge__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesAssignment_0_1()); }
(rule__DataMerge__VariablesAssignment_0_1)
{ after(grammarAccess.getDataMergeAccess().getVariablesAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getGroup_0_2()); }
(rule__DataMerge__Group_0_2__0)?
{ after(grammarAccess.getDataMergeAccess().getGroup_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DataMerge__Group_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_0_2__0__Impl
	rule__DataMerge__Group_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getIntoKeyword_0_2_0()); }

	'into' 

{ after(grammarAccess.getDataMergeAccess().getIntoKeyword_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariableNameAssignment_0_2_1()); }
(rule__DataMerge__VariableNameAssignment_0_2_1)
{ after(grammarAccess.getDataMergeAccess().getVariableNameAssignment_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataMerge__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1__0__Impl
	rule__DataMerge__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getMergeVariablesKeyword_1_0()); }

	'merge variables' 

{ after(grammarAccess.getDataMergeAccess().getMergeVariablesKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1__1__Impl
	rule__DataMerge__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_1()); }
(rule__DataMerge__VariablesAssignment_1_1)
{ after(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1__2__Impl
	rule__DataMerge__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDataMergeAccess().getGroup_1_2()); }
(rule__DataMerge__Group_1_2__0)
{ after(grammarAccess.getDataMergeAccess().getGroup_1_2()); }
)
(
{ before(grammarAccess.getDataMergeAccess().getGroup_1_2()); }
(rule__DataMerge__Group_1_2__0)*
{ after(grammarAccess.getDataMergeAccess().getGroup_1_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getGroup_1_3()); }
(rule__DataMerge__Group_1_3__0)?
{ after(grammarAccess.getDataMergeAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DataMerge__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1_2__0__Impl
	rule__DataMerge__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getDataMergeAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_2_1()); }
(rule__DataMerge__VariablesAssignment_1_2_1)
{ after(grammarAccess.getDataMergeAccess().getVariablesAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataMerge__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1_3__0__Impl
	rule__DataMerge__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getIntoKeyword_1_3_0()); }

	'into' 

{ after(grammarAccess.getDataMergeAccess().getIntoKeyword_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataMerge__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataMerge__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariableNameAssignment_1_3_1()); }
(rule__DataMerge__VariableNameAssignment_1_3_1)
{ after(grammarAccess.getDataMergeAccess().getVariableNameAssignment_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClockMerge__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group__0__Impl
	rule__ClockMerge__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getMergeClocksKeyword_0()); }

	'merge clocks' 

{ after(grammarAccess.getClockMergeAccess().getMergeClocksKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockMerge__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group__1__Impl
	rule__ClockMerge__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClocksAssignment_1()); }
(rule__ClockMerge__ClocksAssignment_1)
{ after(grammarAccess.getClockMergeAccess().getClocksAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockMerge__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group__2__Impl
	rule__ClockMerge__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getClockMergeAccess().getGroup_2()); }
(rule__ClockMerge__Group_2__0)
{ after(grammarAccess.getClockMergeAccess().getGroup_2()); }
)
(
{ before(grammarAccess.getClockMergeAccess().getGroup_2()); }
(rule__ClockMerge__Group_2__0)*
{ after(grammarAccess.getClockMergeAccess().getGroup_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockMerge__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getGroup_3()); }
(rule__ClockMerge__Group_3__0)?
{ after(grammarAccess.getClockMergeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClockMerge__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group_2__0__Impl
	rule__ClockMerge__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getClockMergeAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockMerge__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClocksAssignment_2_1()); }
(rule__ClockMerge__ClocksAssignment_2_1)
{ after(grammarAccess.getClockMergeAccess().getClocksAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClockMerge__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group_3__0__Impl
	rule__ClockMerge__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getIntoKeyword_3_0()); }

	'into' 

{ after(grammarAccess.getClockMergeAccess().getIntoKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClockMerge__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClockMerge__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClockNameAssignment_3_1()); }
(rule__ClockMerge__ClockNameAssignment_3_1)
{ after(grammarAccess.getClockMergeAccess().getClockNameAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MessageEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MessageEvent__Group__0__Impl
	rule__MessageEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getKindAssignment_0()); }
(rule__MessageEvent__KindAssignment_0)
{ after(grammarAccess.getMessageEventAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MessageEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MessageEvent__Group__1__Impl
	rule__MessageEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getGroup_1()); }
(rule__MessageEvent__Group_1__0)?
{ after(grammarAccess.getMessageEventAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MessageEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MessageEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getTypeAssignment_2()); }
(rule__MessageEvent__TypeAssignment_2)
{ after(grammarAccess.getMessageEventAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MessageEvent__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MessageEvent__Group_1__0__Impl
	rule__MessageEvent__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getPortAssignment_1_0()); }
(rule__MessageEvent__PortAssignment_1_0)
{ after(grammarAccess.getMessageEventAccess().getPortAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MessageEvent__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MessageEvent__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getFullStopKeyword_1_1()); }

	'.' 

{ after(grammarAccess.getMessageEventAccess().getFullStopKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TransitionEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionEvent__Group__0__Impl
	rule__TransitionEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionEventAccess().getTransitionKeyword_0()); }

	'transition' 

{ after(grammarAccess.getTransitionEventAccess().getTransitionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransitionEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransitionEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionEventAccess().getTransitionAssignment_1()); }
(rule__TransitionEvent__TransitionAssignment_1)
{ after(grammarAccess.getTransitionEventAccess().getTransitionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateEvent__Group__0__Impl
	rule__StateEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventAccess().getKindAssignment_0()); }
(rule__StateEvent__KindAssignment_0)
{ after(grammarAccess.getStateEventAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventAccess().getStateAssignment_1()); }
(rule__StateEvent__StateAssignment_1)
{ after(grammarAccess.getStateEventAccess().getStateAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateCombinationEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group__0__Impl
	rule__StateCombinationEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getKindAssignment_0()); }
(rule__StateCombinationEvent__KindAssignment_0)
{ after(grammarAccess.getStateCombinationEventAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateCombinationEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group__1__Impl
	rule__StateCombinationEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getTheCombinationOfKeyword_1()); }

	'the combination of' 

{ after(grammarAccess.getStateCombinationEventAccess().getTheCombinationOfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateCombinationEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group__2__Impl
	rule__StateCombinationEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_2()); }
(rule__StateCombinationEvent__StatesAssignment_2)
{ after(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateCombinationEvent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateCombinationEventAccess().getGroup_3()); }
(rule__StateCombinationEvent__Group_3__0)
{ after(grammarAccess.getStateCombinationEventAccess().getGroup_3()); }
)
(
{ before(grammarAccess.getStateCombinationEventAccess().getGroup_3()); }
(rule__StateCombinationEvent__Group_3__0)*
{ after(grammarAccess.getStateCombinationEventAccess().getGroup_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StateCombinationEvent__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group_3__0__Impl
	rule__StateCombinationEvent__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getStateCombinationEventAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateCombinationEvent__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateCombinationEvent__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_3_1()); }
(rule__StateCombinationEvent__StatesAssignment_3_1)
{ after(grammarAccess.getStateCombinationEventAccess().getStatesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SynchronizationEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SynchronizationEvent__Group__0__Impl
	rule__SynchronizationEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getEventAssignment_0()); }
(rule__SynchronizationEvent__EventAssignment_0)
{ after(grammarAccess.getSynchronizationEventAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SynchronizationEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SynchronizationEvent__Group__1__Impl
	rule__SynchronizationEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSynchronizationEventAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SynchronizationEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SynchronizationEvent__Group__2__Impl
	rule__SynchronizationEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionAssignment_2()); }
(rule__SynchronizationEvent__SelectorExpressionAssignment_2)
{ after(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SynchronizationEvent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SynchronizationEvent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getSynchronizationEventAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ComplexEvent__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexEvent__Group_0__0__Impl
	rule__ComplexEvent__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexEventAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getComplexEventAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexEvent__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexEvent__Group_0__1__Impl
	rule__ComplexEvent__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexEventAccess().getAlternatives_0_1()); }
(rule__ComplexEvent__Alternatives_0_1)
{ after(grammarAccess.getComplexEventAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexEvent__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComplexEvent__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComplexEventAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getComplexEventAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositionEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionEvent__Group__0__Impl
	rule__CompositionEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getLeftEventAssignment_0()); }
(rule__CompositionEvent__LeftEventAssignment_0)
{ after(grammarAccess.getCompositionEventAccess().getLeftEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionEvent__Group__1__Impl
	rule__CompositionEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getKindAssignment_1()); }
(rule__CompositionEvent__KindAssignment_1)
{ after(grammarAccess.getCompositionEventAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getRightEventAssignment_2()); }
(rule__CompositionEvent__RightEventAssignment_2)
{ after(grammarAccess.getCompositionEventAccess().getRightEventAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CountedEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountedEvent__Group__0__Impl
	rule__CountedEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getEventAssignment_0()); }
(rule__CountedEvent__EventAssignment_0)
{ after(grammarAccess.getCountedEventAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountedEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountedEvent__Group__1__Impl
	rule__CountedEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getWhenCountedKeyword_1()); }

	'when counted' 

{ after(grammarAccess.getCountedEventAccess().getWhenCountedKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountedEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountedEvent__Group__2__Impl
	rule__CountedEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getCounterAssignment_2()); }
(rule__CountedEvent__CounterAssignment_2)
{ after(grammarAccess.getCountedEventAccess().getCounterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CountedEvent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CountedEvent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getTimesKeyword_3()); }

	'times' 

{ after(grammarAccess.getCountedEventAccess().getTimesKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__DelayedEvent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DelayedEvent__Group__0__Impl
	rule__DelayedEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DelayedEvent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayedEventAccess().getEventAssignment_0()); }
(rule__DelayedEvent__EventAssignment_0)
{ after(grammarAccess.getDelayedEventAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DelayedEvent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DelayedEvent__Group__1__Impl
	rule__DelayedEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DelayedEvent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayedEventAccess().getDelayedByKeyword_1()); }

	'delayed by' 

{ after(grammarAccess.getDelayedEventAccess().getDelayedByKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DelayedEvent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DelayedEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DelayedEvent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayedEventAccess().getDelayAssignment_2()); }
(rule__DelayedEvent__DelayAssignment_2)
{ after(grammarAccess.getDelayedEventAccess().getDelayAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositionOrCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionOrCondition__Group__0__Impl
	rule__CompositionOrCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getCompositionAndConditionParserRuleCall_0()); }
	ruleCompositionAndCondition
{ after(grammarAccess.getCompositionOrConditionAccess().getCompositionAndConditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionOrCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionOrCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getGroup_1()); }
(rule__CompositionOrCondition__Group_1__0)?
{ after(grammarAccess.getCompositionOrConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompositionOrCondition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionOrCondition__Group_1__0__Impl
	rule__CompositionOrCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getCompositionConditionLeftConditionAction_1_0()); }
(

)
{ after(grammarAccess.getCompositionOrConditionAccess().getCompositionConditionLeftConditionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionOrCondition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionOrCondition__Group_1__1__Impl
	rule__CompositionOrCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getKindAssignment_1_1()); }
(rule__CompositionOrCondition__KindAssignment_1_1)
{ after(grammarAccess.getCompositionOrConditionAccess().getKindAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionOrCondition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionOrCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getRightConditionAssignment_1_2()); }
(rule__CompositionOrCondition__RightConditionAssignment_1_2)
{ after(grammarAccess.getCompositionOrConditionAccess().getRightConditionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CompositionAndCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionAndCondition__Group__0__Impl
	rule__CompositionAndCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getConditionWithoutKeywordParserRuleCall_0()); }
	ruleConditionWithoutKeyword
{ after(grammarAccess.getCompositionAndConditionAccess().getConditionWithoutKeywordParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionAndCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionAndCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getGroup_1()); }
(rule__CompositionAndCondition__Group_1__0)?
{ after(grammarAccess.getCompositionAndConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompositionAndCondition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionAndCondition__Group_1__0__Impl
	rule__CompositionAndCondition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getCompositionConditionLeftConditionAction_1_0()); }
(

)
{ after(grammarAccess.getCompositionAndConditionAccess().getCompositionConditionLeftConditionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionAndCondition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionAndCondition__Group_1__1__Impl
	rule__CompositionAndCondition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getKindAssignment_1_1()); }
(rule__CompositionAndCondition__KindAssignment_1_1)
{ after(grammarAccess.getCompositionAndConditionAccess().getKindAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompositionAndCondition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompositionAndCondition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getRightConditionAssignment_1_2()); }
(rule__CompositionAndCondition__RightConditionAssignment_1_2)
{ after(grammarAccess.getCompositionAndConditionAccess().getRightConditionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ConditionWithoutKeyword__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionWithoutKeyword__Group__0__Impl
	rule__ConditionWithoutKeyword__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionWithoutKeyword__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getConditionWithoutKeywordAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionWithoutKeyword__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionWithoutKeyword__Group__1__Impl
	rule__ConditionWithoutKeyword__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionWithoutKeyword__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getAlternatives_1()); }
(rule__ConditionWithoutKeyword__Alternatives_1)
{ after(grammarAccess.getConditionWithoutKeywordAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionWithoutKeyword__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionWithoutKeyword__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionWithoutKeyword__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionWithoutKeywordAccess().getRightSquareBracketKeyword_2()); }

	']' 

{ after(grammarAccess.getConditionWithoutKeywordAccess().getRightSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StateStatusCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group__0__Impl
	rule__StateStatusCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getAlternatives_0()); }
(rule__StateStatusCondition__Alternatives_0)
{ after(grammarAccess.getStateStatusConditionAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateStatusCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getKindAssignment_1()); }
(rule__StateStatusCondition__KindAssignment_1)
{ after(grammarAccess.getStateStatusConditionAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StateStatusCondition__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group_0_1__0__Impl
	rule__StateStatusCondition__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStateCombinationOfKeyword_0_1_0()); }

	'state combination of' 

{ after(grammarAccess.getStateStatusConditionAccess().getStateCombinationOfKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateStatusCondition__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group_0_1__1__Impl
	rule__StateStatusCondition__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_1()); }
(rule__StateStatusCondition__StatesAssignment_0_1_1)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateStatusCondition__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStateStatusConditionAccess().getGroup_0_1_2()); }
(rule__StateStatusCondition__Group_0_1_2__0)
{ after(grammarAccess.getStateStatusConditionAccess().getGroup_0_1_2()); }
)
(
{ before(grammarAccess.getStateStatusConditionAccess().getGroup_0_1_2()); }
(rule__StateStatusCondition__Group_0_1_2__0)*
{ after(grammarAccess.getStateStatusConditionAccess().getGroup_0_1_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StateStatusCondition__Group_0_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group_0_1_2__0__Impl
	rule__StateStatusCondition__Group_0_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group_0_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getCommaKeyword_0_1_2_0()); }

	',' 

{ after(grammarAccess.getStateStatusConditionAccess().getCommaKeyword_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StateStatusCondition__Group_0_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StateStatusCondition__Group_0_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__Group_0_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_2_1()); }
(rule__StateStatusCondition__StatesAssignment_0_1_2_1)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesAssignment_0_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventConstrainedIntervalCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group__0__Impl
	rule__EventConstrainedIntervalCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getBetweenKeyword_0()); }

	'between' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getBetweenKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1()); }
(rule__EventConstrainedIntervalCondition__Alternatives_1)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EventConstrainedIntervalCondition__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_0__0__Impl
	rule__EventConstrainedIntervalCondition__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_0_0()); }
(rule__EventConstrainedIntervalCondition__FromEventAssignment_1_0_0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_0__1__Impl
	rule__EventConstrainedIntervalCondition__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_0_1()); }

	',' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_0_2()); }
(rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_0_2)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventConstrainedIntervalCondition__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_1__0__Impl
	rule__EventConstrainedIntervalCondition__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledAssignment_1_1_0()); }
(rule__EventConstrainedIntervalCondition__InitialEnabledAssignment_1_1_0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_1__1__Impl
	rule__EventConstrainedIntervalCondition__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_1_1()); }

	',' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_1_2()); }
(rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_1_2)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EventConstrainedIntervalCondition__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_2__0__Impl
	rule__EventConstrainedIntervalCondition__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_2_0()); }
(rule__EventConstrainedIntervalCondition__FromEventAssignment_1_2_0)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventAssignment_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_2__1__Impl
	rule__EventConstrainedIntervalCondition__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_2_1()); }

	',' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getCommaKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EventConstrainedIntervalCondition__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EventConstrainedIntervalCondition__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1_2_2()); }
(rule__EventConstrainedIntervalCondition__Alternatives_1_2_2)
{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getAlternatives_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AuxiliaryClockCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AuxiliaryClockCondition__Group__0__Impl
	rule__AuxiliaryClockCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getEventAssignment_0()); }
(rule__AuxiliaryClockCondition__EventAssignment_0)
{ after(grammarAccess.getAuxiliaryClockConditionAccess().getEventAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AuxiliaryClockCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AuxiliaryClockCondition__Group__1__Impl
	rule__AuxiliaryClockCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorAssignment_1()); }
(rule__AuxiliaryClockCondition__OperatorAssignment_1)
{ after(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AuxiliaryClockCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AuxiliaryClockCondition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getBoundAssignment_2()); }
(rule__AuxiliaryClockCondition__BoundAssignment_2)
{ after(grammarAccess.getAuxiliaryClockConditionAccess().getBoundAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HybridClockCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridClockCondition__Group__0__Impl
	rule__HybridClockCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getConditionAssignment_0()); }
(rule__HybridClockCondition__ConditionAssignment_0)
{ after(grammarAccess.getHybridClockConditionAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridClockCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridClockCondition__Group__1__Impl
	rule__HybridClockCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getOperatorAssignment_1()); }
(rule__HybridClockCondition__OperatorAssignment_1)
{ after(grammarAccess.getHybridClockConditionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HybridClockCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HybridClockCondition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getBoundAssignment_2()); }
(rule__HybridClockCondition__BoundAssignment_2)
{ after(grammarAccess.getHybridClockConditionAccess().getBoundAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BasicClockCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicClockCondition__Group__0__Impl
	rule__BasicClockCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getClockKeyword_0()); }

	'clock' 

{ after(grammarAccess.getBasicClockConditionAccess().getClockKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicClockCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicClockCondition__Group__1__Impl
	rule__BasicClockCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getClockAssignment_1()); }
(rule__BasicClockCondition__ClockAssignment_1)
{ after(grammarAccess.getBasicClockConditionAccess().getClockAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicClockCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicClockCondition__Group__2__Impl
	rule__BasicClockCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getOperatorAssignment_2()); }
(rule__BasicClockCondition__OperatorAssignment_2)
{ after(grammarAccess.getBasicClockConditionAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicClockCondition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicClockCondition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getBoundAssignment_3()); }
(rule__BasicClockCondition__BoundAssignment_3)
{ after(grammarAccess.getBasicClockConditionAccess().getBoundAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypedNamedElementExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedNamedElementExpression__Group__0__Impl
	rule__TypedNamedElementExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementAssignment_0()); }
(rule__TypedNamedElementExpression__TypedNamedElementAssignment_0)
{ after(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedNamedElementExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedNamedElementExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getGroup_1()); }
(rule__TypedNamedElementExpression__Group_1__0)*
{ after(grammarAccess.getTypedNamedElementExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypedNamedElementExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedNamedElementExpression__Group_1__0__Impl
	rule__TypedNamedElementExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getTypedNamedElementExpressionAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedNamedElementExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedNamedElementExpression__Group_1__1__Impl
	rule__TypedNamedElementExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getIndicesAssignment_1_1()); }
(rule__TypedNamedElementExpression__IndicesAssignment_1_1)
{ after(grammarAccess.getTypedNamedElementExpressionAccess().getIndicesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypedNamedElementExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypedNamedElementExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getTypedNamedElementExpressionAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperationCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__0__Impl
	rule__OperationCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationAssignment_0()); }
(rule__OperationCall__OperationAssignment_0)
{ after(grammarAccess.getOperationCallAccess().getOperationAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__1__Impl
	rule__OperationCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__2__Impl
	rule__OperationCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2()); }
(rule__OperationCall__Group_2__0)?
{ after(grammarAccess.getOperationCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OperationCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__0__Impl
	rule__OperationCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_0()); }
(rule__OperationCall__ParameterBindingAssignment_2_0)
{ after(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
(rule__OperationCall__Group_2_1__0)*
{ after(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__0__Impl
	rule__OperationCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_1_1()); }
(rule__OperationCall__ParameterBindingAssignment_2_1_1)
{ after(grammarAccess.getOperationCallAccess().getParameterBindingAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimeValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeValue__Group__0__Impl
	rule__TimeValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getValueAssignment_0()); }
(rule__TimeValue__ValueAssignment_0)
{ after(grammarAccess.getTimeValueAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimeValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimeValue__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getUnitAssignment_1()); }
(rule__TimeValue__UnitAssignment_1)
{ after(grammarAccess.getTimeValueAccess().getUnitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExpressionsAssignment_2()); }
(rule__Block__ExpressionsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ForLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getInitializeExpressionAssignment_2()); }
(rule__ForLoop__InitializeExpressionAssignment_2)
{ after(grammarAccess.getForLoopAccess().getInitializeExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLoopTestAssignment_3()); }
(rule__ForLoop__LoopTestAssignment_3)
{ after(grammarAccess.getForLoopAccess().getLoopTestAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getForLoopAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getCountingExpressionAssignment_5()); }
(rule__ForLoop__CountingExpressionAssignment_5)
{ after(grammarAccess.getForLoopAccess().getCountingExpressionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__6__Impl
	rule__ForLoop__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoop__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getBlockAssignment_7()); }
(rule__ForLoop__BlockAssignment_7)
{ after(grammarAccess.getForLoopAccess().getBlockAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__ForLoopCountingExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group__0__Impl
	rule__ForLoopCountingExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionAssignment_0()); }
(rule__ForLoopCountingExpression__Lhs_typedNamedElementExpressionAssignment_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopCountingExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAlternatives_1()); }
(rule__ForLoopCountingExpression__Alternatives_1)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForLoopCountingExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group_1_1__0__Impl
	rule__ForLoopCountingExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignment_1_1_0()); }
(rule__ForLoopCountingExpression__AssignOperatorAssignment_1_1_0)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoopCountingExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForLoopCountingExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionAssignment_1_1_1()); }
(rule__ForLoopCountingExpression__Rhs_assignExpressionAssignment_1_1_1)
{ after(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__0__Impl
	rule__WhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhileLoopAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__1__Impl
	rule__WhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__2__Impl
	rule__WhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopTestAssignment_2()); }
(rule__WhileLoop__LoopTestAssignment_2)
{ after(grammarAccess.getWhileLoopAccess().getLoopTestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__3__Impl
	rule__WhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileLoop__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockAssignment_4()); }
(rule__WhileLoop__BlockAssignment_4)
{ after(grammarAccess.getWhileLoopAccess().getBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DoWhileLoop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__0__Impl
	rule__DoWhileLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }

	'do' 

{ after(grammarAccess.getDoWhileLoopAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__1__Impl
	rule__DoWhileLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getBlockAssignment_1()); }
(rule__DoWhileLoop__BlockAssignment_1)
{ after(grammarAccess.getDoWhileLoopAccess().getBlockAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__2__Impl
	rule__DoWhileLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }

	'while' 

{ after(grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__3__Impl
	rule__DoWhileLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__4__Impl
	rule__DoWhileLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLoopTestAssignment_4()); }
(rule__DoWhileLoop__LoopTestAssignment_4)
{ after(grammarAccess.getDoWhileLoopAccess().getLoopTestAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhileLoop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhileLoop__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getRightParenthesisSemicolonKeyword_5()); }

	');' 

{ after(grammarAccess.getDoWhileLoopAccess().getRightParenthesisSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfConditionAssignment_2()); }
(rule__IfStatement__IfConditionAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getIfConditionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfBlockAssignment_4()); }
(rule__IfStatement__IfBlockAssignment_4)
{ after(grammarAccess.getIfStatementAccess().getIfBlockAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_5()); }
(rule__IfStatement__Group_5__0)*
{ after(grammarAccess.getIfStatementAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_6()); }
(rule__IfStatement__Group_6__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfStatement__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__0__Impl
	rule__IfStatement__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseifKeyword_5_0()); }

	'elseif' 

{ after(grammarAccess.getIfStatementAccess().getElseifKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__1__Impl
	rule__IfStatement__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__2__Impl
	rule__IfStatement__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfConditionsAssignment_5_2()); }
(rule__IfStatement__ElseIfConditionsAssignment_5_2)
{ after(grammarAccess.getIfStatementAccess().getElseIfConditionsAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__3__Impl
	rule__IfStatement__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_5__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_5__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfBlocksAssignment_5_4()); }
(rule__IfStatement__ElseIfBlocksAssignment_5_4)
{ after(grammarAccess.getIfStatementAccess().getElseIfBlocksAssignment_5_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__0__Impl
	rule__IfStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockAssignment_6_1()); }
(rule__IfStatement__ElseBlockAssignment_6_1)
{ after(grammarAccess.getIfStatementAccess().getElseBlockAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
(rule__ReturnStatement__ExpressionAssignment_2)
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OperationCallStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCallStatement__Group__0__Impl
	rule__OperationCallStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCallStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallStatementAccess().getOperationCallParserRuleCall_0()); }
	ruleOperationCall
{ after(grammarAccess.getOperationCallStatementAccess().getOperationCallParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCallStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCallStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCallStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallStatementAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getOperationCallStatementAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionAssignment_0()); }
(rule__Assignment__Lhs_typedNamedElementExpressionAssignment_0)
{ after(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
(rule__Assignment__Alternatives_1)
{ after(grammarAccess.getAssignmentAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assignment__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_0__0__Impl
	rule__Assignment__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignOperatorAssignment_1_0_0()); }
(rule__Assignment__AssignOperatorAssignment_1_0_0)
{ after(grammarAccess.getAssignmentAccess().getAssignOperatorAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRhs_assignExpressionAssignment_1_0_1()); }
(rule__Assignment__Rhs_assignExpressionAssignment_1_0_1)
{ after(grammarAccess.getAssignmentAccess().getRhs_assignExpressionAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArrayInitializeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group__0__Impl
	rule__ArrayInitializeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getArrayInitializeExpressionAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group__1__Impl
	rule__ArrayInitializeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_1()); }
(rule__ArrayInitializeExpression__ExpressionsAssignment_1)
{ after(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group__2__Impl
	rule__ArrayInitializeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getGroup_2()); }
(rule__ArrayInitializeExpression__Group_2__0)*
{ after(grammarAccess.getArrayInitializeExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializeExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getArrayInitializeExpressionAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayInitializeExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group_2__0__Impl
	rule__ArrayInitializeExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getArrayInitializeExpressionAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayInitializeExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayInitializeExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_2_1()); }
(rule__ArrayInitializeExpression__ExpressionsAssignment_2_1)
{ after(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__0__Impl
	rule__LocalVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeAssignment_0()); }
(rule__LocalVariableDeclaration__DataTypeAssignment_0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__1__Impl
	rule__LocalVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
(rule__LocalVariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__2__Impl
	rule__LocalVariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2()); }
(rule__LocalVariableDeclaration__Group_2__0)?
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LocalVariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group_2__0__Impl
	rule__LocalVariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getColonEqualsSignKeyword_2_0()); }

	':=' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getColonEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionAssignment_2_1()); }
(rule__LocalVariableDeclaration__InitializeExpressionAssignment_2_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalConstantDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__0__Impl
	rule__LocalConstantDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getConstantAssignment_0()); }
(rule__LocalConstantDeclaration__ConstantAssignment_0)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getConstantAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalConstantDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__1__Impl
	rule__LocalConstantDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeAssignment_1()); }
(rule__LocalConstantDeclaration__DataTypeAssignment_1)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalConstantDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__2__Impl
	rule__LocalConstantDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getNameAssignment_2()); }
(rule__LocalConstantDeclaration__NameAssignment_2)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalConstantDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__3__Impl
	rule__LocalConstantDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getColonEqualsSignKeyword_3()); }

	':=' 

{ after(grammarAccess.getLocalConstantDeclarationAccess().getColonEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalConstantDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__4__Impl
	rule__LocalConstantDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionAssignment_4()); }
(rule__LocalConstantDeclaration__InitializeExpressionAssignment_4)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalConstantDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalConstantDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getLocalConstantDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NondeterministicChoiceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NondeterministicChoiceExpression__Group__0__Impl
	rule__NondeterministicChoiceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NondeterministicChoiceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypeAssignment_0()); }
(rule__NondeterministicChoiceExpression__DataTypeAssignment_0)
{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NondeterministicChoiceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NondeterministicChoiceExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NondeterministicChoiceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeAssignment_1()); }
(rule__NondeterministicChoiceExpression__RangeAssignment_1)
{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Range__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__0__Impl
	rule__Range__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getRangeAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__1__Impl
	rule__Range__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLowerBoundAssignment_1()); }
(rule__Range__LowerBoundAssignment_1)
{ after(grammarAccess.getRangeAccess().getLowerBoundAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__2__Impl
	rule__Range__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getCommaKeyword_2()); }

	',' 

{ after(grammarAccess.getRangeAccess().getCommaKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__3__Impl
	rule__Range__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getUpperBoundAssignment_3()); }
(rule__Range__UpperBoundAssignment_3)
{ after(grammarAccess.getRangeAccess().getUpperBoundAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Range__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Range__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Range__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getRangeAccess().getGreaterThanSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LogicalOrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__0__Impl
	rule__LogicalOrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
	ruleLogicalAndExpression
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
(rule__LogicalOrExpression__Group_1__0)*
{ after(grammarAccess.getLogicalOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalOrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__0__Impl
	rule__LogicalOrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalOrExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__1__Impl
	rule__LogicalOrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalOrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalOrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalOrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__LogicalOrExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LogicalAndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__0__Impl
	rule__LogicalAndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getLogicalAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
(rule__LogicalAndExpression__Group_1__0)*
{ after(grammarAccess.getLogicalAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LogicalAndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__0__Impl
	rule__LogicalAndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getLogicalAndExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__1__Impl
	rule__LogicalAndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__LogicalAndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LogicalAndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LogicalAndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__LogicalAndExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonHigherOpExpressionParserRuleCall_0()); }
	ruleComparisonHigherOpExpression
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonHigherOpExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)?
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ComparisonExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__ComparisonExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonHigherOpExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonHigherOpExpression__Group__0__Impl
	rule__ComparisonHigherOpExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
	ruleArithmeticExpression
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getArithmeticExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonHigherOpExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonHigherOpExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup_1()); }
(rule__ComparisonHigherOpExpression__Group_1__0)?
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonHigherOpExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonHigherOpExpression__Group_1__0__Impl
	rule__ComparisonHigherOpExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonHigherOpExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonHigherOpExpression__Group_1__1__Impl
	rule__ComparisonHigherOpExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ComparisonHigherOpExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonHigherOpExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonHigherOpExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__ComparisonHigherOpExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__0__Impl
	rule__AdditionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
	ruleMultiplicationExpression
{ after(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
(rule__AdditionExpression__Group_1__0)*
{ after(grammarAccess.getAdditionExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditionExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__0__Impl
	rule__AdditionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__1__Impl
	rule__AdditionExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AdditionExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditionExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightExpressionAssignment_1_2()); }
(rule__AdditionExpression__RightExpressionAssignment_1_2)
{ after(grammarAccess.getAdditionExpressionAccess().getRightExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicationExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__0__Impl
	rule__MultiplicationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_1_0()); }
	ruleOperand
{ after(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_1()); }
(rule__MultiplicationExpression__Group_1_1__0)*
{ after(grammarAccess.getMultiplicationExpressionAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicationExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_1__0__Impl
	rule__MultiplicationExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_1__1__Impl
	rule__MultiplicationExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1_1()); }
(rule__MultiplicationExpression__OperatorAssignment_1_1_1)
{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicationExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAssignment_1_1_2()); }
(rule__MultiplicationExpression__RightExpressionAssignment_1_1_2)
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryPreExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryPreExpression__Group__0__Impl
	rule__UnaryPreExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getUnaryExpressionAction_0()); }
(

)
{ after(grammarAccess.getUnaryPreExpressionAccess().getUnaryExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryPreExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryPreExpression__Group__1__Impl
	rule__UnaryPreExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getOperatorAssignment_1()); }
(rule__UnaryPreExpression__OperatorAssignment_1)
{ after(grammarAccess.getUnaryPreExpressionAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryPreExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryPreExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionAssignment_2()); }
(rule__UnaryPreExpression__EnclosedExpressionAssignment_2)
{ after(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Operand__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_0__0__Impl
	rule__Operand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getOperandAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_0__1__Impl
	rule__Operand__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getOperandAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Operand__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Operand__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operand__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperandAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getOperandAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group__0__Impl
	rule__LiteralExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1()); }
(rule__LiteralExpression__ValueAssignment_1)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedTypedNamedElementExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group__0__Impl
	rule__ExtendedTypedNamedElementExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getTypedNamedElementExpressionParserRuleCall_0()); }
	ruleTypedNamedElementExpression
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getTypedNamedElementExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedTypedNamedElementExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAlternatives_1()); }
(rule__ExtendedTypedNamedElementExpression__Alternatives_1)?
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExtendedTypedNamedElementExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group_1_0__0__Impl
	rule__ExtendedTypedNamedElementExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getDiscreteInteractionEndpointReferenceTypedNamedElementExpressionAction_1_0_0()); }
(

)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getDiscreteInteractionEndpointReferenceTypedNamedElementExpressionAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedTypedNamedElementExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group_1_0__1__Impl
	rule__ExtendedTypedNamedElementExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getFullStopKeyword_1_0_1()); }

	'.' 

{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedTypedNamedElementExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionAssignment_1_0_2()); }
(rule__ExtendedTypedNamedElementExpression__PositionAssignment_1_0_2)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExtendedTypedNamedElementExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group_1_1__0__Impl
	rule__ExtendedTypedNamedElementExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAssignmentLhs_typedNamedElementExpressionAction_1_1_0()); }
(

)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAssignmentLhs_typedNamedElementExpressionAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExtendedTypedNamedElementExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExtendedTypedNamedElementExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorAssignment_1_1_1()); }
(rule__ExtendedTypedNamedElementExpression__IncrementDecrementOperatorAssignment_1_1_1)
{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PositionSelectorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionSelectorExpression__Group__0__Impl
	rule__PositionSelectorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getKindAssignment_0()); }
(rule__PositionSelectorExpression__KindAssignment_0)
{ after(grammarAccess.getPositionSelectorExpressionAccess().getKindAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionSelectorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionSelectorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getGroup_1()); }
(rule__PositionSelectorExpression__Group_1__0)?
{ after(grammarAccess.getPositionSelectorExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PositionSelectorExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionSelectorExpression__Group_1__0__Impl
	rule__PositionSelectorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getPositionSelectorExpressionAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PositionSelectorExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PositionSelectorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorAssignment_1_1()); }
(rule__PositionSelectorExpression__SuccessorAssignment_1_1)
{ after(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamaterBinding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamaterBinding__Group__0__Impl
	rule__ParamaterBinding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getParameterBindingAction_0()); }
(

)
{ after(grammarAccess.getParamaterBindingAccess().getParameterBindingAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamaterBinding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamaterBinding__Group__1__Impl
	rule__ParamaterBinding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getParameterAssignment_1()); }
(rule__ParamaterBinding__ParameterAssignment_1)
{ after(grammarAccess.getParamaterBindingAccess().getParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamaterBinding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamaterBinding__Group__2__Impl
	rule__ParamaterBinding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getColonEqualsSignKeyword_2()); }

	':=' 

{ after(grammarAccess.getParamaterBindingAccess().getColonEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamaterBinding__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamaterBinding__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getValueAssignment_3()); }
(rule__ParamaterBinding__ValueAssignment_3)
{ after(grammarAccess.getParamaterBindingAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TriggerMessageExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerMessageExpression__Group__0__Impl
	rule__TriggerMessageExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerMessageExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeAssignment_0()); }
(rule__TriggerMessageExpression__MessageTypeAssignment_0)
{ after(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerMessageExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerMessageExpression__Group__1__Impl
	rule__TriggerMessageExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerMessageExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getTriggerMessageExpressionAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TriggerMessageExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TriggerMessageExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerMessageExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getParameterAssignment_2()); }
(rule__TriggerMessageExpression__ParameterAssignment_2)
{ after(grammarAccess.getTriggerMessageExpressionAccess().getParameterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__DATATYPE__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DATATYPE__Group__0__Impl
	rule__DATATYPE__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DATATYPE__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDATATYPEAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getDATATYPEAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DATATYPE__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DATATYPE__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DATATYPE__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDATATYPEAccess().getGroup_1()); }
(rule__DATATYPE__Group_1__0)*
{ after(grammarAccess.getDATATYPEAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DATATYPE__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DATATYPE__Group_1__0__Impl
	rule__DATATYPE__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DATATYPE__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDATATYPEAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getDATATYPEAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DATATYPE__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DATATYPE__Group_1__1__Impl
	rule__DATATYPE__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DATATYPE__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDATATYPEAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getDATATYPEAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DATATYPE__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DATATYPE__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DATATYPE__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDATATYPEAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getDATATYPEAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__DependencyModel__CommentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getCommentAlternatives_1_0()); }
(rule__DependencyModel__CommentAlternatives_1_0)
{ after(grammarAccess.getDependencyModelAccess().getCommentAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__DependenciesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_0_0()); }
	ruleDependency{ after(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DependencyModel__DependenciesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_1_0()); }
	ruleDependency{ after(grammarAccess.getDependencyModelAccess().getDependenciesDependencyParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Dependency__CommentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDependencyAccess().getCommentAlternatives_2_0()); }
(rule__Dependency__CommentAlternatives_2_0)
{ after(grammarAccess.getDependencyAccess().getCommentAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__SendingEventsAssignment_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_1_0()); }
	ruleEvent{ after(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__SendingEventsAssignment_0_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_2_1_0()); }
	ruleEvent{ after(grammarAccess.getSynchronizationAccess().getSendingEventsEventParserRuleCall_0_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__ReceivingEventsAssignment_0_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_4_0()); }
	ruleEvent{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__ReceivingEventsAssignment_0_0_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_5_1_0()); }
	ruleEvent{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsEventParserRuleCall_0_0_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__SendingEventsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_1_0()); }
	ruleSynchronizationEvent{ after(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__SendingEventsAssignment_0_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0()); }
	ruleSynchronizationEvent{ after(grammarAccess.getSynchronizationAccess().getSendingEventsSynchronizationEventParserRuleCall_0_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__ReceivingEventsAssignment_0_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0()); }
	ruleSynchronizationEvent{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__ReceivingEventsAssignment_0_1_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0()); }
	ruleSynchronizationEvent{ after(grammarAccess.getSynchronizationAccess().getReceivingEventsSynchronizationEventParserRuleCall_0_1_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__ChannelNameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getChannelNameEStringParserRuleCall_1_1_0()); }
	ruleEString{ after(grammarAccess.getSynchronizationAccess().getChannelNameEStringParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__GeneralSelectorExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getSynchronizationAccess().getGeneralSelectorExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Synchronization__SelectorTypeAssignment_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationAccess().getSelectorTypeDataTypeCrossReference_2_4_0()); }
(
{ before(grammarAccess.getSynchronizationAccess().getSelectorTypeDataTypeIDTerminalRuleCall_2_4_0_1()); }
	RULE_ID{ after(grammarAccess.getSynchronizationAccess().getSelectorTypeDataTypeIDTerminalRuleCall_2_4_0_1()); }
)
{ after(grammarAccess.getSynchronizationAccess().getSelectorTypeDataTypeCrossReference_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__StatesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_1_0()); }
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForbiddenStateCombination__StatesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_2_1_0()); }
(
{ before(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getForbiddenStateCombinationAccess().getStatesStateCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__StatesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_1_0()); }
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesStateQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBoundedActiveStateAccess().getStatesStateQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__StatesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_2_1_0()); }
(
{ before(grammarAccess.getBoundedActiveStateAccess().getStatesStateQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBoundedActiveStateAccess().getStatesStateQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getBoundedActiveStateAccess().getStatesStateCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoundedActiveState__ConstraintAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoundedActiveStateAccess().getConstraintClockConditionParserRuleCall_5_0()); }
	ruleClockCondition{ after(grammarAccess.getBoundedActiveStateAccess().getConstraintClockConditionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__ConditionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getConditionConditionParserRuleCall_0_1_0()); }
	ruleCondition{ after(grammarAccess.getConditionalDependencyAccess().getConditionConditionParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__EffectsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_3_0()); }
	ruleEffect{ after(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__EffectsAssignment_0_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_4_1_0()); }
	ruleEffect{ after(grammarAccess.getConditionalDependencyAccess().getEffectsEffectParserRuleCall_0_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__EventAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEventComplexEventParserRuleCall_1_2_0()); }
	ruleComplexEvent{ after(grammarAccess.getConditionalDependencyAccess().getEventComplexEventParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__EffectsAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_5_0()); }
	ruleLimitedEffect{ after(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalDependency__EffectsAssignment_1_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_6_1_0()); }
	ruleLimitedEffect{ after(grammarAccess.getConditionalDependencyAccess().getEffectsLimitedEffectParserRuleCall_1_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnableDisableEffect__IsEnableAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getIsEnableEnableKeyword_0_0_0()); }
(
{ before(grammarAccess.getEnableDisableEffectAccess().getIsEnableEnableKeyword_0_0_0()); }

	'enable' 

{ after(grammarAccess.getEnableDisableEffectAccess().getIsEnableEnableKeyword_0_0_0()); }
)

{ after(grammarAccess.getEnableDisableEffectAccess().getIsEnableEnableKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnableDisableEffect__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnableDisableEffectAccess().getEventEventParserRuleCall_1_0()); }
	ruleEvent{ after(grammarAccess.getEnableDisableEffectAccess().getEventEventParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Lhs_typedNamedElementExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0()); }
	ruleTypedNamedElementExpression{ after(grammarAccess.getDataAssignmentEffectAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__AssignOperatorAssignment_2_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0()); }
	ruleAssignOperator{ after(grammarAccess.getDataAssignmentEffectAccess().getAssignOperatorAssignOperatorEnumRuleCall_2_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__Rhs_assignExpressionAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0()); }
	ruleInitializeExpression{ after(grammarAccess.getDataAssignmentEffectAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataAssignmentEffect__IncrementDecrementOperatorAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0()); }
	ruleIncrementDecrementOperatorExpression{ after(grammarAccess.getDataAssignmentEffectAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__ClocksAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_1_0()); }
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksClockQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getClockResetEffectAccess().getClocksClockQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockResetEffect__ClocksAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_2_1_0()); }
(
{ before(grammarAccess.getClockResetEffectAccess().getClocksClockQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getClockResetEffectAccess().getClocksClockQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getClockResetEffectAccess().getClocksClockCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__VariablesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_0_1_0()); }
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_0_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_0_1_0_1()); }
)
{ after(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__VariableNameAssignment_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_0_2_1_0()); }
	ruleEString{ after(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__VariablesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_1_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__VariablesAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_2_1_0()); }
(
{ before(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_1_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getDataMergeAccess().getVariablesVariableQualifiedNameParserRuleCall_1_2_1_0_1()); }
)
{ after(grammarAccess.getDataMergeAccess().getVariablesVariableCrossReference_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataMerge__VariableNameAssignment_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_1_3_1_0()); }
	ruleEString{ after(grammarAccess.getDataMergeAccess().getVariableNameEStringParserRuleCall_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__ClocksAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_1_0()); }
(
{ before(grammarAccess.getClockMergeAccess().getClocksClockQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getClockMergeAccess().getClocksClockQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__ClocksAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_2_1_0()); }
(
{ before(grammarAccess.getClockMergeAccess().getClocksClockQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getClockMergeAccess().getClocksClockQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getClockMergeAccess().getClocksClockCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClockMerge__ClockNameAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClockMergeAccess().getClockNameEStringParserRuleCall_3_1_0()); }
	ruleEString{ after(grammarAccess.getClockMergeAccess().getClockNameEStringParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getKindMessageEventKindEnumRuleCall_0_0()); }
	ruleMessageEventKind{ after(grammarAccess.getMessageEventAccess().getKindMessageEventKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__PortAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getPortDiscretePortCrossReference_1_0_0()); }
(
{ before(grammarAccess.getMessageEventAccess().getPortDiscretePortIDTerminalRuleCall_1_0_0_1()); }
	RULE_ID{ after(grammarAccess.getMessageEventAccess().getPortDiscretePortIDTerminalRuleCall_1_0_0_1()); }
)
{ after(grammarAccess.getMessageEventAccess().getPortDiscretePortCrossReference_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MessageEvent__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMessageEventAccess().getTypeMessageTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getMessageEventAccess().getTypeMessageTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getMessageEventAccess().getTypeMessageTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getMessageEventAccess().getTypeMessageTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransitionEvent__TransitionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransitionEventAccess().getTransitionTransitionCrossReference_1_0()); }
(
{ before(grammarAccess.getTransitionEventAccess().getTransitionTransitionQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTransitionEventAccess().getTransitionTransitionQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTransitionEventAccess().getTransitionTransitionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateEvent__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventAccess().getKindStateEventKindEnumRuleCall_0_0()); }
	ruleStateEventKind{ after(grammarAccess.getStateEventAccess().getKindStateEventKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateEvent__StateAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateEventAccess().getStateStateCrossReference_1_0()); }
(
{ before(grammarAccess.getStateEventAccess().getStateStateQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateEventAccess().getStateStateQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getStateEventAccess().getStateStateCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getKindStateEventKindEnumRuleCall_0_0()); }
	ruleStateEventKind{ after(grammarAccess.getStateCombinationEventAccess().getKindStateEventKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__StatesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_2_0()); }
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesStateQualifiedNameParserRuleCall_2_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateCombinationEventAccess().getStatesStateQualifiedNameParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateCombinationEvent__StatesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_3_1_0()); }
(
{ before(grammarAccess.getStateCombinationEventAccess().getStatesStateQualifiedNameParserRuleCall_3_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateCombinationEventAccess().getStatesStateQualifiedNameParserRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getStateCombinationEventAccess().getStatesStateCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getEventEventParserRuleCall_0_0()); }
	ruleEvent{ after(grammarAccess.getSynchronizationEventAccess().getEventEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SynchronizationEvent__SelectorExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSynchronizationEventAccess().getSelectorExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__LeftEventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getLeftEventComplexEventParserRuleCall_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getCompositionEventAccess().getLeftEventComplexEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getKindLogicOperatorEnumRuleCall_1_0()); }
	ruleLogicOperator{ after(grammarAccess.getCompositionEventAccess().getKindLogicOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionEvent__RightEventAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionEventAccess().getRightEventComplexEventParserRuleCall_2_0()); }
	ruleComplexEvent{ after(grammarAccess.getCompositionEventAccess().getRightEventComplexEventParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getEventComplexEventParserRuleCall_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getCountedEventAccess().getEventComplexEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CountedEvent__CounterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCountedEventAccess().getCounterEIntParserRuleCall_2_0()); }
	ruleEInt{ after(grammarAccess.getCountedEventAccess().getCounterEIntParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DelayedEvent__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayedEventAccess().getEventComplexEventParserRuleCall_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getDelayedEventAccess().getEventComplexEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DelayedEvent__DelayAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelayedEventAccess().getDelayTimeValueParserRuleCall_2_0()); }
	ruleTimeValue{ after(grammarAccess.getDelayedEventAccess().getDelayTimeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__KindAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getKindOrOperatorEnumRuleCall_1_1_0()); }
	ruleOrOperator{ after(grammarAccess.getCompositionOrConditionAccess().getKindOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionOrCondition__RightConditionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionOrConditionAccess().getRightConditionCompositionOrConditionParserRuleCall_1_2_0()); }
	ruleCompositionOrCondition{ after(grammarAccess.getCompositionOrConditionAccess().getRightConditionCompositionOrConditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__KindAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getKindAndOperatorEnumRuleCall_1_1_0()); }
	ruleAndOperator{ after(grammarAccess.getCompositionAndConditionAccess().getKindAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositionAndCondition__RightConditionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositionAndConditionAccess().getRightConditionCompositionAndConditionParserRuleCall_1_2_0()); }
	ruleCompositionAndCondition{ after(grammarAccess.getCompositionAndConditionAccess().getRightConditionCompositionAndConditionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__StatesAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_0_0()); }
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__StatesAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_1_0()); }
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_1_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_1_1_0_1()); }
)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__StatesAssignment_0_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_2_1_0()); }
(
{ before(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_1_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateQualifiedNameParserRuleCall_0_1_2_1_0_1()); }
)
{ after(grammarAccess.getStateStatusConditionAccess().getStatesStateCrossReference_0_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StateStatusCondition__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStateStatusConditionAccess().getKindStateStatusKindEnumRuleCall_1_0()); }
	ruleStateStatusKind{ after(grammarAccess.getStateStatusConditionAccess().getKindStateStatusKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__FromEventAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_0_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_0_2_0()); }
	ruleComplexEvent{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__InitialEnabledAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledINITKeyword_1_1_0_0()); }
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledINITKeyword_1_1_0_0()); }

	'INIT' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledINITKeyword_1_1_0_0()); }
)

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getInitialEnabledINITKeyword_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_1_2_0()); }
	ruleComplexEvent{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__FromEventAssignment_1_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_2_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getFromEventComplexEventParserRuleCall_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__UntilEventAssignment_1_2_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_2_2_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getUntilEventComplexEventParserRuleCall_1_2_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EventConstrainedIntervalCondition__EnabledInfiteAssignment_1_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteINFINITEKeyword_1_2_2_1_0()); }
(
{ before(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteINFINITEKeyword_1_2_2_1_0()); }

	'INFINITE' 

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteINFINITEKeyword_1_2_2_1_0()); }
)

{ after(grammarAccess.getEventConstrainedIntervalConditionAccess().getEnabledInfiteINFINITEKeyword_1_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__EventAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getEventComplexEventParserRuleCall_0_0()); }
	ruleComplexEvent{ after(grammarAccess.getAuxiliaryClockConditionAccess().getEventComplexEventParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); }
	ruleNaturalLanguageComparingOperator{ after(grammarAccess.getAuxiliaryClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AuxiliaryClockCondition__BoundAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxiliaryClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); }
	ruleTimeValue{ after(grammarAccess.getAuxiliaryClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getConditionStateStatusConditionParserRuleCall_0_0()); }
	ruleStateStatusCondition{ after(grammarAccess.getHybridClockConditionAccess().getConditionStateStatusConditionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); }
	ruleNaturalLanguageComparingOperator{ after(grammarAccess.getHybridClockConditionAccess().getOperatorNaturalLanguageComparingOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HybridClockCondition__BoundAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHybridClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); }
	ruleTimeValue{ after(grammarAccess.getHybridClockConditionAccess().getBoundTimeValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__ClockAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getClockClockCrossReference_1_0()); }
(
{ before(grammarAccess.getBasicClockConditionAccess().getClockClockQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getBasicClockConditionAccess().getClockClockQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getBasicClockConditionAccess().getClockClockCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getOperatorComparingOperatorEnumRuleCall_2_0()); }
	ruleComparingOperator{ after(grammarAccess.getBasicClockConditionAccess().getOperatorComparingOperatorEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicClockCondition__BoundAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicClockConditionAccess().getBoundTimeValueParserRuleCall_3_0()); }
	ruleTimeValue{ after(grammarAccess.getBasicClockConditionAccess().getBoundTimeValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataCondition__ExpressionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataConditionAccess().getExpressionLogicalExpressionParserRuleCall_0()); }
	ruleLogicalExpression{ after(grammarAccess.getDataConditionAccess().getExpressionLogicalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__TypedNamedElementAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementCrossReference_0_0()); }
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypedNamedElementExpression__IndicesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypedNamedElementExpressionAccess().getIndicesArithmeticExpressionParserRuleCall_1_1_0()); }
	ruleArithmeticExpression{ after(grammarAccess.getTypedNamedElementExpressionAccess().getIndicesArithmeticExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__OperationAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_0_0()); }
(
{ before(grammarAccess.getOperationCallAccess().getOperationOperationQualifiedNameParserRuleCall_0_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getOperationCallAccess().getOperationOperationQualifiedNameParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ParameterBindingAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_0_0()); }
	ruleParamaterBinding{ after(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ParameterBindingAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_1_1_0()); }
	ruleParamaterBinding{ after(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getValueExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getTimeValueAccess().getValueExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimeValue__UnitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimeValueAccess().getUnitTimeUnitParserRuleCall_1_0()); }
	ruleTimeUnit{ after(grammarAccess.getTimeValueAccess().getUnitTimeUnitParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); }
	ruleExpressionStartRule{ after(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__InitializeExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getInitializeExpressionAssignmentParserRuleCall_2_0()); }
	ruleAssignment{ after(grammarAccess.getForLoopAccess().getInitializeExpressionAssignmentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__LoopTestAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__CountingExpressionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); }
	ruleForLoopCountingExpression{ after(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__BlockAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); }
	ruleBlock{ after(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Lhs_typedNamedElementExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); }
	ruleTypedNamedElementExpression{ after(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__IncrementDecrementOperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_0_0()); }
	ruleUnaryPostIncrementDecrementOperator{ after(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__AssignOperatorAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); }
	ruleAssignOperator{ after(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoopCountingExpression__Rhs_assignExpressionAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__LoopTestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileLoop__BlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__BlockAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); }
	ruleBlock{ after(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhileLoop__LoopTestAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfConditionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfBlockAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfConditionsAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); }
	ruleExpression{ after(grammarAccess.getIfStatementAccess().getElseIfConditionsExpressionParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseIfBlocksAssignment_5_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getElseIfBlocksBlockParserRuleCall_5_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBlockAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Lhs_typedNamedElementExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); }
	ruleTypedNamedElementExpression{ after(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__AssignOperatorAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); }
	ruleAssignOperator{ after(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Rhs_assignExpressionAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_1_0_1_0()); }
	ruleInitializeExpression{ after(grammarAccess.getAssignmentAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__IncrementDecrementOperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_1_0()); }
	ruleUnaryPostIncrementDecrementOperator{ after(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__ExpressionsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_1_0()); }
	ruleInitializeExpression{ after(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayInitializeExpression__ExpressionsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_2_1_0()); }
	ruleInitializeExpression{ after(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableOrConstantDeclarationStatement__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAlternatives_0()); }
(rule__LocalVariableOrConstantDeclarationStatement__VariableAlternatives_0)
{ after(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__DataTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeDATATYPEParserRuleCall_0_0_1()); }
	ruleDATATYPE{ after(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeDATATYPEParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__InitializeExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_2_1_0()); }
	ruleInitializeExpression{ after(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__ConstantAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0()); }
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0()); }

	'const' 

{ after(grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0()); }
)

{ after(grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__DataTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeDATATYPEParserRuleCall_1_0_1()); }
	ruleDATATYPE{ after(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeDATATYPEParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getLocalConstantDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalConstantDeclaration__InitializeExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_4_0()); }
	ruleInitializeExpression{ after(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NondeterministicChoiceExpression__DataTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NondeterministicChoiceExpression__RangeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeRangeParserRuleCall_1_0()); }
	ruleRange{ after(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeRangeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__LowerBoundAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getLowerBoundLONGParserRuleCall_1_0()); }
	ruleLONG{ after(grammarAccess.getRangeAccess().getLowerBoundLONGParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Range__UpperBoundAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeAccess().getUpperBoundLONGParserRuleCall_3_0()); }
	ruleLONG{ after(grammarAccess.getRangeAccess().getUpperBoundLONGParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); }
	ruleLogicalOrOperator{ after(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOrExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0()); }
	ruleLogicalAndExpression{ after(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); }
	ruleLogicalAndOperator{ after(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalAndExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOperatorComparingEQNEQOperatorEnumRuleCall_1_1_0()); }
	ruleComparingEQNEQOperator{ after(grammarAccess.getComparisonExpressionAccess().getOperatorComparingEQNEQOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0()); }
	ruleComparisonHigherOpExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorComparingRelOperatorEnumRuleCall_1_1_0()); }
	ruleComparingRelOperator{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorComparingRelOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonHigherOpExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionArithmeticExpressionParserRuleCall_1_2_0()); }
	ruleArithmeticExpression{ after(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionArithmeticExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
	ruleAdditionOperator{ after(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionExpression__RightExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionExpressionAccess().getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicationExpression{ after(grammarAccess.getAdditionExpressionAccess().getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__OperatorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_1_0()); }
	ruleMultiplicationOperator{ after(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationExpression__RightExpressionAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAlternatives_1_1_2_0()); }
(rule__MultiplicationExpression__RightExpressionAlternatives_1_1_2_0)
{ after(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionAlternatives_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreExpression__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getOperatorUnaryPreOperatorEnumRuleCall_1_0()); }
	ruleUnaryPreOperator{ after(grammarAccess.getUnaryPreExpressionAccess().getOperatorUnaryPreOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPreExpression__EnclosedExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionOperandParserRuleCall_2_0()); }
	ruleOperand{ after(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionOperandParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
	ruleLiteral{ after(grammarAccess.getLiteralExpressionAccess().getValueLiteralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__PositionAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_1_0_2_0()); }
	rulePositionSelectorExpression{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExtendedTypedNamedElementExpression__IncrementDecrementOperatorAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_1_1_1_0()); }
	ruleIncrementDecrementOperatorExpression{ after(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NoAttributeSelectorExpression__PositionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_0()); }
	rulePositionSelectorExpression{ after(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__KindAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getKindPositionSelectorKindEnumRuleCall_0_0()); }
	rulePositionSelectorKind{ after(grammarAccess.getPositionSelectorExpressionAccess().getKindPositionSelectorKindEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PositionSelectorExpression__SuccessorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorPositionSelectorExpressionParserRuleCall_1_1_0()); }
	rulePositionSelectorExpression{ after(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorPositionSelectorExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getParameterParameterCrossReference_1_0()); }
(
{ before(grammarAccess.getParamaterBindingAccess().getParameterParameterIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getParamaterBindingAccess().getParameterParameterIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getParamaterBindingAccess().getParameterParameterCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamaterBinding__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamaterBindingAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getParamaterBindingAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerMessageExpression__MessageTypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TriggerMessageExpression__ParameterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterCrossReference_2_0()); }
(
{ before(grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') (('a'..'z'|'A'..'Z'|'_'|'0'..'9')+ ('(' ('0'..'9')+ ')-->' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+)?)?;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


