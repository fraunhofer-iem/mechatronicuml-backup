
modeltype GMFGEN uses gmfgen('http://www.eclipse.org/gmf/2009/GenModel');
modeltype propsheet uses properties('http://de.uni_paderborn.fujaba.properties/0.5.1');

transformation transform(inout gmfgenModel : GMFGEN);

--blackbox helper getResourceContents(uri : String) : Sequence(OclAny);

main() {
	--getResourceContents("Test");

  --fix GMF BUG 331875
  gmfgenModel.objectsOfType(ExpressionLabelParser)->forEach(parser)
    {
        parser.className :=
parser.className.concat(parser._uses->first().container().oclAsType(GenCommonBase).visualID.toString());
    };

  -- prevent validation of OCL Constraints before code generation.
  -- we deactivate it by adding "--" in front of all expressions; the templates are adapted to remove it afterwards.
  -- see /de.uni_paderborn.fujaba.muml.common/gmf-templates/aspects/xpt/expressions/OCLExpressionFactory.xpt
  gmfgenModel.objectsOfType(ValueExpression)->forEach(expression) {
    --expression.body := '--'.concat(expression.body.replace('\n','\n--'));
    

    -- Add dependant plugins
    var model = gmfgenModel.rootObjects()![GenEditorGenerator];
    model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.common";
  --  model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.muml.common";
    model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.modelinstance.ui";
    model.plugin.requiredPlugins += "org.storydriven.core.edit.properties";
    model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.muml.edit.properties";
    model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.common.editingdomain";
    
    -- For Custom Property Tab (MUML #459)
    model.plugin.requiredPlugins += "de.uni_paderborn.fujaba.properties.runtime";

    
    -- set default colors
    if (model.diagram.preferences.oclIsUndefined()) then {
    	model.diagram.preferences := object GenDiagramPreferences{};
    } endif;
    model.diagram.preferences.lineColor := object GenConstantColor{name := DiagramColors::black;};
    model.diagram.preferences.fillColor := object GenConstantColor{name := DiagramColors::white;};
    model.diagram.preferences.fontColor := object GenConstantColor{name := DiagramColors::black;};
    model.diagram.preferences.noteFillColor := object GenConstantColor{name := DiagramColors::yellow;};
    model.diagram.preferences.noteLineColor := object GenConstantColor{name := DiagramColors::orange;};
    
    
    -- Make parsers extensible
    gmfgenModel.objectsOfType(GenParsers)->forEach(parser){
    	parser.extensibleViaService := true;
    };
    
    -- Add Custom Property Tab (MUML #459)
    -- Does not work quite correctly (adds lots of tabs??)
    -- Currently the gmfgen was adapted manually


    --model.propertySheet.map createTab("general", "General", "org.storydriven.core.properties.tabs.GeneralTabElementFilter");
    --model.propertySheet.map createTab("documentation", "Documentation", "org.storydriven.core.properties.tabs.DocumentationTabElementFilter");
    --model.propertySheet.map createTab("constraint", "Constraint", "org.storydriven.core.properties.tabs.ConstraintTabElementFilter");
   
   
   
    --

    
  }
}

mapping inout GenPropertySheet::createTab(id : String, label : String, filter : String) {
	if (tabs[GenCustomPropertyTab]->select(t | t.iD = id)->isEmpty()) then {
		tabs += new GenCustomPropertyTab(id, label, "de.uni_paderborn.fujaba.properties.runtime.sections.ObjectPropertySection");
	} endif;
	var tab := tabs[GenCustomPropertyTab]->any(iD = id);
	if (tab.filter[CustomTabFilter]->select(f | f.className <> filter)->isEmpty()) then {
		tab.filter := new CustomTabFilter(filter);
	} endif;
} 

constructor GenCustomPropertyTab::GenCustomPropertyTab(_iD : String, _label : String, _className : String) {
	iD = _iD;
	label = _label;
	className = _className;
}

constructor CustomTabFilter::CustomTabFilter(_className : String) {
	className = _className;
}