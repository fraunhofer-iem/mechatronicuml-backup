«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«EXTENSION MetaModel»

«EXTENSION xpt::diagram::updater::Utils»
«EXTENSION impl::diagram::updater::CanonicalUpdate»

«DEFINE installCanonicalEditPolicy FOR gmfgen::GenDiagram-»
	«IF needsCanonicalEditPolicy()-»
		«IF getQualifiedInterfaceName(domainDiagramElement) = 'de.uni_paderborn.fujaba.modelinstance.ModelElementCategory'»
			// Not installing the EditPolicy with the key EditPolicyRoles.CANONICAL_ROLE guarantees that the "Delete from Diagram" Action is visible. 
			installEditPolicy("CustomCanonical", new «getCanonicalEditPolicyQualifiedClassName()»(false));
		«ELSE»
			installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.CANONICAL_ROLE, new «getCanonicalEditPolicyQualifiedClassName()»(true));
		«ENDIF»
	«ENDIF-» 
«ENDDEFINE»




«AROUND visualIDConstant FOR gmfgen::GenCommonBase-»
	«targetDef.proceed()»

	/**
	 * MUML FIX, see code comments.
	 *
	 * @generated
	 */
	@Override
	protected java.util.Collection<?> disableCanonicalFor(org.eclipse.gef.Request request) {
		
		@SuppressWarnings("unchecked")
		java.util.Collection<Object> hosts = super.disableCanonicalFor(request);

		// MUML FIX: Make sure that commands disable ALL canonical editpolicies,
		// because GMF supports adding additional commands using Edit Helpers concept,
		// which could trigger refresh of any canonical edit policy.
		// So it should be the cleanest solution to disable all canonical edit policies. 
		org.eclipse.gef.EditPart part = this;
		while (part != null) {
			hosts.add(part);
			part = part.getParent();
		}
		return hosts;
	}
	
	«EXPAND refreshBackgroundColor»
	
«ENDAROUND»

«DEFINE refreshBackgroundColor FOR gmfgen::GenCommonBase-»«ENDDEFINE»
«DEFINE refreshBackgroundColor FOR gmfgen::GenNode»

	/**
	 * MUML FIX: Adapt background color if IBackgroundColorEditPolicy is registered.
	 * 
	 * @generated
	 */
	@Override
	protected void refreshBackgroundColor() {
		EditPolicy backgroundColorPolicy = getEditPolicy(de.uni_paderborn.fujaba.common.edit.policies.EditPolicyRoles.BACKGROUND_COLOR_ROLE);
		if (backgroundColorPolicy instanceof de.uni_paderborn.fujaba.muml.common.edit.policies.IBackgroundColorEditPolicy) {
			setBackgroundColor(((de.uni_paderborn.fujaba.muml.common.edit.policies.IBackgroundColorEditPolicy) backgroundColorPolicy).getCurrentBackgroundColor());
		} else {
			super.refreshBackgroundColor();
		}
    }
«ENDDEFINE»


«AROUND behaviour FOR gmfgen::CustomBehaviour-»
«IF key = 'org.muml.custom.nonDeletable'»
	removeEditPolicy(org.eclipse.gef.EditPolicy.COMPONENT_ROLE);
		installEditPolicy(org.eclipse.gef.EditPolicy.COMPONENT_ROLE, new org.eclipse.gmf.runtime.diagram.ui.editpolicies.ComponentEditPolicy() {
			@Override
			public org.eclipse.gef.commands.Command getCommand(org.eclipse.gef.Request request) {
				// If the user presses the delete key, don't delete
				boolean keyboardDelete = request instanceof org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard
						&& org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_DELETE.equals(request.getType());
				if (request.getType() == org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants.REQ_DELETE
						|| keyboardDelete) {					
					return org.eclipse.gef.commands.UnexecutableCommand.INSTANCE;
				}

				return super.getCommand(request);
			}
		});
		removeEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE);
		installEditPolicy(org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles.SEMANTIC_ROLE, new «subject.getItemSemanticEditPolicyQualifiedClassName()»() {
			@Override
			protected org.eclipse.gef.commands.Command getSemanticCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest request) {
			if (request instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
					return null;
				}
				return super.getSemanticCommand(request);
			}
		});
«ELSE»
	«targetDef.proceed()»
«ENDIF»
«ENDAROUND»
