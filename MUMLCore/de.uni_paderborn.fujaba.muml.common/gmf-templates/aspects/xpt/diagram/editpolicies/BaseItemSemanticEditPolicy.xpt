«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»
«IMPORT 'http://www.eclipse.org/emf/2002/GenModel'»

«EXTENSION xpt::diagram::editpolicies::Utils»
«EXTENSION xpt::diagram::Utils»
«EXTENSION xpt::GenModelUtils»
«EXTENSION xpt::OclMigrationProblems»

«REM»Add view parameters«ENDREM»
«AROUND sourceTargetParameters FOR gmfgen::LinkModelFacet-»«targetDef.proceed()», org.eclipse.gmf.runtime.notation.View sourceView, org.eclipse.gmf.runtime.notation.View targetView«-»«ENDAROUND»
«AROUND canCreateValues FOR gmfgen::LinkModelFacet»«targetDef.proceed()», sourceView, targetView«ENDAROUND»

«AROUND _checkAdditionalConstraint(gmfgen::ValueExpression valueExpr, String sourceEndVar, String targetEndVar, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»
	if («sourceEndVar» == null) {
		return true;
	} else {«REM»else is important here as it gives scope for the env variable«ENDREM»
		«EXPAND evaluateOCL(valueExpr, sourceEndVar, targetEndVar, context, oppositeEndContext)»
		if (false == «sourceEndVar»Val instanceof Boolean || !((Boolean) «sourceEndVar»Val).booleanValue()) {
			return false;
		} // else fall-through
	}
«ENDAROUND»

«DEFINE getError_checkAdditionalConstraint(gmfgen::ValueExpression valueExpr, String sourceEndVar, String targetEndVar, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»
	if («sourceEndVar» == null) {
		return null;
	} else {«REM»else is important here as it gives scope for the env variable«ENDREM»
		«EXPAND evaluateOCL(valueExpr, sourceEndVar, targetEndVar, context, oppositeEndContext)»
		if (false == «sourceEndVar»Val instanceof Boolean || !((Boolean) «sourceEndVar»Val).booleanValue()) {
			String body = expression.body().trim();
			if (body.startsWith("--")) {
				int end = body.indexOf('\n');
				if (end < 0) {
					end = body.length() - 1;
				} else {
					if (body.charAt(end - 1) == '\r') {
						end--;
					}
				}
				return body.substring(2, end);
			}
			return "Creation is not allowed.";
		} // else fall-through
	}
«ENDDEFINE»

«DEFINE evaluateOCL(gmfgen::ValueExpression valueExpr, String sourceEndVar, String targetEndVar, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»
	java.util.Map«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» envType = new java.util.HashMap«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram»();
	java.util.Map«EXPAND CodeStyle::G2('String', 'Object') FOR container.editorGen.diagram» env = new java.util.HashMap«EXPAND CodeStyle::G2('String', 'Object') FOR container.editorGen.diagram»();
	«EXPAND addEnvironmentVariables('envType', 'env', sourceEndVar, targetEndVar, context, oppositeEndContext)»
	«container.getAbstractExpressionQualifiedClassName()» expression = «EXPAND xpt::expressions::getExpression::getExpression(valueExpr, context, 'envType')»;
	Object «sourceEndVar»Val = expression.evaluate(«sourceEndVar», env);«EXPAND xpt::Common::nonNLS»
«ENDDEFINE»

«DEFINE addEnvironmentVariables(String envTypeMap, String envMap, String sourceEndVar, String targetEndVar, genmodel::GenClass context, genmodel::GenClass oppositeEndContext) FOR gmfgen::GenExpressionInterpreter-»
«envTypeMap».put(«EXPAND oppositeEndVariableNameValue», «EXPAND MetaModel::MetaClass FOR oppositeEndContext»);«EXPAND xpt::Common::nonNLS»
«envMap».put(«EXPAND oppositeEndVariableNameValue», «targetEndVar»);
«envTypeMap».put("view", org.eclipse.gmf.runtime.notation.NotationPackage.Literals.VIEW);
«envMap».put("view", «sourceEndVar»View);
«envTypeMap».put("oppositeView", org.eclipse.gmf.runtime.notation.NotationPackage.Literals.VIEW);
«envMap».put("oppositeView", «targetEndVar»View);
«ENDDEFINE»


«AROUND canExist FOR gmfgen::GenLink»
«targetDef.proceed()»
«EXPAND getError»
«ENDAROUND»


«DEFINE getError FOR gmfgen::GenLink»
«EXPAND xpt::Common::generatedMemberComment»
	public java.lang.String getError«getUniqueIdentifier()»(«EXPAND canCreateParameters FOR modelFacet») {
«IF creationConstraints <> null and (creationConstraints.isValid() and null <> getDiagram().editorGen.expressionProviders)-»
		try {
«IF null <> creationConstraints.sourceEnd-»
			«EXPAND getError_checkAdditionalConstraint(creationConstraints.sourceEnd, 'source', 'target', creationConstraints.getSourceEndContextClass(), creationConstraints.getTargetEndContextClass()) FOR creationConstraints.sourceEnd.provider-»
«ENDIF-»
«IF null <> creationConstraints.targetEnd-»
			«EXPAND getError_checkAdditionalConstraint(creationConstraints.targetEnd, 'target', 'source', creationConstraints.getTargetEndContextClass(), creationConstraints.getSourceEndContextClass()) FOR creationConstraints.targetEnd.provider-»
«ENDIF-»
			return null;
		} catch(Exception e) {	
			«EXPAND plugin::Activator::instanceAccess FOR getDiagram().editorGen».logError("Link constraint evaluation error", e);«EXPAND xpt::Common::nonNLS»
			return "Link constraint evaluation error";
		}
«ELSE-»
		return null;
«ENDIF-»
	}
«ENDDEFINE»

«AROUND getSemanticCommand FOR gmfgen::GenDiagram-»
«EXPAND xpt::Common::generatedMemberComment»
protected org.eclipse.gef.commands.Command getSemanticCommand(org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest request) {
	org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest completedRequest = completeRequest(request);
	org.eclipse.gef.commands.Command semanticCommand = getSemanticCommandSwitch(completedRequest);
	semanticCommand = getEditHelperCommand(completedRequest, semanticCommand);
	if (completedRequest instanceof org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) {
		org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest destroyRequest = (org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest) completedRequest;
		return shouldProceed(destroyRequest) ? addDeleteViewCommand(semanticCommand, destroyRequest) : null;
		}
		return semanticCommand;
	}
«ENDAROUND»



«REM» for access to the getError() methods from commands «ENDREM»
«DEFINE getErrorCall(gmfgen::GenLink link, String sourceVar, String targetVar) FOR gmfgen::FeatureLinkModelFacet-»
«EXPAND _accessLinkConstraints FOR link.diagram».getError«link.getUniqueIdentifier()»(«sourceVar», «targetVar»)«-»
«ENDDEFINE»
«DEFINE getErrorCall(gmfgen::GenLink link, String containerVar, String sourceVar, String targetVar) FOR gmfgen::TypeLinkModelFacet-»
«EXPAND _accessLinkConstraints FOR link.diagram».getError«link.getUniqueIdentifier()»(«IF hasContainerOtherThanSource(self)»«containerVar», «ENDIF»«sourceVar», «targetVar»)«-»
«ENDDEFINE»





«REM»Copied these to make them callable«ENDREM»
«DEFINE oppositeEndVariableNameValue FOR OclAny»"oppositeEnd"«ENDDEFINE»
«DEFINE _accessLinkConstraints FOR gmfgen::GenDiagram-»«getBaseItemSemanticEditPolicyQualifiedClassName()».getLinkConstraints()«ENDDEFINE»
«DEFINE canCreateParameters FOR gmfgen::LinkModelFacet»«EXPAND sourceTargetParameters»«ENDDEFINE»// source and target are reasonable defaults
«DEFINE canCreateParameters FOR gmfgen::TypeLinkModelFacet»«IF hasContainerOtherThanSource(self)»«EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» container, «ENDIF»«EXPAND sourceTargetParameters»«ENDDEFINE»
«DEFINE sourceTargetParameters FOR gmfgen::LinkModelFacet»«EXPAND MetaModel::QualifiedClassName FOR getSourceType()» source, «EXPAND MetaModel::QualifiedClassName FOR getTargetType()» target«ENDDEFINE»
