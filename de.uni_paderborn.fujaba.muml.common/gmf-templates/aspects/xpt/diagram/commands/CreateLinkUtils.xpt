«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«EXTENSION xpt::diagram::Utils»

«REM»
	* Need to provide the View for LinkConstraints (Muml Bug #462)
	* provide error message in request parameters (Muml Bug #468)
«ENDREM»
«AROUND canCreateElement(link : gmfgen::GenLink) FOR gmfgen::TypeLinkModelFacet-»
«IF hasContainerOtherThanSource(self)-»
	if (getContainer() == null) {
		return false;
	}
«ENDIF-»
	org.eclipse.gmf.runtime.notation.View sourceView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getSourceView(getRequest());
	org.eclipse.gmf.runtime.notation.View targetView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getTargetView(getRequest());
	if(!«EXPAND xpt::diagram::editpolicies::BaseItemSemanticEditPolicy::canCreateCall(link, 'getContainer()', 'getSource()', 'getTarget(), sourceView, targetView')») {
		String errorMessage = «EXPAND xpt::diagram::editpolicies::BaseItemSemanticEditPolicy::getErrorCall(link, 'getContainer()', 'getSource()', 'getTarget(), sourceView, targetView')»;
		de.uni_paderborn.fujaba.muml.common.edit.policies.ErrorFeedbackEditPolicy.showMessage(targetView != null ? targetView : sourceView, errorMessage);
		return false;
	}
	return true;
«ENDAROUND»
«AROUND canCreateElement(link : gmfgen::GenLink) FOR gmfgen::FeatureLinkModelFacet-»
	org.eclipse.gmf.runtime.notation.View sourceView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getSourceView(getRequest());
	org.eclipse.gmf.runtime.notation.View targetView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getTargetView(getRequest());
	if (!«EXPAND xpt::diagram::editpolicies::BaseItemSemanticEditPolicy::canCreateCall(link, 'getSource()', 'getTarget(), sourceView, targetView')») {
		String errorMessage = «EXPAND xpt::diagram::editpolicies::BaseItemSemanticEditPolicy::getErrorCall(link, 'getSource()', 'getTarget(), sourceView, targetView')»;
		de.uni_paderborn.fujaba.muml.common.edit.policies.ErrorFeedbackEditPolicy.showMessage(targetView != null ? targetView : sourceView, errorMessage);
		return false;
	}
	return true;
«ENDAROUND»


«REM» When no container was found in semantic hierarchy, deduce it using notation view hierarchy «ENDREM»
«AROUND _init FOR gmfgen::TypeLinkModelFacet-»
	«EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» container = null; «REM»temporary local variable, because field is final.«ENDREM»
«targetDef.proceed()»
«IF hasContainerOtherThanSource(self)-»
	if (container == null) {
		org.eclipse.gmf.runtime.notation.View sourceView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getSourceView(getRequest());
		org.eclipse.gmf.runtime.notation.View targetView = de.uni_paderborn.fujaba.muml.common.edit.policies.node.ConnectionConfigureHelperGraphicalNodeEditPolicy.getTargetView(getRequest());
		container = deduceContainerUsingViews(sourceView, targetView);
	}
«ENDIF-»
	this.container = container;
«ENDAROUND»


«AROUND containerAccessor FOR gmfgen::TypeLinkModelFacet-»
	
«IF hasContainerOtherThanSource(self)-»

	«EXPAND xpt::Common::generatedMemberComment»
	public «EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» getContainer() {
		«EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» container = this.container;
«LET null AS valueExpression»
«IF not valueExpression.oclIsUndefined()»
		«valueExpression.provider.container.getAbstractExpressionQualifiedClassName()» expression = «EXPAND xpt::expressions::getExpression::getExpression(valueExpression, metaClass, 'null') FOR modelElementSelector.provider»;
		org.eclipse.emf.ecore.EObject element = ((org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest) getRequest()).getNewElement();
		if (element != null) {
			Object object = expression.evaluate(element);
			if (object instanceof «EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass») {
				container = («EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass») object;
			}
		}
«ENDIF»
«ENDLET»
	
		return container;
	}

	«EXPAND xpt::Common::generatedMemberComment(
		'Default approach is to traverse ancestors of the source to find instance of container.\n' + 
		'Modify with appropriate logic.'
	)»

	private static «EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» deduceContainer(org.eclipse.emf.ecore.EObject source, org.eclipse.emf.ecore.EObject target) {
		// Find container element for the new link.
		// Climb up by containment hierarchy starting from the source
		// and return the first element that is instance of the container class.
		for (org.eclipse.emf.ecore.EObject element = source; element != null; element = element.eContainer()) {
			if («EXPAND MetaModel::IsInstance('element') FOR containmentMetaFeature.genClass») {
				return «EXPAND MetaModel::CastEObject('element') FOR containmentMetaFeature.genClass»;
			}
		}
		return null;
	}

	«EXPAND xpt::Common::generatedMemberComment(
		'Traverse the notation view hierarchy.\n'
	)»
	private static «EXPAND MetaModel::QualifiedClassName FOR containmentMetaFeature.genClass» deduceContainerUsingViews(org.eclipse.gmf.runtime.notation.View sourceView, org.eclipse.gmf.runtime.notation.View targetView) {
		for (org.eclipse.gmf.runtime.notation.View view = sourceView; view != null; view = (org.eclipse.gmf.runtime.notation.View) view.eContainer()) {
			if («EXPAND MetaModel::IsInstance('view.getElement()') FOR containmentMetaFeature.genClass») {
				return «EXPAND MetaModel::CastEObject('view.getElement()') FOR containmentMetaFeature.genClass»;
			}
		}
		return null;
	}
«ENDIF-»
«ENDAROUND»
