import transforms.lib.MUML2UPPAAL.Types;
import transforms.lib.MUML2UPPAAL.Expressions;

import transforms.lib.MUML2UPPAAL.Async.Types;
import transforms.lib.MUML2UPPAAL.Async.Variables;

//import transforms.lib.MUML2MUML;

library Functions;

modeltype uppaal_types uses uppaal::types('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype uppaal_statements uses uppaal::statements('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype uppaal_declarations uses uppaal::declarations('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype uppaal_expressions uses uppaal::expressions('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype msgtype uses muml::msgtype('http://www.fujaba.de/muml/0.4.0');
modeltype component uses muml::component('http://www.fujaba.de/muml/0.4.0');
modeltype muml_instance uses muml::instance('http://www.fujaba.de/muml/0.4.0');



	mapping createRequestIdFunction() : Function {
		
		name := 'requestId';
				
		var i : Variable = object Variable {
			name := 'i';
		};
		
		block := object Block {
		
			declarations := object LocalDeclarations {
			
				declaration += object TypedDeclaration {
					
					typeDefinition := object IdentifierExpression {
						identifier := INT;
					};
					
					elements += i;
					
				};
				
			};
			
			statement += object ForLoop {
			
				initialization := object AssignmentExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					
					operator := AssignmentOperator::EQUAL;
							
					secondExpr := object LiteralExpression {
						text := 0.repr()	
					}
					
				};
				
				condition := object CompareExpression {
				
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					operator := CompareOperator::LESS;
					
					secondExpr := object IdentifierExpression {
						identifier := map createNumberOfMessagesInTransitConstant();
					}
				};
				
				iteration := object PostIncrementDecrementExpression {
							
					expression := object IdentifierExpression {
						identifier := i
					};
					
					operator := IncrementDecrementOperator::INCREMENT;

				}; 
				
				statement := object IfStatement {
					
					ifExpression := object CompareExpression {
						
						firstExpr := object IdentifierExpression {
						
							identifier := map createFreeIDsFieldVariable();
							
							index += object IdentifierExpression {
								identifier := i;
							};
							
						};
						
						secondExpr := object IdentifierExpression {
							identifier := map createMessageIdNullConstant();
						};
						
						operator := CompareOperator::UNEQUAL;
					
					};
					
					thenStatement := object Block {
					
						var r : Variable := object Variable {
							name := 'result';
						};
						
						declarations := object LocalDeclarations {
						
							declaration += object TypedDeclaration {
								
								typeDefinition := object IdentifierExpression {
									identifier := map createMessageIdType();
								};
								
								elements += r;
								
							};
							
						};
						
						statement += object ExpressionStatement {

							expression := object AssignmentExpression {
								
								firstExpr := object IdentifierExpression {
									identifier := r;
								};
								
								secondExpr := object IdentifierExpression {
									
									identifier := map createFreeIDsFieldVariable();
									
									index += object IdentifierExpression {
										identifier := i;
									}
									
								};
							
								operator := AssignmentOperator::EQUAL;
							
							};
							
						};
						
						statement += object ExpressionStatement {

							expression := object AssignmentExpression {
								
								firstExpr := object IdentifierExpression {
								
									identifier := map createFreeIDsFieldVariable();
									
									index += object IdentifierExpression {
										identifier := i;
									}
									
								};
								
								secondExpr := object IdentifierExpression {
									identifier := map createMessageIdNullConstant();
								};
							
								operator := AssignmentOperator::EQUAL;
							
							};
							
						};
						
						statement += object ReturnStatement {
							
							returnExpression := object IdentifierExpression {	
								identifier := r;
							};
							
						};
						
					};
					
				};
				
				
			};
			
			
			statement += object ReturnStatement {
				
				returnExpression := object IdentifierExpression {
					identifier := map createMessageIdNullConstant();
				};
				
			};
			
		}
		
		
		
	}
	
	
	mapping createReleaseIdFunction() : Function {
		
		name := 'releaseId';
		
		var i : Variable := object Variable {
			name := 'i';
		};
		
		var id : Parameter := object Parameter {
			name := 'id';
		};
		
		parameter += object ParameterContainer {
							
			typeDefinition := object IdentifierExpression {
				identifier := map createMessageIdType();
			};
			
			elements += id;
			
		};
				
		block := object Block {	
		
			declarations := object LocalDeclarations {
				
				declaration += object TypedDeclaration {
					
					typeDefinition := object IdentifierExpression {
					
						identifier := INT;
						
					};
					
					elements += i;
					
				};
				
			};
			
			statement += object ForLoop {
				
				initialization := object AssignmentExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					
					operator := AssignmentOperator::EQUAL;
							
					secondExpr := object LiteralExpression {
						text := 0.repr()	
					}
					
				};
				
				condition := object CompareExpression {
				
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					operator := CompareOperator::LESS;
					
					secondExpr := object IdentifierExpression {
						identifier := map createNumberOfMessagesInTransitConstant();
					}
				};
				
				iteration := object PostIncrementDecrementExpression {
							
					expression := object IdentifierExpression {
						identifier := i
					};
					
					operator := IncrementDecrementOperator::INCREMENT;
	
				}; 
				
				statement := object IfStatement {
					
					ifExpression := object CompareExpression {
						
						firstExpr := object IdentifierExpression {
						
							identifier := map createFreeIDsFieldVariable();
							
							index += object IdentifierExpression {
								identifier := i;
							};
							
						};
						
						secondExpr := object IdentifierExpression {
							identifier := id;
						};
						
						operator := CompareOperator::EQUAL;
					
					};
					
					thenStatement := object ReturnStatement {
						
						returnExpression := object LiteralExpression {
							text := false.repr();	
						};
						
					};
					
				};
				
				
			};
			
			statement += object ForLoop {
				
				initialization := object AssignmentExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					
					operator := AssignmentOperator::EQUAL;
							
					secondExpr := object LiteralExpression {
						text := 0.repr()	
					}
					
				};
				
				condition := object CompareExpression {
				
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					operator := CompareOperator::LESS;
					
					secondExpr := object IdentifierExpression {
						identifier := map createNumberOfMessagesInTransitConstant();
					}
				};
				
				iteration := object PostIncrementDecrementExpression {
							
					expression := object IdentifierExpression {
						identifier := i
					};
					
					operator := IncrementDecrementOperator::INCREMENT;
	
				}; 
				
				statement := object IfStatement {
					
					ifExpression := object CompareExpression {
						
						firstExpr := object IdentifierExpression {
						
							identifier := map createFreeIDsFieldVariable();
							
							index += object IdentifierExpression {
								identifier := i;
							};
							
						};
						
						secondExpr := object IdentifierExpression {
							identifier := map createMessageIdNullConstant();
						};
						
						operator := CompareOperator::EQUAL;
					
					};
					
					thenStatement := object Block {
						
						statement += object ExpressionStatement {
							
							expression := object AssignmentExpression {
							
								firstExpr := object IdentifierExpression {
								
									identifier := map createFreeIDsFieldVariable();
									
									index += object IdentifierExpression {
										identifier := i;
									};
									
								};
								
								secondExpr := object IdentifierExpression {
									
									identifier := id;
									
								};
								
							};
							
							
							
						};
						
						statement += object ReturnStatement {
							
							returnExpression := object LiteralExpression {
								text := true.repr();	
							};
							
						};
						
					};
					
				};
				
				
			};
		
			statement += object ReturnStatement {
				returnExpression := object LiteralExpression {
					text := false.repr();	
				};
			};
		
		};
		
		
	}
	
	
	mapping MessageType :: createAddForMessageTypeFunction() : Function {
		
		name := 'add' + self.name + 'Arguments';
		
		var m : Parameter := object Parameter {
			name := 'm';
		};
				
		parameter += object ParameterContainer {
		
			typeDefinition := object IdentifierExpression {
				identifier := self.map createParameterType();
			};
			
			elements += m;
		
		};
		
		block := object Block {
			
			statement += object ExpressionStatement {
			
				expression := object AssignmentExpression {
				
					firstExpr := object IdentifierExpression {
					
						identifier := self.map createParameterTypeBufferFieldVariable(); // resolve here?
						
						index += object IdentifierExpression {
							identifier := self.map createParameterTypeTailVariable(); // resolve here?
						};
						
					};
					
					secondExpr := object IdentifierExpression {
						identifier := m;
					};
					
					operator := AssignmentOperator::EQUAL;
					
				};
				
			};
			
			statement += object ExpressionStatement {
				
				expression := object PostIncrementDecrementExpression {
				
					expression := object IdentifierExpression {
						identifier := self.map createParameterTypeTailVariable();
					};
					
					operator := IncrementDecrementOperator::INCREMENT;
				
				};
				
			};
			
			statement += object ReturnStatement {
				
				returnExpression := object ArithmeticExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := self.map createParameterTypeTailVariable();
					};
					
					secondExpr := object LiteralExpression {
						text := 1.repr();
					};
					
					operator := ArithmeticOperator::SUBTRACT;
				};
				
			};
			
		}
		
	}
	
	mapping MessageType :: createRemoveForMessageTypeFunction() : Function {
		
		name := 'remove' + self.name + 'Arguments';
					
		var mId : Parameter := object Parameter {
			name := 'mId';
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
				identifier := map createMessageIdType();
			};
			
			elements += mId;
		};
		
		block := object Block {
			
			var i : Variable := object Variable {
				name := 'i';
			};
			
			declarations := object LocalDeclarations {
			
				declaration += object TypedDeclaration {
					
					typeDefinition := object IdentifierExpression {
						identifier := INT;
					};
					
					elements += i;
					
				};
				
			};
			
			statement += object ForLoop {
				
				initialization := object AssignmentExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					secondExpr := object LiteralExpression {
						text := 0.repr();
					};
					
					operator := AssignmentOperator::EQUAL;
					
				};
				
				condition := object CompareExpression {
					
					firstExpr := object IdentifierExpression {
						identifier := i;
					};
					
					secondExpr := object IdentifierExpression {
						identifier := map createNumberOfMessagesInTransitConstant();
					};
					
					operator := CompareOperator::LESS;
				
				};
				
				iteration := object PostIncrementDecrementExpression {
					
					expression := object IdentifierExpression {
						identifier := i;
					};
					
					operator := IncrementDecrementOperator::INCREMENT;
					
				};
				
				statement := object Block {
					
					statement += object IfStatement {
						
						ifExpression := object CompareExpression {
							
							firstExpr := object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
								
									identifier := self.map createParameterTypeBufferFieldVariable(); // resolve here?
								
									index += object IdentifierExpression {
										
										identifier := i;
										
									};
								
								};
								
								identifier := object IdentifierExpression {
									identifier := self.map createParameterTypeMessageIdVariable(); // resolve here?
								};
								
							};
							
							
							secondExpr := object IdentifierExpression {
								identifier := mId;
							};
							
						};
						
						thenStatement := object Block {
							
							var j : Variable := object Variable {
								name := 'j';
							};
							
							declarations := object LocalDeclarations {
								
								declaration += object TypedDeclaration {
									
									typeDefinition := object IdentifierExpression {
										identifier := INT;	
									};
									
									elements += j;
								}
								
							};
							
							statement += object ForLoop {
								
								initialization := object AssignmentExpression {
									
									firstExpr := object IdentifierExpression {
										identifier := j;
									};
									
									secondExpr := object ArithmeticExpression {
										
										firstExpr := object IdentifierExpression {
											identifier := i;
										};
										
										secondExpr := object LiteralExpression {
											text := 1.repr();
										};
										
										operator := ArithmeticOperator::ADD;
										
									};
									
									operator := AssignmentOperator::EQUAL;
								};
								
								condition := object CompareExpression {
									
									firstExpr := object IdentifierExpression {
										identifier := j;
									};
									
									secondExpr := object IdentifierExpression {
										identifier := map createNumberOfMessagesInTransitConstant();
									};
									
									operator := CompareOperator::LESS;
								
								};
								
								iteration := object PostIncrementDecrementExpression {
									
									expression := object IdentifierExpression {
										identifier := j;
									};
									
									operator := IncrementDecrementOperator::INCREMENT;
									
								};
								
								statement := object ExpressionStatement {
									
									expression := object AssignmentExpression {
										
										firstExpr := object IdentifierExpression {
											
											identifier := self.map createParameterTypeBufferFieldVariable();
											
											index += object ArithmeticExpression {
												
												firstExpr := object IdentifierExpression {
													identifier := j;	
												};
												
												secondExpr := object LiteralExpression {
													text := 1.repr();
												};
												
												operator := ArithmeticOperator::SUBTRACT;
												
											};
										};
										
										secondExpr := object IdentifierExpression {
											
											identifier := self.map createParameterTypeBufferFieldVariable();
											
											index += object IdentifierExpression {
												identifier := j;
											};
											
										}; 
										
										operator := AssignmentOperator::EQUAL;
										
									};
									
								};
								
							};
							
							statement += object ExpressionStatement {
								
								expression := object AssignmentExpression {
									
									firstExpr := object IdentifierExpression {
									
										identifier := self.map createParameterTypeBufferFieldVariable();
									
										index += object ArithmeticExpression {
											
											firstExpr := object IdentifierExpression {
												identifier := map createNumberOfMessagesInTransitConstant();	
											};
											
											secondExpr := object LiteralExpression {
												text := 1.repr();
											};
											
											operator := ArithmeticOperator::SUBTRACT;
											
										};
									
									};
									
									secondExpr := object IdentifierExpression {
										identifier := self.map createParameterTypeNullConstantVariable();
									};
									
								};
								
							};
							
							statement += object ExpressionStatement {
								
								expression := object PostIncrementDecrementExpression {
								
									expression := object IdentifierExpression {
										identifier := self.map createParameterTypeTailVariable();
									};
									
									operator := IncrementDecrementOperator::DECREMENT;
								
								};
							
							};
							
							statement += object ReturnStatement {
								returnExpression := object LiteralExpression {
									text := true.repr();
								};
							};
								
						};
						
					};
					 
				};
								
			};
			
			statement += object ReturnStatement {
				returnExpression := object LiteralExpression {
					text := false.repr();
				};
			};
			
		}
		
	}
	
	
	mapping createCheckFunction() : Function {
		
		name := 'check';
				
		var buffer : Parameter = object Parameter { 
				
				name := 'buffer';
								
		};
		
		var mKind : Parameter = object Parameter { 
				
				name := 'mKind';
								
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
			
				identifier := map createBufferType();
			
			};
						
			elements += buffer;
			
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
			
				identifier := map createMessageKindType();
			
			};
						
			elements += mKind;
			
		};
		
		block := object Block {
		
			var nextMessage : Variable := object Variable {
				
				name := 'nextMessage';
				
				initializer := object ExpressionInitializer {
					
					expression := object ScopedIdentifierExpression {
						
						scope := object IdentifierExpression {
							identifier := buffer;
						};
						
						identifier := object IdentifierExpression {
						
							identifier := map createMessagesFieldVariable();
							
							index += object LiteralExpression {
								text := 0.repr();
							};
							
						};
						
					};
					
				};
				
			};
		
			declarations := object LocalDeclarations {
				
				declaration += object TypedDeclaration {
					
					typeDefinition := object IdentifierExpression {
						identifier := map createMessageType();
					};
					
					elements += nextMessage;
					
				};
				
			};
			
			statement += object ReturnStatement {
			
				returnExpression := object LogicalExpression {
					
					-- m != null
					firstExpr := object CompareExpression {
						
						firstExpr := object IdentifierExpression {
							identifier := mKind;
						};
						
						operator := CompareOperator::UNEQUAL;
						
						secondExpr := object IdentifierExpression {
							identifier := map createMessageKindNullConstant()
						}
						
					};
					
					operator := LogicalOperator::AND;
					
					secondExpr := object CompareExpression {
						
						operator := CompareOperator::EQUAL;
						
						firstExpr := object ScopedIdentifierExpression {
							
							scope := object IdentifierExpression {
								identifier := nextMessage;
							};
							
							identifier := object IdentifierExpression {
								identifier := map createMessageKindVariable();
							};
							
						};
						
						secondExpr := object IdentifierExpression {
							
							identifier := mKind;
							
						}
						
					}
				
				}	
								
			}
			
		}
			
	}
	
	
	mapping createRemoveFunction() : Function {
		
		name := 'remove';
				
		var buffer : Parameter = object Parameter { 
			name := 'buffer';
			callType := CallType::CALL_BY_REFERENCE
		};
		
		var m : Parameter = object Parameter { 
			name := 'm';					
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
			
				identifier := map createBufferType();
							
			};
						
			elements += buffer;
			
			
			
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
			
				identifier := map createMessageKindType();
			
			};
						
			elements += m;
			
		};
		
		
		block := object Block {
				
			statement += object IfStatement {
				
				ifExpression := object FunctionCallExpression {
					
					function := resolveoneIn(createCheckFunction, Function);
					
					argument += object IdentifierExpression {
						
						identifier := buffer;
						
					};
					
					argument += object IdentifierExpression {
						
						identifier := m;
						
					}
					
				};
				
				thenStatement := object Block {
					
					var i : Variable = object Variable {
				
						name := 'i';
				
					};
		
					declarations := object LocalDeclarations {
						
						declaration += object TypedDeclaration {
							
							typeDefinition := object IdentifierExpression {
								
								identifier := INT;
								
							};
							
							elements += i
							
						}
						
					};
					
					statement += object ForLoop {
												
						initialization := object AssignmentExpression {
							
							firstExpr := object IdentifierExpression {
								
								identifier := i
								
							};
							
							operator := AssignmentOperator::EQUAL;
							
							secondExpr := object LiteralExpression {
								
								text := 0.repr()
								
							}
							
						};
						
						condition := object CompareExpression {
							
							firstExpr := object IdentifierExpression {
								
								identifier := i;
								
							};
							
							operator := CompareOperator::LESS;
							
							secondExpr := object ArithmeticExpression {
								
								firstExpr := object IdentifierExpression {
									
									identifier := map createCapacityVariable();
									
								};
								
								operator := ArithmeticOperator::SUBTRACT;
								
								secondExpr := object LiteralExpression {
									
									text := '1'
									
								}
								
							}
							
						};
						
						iteration := object PostIncrementDecrementExpression {
							
							expression := object IdentifierExpression {
								
								identifier := i
								
							};
							
							operator := IncrementDecrementOperator::INCREMENT;
							
							
							
						};
						
						statement := object ExpressionStatement {
							
							expression := object AssignmentExpression {
								
								firstExpr := object ScopedIdentifierExpression {
					
									scope := object IdentifierExpression {
										
										identifier := buffer;
										
									};
									
									identifier := object IdentifierExpression {
										
										identifier := map createMessagesFieldVariable();
										
										index += object IdentifierExpression {
											
											identifier := i
											
										}
										
									}
					
								};
								
								
								operator := AssignmentOperator::EQUAL;
								
								
								secondExpr := object ScopedIdentifierExpression {
					
									scope := object IdentifierExpression {
										
										identifier := buffer;
										
									};
									
									identifier := object IdentifierExpression {
										
										identifier := map createMessagesFieldVariable();
										
										index += object ArithmeticExpression {
											
											firstExpr := object IdentifierExpression {
												
												identifier := i
												
											};
											
											operator := ArithmeticOperator::ADD;
											
											secondExpr := object LiteralExpression {
												
												text := 1.repr()
												
											}
											
										}
										
									}
					
								}
								
								
							}
							
						}
						
					};
					
					
					statement += object ExpressionStatement {
							
						expression := object AssignmentExpression {
							
							firstExpr := object ScopedIdentifierExpression {
				
								scope := object IdentifierExpression {
									
									identifier := buffer;
									
								};
								
								identifier := object IdentifierExpression {
									
									identifier := map createMessagesFieldVariable();
									
									index += object ArithmeticExpression {
										
										firstExpr := object IdentifierExpression {
											
											identifier := map createCapacityVariable()
											
										};
										
										operator := ArithmeticOperator::SUBTRACT;
										
										secondExpr := object LiteralExpression {
											
											text := 1.repr()
											
										}
										
									}
									
								}
				
							};
														
							operator := AssignmentOperator::EQUAL;
														
							secondExpr := object IdentifierExpression {
								
								identifier := map createMessageNullConstantVariable();
								
							}
															
						}
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object PostIncrementDecrementExpression {
							
							expression := object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
									
									identifier := buffer
									
								};
								
								identifier := object IdentifierExpression {
									
									identifier := map createTailFieldVariable()
									
								}
								
							};
							
							operator := IncrementDecrementOperator::DECREMENT
							
						}
						
					}
						
				}
					
			}
						
		}
			
	}
	
	mapping createCheckMessageInBufferFunction() : Function {
		name := 'checkMessageInBuffer';
		
				
		var buffer : Parameter = object Parameter {name := 'buffer'};
		var mKind : Parameter = object Parameter {name := 'mKind'};
		
		parameter += object ParameterContainer {
			typeDefinition := object IdentifierExpression {
				identifier := map createBufferType();
			};
			elements += buffer;	
		};
		parameter += object ParameterContainer {
			typeDefinition := object IdentifierExpression {
				identifier := map createMessageKindType();
			};
			elements += mKind;	
		};
		
		block := object Block {
			var i : Variable = object Variable { name := 'i';};
			declarations := object LocalDeclarations {		
				declaration += object TypedDeclaration {
					typeDefinition := object IdentifierExpression { identifier := INT; };
					elements += i;
				}
			};
					
			statement += object ForLoop {
				initialization := object AssignmentExpression {
					firstExpr := object IdentifierExpression { identifier := i; };	
					operator := AssignmentOperator::EQUAL;
					secondExpr := object LiteralExpression { text := 0.repr() };
				};
				condition := object CompareExpression {
					firstExpr := object IdentifierExpression {identifier := i; };
					operator := CompareOperator::LESS;
					secondExpr := object IdentifierExpression {identifier := map createCapacityVariable();};
				};
				iteration := object PostIncrementDecrementExpression {
					expression := object IdentifierExpression {	identifier := i };
					operator := IncrementDecrementOperator::INCREMENT;
				}; 
				
				statement := object IfStatement {
						ifExpression := object CompareExpression {						
							firstExpr := object ScopedIdentifierExpression {					
									scope := object ScopedIdentifierExpression {
										scope := object IdentifierExpression { identifier := buffer;};
										identifier := object IdentifierExpression {
											identifier := map createMessagesFieldVariable();
											index += object IdentifierExpression { identifier := i };
										};										
									};									
									identifier := object IdentifierExpression { identifier := map createMessageKindVariable();};
							};
							operator := CompareOperator::EQUAL;
							secondExpr := object IdentifierExpression { identifier := mKind };
						};
						thenStatement := object ReturnStatement {
							returnExpression := object LiteralExpression { text := 'true' };
						};
				 };
			};
			statement += object ReturnStatement { returnExpression := object LiteralExpression {text := 'false'}};		
		}	
	}
	
	mapping createGetNumElementsInBufferFunction() : Function {
		
		//Signature
		name := 'getNumberOfElementsInBuffer';
				
		var b : Parameter = object Parameter {name := 'b'};
		parameter += object ParameterContainer {
			typeDefinition := object IdentifierExpression {
				identifier := map createBufferType();
			};
			
			elements += b;
		};
		
		//Behavior
		block := object Block { //return b.tail;
			statement += object ReturnStatement {
				returnExpression := object ScopedIdentifierExpression {
					scope := object IdentifierExpression {
						identifier := b;
					};
					
					identifier := object IdentifierExpression {
						identifier := map createTailFieldVariable();
					};
				};
			}
		}
	}
	
	mapping createAddFunction() : Function {
		
		name := 'add';
				
		var b : Parameter = object Parameter {
			name := 'b';
			callType := CallType::CALL_BY_REFERENCE									
		};
		
		var e : Parameter = object Parameter { 	
			name := 'e';
		};
		
		parameter += object ParameterContainer {
		
			typeDefinition := object IdentifierExpression {
			
				identifier := map createBufferType();
							
			};
						
			elements += b						
		};
		
		parameter += object ParameterContainer {
					
			typeDefinition := object IdentifierExpression {
			
				identifier := map createMessageType();
			
			};
						
			elements += e;
			
		};
				
		block := object Block {
				
			statement += object ExpressionStatement {
			
				expression := object AssignmentExpression {
								
					firstExpr := object ScopedIdentifierExpression {
		
						scope := object IdentifierExpression {
							
							identifier := b;
							
						};
						
						identifier := object IdentifierExpression {
							
							identifier := map createMessagesFieldVariable();
							
							index += object ScopedIdentifierExpression {
		
								scope := object IdentifierExpression {
									
									identifier := b;
									
								};
								
								identifier := object IdentifierExpression {
									
									identifier := map createTailFieldVariable();
																		
								}
		
							}
							
						}
		
					};
								
								
					operator := AssignmentOperator::EQUAL;
					
					secondExpr := object IdentifierExpression {
						
						identifier := e
						
					}
								
				}	
			};
			
			statement += object ExpressionStatement {
							
				expression := object PostIncrementDecrementExpression {
					
					expression := object ScopedIdentifierExpression {
						
						scope := object IdentifierExpression {
							
							identifier := b
							
						};
						
						identifier := object IdentifierExpression {
							
							identifier := map createTailFieldVariable()
							
						}
						
					};
					
					operator := IncrementDecrementOperator::INCREMENT
					
				}
							
			}
		}
			
	}
	
	
	mapping MessageType :: createSendFunction() : Function {
		
		name := 'send' + self.name;
		
		var sender : Parameter = object Parameter {
			name := 'sender'
		};
		
		parameter += object ParameterContainer {
		
			typeDefinition := object IdentifierExpression {
				identifier := map DiscretePortInstanceType()
			};
			
			elements += sender
		
		};
		
		parameter += self.parameters->map Parameter2ParameterContainer();
				
		block := object Block {
			
			statement += object IfStatement {
				
				-- if (connectors[sender].tail < CAPACITY)
				ifExpression := object CompareExpression {
					
					-- connectors[sender].tail
					firstExpr := object ScopedIdentifierExpression {
						
						-- connectors[sender]
						scope := object IdentifierExpression {
							identifier := map createConnectorsVariable();
							
							index += object IdentifierExpression {
								identifier := sender
							}
						};
						
						identifier := object IdentifierExpression {
							identifier := map createTailFieldVariable()
						}
					};
					
					operator := CompareOperator::LESS;
					
					secondExpr := object IdentifierExpression {
						identifier := map createCapacityVariable()
					}
					
				};
				
				thenStatement := object Block {
					
					var instance := object Variable {
						name := self.name + 'Instance';
						
						initializer := object ArrayInitializer {
							
							initializer += object ExpressionInitializer {
							
								expression := object IdentifierExpression {
									identifier := map createMessageIdNullConstant();
								};
								
							};
							
							self.parameters->forEach(param) {
							
								initializer += object ExpressionInitializer {
									expression := object IdentifierExpression {
										identifier := param.map MumlParameter2UppaalParameter()
									};
								};
							
							};
						
						};
					};
					
					var message := object Variable {
						name := 'message';
						
						initializer := object ExpressionInitializer {
							expression := object IdentifierExpression {
								identifier := map createMessageNullConstantVariable();
							}
						}
					};
					
					var mId := object Variable {
						name := 'mId';
						
						initializer := object ExpressionInitializer {
							expression := object IdentifierExpression {
								identifier := map createMessageIdNullConstant();
							};
						};
						
					};
					
					declarations := object LocalDeclarations {
						
						declaration += object TypedDeclaration {
							
							typeDefinition := object IdentifierExpression {
								identifier := self.map createParameterType(); // resolve here?
							};
							
							elements += instance;
							
						};
						
						declaration += object TypedDeclaration {
							
							typeDefinition := object IdentifierExpression {
								identifier := map createMessageType();
							};
							
							elements += message;
							
						};
						
						declaration += object TypedDeclaration {
							
							typeDefinition := object IdentifierExpression {
								identifier := map createMessageIdType();
							};
							
							elements += mId;
							
						};
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							firstExpr := object IdentifierExpression {
								identifier := mId;
							};
							
							secondExpr := object FunctionCallExpression {
								function := resolveoneIn(createRequestIdFunction, Function);
							};
							
						};
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							firstExpr := object ScopedIdentifierExpression {
							
								scope := object IdentifierExpression {
									identifier := instance;
								};
								
								identifier := object IdentifierExpression {
									identifier := self.map createParameterTypeMessageIdVariable(); // resolve here?
								};
								
							};
							
							secondExpr := object IdentifierExpression {
								identifier := mId;
							};
							
						};
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							firstExpr := object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
									identifier := message;
								};
								
								identifier := object IdentifierExpression {
									identifier := map createMessageTypeMessageIdVariable();
								}; 
								
							};
							
							secondExpr := object IdentifierExpression {
								identifier := mId;
							};
							
						}
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							firstExpr := object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
									identifier := message;
								};
								
								identifier := object IdentifierExpression {
									identifier := map createMessageKindVariable();
								}; 
								
							};
							
							secondExpr := object IdentifierExpression {
								identifier := self.map createMessageKindConstant();
							};
							
						}
						
					};
					
					
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							firstExpr := object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
									identifier := message;
								};
								
								identifier := object IdentifierExpression {
									identifier := map createMessageArgumentsPositionVariable();
								}; 
								
							};
							
							secondExpr := object FunctionCallExpression {
								
								function := self.map createAddForMessageTypeFunction();
								
								argument += object IdentifierExpression {
									identifier := instance;
								};
								
							};
							
						};
						
					};
			
					-- add(connectors[sender],message)
					statement += object ExpressionStatement {
						
						expression := object FunctionCallExpression {
						
							function := map createAddFunction();
							
							argument += object IdentifierExpression {
								identifier := map createConnectorsVariable();
								
								index += object IdentifierExpression {
									identifier := sender
								}
							};
							
							argument += object IdentifierExpression {
								identifier := message
							};
						
						}	 
						
					};
					
					-- transmissionTimes[sender][latest[sender]] = 0;
					statement += object ExpressionStatement {
						
						expression := object AssignmentExpression {
							
							--transmissionTimes[sender][latest[sender]]
							firstExpr := object IdentifierExpression {
								
								identifier := map createTransmissionTimesVariable();
								
								index += object IdentifierExpression {
									identifier := sender
								};
								
								index += object IdentifierExpression {
									identifier := map createLatestVariable();
									
									index += object IdentifierExpression {
										identifier := sender
									}
								}
								
							};
							
							operator := AssignmentOperator::EQUAL;
							
							secondExpr := object LiteralExpression {
								text := 0.repr()
							}
						
						}	 
						
					};
					
					-- latest[sender] == CAPACITY - 1 ? latest[sender] = 0 : latest[sender]++;
					statement += object ExpressionStatement {
						
						expression := object ConditionExpression {
										
							ifExpression := object CompareExpression {
							
								-- latest == CAPACITY-1
								
								firstExpr := object IdentifierExpression {
									identifier := map createLatestVariable();
									
									index += object IdentifierExpression {
										identifier := sender
									}
								};
								
								operator := CompareOperator::EQUAL;
								
								secondExpr := object ArithmeticExpression {
									
									firstExpr := object IdentifierExpression {
										identifier := map createCapacityVariable()						
									};
									
									operator := ArithmeticOperator::SUBTRACT;
									
									secondExpr := object LiteralExpression {
										text := 1.repr()
									}
									
								}
								
							};
							
							thenExpression := object AssignmentExpression {
							
								-- latest[sender]=0
								
								firstExpr := object IdentifierExpression {
									identifier := map createLatestVariable();
									
									index += object IdentifierExpression {
										identifier := sender
									}
								};
								
								operator := AssignmentOperator::EQUAL;
								
								secondExpr := object LiteralExpression {
									text := 0.repr()
								}
								
							};
							
							elseExpression := object PostIncrementDecrementExpression {
								
								-- latest[sender]++
								
								expression := object IdentifierExpression {
									identifier := map createLatestVariable();
									
									index += object IdentifierExpression {
										identifier := sender
									}
								};
								
								operator := IncrementDecrementOperator::INCREMENT;
								
							}
						
						}
					
					}

				};
			
				elseStatement := object ExpressionStatement {
					
					expression := object AssignmentExpression {
						firstExpr := object IdentifierExpression {
							identifier := map createOverflowVariable()
						};
						
						operator := AssignmentOperator::EQUAL;
						
						secondExpr := object LiteralExpression {
							text := true.repr()
						}
					}
				}
		
			}
			
		}	
			
	}
	
	
	mapping createReceiveFunction(portInstances : OrderedSet(DiscretePortInstance)) : Function {
		
		name := 'receive';
		
		var receiver : Parameter = object Parameter {
			name := 'receiver'
		};
		
		parameter += object ParameterContainer {
		
			typeDefinition := object IdentifierExpression {
				identifier := map DiscretePortInstanceType()
			};
			
			elements += receiver
		
		};
		
		var mKind : Parameter = object Parameter {
			name := 'mKind'
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
				identifier := map createMessageKindType()
			};
		
			elements += mKind
			
		};
				
		block := object Block {
			
			statement += object ReturnStatement {
				
				-- check(buffers[receiver],m)
				--  return check(buffers[receiver][buffer_assignment[receiver][mKind]],mKind);

				returnExpression := object FunctionCallExpression {
				
					function := map createCheckFunction();
					
					argument += object IdentifierExpression {
						
						identifier := map createBuffersVariable();
						
						index += object IdentifierExpression {
							identifier := receiver
						};

						index += object IdentifierExpression {
							identifier := portInstances->map createBufferAssignmentArrayVariable();

							index += object IdentifierExpression {
								identifier := receiver
							};

							index += object IdentifierExpression {
								identifier := mKind
							};

						}
						
					};
					
					argument += object IdentifierExpression {
						identifier := mKind
					}
				}
			}
				
		}
	
	}
	

	mapping createConsumeFunction(portInstances : OrderedSet(DiscretePortInstance)) : Function {
		
		name := 'consume';
		
		var receiver : Parameter = object Parameter {
			name := 'receiver'
		};
		
		parameter += object ParameterContainer {
		
			typeDefinition := object IdentifierExpression {
				identifier := map DiscretePortInstanceType()
			};
			
			elements += receiver
		
		};
		
		var mKind : Parameter = object Parameter {
			name := 'mKind'
		};
		
		parameter += object ParameterContainer {
			
			typeDefinition := object IdentifierExpression {
				identifier := map createMessageKindType()
			};
		
			elements += mKind
			
		};
				
		block := object Block {
			
			statement += object IfStatement {
				
				-- if(receive(receiver,mKind))
				ifExpression := object FunctionCallExpression {
					
					function := map createReceiveFunction(portInstances);
					
					argument += object IdentifierExpression {
						identifier := receiver
					};
					
					argument += object IdentifierExpression {
						identifier := mKind
					}
					
				};

				thenStatement := object Block {
				
					var nextMessage : Variable := object Variable {
							
							name := 'nextMessage';
							
							initializer := object ExpressionInitializer {
								
								expression := object ScopedIdentifierExpression {
										
									scope := object IdentifierExpression {
									
										identifier := map createBuffersVariable();
									
										index += object IdentifierExpression {
											identifier := receiver;
										};
										
										index += object IdentifierExpression {

											identifier := portInstances->map createBufferAssignmentArrayVariable();

											index += object IdentifierExpression {
												identifier := receiver
											};

											index += object IdentifierExpression {
												identifier := mKind
											};

										}
									
									};
									
									identifier := object IdentifierExpression {
										
										identifier := map createMessagesFieldVariable();
										
										index += object LiteralExpression {
											text := 0.repr();
										};
										
									};
										
								};
									 
						};
								
					};
				
					declarations := object LocalDeclarations {
						
						declaration += object TypedDeclaration {
						
							typeDefinition := object IdentifierExpression {
								identifier := map createMessageType();
							};
							
							elements += nextMessage;
						
						};
						
					};
					
					statement += object ExpressionStatement {
						
						expression := object FunctionCallExpression {
							
							function := map createReleaseIdFunction();
							
							argument += object ScopedIdentifierExpression {
								
								scope := object IdentifierExpression {
									identifier := nextMessage;
								};
								
								identifier := object IdentifierExpression {
									identifier := map createMessageTypeMessageIdVariable();
								};
								
							};
							
						};
						
					};
					
					-- remove(buffers[receiver],mKind)
					statement += object ExpressionStatement {
					
						expression := object FunctionCallExpression {
							
							function := map createRemoveFunction();
							
							argument += object IdentifierExpression {
								identifier := map createBuffersVariable();
							
								index += object IdentifierExpression {
									identifier := receiver
								};

								index += object IdentifierExpression {

									identifier := portInstances->map createBufferAssignmentArrayVariable();

									index += object IdentifierExpression {
										identifier := receiver
									};

									index += object IdentifierExpression {
										identifier := mKind
									};

								}

							};	
						
							argument += object IdentifierExpression {
								identifier := mKind
							}
							
						}
						
					};
					
					messageTypes()->forEach(mType) {
						
						statement += object IfStatement {
						
							ifExpression := object CompareExpression {
								
								firstExpr := object IdentifierExpression {
									identifier := mKind
								};
								
								secondExpr := object IdentifierExpression {
									identifier := mType.resolveoneIn(MessageType::createMessageKindConstant, Variable);
								};
								
								operator := CompareOperator::EQUAL;
								
							};
							
							thenStatement := object ExpressionStatement {
								
								expression := object FunctionCallExpression {
									
									function := mType.map createRemoveForMessageTypeFunction();
									
									argument += object ScopedIdentifierExpression {
										
										scope := object IdentifierExpression {
											identifier := nextMessage;
										};
										
										identifier := object IdentifierExpression {
											identifier := map createMessageTypeMessageIdVariable();
										};
										
									};
									
								};
								
							};
						
						};
						
					};
					
				};
				
			}
			
		}
		
	}	