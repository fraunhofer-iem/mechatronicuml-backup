--core models
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype expressions_common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype modelinst uses modelinstance("http://www.muml.org/modelinstance/1.0.0");

-- muml models 
modeltype behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype component uses muml::component("http://www.muml.org/pim/1.0.0");
modeltype connector uses muml::connector("http://www.muml.org/pim/1.0.0");
modeltype constraints uses muml::constraint("http://www.muml.org/pim/1.0.0");
modeltype instance uses muml::instance("http://www.muml.org/pim/1.0.0");
modeltype msgi uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype protocol uses muml::protocol("http://www.muml.org/pim/1.0.0");
modeltype realtimestatechart uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype types uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype valuetype uses pim::valuetype('http://www.muml.org/pim/1.0.0');

modeltype actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');
modeltype reconf uses reconfiguration("http://www.muml.org/reconfiguration/1.0.0");
modeltype reconf_expressions uses reconfiguration::expression("http://www.muml.org/reconfiguration/1.0.0");
modeltype reconf_datatype uses reconfiguration::structdatatype("http://www.muml.org/reconfiguration/1.0.0");

--modeltype componentpattern uses componentstorydiagram::componentstorypattern("http://www.fujaba.de/muml/componentstorydiagram/0.3.1");
--modeltype componentstory uses componentstorydiagram::controlflow("http://www.fujaba.de/muml/componentstorydiagram/0.3.1");

library UpdateReferencesToComponent;

-- redirects all references of all meta-model elements targeting the oldComp to the new component.
mapping updateReferencesToComponent(inout rootNode : RootNode, in oldComp : Component,
										inout newComp : Component){
	
	-- update references of component parts
	var compCategory := rootNode.categories -> select(c : ModelElementCategory | c.key = 'org.muml.pim.components.category') -> any(true);
	map updateComponentParts(compCategory, oldComp, newComp);
	
	-- update references of component story diagram (parameters + variables) 
	var activityCategory := rootNode.categories -> select(c : ModelElementCategory | c.key = 'org.muml.storydiagram.activities.category') -> any(true);
	map updateComponentStoryDiagrams(activityCategory, oldComp, newComp);
	
	-- update references of struct data types
	var typeCategory := rootNode.categories -> select(c : ModelElementCategory | c.key = 'org.muml.types.category') -> any(true);
	map updateStructTypes(typeCategory, oldComp, newComp);
}

-- if a component part refers to oldComp, then the reference will be redirected to newComp
mapping updateComponentParts(inout compCategory : ModelElementCategory, in oldComp : Component,
										in newComp : Component){

	-- iterate all components
	compCategory.modelElements -> forEach(comp){
		if(comp.oclIsKindOf(StructuredComponent)) then {
		
			-- iterate all parts of a structured component
			comp.oclAsType(StructuredComponent).embeddedComponentParts -> forEach(part){
				-- redirect type reference from oldComp to newComp
				if(part.componentType = oldComp) then{
					part.componentType := newComp;
										
				} endif;
			}
		} endif;
	}											
}

-- if a variable in a component story diagram refers to oldComp, then the reference will be redirected to newComp
mapping updateComponentStoryDiagrams(inout actCategory : ModelElementCategory, in oldComp : Component,
										in newComp : Component){

	-- iterate all activity diagrams											
	
}

-- if a struct type refers to oldComp, then the reference will be redirected to newComp
mapping updateStructTypes(inout typeCategory : ModelElementCategory, in oldComp : Component,
										in newComp : Component){

	--iterate all types
	typeCategory.modelElements -> forEach(type){
		if(type.oclIsKindOf(StructType)) then{
			
			-- components may only be referenced by References of a struct type
			type.oclAsType(StructType)._references -> forEach(reference){
				-- redirect type reference from oldComp to newComp
				if(reference.type = oldComp) then{
					-- reference.type := newComp;
				} endif;
			}
		}endif;
	}
											
}

