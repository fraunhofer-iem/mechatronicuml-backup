library ComponentLibrary;

--core models
modeltype core uses core('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype expressions_common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype modelinst uses modelinstance("http://www.muml.org/modelinstance/1.0.0");

-- muml models 
modeltype behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype msgi uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype realtimestatechart uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype types uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype valuetype uses pim::valuetype('http://www.muml.org/pim/1.0.0');

modeltype actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');

modeltype reconf uses reconfiguration("http://www.fujaba.de/muml/reconfiguration/0.3.18");
modeltype reconf_expressions uses reconfiguration::expression("http://www.fujaba.de/muml/reconfiguration/0.3.18");


------------ helper functions --------------

-- returns the reconfiguration rule associated with the MessageType by ManagerSpecification
helper MessageType :: getReconfigurationRule(theManager : Manager) : ReconfigurationRule{
	//TODO we assume a 1:1 mapping from message type to reconfiguration rule, adapt this when 1:n is supported
	var entry : ManagerSpecificationEntry :=  theManager.specificationEntries->select(messageType = self) -> any(true);
	if(entry.oclIsUndefined()){
		assert warning(false) with log("Could not find a ManagerSpecificationEntry for MessageType "+self.toString());
		return null;
	};
	return entry.reconfigurationRule;
}

-- returns the id defined in the executor specification entries for the ReconfigurationRule
helper ReconfigurationRule :: getID(theExecutor : Executor) : Integer{
	var entry : ExecutorSpecificationEntry := theExecutor.specificationEntries->select(reconfigurationRule = self) -> any(true);
	if(entry.oclIsUndefined()){
		assert warning(false) with log("Could not find an ExecutorSpecificationEntry for ReconfigurationRule "+self.toString());
		return null;
	};
	return entry.id;
}