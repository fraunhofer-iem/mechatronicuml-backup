
--core models
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype expressions_common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype modelinst uses modelinstance("http://www.muml.org/modelinstance/1.0.0");

-- muml models 
modeltype behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype types uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype valuetype uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype msgi uses pim::msgtype('http://www.muml.org/pim/1.0.0');

modeltype actionlanguage uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');

modeltype reconf uses reconfiguration("http://www.fujaba.de/muml/reconfiguration/0.3.18");
modeltype reconf_expressions uses reconfiguration::expression("http://www.fujaba.de/muml/reconfiguration/0.3.18");

library ActionLanguageBaseLibrary;


-- helpers

--returns an expressions negating the input expression
helper createNotExpression(in exp : Expression) : UnaryExpression{
	return new UnaryExpression(exp, UnaryOperator::NOT);
}

helper Expression :: appendToLogicalExpression(op : LogicOperator, appendix : Expression): LogicalExpression{
	return new LogicalExpression(self, op, appendix);
}

helper Expression :: appendToLogicalExpression(op : LogicOperator, appendix : String): LogicalExpression{
	return new LogicalExpression(self, op, new LiteralExpression(appendix));
}

-- queries

-- if the Expression is a literal expression containing an Integer, this query returns the value of the Integer
query Expression::parseInteger() : Integer{
	
	if(self.oclIsTypeOf(LiteralExpression)) then{
		return self.oclAsType(LiteralExpression).value.toInteger();
	} endif;
	
	return null;
}

-- constructors

constructor LiteralExpression::LiteralExpression(in newValue : String){
	value := newValue;
}

constructor ComparisonExpression::ComparisonExpression(in leftExpr : Expression, in op : ComparingOperator, in rightExpr : Expression){
	leftExpression := leftExpr;
	rightExpression := rightExpr;
	operator := op;
}

constructor LogicalExpression::LogicalExpression(in leftExpr : Expression, in op : LogicOperator, in rightExpr : Expression){
	leftExpression := leftExpr;
	rightExpression := rightExpr;
	operator := op;
}

constructor ArithmeticExpression::ArithmeticExpression(in leftExpr : Expression, in op : ArithmeticOperator, in rightExpr : Expression){
	leftExpression := leftExpr;
	rightExpression := rightExpr;
	operator := op;
}

constructor UnaryExpression::UnaryExpression(in exp : Expression, in op : UnaryOperator){
	enclosedExpression := exp;
	operator := op;
}

constructor Assignment::Assignment(in variable : Variable, in op : AssignOperator, in rightExpr : Expression){
	lhs_typedNamedElementExpression := new TypedNamedElementExpression(variable);
	rhs_assignExpression := rightExpr;
	assignOperator := op;
}

constructor TypedNamedElementExpression::TypedNamedElementExpression(in element : TypedNamedElement){
	typedNamedElement := element;
}

constructor TriggerMessageExpression::TriggerMessageExpression(in msg : MessageType, in param : Parameter){
	messageType := msg;
	parameter := param;
}

constructor OperationCall::OperationCall(in op : Operation){
	operation := op;
}

constructor Block::Block(){
	
}

constructor DiscreteInteractionEndpointReference::DiscreteInteractionEndpointReference(in pos : PositionSelectorKind, in variable : TypedNamedElementExpression){
	position := new PositionSelector(pos, null);
	typedNamedElementExpression := variable;
}

constructor PositionSelector::PositionSelector(in newKind : PositionSelectorKind, in succ : PositionSelector){
	kind := newKind;
	successor := succ;
}

constructor ReconfigurationRuleCallExpression::ReconfigurationRuleCallExpression(in reconfRule : ReconfigurationRule){
	reconfigurationRule := reconfRule;
}