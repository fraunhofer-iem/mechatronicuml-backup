/**
 */
package de.uni_paderborn.fujaba.muml.componentstorypattern.provider;

import de.uni_paderborn.fujaba.muml.componentstorypattern.util.ComponentstorypatternAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ComponentstorypatternItemProviderAdapterFactory extends ComponentstorypatternAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComponentstorypatternItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentStoryPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentStoryPatternItemProvider componentStoryPatternItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentStoryPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentStoryPatternAdapter() {
		if (componentStoryPatternItemProvider == null) {
			componentStoryPatternItemProvider = new ComponentStoryPatternItemProvider(this);
		}

		return componentStoryPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentStoryPatternVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentStoryPatternVariableItemProvider componentStoryPatternVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentStoryPatternVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentStoryPatternVariableAdapter() {
		if (componentStoryPatternVariableItemProvider == null) {
			componentStoryPatternVariableItemProvider = new ComponentStoryPatternVariableItemProvider(this);
		}

		return componentStoryPatternVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentVariableItemProvider componentVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentVariableAdapter() {
		if (componentVariableItemProvider == null) {
			componentVariableItemProvider = new ComponentVariableItemProvider(this);
		}

		return componentVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.AssemblyVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyVariableItemProvider assemblyVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.AssemblyVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyVariableAdapter() {
		if (assemblyVariableItemProvider == null) {
			assemblyVariableItemProvider = new AssemblyVariableItemProvider(this);
		}

		return assemblyVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.DelegationVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelegationVariableItemProvider delegationVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.DelegationVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelegationVariableAdapter() {
		if (delegationVariableItemProvider == null) {
			delegationVariableItemProvider = new DelegationVariableItemProvider(this);
		}

		return delegationVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.SinglePortVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SinglePortVariableItemProvider singlePortVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.SinglePortVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSinglePortVariableAdapter() {
		if (singlePortVariableItemProvider == null) {
			singlePortVariableItemProvider = new SinglePortVariableItemProvider(this);
		}

		return singlePortVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.MultiPortVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiPortVariableItemProvider multiPortVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.MultiPortVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiPortVariableAdapter() {
		if (multiPortVariableItemProvider == null) {
			multiPortVariableItemProvider = new MultiPortVariableItemProvider(this);
		}

		return multiPortVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.FadingComponentPartVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FadingComponentPartVariableItemProvider fadingComponentPartVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.FadingComponentPartVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFadingComponentPartVariableAdapter() {
		if (fadingComponentPartVariableItemProvider == null) {
			fadingComponentPartVariableItemProvider = new FadingComponentPartVariableItemProvider(this);
		}

		return fadingComponentPartVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentPartVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentPartVariableItemProvider componentPartVariableItemProvider;

	/**
	 * This creates an adapter for a {@link de.uni_paderborn.fujaba.muml.componentstorypattern.ComponentPartVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentPartVariableAdapter() {
		if (componentPartVariableItemProvider == null) {
			componentPartVariableItemProvider = new ComponentPartVariableItemProvider(this);
		}

		return componentPartVariableItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (componentStoryPatternItemProvider != null) componentStoryPatternItemProvider.dispose();
		if (componentStoryPatternVariableItemProvider != null) componentStoryPatternVariableItemProvider.dispose();
		if (componentVariableItemProvider != null) componentVariableItemProvider.dispose();
		if (assemblyVariableItemProvider != null) assemblyVariableItemProvider.dispose();
		if (delegationVariableItemProvider != null) delegationVariableItemProvider.dispose();
		if (singlePortVariableItemProvider != null) singlePortVariableItemProvider.dispose();
		if (multiPortVariableItemProvider != null) multiPortVariableItemProvider.dispose();
		if (fadingComponentPartVariableItemProvider != null) fadingComponentPartVariableItemProvider.dispose();
		if (componentPartVariableItemProvider != null) componentPartVariableItemProvider.dispose();
	}

}
