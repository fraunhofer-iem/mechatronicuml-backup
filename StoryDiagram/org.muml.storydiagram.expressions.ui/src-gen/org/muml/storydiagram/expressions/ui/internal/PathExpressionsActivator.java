/*
 * generated by Xtext
 */
package org.muml.storydiagram.expressions.ui.internal;

import static com.google.inject.Guice.createInjector;
import static com.google.inject.util.Modules.override;

import java.util.concurrent.ExecutionException;

import org.apache.log4j.Logger;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.ui.shared.SharedStateModule;
import org.osgi.framework.BundleContext;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;
import com.google.inject.Injector;
import com.google.inject.Module;

/**
 * This class was generated. Customizations should only happen in a newly
 * introduced subclass. 
 */
public class PathExpressionsActivator extends AbstractUIPlugin {
	
	private static final Logger logger = Logger.getLogger(PathExpressionsActivator.class);
	
	private Cache<String, Injector> injectors = CacheBuilder.newBuilder().build(new CacheLoader<String, Injector>() {
		@Override
		public Injector load(String language) throws Exception {
			Module runtimeModule = getRuntimeModule(language);
			Module sharedStateModule = getSharedStateModule();
			Module uiModule = getUiModule(language);
			Module mergedModule = override(override(runtimeModule).with(sharedStateModule)).with(uiModule);
			return createInjector(mergedModule);
		}
	});
	
	private static PathExpressionsActivator INSTANCE;
	
	public static final String ORG_STORYDRIVEN_MODELING_EXPRESSIONS_PATHEXPRESSIONS = "org.muml.storydiagram.expressions.PathExpressions";
	
	public Injector getInjector(String languageName) {
		
		//TODO: old get message has been removed from Cache, provide error handling if null is returned here!!
		
		Injector result = injectors.getIfPresent(languageName); 
		return result;
	}
	
	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		INSTANCE = this;
	}
	
	@Override
	public void stop(BundleContext context) throws Exception {
		injectors.invalidateAll();
		injectors.cleanUp();
		INSTANCE = null;
		super.stop(context);
	}
	
	public static PathExpressionsActivator getInstance() {
		return INSTANCE;
	}
	
	protected Module getRuntimeModule(String grammar) {
		if (ORG_STORYDRIVEN_MODELING_EXPRESSIONS_PATHEXPRESSIONS.equals(grammar)) {
			return new org.muml.storydiagram.expressions.PathExpressionsRuntimeModule();
		}
		
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getUiModule(String grammar) {
		if (ORG_STORYDRIVEN_MODELING_EXPRESSIONS_PATHEXPRESSIONS.equals(grammar)) {
			return new org.muml.storydiagram.expressions.ui.PathExpressionsUiModule(this);
		}
		
		throw new IllegalArgumentException(grammar);
	}
	
	protected Module getSharedStateModule() {
		return new SharedStateModule();
	}
	
}
