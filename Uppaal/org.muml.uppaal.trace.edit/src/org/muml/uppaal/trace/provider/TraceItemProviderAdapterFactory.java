/**
 */
package org.muml.uppaal.trace.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.muml.uppaal.trace.util.TraceAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceItemProviderAdapterFactory extends TraceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TraceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.TraceRepository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceRepositoryItemProvider traceRepositoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.TraceRepository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceRepositoryAdapter() {
		if (traceRepositoryItemProvider == null) {
			traceRepositoryItemProvider = new TraceRepositoryItemProvider(this);
		}

		return traceRepositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.Trace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceItemProvider traceItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.Trace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceAdapter() {
		if (traceItemProvider == null) {
			traceItemProvider = new TraceItemProvider(this);
		}

		return traceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.ProcessIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessIdentifierItemProvider processIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.ProcessIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessIdentifierAdapter() {
		if (processIdentifierItemProvider == null) {
			processIdentifierItemProvider = new ProcessIdentifierItemProvider(this);
		}

		return processIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.LocationActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationActivityItemProvider locationActivityItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.LocationActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocationActivityAdapter() {
		if (locationActivityItemProvider == null) {
			locationActivityItemProvider = new LocationActivityItemProvider(this);
		}

		return locationActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.VariableValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableValueItemProvider variableValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.VariableValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableValueAdapter() {
		if (variableValueItemProvider == null) {
			variableValueItemProvider = new VariableValueItemProvider(this);
		}

		return variableValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.SingleNamedElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleNamedElementReferenceItemProvider singleNamedElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.SingleNamedElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleNamedElementReferenceAdapter() {
		if (singleNamedElementReferenceItemProvider == null) {
			singleNamedElementReferenceItemProvider = new SingleNamedElementReferenceItemProvider(this);
		}

		return singleNamedElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.NamedElementReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementReferenceItemProvider namedElementReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.NamedElementReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementReferenceAdapter() {
		if (namedElementReferenceItemProvider == null) {
			namedElementReferenceItemProvider = new NamedElementReferenceItemProvider(this);
		}

		return namedElementReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.TraceItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraceItemItemProvider traceItemItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.TraceItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraceItemAdapter() {
		if (traceItemItemProvider == null) {
			traceItemItemProvider = new TraceItemItemProvider(this);
		}

		return traceItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.EdgeActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeActivityItemProvider edgeActivityItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.EdgeActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeActivityAdapter() {
		if (edgeActivityItemProvider == null) {
			edgeActivityItemProvider = new EdgeActivityItemProvider(this);
		}

		return edgeActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.Synchronization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronizationItemProvider synchronizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.Synchronization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronizationAdapter() {
		if (synchronizationItemProvider == null) {
			synchronizationItemProvider = new SynchronizationItemProvider(this);
		}

		return synchronizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.ChannelSynchronization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChannelSynchronizationItemProvider channelSynchronizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.ChannelSynchronization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChannelSynchronizationAdapter() {
		if (channelSynchronizationItemProvider == null) {
			channelSynchronizationItemProvider = new ChannelSynchronizationItemProvider(this);
		}

		return channelSynchronizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.DelayTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelayTransitionItemProvider delayTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.DelayTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelayTransitionAdapter() {
		if (delayTransitionItemProvider == null) {
			delayTransitionItemProvider = new DelayTransitionItemProvider(this);
		}

		return delayTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.ActionTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionTransitionItemProvider actionTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.ActionTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionTransitionAdapter() {
		if (actionTransitionItemProvider == null) {
			actionTransitionItemProvider = new ActionTransitionItemProvider(this);
		}

		return actionTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.trace.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.trace.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (traceRepositoryItemProvider != null) traceRepositoryItemProvider.dispose();
		if (traceItemProvider != null) traceItemProvider.dispose();
		if (processIdentifierItemProvider != null) processIdentifierItemProvider.dispose();
		if (locationActivityItemProvider != null) locationActivityItemProvider.dispose();
		if (variableValueItemProvider != null) variableValueItemProvider.dispose();
		if (singleNamedElementReferenceItemProvider != null) singleNamedElementReferenceItemProvider.dispose();
		if (namedElementReferenceItemProvider != null) namedElementReferenceItemProvider.dispose();
		if (traceItemItemProvider != null) traceItemItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (edgeActivityItemProvider != null) edgeActivityItemProvider.dispose();
		if (synchronizationItemProvider != null) synchronizationItemProvider.dispose();
		if (channelSynchronizationItemProvider != null) channelSynchronizationItemProvider.dispose();
		if (delayTransitionItemProvider != null) delayTransitionItemProvider.dispose();
		if (actionTransitionItemProvider != null) actionTransitionItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
	}

}
