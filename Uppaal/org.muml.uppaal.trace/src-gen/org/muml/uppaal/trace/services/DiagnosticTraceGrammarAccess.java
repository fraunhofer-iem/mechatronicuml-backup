/*
 * generated by Xtext
 */
package org.muml.uppaal.trace.services;

import java.util.List;

import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

import com.google.inject.Inject;
import com.google.inject.Singleton;

@Singleton
public class DiagnosticTraceGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TraceRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.TraceRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTracesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTracesTraceParserRuleCall_1_0 = (RuleCall)cTracesAssignment_1.eContents().get(0);
		
		//TraceRepository:
		//	'Cannot reuse state space when trace length optimisation is used.'?
		//	traces+=Trace*;
		@Override public ParserRule getRule() { return rule; }

		//'Cannot reuse state space when trace length optimisation is used.'? traces+=Trace*
		public Group getGroup() { return cGroup; }

		//'Cannot reuse state space when trace length optimisation is used.'?
		public Keyword getCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0() { return cCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0; }

		//traces+=Trace*
		public Assignment getTracesAssignment_1() { return cTracesAssignment_1; }

		//Trace
		public RuleCall getTracesTraceParserRuleCall_1_0() { return cTracesTraceParserRuleCall_1_0; }
	}

	public class TraceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.Trace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cPropertyKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFormulaKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyINTTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cAtLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLineAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLineINTTerminalRuleCall_4_0 = (RuleCall)cLineAssignment_4.eContents().get(0);
		private final Assignment cResultAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResultResultEnumRuleCall_5_0 = (RuleCall)cResultAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_6_0 = (Alternatives)cGroup_6.eContents().get(0);
		private final Keyword cShowingCounterExampleKeyword_6_0_0 = (Keyword)cAlternatives_6_0.eContents().get(0);
		private final Keyword cShowingExampleTraceKeyword_6_0_1 = (Keyword)cAlternatives_6_0.eContents().get(1);
		private final Assignment cTraceItemsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cTraceItemsTraceItemParserRuleCall_6_1_0 = (RuleCall)cTraceItemsAssignment_6_1.eContents().get(0);
		
		//Trace:
		//	'Verifying' ('property' | 'formula') property=INT 'at line' line=INT
		//	result=Result (('Showing counter example.' | 'Showing example trace.') traceItems+=TraceItem+)?;
		@Override public ParserRule getRule() { return rule; }

		//'Verifying' ('property' | 'formula') property=INT 'at line' line=INT result=Result (('Showing counter example.' |
		//'Showing example trace.') traceItems+=TraceItem+)?
		public Group getGroup() { return cGroup; }

		//'Verifying'
		public Keyword getVerifyingKeyword_0() { return cVerifyingKeyword_0; }

		//('property' | 'formula')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'property'
		public Keyword getPropertyKeyword_1_0() { return cPropertyKeyword_1_0; }

		//'formula'
		public Keyword getFormulaKeyword_1_1() { return cFormulaKeyword_1_1; }

		//property=INT
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//INT
		public RuleCall getPropertyINTTerminalRuleCall_2_0() { return cPropertyINTTerminalRuleCall_2_0; }

		//'at line'
		public Keyword getAtLineKeyword_3() { return cAtLineKeyword_3; }

		//line=INT
		public Assignment getLineAssignment_4() { return cLineAssignment_4; }

		//INT
		public RuleCall getLineINTTerminalRuleCall_4_0() { return cLineINTTerminalRuleCall_4_0; }

		//result=Result
		public Assignment getResultAssignment_5() { return cResultAssignment_5; }

		//Result
		public RuleCall getResultResultEnumRuleCall_5_0() { return cResultResultEnumRuleCall_5_0; }

		//(('Showing counter example.' | 'Showing example trace.') traceItems+=TraceItem+)?
		public Group getGroup_6() { return cGroup_6; }

		//('Showing counter example.' | 'Showing example trace.')
		public Alternatives getAlternatives_6_0() { return cAlternatives_6_0; }

		//'Showing counter example.'
		public Keyword getShowingCounterExampleKeyword_6_0_0() { return cShowingCounterExampleKeyword_6_0_0; }

		//'Showing example trace.'
		public Keyword getShowingExampleTraceKeyword_6_0_1() { return cShowingExampleTraceKeyword_6_0_1; }

		//traceItems+=TraceItem+
		public Assignment getTraceItemsAssignment_6_1() { return cTraceItemsAssignment_6_1; }

		//TraceItem
		public RuleCall getTraceItemsTraceItemParserRuleCall_6_1_0() { return cTraceItemsTraceItemParserRuleCall_6_1_0; }
	}

	public class ProcessIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.ProcessIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTemplateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTemplateAbstractTemplateCrossReference_0_0 = (CrossReference)cTemplateAssignment_0.eContents().get(0);
		private final RuleCall cTemplateAbstractTemplateIDTerminalRuleCall_0_0_1 = (RuleCall)cTemplateAbstractTemplateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsINTTerminalRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsINTTerminalRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ProcessIdentifier:
		//	template=[templates::AbstractTemplate] ('(' arguments+=INT (',' arguments+=INT)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//template=[templates::AbstractTemplate] ('(' arguments+=INT (',' arguments+=INT)* ')')?
		public Group getGroup() { return cGroup; }

		//template=[templates::AbstractTemplate]
		public Assignment getTemplateAssignment_0() { return cTemplateAssignment_0; }

		//[templates::AbstractTemplate]
		public CrossReference getTemplateAbstractTemplateCrossReference_0_0() { return cTemplateAbstractTemplateCrossReference_0_0; }

		//ID
		public RuleCall getTemplateAbstractTemplateIDTerminalRuleCall_0_0_1() { return cTemplateAbstractTemplateIDTerminalRuleCall_0_0_1; }

		//('(' arguments+=INT (',' arguments+=INT)* ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//arguments+=INT
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//INT
		public RuleCall getArgumentsINTTerminalRuleCall_1_1_0() { return cArgumentsINTTerminalRuleCall_1_1_0; }

		//(',' arguments+=INT)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//arguments+=INT
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//INT
		public RuleCall getArgumentsINTTerminalRuleCall_1_2_1_0() { return cArgumentsINTTerminalRuleCall_1_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class LocationActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.LocationActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProcessAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProcessProcessIdentifierParserRuleCall_0_0 = (RuleCall)cProcessAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cLocationLocationCrossReference_2_0 = (CrossReference)cLocationAssignment_2.eContents().get(0);
		private final RuleCall cLocationLocationIDTerminalRuleCall_2_0_1 = (RuleCall)cLocationLocationCrossReference_2_0.eContents().get(1);
		
		//LocationActivity:
		//	process=ProcessIdentifier '.' location=[templates::Location];
		@Override public ParserRule getRule() { return rule; }

		//process=ProcessIdentifier '.' location=[templates::Location]
		public Group getGroup() { return cGroup; }

		//process=ProcessIdentifier
		public Assignment getProcessAssignment_0() { return cProcessAssignment_0; }

		//ProcessIdentifier
		public RuleCall getProcessProcessIdentifierParserRuleCall_0_0() { return cProcessProcessIdentifierParserRuleCall_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//location=[templates::Location]
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }

		//[templates::Location]
		public CrossReference getLocationLocationCrossReference_2_0() { return cLocationLocationCrossReference_2_0; }

		//ID
		public RuleCall getLocationLocationIDTerminalRuleCall_2_0_1() { return cLocationLocationIDTerminalRuleCall_2_0_1; }
	}

	public class VariableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.VariableValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstNamedElementReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0 = (RuleCall)cFirstNamedElementReferenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSecondNamedElementReferenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0 = (RuleCall)cSecondNamedElementReferenceAssignment_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorCompareOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableValue:
		//	firstNamedElementReference=NamedElementReference ('-' secondNamedElementReference=NamedElementReference)?
		//	operator=CompareOperator value=INT;
		@Override public ParserRule getRule() { return rule; }

		//firstNamedElementReference=NamedElementReference ('-' secondNamedElementReference=NamedElementReference)?
		//operator=CompareOperator value=INT
		public Group getGroup() { return cGroup; }

		//firstNamedElementReference=NamedElementReference
		public Assignment getFirstNamedElementReferenceAssignment_0() { return cFirstNamedElementReferenceAssignment_0; }

		//NamedElementReference
		public RuleCall getFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0() { return cFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0; }

		//('-' secondNamedElementReference=NamedElementReference)?
		public Group getGroup_1() { return cGroup_1; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_0() { return cHyphenMinusKeyword_1_0; }

		//secondNamedElementReference=NamedElementReference
		public Assignment getSecondNamedElementReferenceAssignment_1_1() { return cSecondNamedElementReferenceAssignment_1_1; }

		//NamedElementReference
		public RuleCall getSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0() { return cSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0; }

		//operator=CompareOperator
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//CompareOperator
		public RuleCall getOperatorCompareOperatorEnumRuleCall_2_0() { return cOperatorCompareOperatorEnumRuleCall_2_0; }

		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}

	public class SingleNamedElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.SingleNamedElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNamedElementNamedElementCrossReference_0_0 = (CrossReference)cNamedElementAssignment_0.eContents().get(0);
		private final RuleCall cNamedElementNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cNamedElementNamedElementCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexesINTTerminalRuleCall_1_1_0 = (RuleCall)cIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SingleNamedElementReference:
		//	namedElement=[core::NamedElement] ('[' indexes+=INT ']')*;
		@Override public ParserRule getRule() { return rule; }

		//namedElement=[core::NamedElement] ('[' indexes+=INT ']')*
		public Group getGroup() { return cGroup; }

		//namedElement=[core::NamedElement]
		public Assignment getNamedElementAssignment_0() { return cNamedElementAssignment_0; }

		//[core::NamedElement]
		public CrossReference getNamedElementNamedElementCrossReference_0_0() { return cNamedElementNamedElementCrossReference_0_0; }

		//ID
		public RuleCall getNamedElementNamedElementIDTerminalRuleCall_0_0_1() { return cNamedElementNamedElementIDTerminalRuleCall_0_0_1; }

		//('[' indexes+=INT ']')*
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//indexes+=INT
		public Assignment getIndexesAssignment_1_1() { return cIndexesAssignment_1_1; }

		//INT
		public RuleCall getIndexesINTTerminalRuleCall_1_1_0() { return cIndexesINTTerminalRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class NamedElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.NamedElementReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSingleNamedElementReferenceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0 = (RuleCall)cSingleNamedElementReferenceAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNamedElementReferenceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0 = (RuleCall)cNamedElementReferenceAssignment_1_1.eContents().get(0);
		
		//NamedElementReference:
		//	singleNamedElementReference=SingleNamedElementReference ('.' namedElementReference=NamedElementReference)?;
		@Override public ParserRule getRule() { return rule; }

		//singleNamedElementReference=SingleNamedElementReference ('.' namedElementReference=NamedElementReference)?
		public Group getGroup() { return cGroup; }

		//singleNamedElementReference=SingleNamedElementReference
		public Assignment getSingleNamedElementReferenceAssignment_0() { return cSingleNamedElementReferenceAssignment_0; }

		//SingleNamedElementReference
		public RuleCall getSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0() { return cSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0; }

		//('.' namedElementReference=NamedElementReference)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//namedElementReference=NamedElementReference
		public Assignment getNamedElementReferenceAssignment_1_1() { return cNamedElementReferenceAssignment_1_1; }

		//NamedElementReference
		public RuleCall getNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0() { return cNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0; }
	}

	public class TraceItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.TraceItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TraceItem:
		//	State | Transition;
		@Override public ParserRule getRule() { return rule; }

		//State | Transition
		public Alternatives getAlternatives() { return cAlternatives; }

		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }

		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocationActivitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocationActivitiesLocationActivityParserRuleCall_3_0 = (RuleCall)cLocationActivitiesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cVariableValuesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cVariableValuesVariableValueParserRuleCall_5_0_0 = (RuleCall)cVariableValuesAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cVariableValuesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cVariableValuesVariableValueParserRuleCall_5_1_1_0 = (RuleCall)cVariableValuesAssignment_5_1_1.eContents().get(0);
		
		//State hidden(WS, DEPTH):
		//	'State' ':'? // declare colon as optional since some UPPAAL traces come without a colon behind the 'State' keyword
		//	'(' locationActivities+=LocationActivity+ ')' (variableValues+=VariableValue (','? variableValues+=VariableValue)*)? // declare comma as optional since the list of UPPAAL variable values is sometimes comma-separated, sometimes not
		//;
		@Override public ParserRule getRule() { return rule; }

		//'State' ':'? // declare colon as optional since some UPPAAL traces come without a colon behind the 'State' keyword
		//'(' locationActivities+=LocationActivity+ ')' (variableValues+=VariableValue (','? variableValues+=VariableValue)*)?
		public Group getGroup() { return cGroup; }

		//'State'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//':'?
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//// declare colon as optional since some UPPAAL traces come without a colon behind the 'State' keyword
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//locationActivities+=LocationActivity+
		public Assignment getLocationActivitiesAssignment_3() { return cLocationActivitiesAssignment_3; }

		//LocationActivity
		public RuleCall getLocationActivitiesLocationActivityParserRuleCall_3_0() { return cLocationActivitiesLocationActivityParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//(variableValues+=VariableValue (','? variableValues+=VariableValue)*)?
		public Group getGroup_5() { return cGroup_5; }

		//variableValues+=VariableValue
		public Assignment getVariableValuesAssignment_5_0() { return cVariableValuesAssignment_5_0; }

		//VariableValue
		public RuleCall getVariableValuesVariableValueParserRuleCall_5_0_0() { return cVariableValuesVariableValueParserRuleCall_5_0_0; }

		//(','? variableValues+=VariableValue)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//','?
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//variableValues+=VariableValue
		public Assignment getVariableValuesAssignment_5_1_1() { return cVariableValuesAssignment_5_1_1; }

		//VariableValue
		public RuleCall getVariableValuesVariableValueParserRuleCall_5_1_1_0() { return cVariableValuesVariableValueParserRuleCall_5_1_1_0; }
	}

	public class EdgeActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.EdgeActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceLocationActivityParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetLocationActivityParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		private final Assignment cDetailsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDetailsEDGETerminalRuleCall_3_0 = (RuleCall)cDetailsAssignment_3.eContents().get(0);
		
		//EdgeActivity:
		//	source=LocationActivity '->' target=LocationActivity details=EDGE;
		@Override public ParserRule getRule() { return rule; }

		//source=LocationActivity '->' target=LocationActivity details=EDGE
		public Group getGroup() { return cGroup; }

		//source=LocationActivity
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//LocationActivity
		public RuleCall getSourceLocationActivityParserRuleCall_0_0() { return cSourceLocationActivityParserRuleCall_0_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//target=LocationActivity
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }

		//LocationActivity
		public RuleCall getTargetLocationActivityParserRuleCall_2_0() { return cTargetLocationActivityParserRuleCall_2_0; }

		//details=EDGE
		public Assignment getDetailsAssignment_3() { return cDetailsAssignment_3; }

		//EDGE
		public RuleCall getDetailsEDGETerminalRuleCall_3_0() { return cDetailsEDGETerminalRuleCall_3_0; }
	}

	public class SynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.Synchronization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChannelSynchronizationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSynchronizationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cTauSynchronizationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Synchronization:
		//	ChannelSynchronization | {Synchronization} TauSynchronization;
		@Override public ParserRule getRule() { return rule; }

		//ChannelSynchronization | {Synchronization} TauSynchronization
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChannelSynchronization
		public RuleCall getChannelSynchronizationParserRuleCall_0() { return cChannelSynchronizationParserRuleCall_0; }

		//{Synchronization} TauSynchronization
		public Group getGroup_1() { return cGroup_1; }

		//{Synchronization}
		public Action getSynchronizationAction_1_0() { return cSynchronizationAction_1_0; }

		//TauSynchronization
		public RuleCall getTauSynchronizationParserRuleCall_1_1() { return cTauSynchronizationParserRuleCall_1_1; }
	}

	public class ChannelSynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.ChannelSynchronization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChannelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cChannelVariableCrossReference_0_0 = (CrossReference)cChannelAssignment_0.eContents().get(0);
		private final RuleCall cChannelVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cChannelVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindSynchronizationKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		
		//ChannelSynchronization:
		//	channel=[declarations::Variable] kind=SynchronizationKind;
		@Override public ParserRule getRule() { return rule; }

		//channel=[declarations::Variable] kind=SynchronizationKind
		public Group getGroup() { return cGroup; }

		//channel=[declarations::Variable]
		public Assignment getChannelAssignment_0() { return cChannelAssignment_0; }

		//[declarations::Variable]
		public CrossReference getChannelVariableCrossReference_0_0() { return cChannelVariableCrossReference_0_0; }

		//ID
		public RuleCall getChannelVariableIDTerminalRuleCall_0_0_1() { return cChannelVariableIDTerminalRuleCall_0_0_1; }

		//kind=SynchronizationKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }

		//SynchronizationKind
		public RuleCall getKindSynchronizationKindEnumRuleCall_1_0() { return cKindSynchronizationKindEnumRuleCall_1_0; }
	}

	public class TauSynchronizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.TauSynchronization");
		private final Keyword cTauKeyword = (Keyword)rule.eContents().get(1);
		
		//TauSynchronization:
		//	'tau';
		@Override public ParserRule getRule() { return rule; }

		//'tau'
		public Keyword getTauKeyword() { return cTauKeyword; }
	}

	public class DelayTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.DelayTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//DelayTransition:
		//	'Delay:' duration=INT;
		@Override public ParserRule getRule() { return rule; }

		//'Delay:' duration=INT
		public Group getGroup() { return cGroup; }

		//'Delay:'
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }

		//duration=INT
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }

		//INT
		public RuleCall getDurationINTTerminalRuleCall_1_0() { return cDurationINTTerminalRuleCall_1_0; }
	}

	public class ActionTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.ActionTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEdgeActivitiesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEdgeActivitiesEdgeActivityParserRuleCall_1_0 = (RuleCall)cEdgeActivitiesAssignment_1.eContents().get(0);
		
		//ActionTransition:
		//	'Transitions:'
		//	edgeActivities+=EdgeActivity+;
		@Override public ParserRule getRule() { return rule; }

		//'Transitions:' edgeActivities+=EdgeActivity+
		public Group getGroup() { return cGroup; }

		//'Transitions:'
		public Keyword getTransitionsKeyword_0() { return cTransitionsKeyword_0; }

		//edgeActivities+=EdgeActivity+
		public Assignment getEdgeActivitiesAssignment_1() { return cEdgeActivitiesAssignment_1; }

		//EdgeActivity
		public RuleCall getEdgeActivitiesEdgeActivityParserRuleCall_1_0() { return cEdgeActivitiesEdgeActivityParserRuleCall_1_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.Transition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActionTransitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDelayTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Transition:
		//	ActionTransition | DelayTransition;
		@Override public ParserRule getRule() { return rule; }

		//ActionTransition | DelayTransition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ActionTransition
		public RuleCall getActionTransitionParserRuleCall_0() { return cActionTransitionParserRuleCall_0; }

		//DelayTransition
		public RuleCall getDelayTransitionParserRuleCall_1() { return cDelayTransitionParserRuleCall_1; }
	}
	
	
	public class ResultElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUCCESSPropertyIsSatisfiedKeyword_0_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFAILUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFAILUREPropertyIsNOTSatisfiedKeyword_1_0 = (Keyword)cFAILUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUCCESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUCCESSFormulaIsSatisfiedKeyword_2_0 = (Keyword)cSUCCESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFAILUREEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFAILUREFormulaIsNOTSatisfiedKeyword_3_0 = (Keyword)cFAILUREEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Result:
		//	SUCCESS='-- Property is satisfied.' | FAILURE='-- Property is NOT satisfied.' | SUCCESS='-- Formula is satisfied.' |
		//	FAILURE='-- Formula is NOT satisfied.';
		public EnumRule getRule() { return rule; }

		//SUCCESS='-- Property is satisfied.' | FAILURE='-- Property is NOT satisfied.' | SUCCESS='-- Formula is satisfied.' |
		//FAILURE='-- Formula is NOT satisfied.'
		public Alternatives getAlternatives() { return cAlternatives; }

		//SUCCESS='-- Property is satisfied.'
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_0() { return cSUCCESSEnumLiteralDeclaration_0; }

		//'-- Property is satisfied.'
		public Keyword getSUCCESSPropertyIsSatisfiedKeyword_0_0() { return cSUCCESSPropertyIsSatisfiedKeyword_0_0; }

		//FAILURE='-- Property is NOT satisfied.'
		public EnumLiteralDeclaration getFAILUREEnumLiteralDeclaration_1() { return cFAILUREEnumLiteralDeclaration_1; }

		//'-- Property is NOT satisfied.'
		public Keyword getFAILUREPropertyIsNOTSatisfiedKeyword_1_0() { return cFAILUREPropertyIsNOTSatisfiedKeyword_1_0; }

		//SUCCESS='-- Formula is satisfied.'
		public EnumLiteralDeclaration getSUCCESSEnumLiteralDeclaration_2() { return cSUCCESSEnumLiteralDeclaration_2; }

		//'-- Formula is satisfied.'
		public Keyword getSUCCESSFormulaIsSatisfiedKeyword_2_0() { return cSUCCESSFormulaIsSatisfiedKeyword_2_0; }

		//FAILURE='-- Formula is NOT satisfied.'
		public EnumLiteralDeclaration getFAILUREEnumLiteralDeclaration_3() { return cFAILUREEnumLiteralDeclaration_3; }

		//'-- Formula is NOT satisfied.'
		public Keyword getFAILUREFormulaIsNOTSatisfiedKeyword_3_0() { return cFAILUREFormulaIsNOTSatisfiedKeyword_3_0; }
	}

	public class CompareOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.CompareOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEQLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLEQEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGEQEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGEQGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGEQEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum CompareOperator:
		//	EQ='=' | LEQ='<=' | GEQ='>=';
		public EnumRule getRule() { return rule; }

		//EQ='=' | LEQ='<=' | GEQ='>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQ='='
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }

		//'='
		public Keyword getEQEqualsSignKeyword_0_0() { return cEQEqualsSignKeyword_0_0; }

		//LEQ='<='
		public EnumLiteralDeclaration getLEQEnumLiteralDeclaration_1() { return cLEQEnumLiteralDeclaration_1; }

		//'<='
		public Keyword getLEQLessThanSignEqualsSignKeyword_1_0() { return cLEQLessThanSignEqualsSignKeyword_1_0; }

		//GEQ='>='
		public EnumLiteralDeclaration getGEQEnumLiteralDeclaration_2() { return cGEQEnumLiteralDeclaration_2; }

		//'>='
		public Keyword getGEQGreaterThanSignEqualsSignKeyword_2_0() { return cGEQGreaterThanSignEqualsSignKeyword_2_0; }
	}

	public class SynchronizationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.SynchronizationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRECEIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRECEIVEQuestionMarkKeyword_0_0 = (Keyword)cRECEIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSENDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSENDExclamationMarkKeyword_1_0 = (Keyword)cSENDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SynchronizationKind returns templates::SynchronizationKind:
		//	RECEIVE='?' | SEND='!';
		public EnumRule getRule() { return rule; }

		//RECEIVE='?' | SEND='!'
		public Alternatives getAlternatives() { return cAlternatives; }

		//RECEIVE='?'
		public EnumLiteralDeclaration getRECEIVEEnumLiteralDeclaration_0() { return cRECEIVEEnumLiteralDeclaration_0; }

		//'?'
		public Keyword getRECEIVEQuestionMarkKeyword_0_0() { return cRECEIVEQuestionMarkKeyword_0_0; }

		//SEND='!'
		public EnumLiteralDeclaration getSENDEnumLiteralDeclaration_1() { return cSENDEnumLiteralDeclaration_1; }

		//'!'
		public Keyword getSENDExclamationMarkKeyword_1_0() { return cSENDExclamationMarkKeyword_1_0; }
	}
	
	private final TraceRepositoryElements pTraceRepository;
	private final TraceElements pTrace;
	private final ResultElements eResult;
	private final ProcessIdentifierElements pProcessIdentifier;
	private final LocationActivityElements pLocationActivity;
	private final VariableValueElements pVariableValue;
	private final CompareOperatorElements eCompareOperator;
	private final SingleNamedElementReferenceElements pSingleNamedElementReference;
	private final TerminalRule tDEPTH;
	private final NamedElementReferenceElements pNamedElementReference;
	private final TraceItemElements pTraceItem;
	private final StateElements pState;
	private final EdgeActivityElements pEdgeActivity;
	private final TerminalRule tEDGE;
	private final SynchronizationElements pSynchronization;
	private final ChannelSynchronizationElements pChannelSynchronization;
	private final SynchronizationKindElements eSynchronizationKind;
	private final TauSynchronizationElements pTauSynchronization;
	private final DelayTransitionElements pDelayTransition;
	private final ActionTransitionElements pActionTransition;
	private final TransitionElements pTransition;
	private final TerminalRule tINT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DiagnosticTraceGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceRepository = new TraceRepositoryElements();
		this.pTrace = new TraceElements();
		this.eResult = new ResultElements();
		this.pProcessIdentifier = new ProcessIdentifierElements();
		this.pLocationActivity = new LocationActivityElements();
		this.pVariableValue = new VariableValueElements();
		this.eCompareOperator = new CompareOperatorElements();
		this.pSingleNamedElementReference = new SingleNamedElementReferenceElements();
		this.tDEPTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.DEPTH");
		this.pNamedElementReference = new NamedElementReferenceElements();
		this.pTraceItem = new TraceItemElements();
		this.pState = new StateElements();
		this.pEdgeActivity = new EdgeActivityElements();
		this.tEDGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.EDGE");
		this.pSynchronization = new SynchronizationElements();
		this.pChannelSynchronization = new ChannelSynchronizationElements();
		this.eSynchronizationKind = new SynchronizationKindElements();
		this.pTauSynchronization = new TauSynchronizationElements();
		this.pDelayTransition = new DelayTransitionElements();
		this.pActionTransition = new ActionTransitionElements();
		this.pTransition = new TransitionElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.muml.uppaal.trace.DiagnosticTrace.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.muml.uppaal.trace.DiagnosticTrace".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TraceRepository:
	//	'Cannot reuse state space when trace length optimisation is used.'?
	//	traces+=Trace*;
	public TraceRepositoryElements getTraceRepositoryAccess() {
		return pTraceRepository;
	}
	
	public ParserRule getTraceRepositoryRule() {
		return getTraceRepositoryAccess().getRule();
	}

	//Trace:
	//	'Verifying' ('property' | 'formula') property=INT 'at line' line=INT
	//	result=Result (('Showing counter example.' | 'Showing example trace.') traceItems+=TraceItem+)?;
	public TraceElements getTraceAccess() {
		return pTrace;
	}
	
	public ParserRule getTraceRule() {
		return getTraceAccess().getRule();
	}

	//enum Result:
	//	SUCCESS='-- Property is satisfied.' | FAILURE='-- Property is NOT satisfied.' | SUCCESS='-- Formula is satisfied.' |
	//	FAILURE='-- Formula is NOT satisfied.';
	public ResultElements getResultAccess() {
		return eResult;
	}
	
	public EnumRule getResultRule() {
		return getResultAccess().getRule();
	}

	//ProcessIdentifier:
	//	template=[templates::AbstractTemplate] ('(' arguments+=INT (',' arguments+=INT)* ')')?;
	public ProcessIdentifierElements getProcessIdentifierAccess() {
		return pProcessIdentifier;
	}
	
	public ParserRule getProcessIdentifierRule() {
		return getProcessIdentifierAccess().getRule();
	}

	//LocationActivity:
	//	process=ProcessIdentifier '.' location=[templates::Location];
	public LocationActivityElements getLocationActivityAccess() {
		return pLocationActivity;
	}
	
	public ParserRule getLocationActivityRule() {
		return getLocationActivityAccess().getRule();
	}

	//VariableValue:
	//	firstNamedElementReference=NamedElementReference ('-' secondNamedElementReference=NamedElementReference)?
	//	operator=CompareOperator value=INT;
	public VariableValueElements getVariableValueAccess() {
		return pVariableValue;
	}
	
	public ParserRule getVariableValueRule() {
		return getVariableValueAccess().getRule();
	}

	//enum CompareOperator:
	//	EQ='=' | LEQ='<=' | GEQ='>=';
	public CompareOperatorElements getCompareOperatorAccess() {
		return eCompareOperator;
	}
	
	public EnumRule getCompareOperatorRule() {
		return getCompareOperatorAccess().getRule();
	}

	//SingleNamedElementReference:
	//	namedElement=[core::NamedElement] ('[' indexes+=INT ']')*;
	public SingleNamedElementReferenceElements getSingleNamedElementReferenceAccess() {
		return pSingleNamedElementReference;
	}
	
	public ParserRule getSingleNamedElementReferenceRule() {
		return getSingleNamedElementReferenceAccess().getRule();
	}

	//terminal DEPTH:
	//	'#depth=' INT;
	public TerminalRule getDEPTHRule() {
		return tDEPTH;
	} 

	//NamedElementReference:
	//	singleNamedElementReference=SingleNamedElementReference ('.' namedElementReference=NamedElementReference)?;
	public NamedElementReferenceElements getNamedElementReferenceAccess() {
		return pNamedElementReference;
	}
	
	public ParserRule getNamedElementReferenceRule() {
		return getNamedElementReferenceAccess().getRule();
	}

	//TraceItem:
	//	State | Transition;
	public TraceItemElements getTraceItemAccess() {
		return pTraceItem;
	}
	
	public ParserRule getTraceItemRule() {
		return getTraceItemAccess().getRule();
	}

	//State hidden(WS, DEPTH):
	//	'State' ':'? // declare colon as optional since some UPPAAL traces come without a colon behind the 'State' keyword
	//	'(' locationActivities+=LocationActivity+ ')' (variableValues+=VariableValue (','? variableValues+=VariableValue)*)? // declare comma as optional since the list of UPPAAL variable values is sometimes comma-separated, sometimes not
	//;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//EdgeActivity:
	//	source=LocationActivity '->' target=LocationActivity details=EDGE;
	public EdgeActivityElements getEdgeActivityAccess() {
		return pEdgeActivity;
	}
	
	public ParserRule getEdgeActivityRule() {
		return getEdgeActivityAccess().getRule();
	}

	//terminal EDGE:
	//	'{'->'}';
	public TerminalRule getEDGERule() {
		return tEDGE;
	} 

	//Synchronization:
	//	ChannelSynchronization | {Synchronization} TauSynchronization;
	public SynchronizationElements getSynchronizationAccess() {
		return pSynchronization;
	}
	
	public ParserRule getSynchronizationRule() {
		return getSynchronizationAccess().getRule();
	}

	//ChannelSynchronization:
	//	channel=[declarations::Variable] kind=SynchronizationKind;
	public ChannelSynchronizationElements getChannelSynchronizationAccess() {
		return pChannelSynchronization;
	}
	
	public ParserRule getChannelSynchronizationRule() {
		return getChannelSynchronizationAccess().getRule();
	}

	//enum SynchronizationKind returns templates::SynchronizationKind:
	//	RECEIVE='?' | SEND='!';
	public SynchronizationKindElements getSynchronizationKindAccess() {
		return eSynchronizationKind;
	}
	
	public EnumRule getSynchronizationKindRule() {
		return getSynchronizationKindAccess().getRule();
	}

	//TauSynchronization:
	//	'tau';
	public TauSynchronizationElements getTauSynchronizationAccess() {
		return pTauSynchronization;
	}
	
	public ParserRule getTauSynchronizationRule() {
		return getTauSynchronizationAccess().getRule();
	}

	//DelayTransition:
	//	'Delay:' duration=INT;
	public DelayTransitionElements getDelayTransitionAccess() {
		return pDelayTransition;
	}
	
	public ParserRule getDelayTransitionRule() {
		return getDelayTransitionAccess().getRule();
	}

	//ActionTransition:
	//	'Transitions:'
	//	edgeActivities+=EdgeActivity+;
	public ActionTransitionElements getActionTransitionAccess() {
		return pActionTransition;
	}
	
	public ParserRule getActionTransitionRule() {
		return getActionTransitionAccess().getRule();
	}

	//Transition:
	//	ActionTransition | DelayTransition;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	'-'? '0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
