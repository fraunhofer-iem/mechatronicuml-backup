/*
 * generated by Xtext
 */
grammar InternalDiagnosticTrace;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.muml.uppaal.trace.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.muml.uppaal.trace.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.muml.uppaal.trace.services.DiagnosticTraceGrammarAccess;

}

@parser::members {

 	private DiagnosticTraceGrammarAccess grammarAccess;
 	
    public InternalDiagnosticTraceParser(TokenStream input, DiagnosticTraceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TraceRepository";	
   	}
   	
   	@Override
   	protected DiagnosticTraceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTraceRepository
entryRuleTraceRepository returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceRepositoryRule()); }
	 iv_ruleTraceRepository=ruleTraceRepository 
	 { $current=$iv_ruleTraceRepository.current; } 
	 EOF 
;

// Rule TraceRepository
ruleTraceRepository returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Cannot reuse state space when trace length optimisation is used.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTraceRepositoryAccess().getCannotReuseStateSpaceWhenTraceLengthOptimisationIsUsedKeyword_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceRepositoryAccess().getTracesTraceParserRuleCall_1_0()); 
	    }
		lv_traces_1_0=ruleTrace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRepositoryRule());
	        }
       		add(
       			$current, 
       			"traces",
        		lv_traces_1_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.Trace");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTrace
entryRuleTrace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceRule()); }
	 iv_ruleTrace=ruleTrace 
	 { $current=$iv_ruleTrace.current; } 
	 EOF 
;

// Rule Trace
ruleTrace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Verifying' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTraceAccess().getVerifyingKeyword_0());
    }
(	otherlv_1='property' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTraceAccess().getPropertyKeyword_1_0());
    }

    |	otherlv_2='formula' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTraceAccess().getFormulaKeyword_1_1());
    }
)(
(
		lv_property_3_0=RULE_INT
		{
			newLeafNode(lv_property_3_0, grammarAccess.getTraceAccess().getPropertyINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTraceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"property",
        		lv_property_3_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
)	otherlv_4='at line' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTraceAccess().getAtLineKeyword_3());
    }
(
(
		lv_line_5_0=RULE_INT
		{
			newLeafNode(lv_line_5_0, grammarAccess.getTraceAccess().getLineINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTraceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"line",
        		lv_line_5_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceAccess().getResultResultEnumRuleCall_5_0()); 
	    }
		lv_result_6_0=ruleResult		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRule());
	        }
       		set(
       			$current, 
       			"result",
        		lv_result_6_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.Result");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_7='Showing counter example.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTraceAccess().getShowingCounterExampleKeyword_6_0_0());
    }

    |	otherlv_8='Showing example trace.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTraceAccess().getShowingExampleTraceKeyword_6_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceAccess().getTraceItemsTraceItemParserRuleCall_6_1_0()); 
	    }
		lv_traceItems_9_0=ruleTraceItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceRule());
	        }
       		add(
       			$current, 
       			"traceItems",
        		lv_traceItems_9_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.TraceItem");
	        afterParserOrEnumRuleCall();
	    }

)
)+)?)
;





// Entry rule entryRuleProcessIdentifier
entryRuleProcessIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcessIdentifierRule()); }
	 iv_ruleProcessIdentifier=ruleProcessIdentifier 
	 { $current=$iv_ruleProcessIdentifier.current; } 
	 EOF 
;

// Rule ProcessIdentifier
ruleProcessIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessIdentifierRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getProcessIdentifierAccess().getTemplateAbstractTemplateCrossReference_0_0()); 
	}

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcessIdentifierAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		lv_arguments_2_0=RULE_INT
		{
			newLeafNode(lv_arguments_2_0, grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessIdentifierRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcessIdentifierAccess().getCommaKeyword_1_2_0());
    }
(
(
		lv_arguments_4_0=RULE_INT
		{
			newLeafNode(lv_arguments_4_0, grammarAccess.getProcessIdentifierAccess().getArgumentsINTTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessIdentifierRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProcessIdentifierAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleLocationActivity
entryRuleLocationActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocationActivityRule()); }
	 iv_ruleLocationActivity=ruleLocationActivity 
	 { $current=$iv_ruleLocationActivity.current; } 
	 EOF 
;

// Rule LocationActivity
ruleLocationActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLocationActivityAccess().getProcessProcessIdentifierParserRuleCall_0_0()); 
	    }
		lv_process_0_0=ruleProcessIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocationActivityRule());
	        }
       		set(
       			$current, 
       			"process",
        		lv_process_0_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.ProcessIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLocationActivityAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocationActivityRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLocationActivityAccess().getLocationLocationCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleVariableValue
entryRuleVariableValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableValueRule()); }
	 iv_ruleVariableValue=ruleVariableValue 
	 { $current=$iv_ruleVariableValue.current; } 
	 EOF 
;

// Rule VariableValue
ruleVariableValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableValueAccess().getFirstNamedElementReferenceNamedElementReferenceParserRuleCall_0_0()); 
	    }
		lv_firstNamedElementReference_0_0=ruleNamedElementReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableValueRule());
	        }
       		set(
       			$current, 
       			"firstNamedElementReference",
        		lv_firstNamedElementReference_0_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.NamedElementReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableValueAccess().getHyphenMinusKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableValueAccess().getSecondNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); 
	    }
		lv_secondNamedElementReference_2_0=ruleNamedElementReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableValueRule());
	        }
       		set(
       			$current, 
       			"secondNamedElementReference",
        		lv_secondNamedElementReference_2_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.NamedElementReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableValueAccess().getOperatorCompareOperatorEnumRuleCall_2_0()); 
	    }
		lv_operator_3_0=ruleCompareOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableValueRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.CompareOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_value_4_0=RULE_INT
		{
			newLeafNode(lv_value_4_0, grammarAccess.getVariableValueAccess().getValueINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
))
;





// Entry rule entryRuleSingleNamedElementReference
entryRuleSingleNamedElementReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleNamedElementReferenceRule()); }
	 iv_ruleSingleNamedElementReference=ruleSingleNamedElementReference 
	 { $current=$iv_ruleSingleNamedElementReference.current; } 
	 EOF 
;

// Rule SingleNamedElementReference
ruleSingleNamedElementReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleNamedElementReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getSingleNamedElementReferenceAccess().getNamedElementNamedElementCrossReference_0_0()); 
	}

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSingleNamedElementReferenceAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_indexes_2_0=RULE_INT
		{
			newLeafNode(lv_indexes_2_0, grammarAccess.getSingleNamedElementReferenceAccess().getIndexesINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSingleNamedElementReferenceRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"indexes",
        		lv_indexes_2_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSingleNamedElementReferenceAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleNamedElementReference
entryRuleNamedElementReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedElementReferenceRule()); }
	 iv_ruleNamedElementReference=ruleNamedElementReference 
	 { $current=$iv_ruleNamedElementReference.current; } 
	 EOF 
;

// Rule NamedElementReference
ruleNamedElementReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNamedElementReferenceAccess().getSingleNamedElementReferenceSingleNamedElementReferenceParserRuleCall_0_0()); 
	    }
		lv_singleNamedElementReference_0_0=ruleSingleNamedElementReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedElementReferenceRule());
	        }
       		set(
       			$current, 
       			"singleNamedElementReference",
        		lv_singleNamedElementReference_0_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.SingleNamedElementReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamedElementReferenceAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamedElementReferenceAccess().getNamedElementReferenceNamedElementReferenceParserRuleCall_1_1_0()); 
	    }
		lv_namedElementReference_2_0=ruleNamedElementReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamedElementReferenceRule());
	        }
       		set(
       			$current, 
       			"namedElementReference",
        		lv_namedElementReference_2_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.NamedElementReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTraceItem
entryRuleTraceItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceItemRule()); }
	 iv_ruleTraceItem=ruleTraceItem 
	 { $current=$iv_ruleTraceItem.current; } 
	 EOF 
;

// Rule TraceItem
ruleTraceItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTraceItemAccess().getStateParserRuleCall_0()); 
    }
    this_State_0=ruleState
    { 
        $current = $this_State_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTraceItemAccess().getTransitionParserRuleCall_1()); 
    }
    this_Transition_1=ruleTransition
    { 
        $current = $this_Transition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_DEPTH");
	}
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_DEPTH");
    }
    @after { leaveRule(); }:
(	otherlv_0='State' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateAccess().getStateKeyword_0());
    }
(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateAccess().getColonKeyword_1());
    }
)?	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getLocationActivitiesLocationActivityParserRuleCall_3_0()); 
	    }
		lv_locationActivities_3_0=ruleLocationActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"locationActivities",
        		lv_locationActivities_3_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.LocationActivity");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateAccess().getRightParenthesisKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_0_0()); 
	    }
		lv_variableValues_5_0=ruleVariableValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"variableValues",
        		lv_variableValues_5_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.VariableValue");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStateAccess().getCommaKeyword_5_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateAccess().getVariableValuesVariableValueParserRuleCall_5_1_1_0()); 
	    }
		lv_variableValues_7_0=ruleVariableValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateRule());
	        }
       		add(
       			$current, 
       			"variableValues",
        		lv_variableValues_7_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.VariableValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleEdgeActivity
entryRuleEdgeActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEdgeActivityRule()); }
	 iv_ruleEdgeActivity=ruleEdgeActivity 
	 { $current=$iv_ruleEdgeActivity.current; } 
	 EOF 
;

// Rule EdgeActivity
ruleEdgeActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeActivityAccess().getSourceLocationActivityParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleLocationActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeActivityRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.LocationActivity");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEdgeActivityAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEdgeActivityAccess().getTargetLocationActivityParserRuleCall_2_0()); 
	    }
		lv_target_2_0=ruleLocationActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEdgeActivityRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_2_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.LocationActivity");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_details_3_0=RULE_EDGE
		{
			newLeafNode(lv_details_3_0, grammarAccess.getEdgeActivityAccess().getDetailsEDGETerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEdgeActivityRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"details",
        		lv_details_3_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.EDGE");
	    }

)
))
;







// Entry rule entryRuleChannelSynchronization
entryRuleChannelSynchronization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChannelSynchronizationRule()); }
	 iv_ruleChannelSynchronization=ruleChannelSynchronization 
	 { $current=$iv_ruleChannelSynchronization.current; } 
	 EOF 
;

// Rule ChannelSynchronization
ruleChannelSynchronization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getChannelSynchronizationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getChannelSynchronizationAccess().getChannelVariableCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChannelSynchronizationAccess().getKindSynchronizationKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleSynchronizationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChannelSynchronizationRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.SynchronizationKind");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTauSynchronization
entryRuleTauSynchronization returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTauSynchronizationRule()); } 
	 iv_ruleTauSynchronization=ruleTauSynchronization 
	 { $current=$iv_ruleTauSynchronization.current.getText(); }  
	 EOF 
;

// Rule TauSynchronization
ruleTauSynchronization returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='tau' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTauSynchronizationAccess().getTauKeyword()); 
    }

    ;





// Entry rule entryRuleDelayTransition
entryRuleDelayTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelayTransitionRule()); }
	 iv_ruleDelayTransition=ruleDelayTransition 
	 { $current=$iv_ruleDelayTransition.current; } 
	 EOF 
;

// Rule DelayTransition
ruleDelayTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Delay:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDelayTransitionAccess().getDelayKeyword_0());
    }
(
(
		lv_duration_1_0=RULE_INT
		{
			newLeafNode(lv_duration_1_0, grammarAccess.getDelayTransitionAccess().getDurationINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelayTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_1_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.INT");
	    }

)
))
;





// Entry rule entryRuleActionTransition
entryRuleActionTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionTransitionRule()); }
	 iv_ruleActionTransition=ruleActionTransition 
	 { $current=$iv_ruleActionTransition.current; } 
	 EOF 
;

// Rule ActionTransition
ruleActionTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Transitions:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionTransitionAccess().getTransitionsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionTransitionAccess().getEdgeActivitiesEdgeActivityParserRuleCall_1_0()); 
	    }
		lv_edgeActivities_1_0=ruleEdgeActivity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionTransitionRule());
	        }
       		add(
       			$current, 
       			"edgeActivities",
        		lv_edgeActivities_1_0, 
        		"org.muml.uppaal.trace.DiagnosticTrace.EdgeActivity");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getActionTransitionParserRuleCall_0()); 
    }
    this_ActionTransition_0=ruleActionTransition
    { 
        $current = $this_ActionTransition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTransitionAccess().getDelayTransitionParserRuleCall_1()); 
    }
    this_DelayTransition_1=ruleDelayTransition
    { 
        $current = $this_DelayTransition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Rule Result
ruleResult returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-- Property is satisfied.' 
	{
        $current = grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-- Property is NOT satisfied.' 
	{
        $current = grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-- Formula is satisfied.' 
	{
        $current = grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getResultAccess().getSUCCESSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='-- Formula is NOT satisfied.' 
	{
        $current = grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getResultAccess().getFAILUREEnumLiteralDeclaration_3()); 
    }
));



// Rule CompareOperator
ruleCompareOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompareOperatorAccess().getEQEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompareOperatorAccess().getLEQEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompareOperatorAccess().getGEQEnumLiteralDeclaration_2()); 
    }
));



// Rule SynchronizationKind
ruleSynchronizationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='?' 
	{
        $current = grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getSynchronizationKindAccess().getRECEIVEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!' 
	{
        $current = grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getSynchronizationKindAccess().getSENDEnumLiteralDeclaration_1()); 
    }
));



RULE_DEPTH : '#depth=' RULE_INT;

RULE_EDGE : '{' ( options {greedy=false;} : . )*'}';

RULE_INT : '-'? ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


