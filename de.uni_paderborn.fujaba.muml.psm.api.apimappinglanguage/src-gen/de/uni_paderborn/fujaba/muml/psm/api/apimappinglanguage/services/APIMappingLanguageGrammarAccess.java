/*
* generated by Xtext
*/
package de.uni_paderborn.fujaba.muml.psm.api.apimappinglanguage.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import de.uni_paderborn.fujaba.muml.services.ActionLanguageGrammarAccess;

@Singleton
public class APIMappingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingRepositoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingRepository");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cMappingRepositoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cPortApiMappingsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPortApiMappingsPortApiMappingParserRuleCall_4_0_0 = (RuleCall)cPortApiMappingsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cPortApiMappingsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cPortApiMappingsPortApiMappingParserRuleCall_4_1_1_0 = (RuleCall)cPortApiMappingsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNumberSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCommentAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCommentEStringParserRuleCall_6_1_0 = (RuleCall)cCommentAssignment_6_1.eContents().get(0);
		
		//MappingRepository returns portapimapping::MappingRepository:
		//	imports+=Import* // allow imports
		//	"MappingRepository:" name=EString "{" (portApiMappings+=PortApiMapping ("," portApiMappings+=PortApiMapping)*)? "}"
		//	("#" comment=EString)?;
		public ParserRule getRule() { return rule; }

		//imports+=Import* // allow imports
		//"MappingRepository:" name=EString "{" (portApiMappings+=PortApiMapping ("," portApiMappings+=PortApiMapping)*)? "}" ("#"
		//comment=EString)?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"MappingRepository:"
		public Keyword getMappingRepositoryKeyword_1() { return cMappingRepositoryKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(portApiMappings+=PortApiMapping ("," portApiMappings+=PortApiMapping)*)?
		public Group getGroup_4() { return cGroup_4; }

		//portApiMappings+=PortApiMapping
		public Assignment getPortApiMappingsAssignment_4_0() { return cPortApiMappingsAssignment_4_0; }

		//PortApiMapping
		public RuleCall getPortApiMappingsPortApiMappingParserRuleCall_4_0_0() { return cPortApiMappingsPortApiMappingParserRuleCall_4_0_0; }

		//("," portApiMappings+=PortApiMapping)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//portApiMappings+=PortApiMapping
		public Assignment getPortApiMappingsAssignment_4_1_1() { return cPortApiMappingsAssignment_4_1_1; }

		//PortApiMapping
		public RuleCall getPortApiMappingsPortApiMappingParserRuleCall_4_1_1_0() { return cPortApiMappingsPortApiMappingParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//("#" comment=EString)?
		public Group getGroup_6() { return cGroup_6; }

		//"#"
		public Keyword getNumberSignKeyword_6_0() { return cNumberSignKeyword_6_0; }

		//comment=EString
		public Assignment getCommentAssignment_6_1() { return cCommentAssignment_6_1; }

		//EString
		public RuleCall getCommentEStringParserRuleCall_6_1_0() { return cCommentEStringParserRuleCall_6_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//// feature must be named importURI
		//Import returns psm::Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class PortApiMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortApiMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPortContinuousPortInstanceCrossReference_1_0 = (CrossReference)cPortAssignment_1.eContents().get(0);
		private final RuleCall cPortContinuousPortInstanceEStringParserRuleCall_1_0_1 = (RuleCall)cPortContinuousPortInstanceCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cExecCommandKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExecCommandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExecCommandEntryParserRuleCall_4_0 = (RuleCall)cExecCommandAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInitCommandKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitCommandAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitCommandEntryParserRuleCall_5_1_0 = (RuleCall)cInitCommandAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PortApiMapping returns portapimapping::PortApiMapping:
		//	"PortInstance:" port=[instance::ContinuousPortInstance|EString] "{" "execCommand:" execCommand=Entry ("initCommand:"
		//	initCommand=Entry)? "}";
		public ParserRule getRule() { return rule; }

		//"PortInstance:" port=[instance::ContinuousPortInstance|EString] "{" "execCommand:" execCommand=Entry ("initCommand:"
		//initCommand=Entry)? "}"
		public Group getGroup() { return cGroup; }

		//"PortInstance:"
		public Keyword getPortInstanceKeyword_0() { return cPortInstanceKeyword_0; }

		//port=[instance::ContinuousPortInstance|EString]
		public Assignment getPortAssignment_1() { return cPortAssignment_1; }

		//[instance::ContinuousPortInstance|EString]
		public CrossReference getPortContinuousPortInstanceCrossReference_1_0() { return cPortContinuousPortInstanceCrossReference_1_0; }

		//EString
		public RuleCall getPortContinuousPortInstanceEStringParserRuleCall_1_0_1() { return cPortContinuousPortInstanceEStringParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"execCommand:"
		public Keyword getExecCommandKeyword_3() { return cExecCommandKeyword_3; }

		//execCommand=Entry
		public Assignment getExecCommandAssignment_4() { return cExecCommandAssignment_4; }

		//Entry
		public RuleCall getExecCommandEntryParserRuleCall_4_0() { return cExecCommandEntryParserRuleCall_4_0; }

		//("initCommand:" initCommand=Entry)?
		public Group getGroup_5() { return cGroup_5; }

		//"initCommand:"
		public Keyword getInitCommandKeyword_5_0() { return cInitCommandKeyword_5_0; }

		//initCommand=Entry
		public Assignment getInitCommandAssignment_5_1() { return cInitCommandAssignment_5_1; }

		//Entry
		public RuleCall getInitCommandEntryParserRuleCall_5_1_0() { return cInitCommandEntryParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAPICallExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLogicalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression returns expressions::Expression:
		//	APICallExpression | LogicalExpression;
		public ParserRule getRule() { return rule; }

		//APICallExpression | LogicalExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//APICallExpression
		public RuleCall getAPICallExpressionParserRuleCall_0() { return cAPICallExpressionParserRuleCall_0; }

		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_1() { return cLogicalExpressionParserRuleCall_1; }
	}

	public class EnumerationValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumerationValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEnumValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEnumValueEnumerationValueCrossReference_1_0 = (CrossReference)cEnumValueAssignment_1.eContents().get(0);
		private final RuleCall cEnumValueEnumerationValueIDTerminalRuleCall_1_0_1 = (RuleCall)cEnumValueEnumerationValueCrossReference_1_0.eContents().get(1);
		
		//EnumerationValueExpression returns apiexpressions::EnumerationValueExpression:
		//	"enum:" enumValue=[swplatform::EnumerationValue];
		public ParserRule getRule() { return rule; }

		//"enum:" enumValue=[swplatform::EnumerationValue]
		public Group getGroup() { return cGroup; }

		//"enum:"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//enumValue=[swplatform::EnumerationValue]
		public Assignment getEnumValueAssignment_1() { return cEnumValueAssignment_1; }

		//[swplatform::EnumerationValue]
		public CrossReference getEnumValueEnumerationValueCrossReference_1_0() { return cEnumValueEnumerationValueCrossReference_1_0; }

		//ID
		public RuleCall getEnumValueEnumerationValueIDTerminalRuleCall_1_0_1() { return cEnumValueEnumerationValueIDTerminalRuleCall_1_0_1; }
	}

	public class APICallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "APICallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAPI_CallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cApiCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cApiCommandAPICommandCrossReference_1_0 = (CrossReference)cApiCommandAssignment_1.eContents().get(0);
		private final RuleCall cApiCommandAPICommandIDTerminalRuleCall_1_0_1 = (RuleCall)cApiCommandAPICommandCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParameterBindingsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParameterBindingsParamaterBindingParserRuleCall_3_0_0 = (RuleCall)cParameterBindingsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParameterBindingsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParameterBindingsParamaterBindingParserRuleCall_3_1_1_0 = (RuleCall)cParameterBindingsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//APICallExpression returns apiexpressions::APICallExpression:
		//	"API_Call:" apiCommand=[swplatform::APICommand] "(" (parameterBindings+=ParamaterBinding (","
		//	parameterBindings+=ParamaterBinding)*)? ")";
		public ParserRule getRule() { return rule; }

		//"API_Call:" apiCommand=[swplatform::APICommand] "(" (parameterBindings+=ParamaterBinding (","
		//parameterBindings+=ParamaterBinding)*)? ")"
		public Group getGroup() { return cGroup; }

		//"API_Call:"
		public Keyword getAPI_CallKeyword_0() { return cAPI_CallKeyword_0; }

		//apiCommand=[swplatform::APICommand]
		public Assignment getApiCommandAssignment_1() { return cApiCommandAssignment_1; }

		//[swplatform::APICommand]
		public CrossReference getApiCommandAPICommandCrossReference_1_0() { return cApiCommandAPICommandCrossReference_1_0; }

		//ID
		public RuleCall getApiCommandAPICommandIDTerminalRuleCall_1_0_1() { return cApiCommandAPICommandIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameterBindings+=ParamaterBinding ("," parameterBindings+=ParamaterBinding)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameterBindings+=ParamaterBinding
		public Assignment getParameterBindingsAssignment_3_0() { return cParameterBindingsAssignment_3_0; }

		//ParamaterBinding
		public RuleCall getParameterBindingsParamaterBindingParserRuleCall_3_0_0() { return cParameterBindingsParamaterBindingParserRuleCall_3_0_0; }

		//("," parameterBindings+=ParamaterBinding)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameterBindings+=ParamaterBinding
		public Assignment getParameterBindingsAssignment_3_1_1() { return cParameterBindingsAssignment_3_1_1; }

		//ParamaterBinding
		public RuleCall getParameterBindingsParamaterBindingParserRuleCall_3_1_1_0() { return cParameterBindingsParamaterBindingParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ParamaterBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamaterBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterBindingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_1_0_1 = (RuleCall)cParameterParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValueAlternatives_3_0 = (Alternatives)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_3_0_0 = (RuleCall)cValueAlternatives_3_0.eContents().get(0);
		private final RuleCall cValueEnumerationValueExpressionParserRuleCall_3_0_1 = (RuleCall)cValueAlternatives_3_0.eContents().get(1);
		private final RuleCall cValueContiniousPortExpressionsParserRuleCall_3_0_2 = (RuleCall)cValueAlternatives_3_0.eContents().get(2);
		
		//ParamaterBinding returns behavior::ParameterBinding:
		//	{behavior::ParameterBinding} parameter=[behavior::Parameter] ":=" value=(Expression | EnumerationValueExpression |
		//	ContiniousPortExpressions);
		public ParserRule getRule() { return rule; }

		//{behavior::ParameterBinding} parameter=[behavior::Parameter] ":=" value=(Expression | EnumerationValueExpression |
		//ContiniousPortExpressions)
		public Group getGroup() { return cGroup; }

		//{behavior::ParameterBinding}
		public Action getParameterBindingAction_0() { return cParameterBindingAction_0; }

		//parameter=[behavior::Parameter]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[behavior::Parameter]
		public CrossReference getParameterParameterCrossReference_1_0() { return cParameterParameterCrossReference_1_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_1_0_1() { return cParameterParameterIDTerminalRuleCall_1_0_1; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//value=(Expression | EnumerationValueExpression | ContiniousPortExpressions)
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression | EnumerationValueExpression | ContiniousPortExpressions
		public Alternatives getValueAlternatives_3_0() { return cValueAlternatives_3_0; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0_0() { return cValueExpressionParserRuleCall_3_0_0; }

		//EnumerationValueExpression
		public RuleCall getValueEnumerationValueExpressionParserRuleCall_3_0_1() { return cValueEnumerationValueExpressionParserRuleCall_3_0_1; }

		//ContiniousPortExpressions
		public RuleCall getValueContiniousPortExpressionsParserRuleCall_3_0_2() { return cValueContiniousPortExpressionsParserRuleCall_3_0_2; }
	}

	public class ContiniousPortExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContiniousPortExpressions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContinuousPortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContinuousPortContinuousPortInstanceCrossReference_1_0 = (CrossReference)cContinuousPortAssignment_1.eContents().get(0);
		private final RuleCall cContinuousPortContinuousPortInstanceIDTerminalRuleCall_1_0_1 = (RuleCall)cContinuousPortContinuousPortInstanceCrossReference_1_0.eContents().get(1);
		
		//ContiniousPortExpressions returns apiexpressions::ContinuousPortExpression:
		//	"port:" continuousPort=[instance::ContinuousPortInstance];
		public ParserRule getRule() { return rule; }

		//"port:" continuousPort=[instance::ContinuousPortInstance]
		public Group getGroup() { return cGroup; }

		//"port:"
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }

		//continuousPort=[instance::ContinuousPortInstance]
		public Assignment getContinuousPortAssignment_1() { return cContinuousPortAssignment_1; }

		//[instance::ContinuousPortInstance]
		public CrossReference getContinuousPortContinuousPortInstanceCrossReference_1_0() { return cContinuousPortContinuousPortInstanceCrossReference_1_0; }

		//ID
		public RuleCall getContinuousPortContinuousPortInstanceIDTerminalRuleCall_1_0_1() { return cContinuousPortContinuousPortInstanceIDTerminalRuleCall_1_0_1; }
	}

	public class ExpressionStartRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionStartRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoWhileLoopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cReturnStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLocalVariableOrConstantDeclarationStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cOperationCallStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAPICallExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ExpressionStartRule returns expressions::Expression:
		//	Assignment | ForLoop | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
		//	LocalVariableOrConstantDeclarationStatement | OperationCallStatement | APICallExpression;
		public ParserRule getRule() { return rule; }

		//Assignment | ForLoop | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
		//LocalVariableOrConstantDeclarationStatement | OperationCallStatement | APICallExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }

		//ForLoop
		public RuleCall getForLoopParserRuleCall_1() { return cForLoopParserRuleCall_1; }

		//WhileLoop
		public RuleCall getWhileLoopParserRuleCall_2() { return cWhileLoopParserRuleCall_2; }

		//DoWhileLoop
		public RuleCall getDoWhileLoopParserRuleCall_3() { return cDoWhileLoopParserRuleCall_3; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_4() { return cIfStatementParserRuleCall_4; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_5() { return cReturnStatementParserRuleCall_5; }

		//LocalVariableOrConstantDeclarationStatement
		public RuleCall getLocalVariableOrConstantDeclarationStatementParserRuleCall_6() { return cLocalVariableOrConstantDeclarationStatementParserRuleCall_6; }

		//OperationCallStatement
		public RuleCall getOperationCallStatementParserRuleCall_7() { return cOperationCallStatementParserRuleCall_7; }

		//APICallExpression
		public RuleCall getAPICallExpressionParserRuleCall_8() { return cAPICallExpressionParserRuleCall_8; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	ID | QualifiedName;
		public ParserRule getRule() { return rule; }

		//ID | QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_1() { return cQualifiedNameParserRuleCall_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)+;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final MappingRepositoryElements pMappingRepository;
	private final ImportElements pImport;
	private final PortApiMappingElements pPortApiMapping;
	private final ExpressionElements pExpression;
	private final EnumerationValueExpressionElements pEnumerationValueExpression;
	private final APICallExpressionElements pAPICallExpression;
	private final ParamaterBindingElements pParamaterBinding;
	private final ContiniousPortExpressionsElements pContiniousPortExpressions;
	private final ExpressionStartRuleElements pExpressionStartRule;
	private final EStringElements pEString;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final ActionLanguageGrammarAccess gaActionLanguage;

	@Inject
	public APIMappingLanguageGrammarAccess(GrammarProvider grammarProvider,
		ActionLanguageGrammarAccess gaActionLanguage) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaActionLanguage = gaActionLanguage;
		this.pMappingRepository = new MappingRepositoryElements();
		this.pImport = new ImportElements();
		this.pPortApiMapping = new PortApiMappingElements();
		this.pExpression = new ExpressionElements();
		this.pEnumerationValueExpression = new EnumerationValueExpressionElements();
		this.pAPICallExpression = new APICallExpressionElements();
		this.pParamaterBinding = new ParamaterBindingElements();
		this.pContiniousPortExpressions = new ContiniousPortExpressionsElements();
		this.pExpressionStartRule = new ExpressionStartRuleElements();
		this.pEString = new EStringElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uni_paderborn.fujaba.muml.psm.api.apimappinglanguage.APIMappingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ActionLanguageGrammarAccess getActionLanguageGrammarAccess() {
		return gaActionLanguage;
	}

	
	//MappingRepository returns portapimapping::MappingRepository:
	//	imports+=Import* // allow imports
	//	"MappingRepository:" name=EString "{" (portApiMappings+=PortApiMapping ("," portApiMappings+=PortApiMapping)*)? "}"
	//	("#" comment=EString)?;
	public MappingRepositoryElements getMappingRepositoryAccess() {
		return pMappingRepository;
	}
	
	public ParserRule getMappingRepositoryRule() {
		return getMappingRepositoryAccess().getRule();
	}

	//// feature must be named importURI
	//Import returns psm::Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//PortApiMapping returns portapimapping::PortApiMapping:
	//	"PortInstance:" port=[instance::ContinuousPortInstance|EString] "{" "execCommand:" execCommand=Entry ("initCommand:"
	//	initCommand=Entry)? "}";
	public PortApiMappingElements getPortApiMappingAccess() {
		return pPortApiMapping;
	}
	
	public ParserRule getPortApiMappingRule() {
		return getPortApiMappingAccess().getRule();
	}

	//Expression returns expressions::Expression:
	//	APICallExpression | LogicalExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//EnumerationValueExpression returns apiexpressions::EnumerationValueExpression:
	//	"enum:" enumValue=[swplatform::EnumerationValue];
	public EnumerationValueExpressionElements getEnumerationValueExpressionAccess() {
		return pEnumerationValueExpression;
	}
	
	public ParserRule getEnumerationValueExpressionRule() {
		return getEnumerationValueExpressionAccess().getRule();
	}

	//APICallExpression returns apiexpressions::APICallExpression:
	//	"API_Call:" apiCommand=[swplatform::APICommand] "(" (parameterBindings+=ParamaterBinding (","
	//	parameterBindings+=ParamaterBinding)*)? ")";
	public APICallExpressionElements getAPICallExpressionAccess() {
		return pAPICallExpression;
	}
	
	public ParserRule getAPICallExpressionRule() {
		return getAPICallExpressionAccess().getRule();
	}

	//ParamaterBinding returns behavior::ParameterBinding:
	//	{behavior::ParameterBinding} parameter=[behavior::Parameter] ":=" value=(Expression | EnumerationValueExpression |
	//	ContiniousPortExpressions);
	public ParamaterBindingElements getParamaterBindingAccess() {
		return pParamaterBinding;
	}
	
	public ParserRule getParamaterBindingRule() {
		return getParamaterBindingAccess().getRule();
	}

	//ContiniousPortExpressions returns apiexpressions::ContinuousPortExpression:
	//	"port:" continuousPort=[instance::ContinuousPortInstance];
	public ContiniousPortExpressionsElements getContiniousPortExpressionsAccess() {
		return pContiniousPortExpressions;
	}
	
	public ParserRule getContiniousPortExpressionsRule() {
		return getContiniousPortExpressionsAccess().getRule();
	}

	//ExpressionStartRule returns expressions::Expression:
	//	Assignment | ForLoop | WhileLoop | DoWhileLoop | IfStatement | ReturnStatement |
	//	LocalVariableOrConstantDeclarationStatement | OperationCallStatement | APICallExpression;
	public ExpressionStartRuleElements getExpressionStartRuleAccess() {
		return pExpressionStartRule;
	}
	
	public ParserRule getExpressionStartRuleRule() {
		return getExpressionStartRuleAccess().getRule();
	}

	//EString returns ecore::EString:
	//	ID | QualifiedName;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)+;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Entry returns expressions::Expression:
	//	Block | Expression | ArrayInitializeExpression;
	public ActionLanguageGrammarAccess.EntryElements getEntryAccess() {
		return gaActionLanguage.getEntryAccess();
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}

	//Block returns actionlanguage::Block hidden(WS, ML_COMMENT, SL_COMMENT):
	//	{actionlanguage::Block} "{" expressions+=ExpressionStartRule* "}";
	public ActionLanguageGrammarAccess.BlockElements getBlockAccess() {
		return gaActionLanguage.getBlockAccess();
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//// TODO: clarify if it makes sense to allow arbitrary expressions for
	//// the initializeExpression and countingExpression
	//ForLoop returns actionlanguage::ForLoop:
	//	"for" "(" initializeExpression=Assignment loopTest=Expression ";" countingExpression=ForLoopCountingExpression ")"
	//	block=Block;
	public ActionLanguageGrammarAccess.ForLoopElements getForLoopAccess() {
		return gaActionLanguage.getForLoopAccess();
	}
	
	public ParserRule getForLoopRule() {
		return getForLoopAccess().getRule();
	}

	//ForLoopCountingExpression returns actionlanguage::Assignment:
	//	lhs_typedNamedElementExpression=TypedNamedElementExpression
	//	(incrementDecrementOperator=UnaryPostIncrementDecrementOperator | assignOperator=AssignOperator
	//	rhs_assignExpression=Expression);
	public ActionLanguageGrammarAccess.ForLoopCountingExpressionElements getForLoopCountingExpressionAccess() {
		return gaActionLanguage.getForLoopCountingExpressionAccess();
	}
	
	public ParserRule getForLoopCountingExpressionRule() {
		return getForLoopCountingExpressionAccess().getRule();
	}

	//WhileLoop returns actionlanguage::WhileLoop:
	//	"while" "(" loopTest=Expression ")" block=Block;
	public ActionLanguageGrammarAccess.WhileLoopElements getWhileLoopAccess() {
		return gaActionLanguage.getWhileLoopAccess();
	}
	
	public ParserRule getWhileLoopRule() {
		return getWhileLoopAccess().getRule();
	}

	//DoWhileLoop returns actionlanguage::DoWhileLoop:
	//	"do" block=Block "while" "(" loopTest=Expression ");";
	public ActionLanguageGrammarAccess.DoWhileLoopElements getDoWhileLoopAccess() {
		return gaActionLanguage.getDoWhileLoopAccess();
	}
	
	public ParserRule getDoWhileLoopRule() {
		return getDoWhileLoopAccess().getRule();
	}

	//IfStatement returns actionlanguage::IfStatement:
	//	"if" "(" ifCondition=Expression ")" ifBlock=Block ("elseif" "(" elseIfConditions+=Expression ")" elseIfBlocks+=Block)*
	//	("else" elseBlock=Block)?;
	public ActionLanguageGrammarAccess.IfStatementElements getIfStatementAccess() {
		return gaActionLanguage.getIfStatementAccess();
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ReturnStatement returns actionlanguage::ReturnStatement:
	//	{actionlanguage::ReturnStatement} "return" expression=Expression ";";
	public ActionLanguageGrammarAccess.ReturnStatementElements getReturnStatementAccess() {
		return gaActionLanguage.getReturnStatementAccess();
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//OperationCallStatement returns actionlanguage::OperationCall:
	//	OperationCall ";";
	public ActionLanguageGrammarAccess.OperationCallStatementElements getOperationCallStatementAccess() {
		return gaActionLanguage.getOperationCallStatementAccess();
	}
	
	public ParserRule getOperationCallStatementRule() {
		return getOperationCallStatementAccess().getRule();
	}

	//enum UnaryPostIncrementDecrementOperator returns actionlanguage::IncrementDecrementOperator:
	//	INCREMENT="++" | DECREMENT="--";
	public ActionLanguageGrammarAccess.UnaryPostIncrementDecrementOperatorElements getUnaryPostIncrementDecrementOperatorAccess() {
		return gaActionLanguage.getUnaryPostIncrementDecrementOperatorAccess();
	}
	
	public EnumRule getUnaryPostIncrementDecrementOperatorRule() {
		return getUnaryPostIncrementDecrementOperatorAccess().getRule();
	}

	//// Assignment
	//Assignment returns actionlanguage::Assignment:
	//	lhs_typedNamedElementExpression=TypedNamedElementExpression (assignOperator=AssignOperator
	//	rhs_assignExpression=InitializeExpression | incrementDecrementOperator=UnaryPostIncrementDecrementOperator) ";";
	public ActionLanguageGrammarAccess.AssignmentElements getAssignmentAccess() {
		return gaActionLanguage.getAssignmentAccess();
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//enum IncrementDecrementOperatorExpression returns actionlanguage::IncrementDecrementOperator:
	//	INCREMENT="++" | DECREMENT="--";
	public ActionLanguageGrammarAccess.IncrementDecrementOperatorExpressionElements getIncrementDecrementOperatorExpressionAccess() {
		return gaActionLanguage.getIncrementDecrementOperatorExpressionAccess();
	}
	
	public EnumRule getIncrementDecrementOperatorExpressionRule() {
		return getIncrementDecrementOperatorExpressionAccess().getRule();
	}

	//enum AssignOperator returns actionlanguage::AssignOperator:
	//	ASSIGN=":=" | PLUS_EQUAL="+=" | MINUS_EQUAL="-=";
	public ActionLanguageGrammarAccess.AssignOperatorElements getAssignOperatorAccess() {
		return gaActionLanguage.getAssignOperatorAccess();
	}
	
	public EnumRule getAssignOperatorRule() {
		return getAssignOperatorAccess().getRule();
	}

	//// end of assignment
	//// initialize expression
	//InitializeExpression returns expressions::Expression:
	//	ArrayInitializeExpression | NondeterministicChoiceExpression | Expression;
	public ActionLanguageGrammarAccess.InitializeExpressionElements getInitializeExpressionAccess() {
		return gaActionLanguage.getInitializeExpressionAccess();
	}
	
	public ParserRule getInitializeExpressionRule() {
		return getInitializeExpressionAccess().getRule();
	}

	//// end of initialize expression
	//// array initialization
	//ArrayInitializeExpression returns actionlanguage::ArrayInitializeExpression:
	//	"[" expressions+=InitializeExpression ("," expressions+=InitializeExpression)* "]";
	public ActionLanguageGrammarAccess.ArrayInitializeExpressionElements getArrayInitializeExpressionAccess() {
		return gaActionLanguage.getArrayInitializeExpressionAccess();
	}
	
	public ParserRule getArrayInitializeExpressionRule() {
		return getArrayInitializeExpressionAccess().getRule();
	}

	//// end of array initialization
	//// local variable declaration
	//LocalVariableOrConstantDeclarationStatement returns actionlanguage::LocalVariableDeclarationStatement:
	//	variable=(LocalVariableDeclaration | LocalConstantDeclaration);
	public ActionLanguageGrammarAccess.LocalVariableOrConstantDeclarationStatementElements getLocalVariableOrConstantDeclarationStatementAccess() {
		return gaActionLanguage.getLocalVariableOrConstantDeclarationStatementAccess();
	}
	
	public ParserRule getLocalVariableOrConstantDeclarationStatementRule() {
		return getLocalVariableOrConstantDeclarationStatementAccess().getRule();
	}

	//LocalVariableDeclaration returns behavior::Variable:
	//	dataType=[types::DataType|DATATYPE] name=ID (":=" initializeExpression=InitializeExpression)? ";";
	public ActionLanguageGrammarAccess.LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return gaActionLanguage.getLocalVariableDeclarationAccess();
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//LocalConstantDeclaration returns behavior::Variable:
	//	constant?="const" dataType=[types::DataType|DATATYPE] name=ID ":=" initializeExpression=InitializeExpression ";";
	public ActionLanguageGrammarAccess.LocalConstantDeclarationElements getLocalConstantDeclarationAccess() {
		return gaActionLanguage.getLocalConstantDeclarationAccess();
	}
	
	public ParserRule getLocalConstantDeclarationRule() {
		return getLocalConstantDeclarationAccess().getRule();
	}

	//// end of local variable declaration
	//// nondeterministic choice expression
	//NondeterministicChoiceExpression returns actionlanguage::NondeterministicChoiceExpression:
	//	dataType=[types::PrimitiveDataType] range=Range;
	public ActionLanguageGrammarAccess.NondeterministicChoiceExpressionElements getNondeterministicChoiceExpressionAccess() {
		return gaActionLanguage.getNondeterministicChoiceExpressionAccess();
	}
	
	public ParserRule getNondeterministicChoiceExpressionRule() {
		return getNondeterministicChoiceExpressionAccess().getRule();
	}

	//Range returns valuetype::Range:
	//	"<" lowerBound=LONG "," upperBound=LONG ">";
	public ActionLanguageGrammarAccess.RangeElements getRangeAccess() {
		return gaActionLanguage.getRangeAccess();
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	//LONG returns ecore::ELong:
	//	INT;
	public ActionLanguageGrammarAccess.LONGElements getLONGAccess() {
		return gaActionLanguage.getLONGAccess();
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}

	//// LogicalExpression
	//LogicalExpression returns expressions::Expression:
	//	LogicalOrExpression;
	public ActionLanguageGrammarAccess.LogicalExpressionElements getLogicalExpressionAccess() {
		return gaActionLanguage.getLogicalExpressionAccess();
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//LogicalOrExpression returns expressions::Expression:
	//	LogicalAndExpression ({commonExpressions::LogicalExpression.leftExpression=current} operator=LogicalOrOperator
	//	rightExpression=LogicalAndExpression)*;
	public ActionLanguageGrammarAccess.LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return gaActionLanguage.getLogicalOrExpressionAccess();
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}

	//enum LogicalOrOperator returns commonExpressions::LogicOperator:
	//	OR="||";
	public ActionLanguageGrammarAccess.LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return gaActionLanguage.getLogicalOrOperatorAccess();
	}
	
	public EnumRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalAndExpression returns expressions::Expression:
	//	ComparisonExpression ({commonExpressions::LogicalExpression.leftExpression=current} operator=LogicalAndOperator
	//	rightExpression=ComparisonExpression)*;
	public ActionLanguageGrammarAccess.LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return gaActionLanguage.getLogicalAndExpressionAccess();
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}

	//enum LogicalAndOperator returns commonExpressions::LogicOperator:
	//	AND="&&";
	public ActionLanguageGrammarAccess.LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return gaActionLanguage.getLogicalAndOperatorAccess();
	}
	
	public EnumRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//// end of LogicalExpression
	//// ComparisonExpression
	//ComparisonExpression returns expressions::Expression:
	//	ComparisonHigherOpExpression ({commonExpressions::ComparisonExpression.leftExpression=current}
	//	operator=ComparingEQNEQOperator rightExpression=ComparisonHigherOpExpression)?;
	public ActionLanguageGrammarAccess.ComparisonExpressionElements getComparisonExpressionAccess() {
		return gaActionLanguage.getComparisonExpressionAccess();
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//ComparisonHigherOpExpression returns expressions::Expression:
	//	ArithmeticExpression ({commonExpressions::ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
	//	rightExpression=ArithmeticExpression)?;
	public ActionLanguageGrammarAccess.ComparisonHigherOpExpressionElements getComparisonHigherOpExpressionAccess() {
		return gaActionLanguage.getComparisonHigherOpExpressionAccess();
	}
	
	public ParserRule getComparisonHigherOpExpressionRule() {
		return getComparisonHigherOpExpressionAccess().getRule();
	}

	//enum ComparingEQNEQOperator returns commonExpressions::ComparingOperator:
	//	EQUAL="==" | UNEQUAL="<>";
	public ActionLanguageGrammarAccess.ComparingEQNEQOperatorElements getComparingEQNEQOperatorAccess() {
		return gaActionLanguage.getComparingEQNEQOperatorAccess();
	}
	
	public EnumRule getComparingEQNEQOperatorRule() {
		return getComparingEQNEQOperatorAccess().getRule();
	}

	//enum ComparingRelOperator returns commonExpressions::ComparingOperator:
	//	LESS="<" | LESS_OR_EQUAL="<=" | GREATER_OR_EQUAL=">=" | GREATER=">";
	public ActionLanguageGrammarAccess.ComparingRelOperatorElements getComparingRelOperatorAccess() {
		return gaActionLanguage.getComparingRelOperatorAccess();
	}
	
	public EnumRule getComparingRelOperatorRule() {
		return getComparingRelOperatorAccess().getRule();
	}

	//// end of ComparisonExpression
	//// ArithmeticExpression	
	//ArithmeticExpression returns expressions::Expression:
	//	AdditionExpression;
	public ActionLanguageGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaActionLanguage.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditionExpression returns expressions::Expression:
	//	MultiplicationExpression ({commonExpressions::ArithmeticExpression.leftExpression=current} operator=AdditionOperator
	//	rightExpression=MultiplicationExpression)*;
	public ActionLanguageGrammarAccess.AdditionExpressionElements getAdditionExpressionAccess() {
		return gaActionLanguage.getAdditionExpressionAccess();
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}

	//enum AdditionOperator returns commonExpressions::ArithmeticOperator:
	//	PLUS="+" | MINUS="-";
	public ActionLanguageGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaActionLanguage.getAdditionOperatorAccess();
	}
	
	public EnumRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//MultiplicationExpression returns expressions::Expression:
	//	UnaryPreExpression | TypeCastExpression ({commonExpressions::ArithmeticExpression.leftExpression=current}
	//	operator=MultiplicationOperator rightExpression=(UnaryPreExpression | TypeCastExpression))*;
	public ActionLanguageGrammarAccess.MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return gaActionLanguage.getMultiplicationExpressionAccess();
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}

	//enum MultiplicationOperator returns commonExpressions::ArithmeticOperator:
	//	TIMES="*" | DIVIDE="/" | MODULO="%";
	public ActionLanguageGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaActionLanguage.getMultiplicationOperatorAccess();
	}
	
	public EnumRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//// end of ArithmeticExpression
	//// UnaryPreExpression
	//UnaryPreExpression returns expressions::Expression:
	//	{commonExpressions::UnaryExpression} operator=UnaryPreOperator enclosedExpression=TypeCastExpression;
	public ActionLanguageGrammarAccess.UnaryPreExpressionElements getUnaryPreExpressionAccess() {
		return gaActionLanguage.getUnaryPreExpressionAccess();
	}
	
	public ParserRule getUnaryPreExpressionRule() {
		return getUnaryPreExpressionAccess().getRule();
	}

	//enum UnaryPreOperator returns commonExpressions::UnaryOperator:
	//	NOT="not" | MINUS="-";
	public ActionLanguageGrammarAccess.UnaryPreOperatorElements getUnaryPreOperatorAccess() {
		return gaActionLanguage.getUnaryPreOperatorAccess();
	}
	
	public EnumRule getUnaryPreOperatorRule() {
		return getUnaryPreOperatorAccess().getRule();
	}

	//// end of UnaryPreExpression
	//TypeCastExpression returns expressions::Expression:
	//	Operand | {actionlanguage::TypeCastExpression} "(" dataType=[types::DataType|DATATYPE] ")" enclosedExpression=Operand;
	public ActionLanguageGrammarAccess.TypeCastExpressionElements getTypeCastExpressionAccess() {
		return gaActionLanguage.getTypeCastExpressionAccess();
	}
	
	public ParserRule getTypeCastExpressionRule() {
		return getTypeCastExpressionAccess().getRule();
	}

	//// Operand
	//Operand returns expressions::Expression:
	//	"(" Expression ")" | LiteralExpression | ExtendedTypedNamedElementExpression | TimeValueExpression | OperationCall |
	//	TriggerMessageExpression | NoAttributeSelectorExpression;
	public ActionLanguageGrammarAccess.OperandElements getOperandAccess() {
		return gaActionLanguage.getOperandAccess();
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}

	//// end of Operand
	//LiteralExpression returns commonExpressions::LiteralExpression:
	//	{commonExpressions::LiteralExpression} value=Literal;
	public ActionLanguageGrammarAccess.LiteralExpressionElements getLiteralExpressionAccess() {
		return gaActionLanguage.getLiteralExpressionAccess();
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//Literal returns ecore::EString:
	//	NUMBER | BOOLEAN | INT | "null";
	public ActionLanguageGrammarAccess.LiteralElements getLiteralAccess() {
		return gaActionLanguage.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//TimeValueExpression returns actionlanguage::TimeValueExpression:
	//	timeValue=[valuetype::TimeValue|MINORMAXKEYWORD];
	public ActionLanguageGrammarAccess.TimeValueExpressionElements getTimeValueExpressionAccess() {
		return gaActionLanguage.getTimeValueExpressionAccess();
	}
	
	public ParserRule getTimeValueExpressionRule() {
		return getTimeValueExpressionAccess().getRule();
	}

	//terminal MINORMAXKEYWORD:
	//	"maxMsgDelay" | "minMsgDelay";
	public TerminalRule getMINORMAXKEYWORDRule() {
		return gaActionLanguage.getMINORMAXKEYWORDRule();
	} 

	//ExtendedTypedNamedElementExpression returns expressions::Expression:
	//	TypedNamedElementExpression
	//	({actionlanguage::DiscreteInteractionEndpointReference.typedNamedElementExpression=current} "->"
	//	position=PositionSelectorExpression | // unary post increment/decrement			
	//	{actionlanguage::Assignment.lhs_typedNamedElementExpression=current}
	//	incrementDecrementOperator=IncrementDecrementOperatorExpression)?;
	public ActionLanguageGrammarAccess.ExtendedTypedNamedElementExpressionElements getExtendedTypedNamedElementExpressionAccess() {
		return gaActionLanguage.getExtendedTypedNamedElementExpressionAccess();
	}
	
	public ParserRule getExtendedTypedNamedElementExpressionRule() {
		return getExtendedTypedNamedElementExpressionAccess().getRule();
	}

	//TypedNamedElementExpression returns actionlanguage::TypedNamedElementExpression:
	//	typedNamedElement=[behavior::TypedNamedElement] elementAccessors+=(ArrayIndexExpression |
	//	AttributeAccessorExpression)*;
	public ActionLanguageGrammarAccess.TypedNamedElementExpressionElements getTypedNamedElementExpressionAccess() {
		return gaActionLanguage.getTypedNamedElementExpressionAccess();
	}
	
	public ParserRule getTypedNamedElementExpressionRule() {
		return getTypedNamedElementExpressionAccess().getRule();
	}

	//ArrayIndexExpression returns actionlanguage::ArrayIndexExpression:
	//	"[" index=ArithmeticExpression "]";
	public ActionLanguageGrammarAccess.ArrayIndexExpressionElements getArrayIndexExpressionAccess() {
		return gaActionLanguage.getArrayIndexExpressionAccess();
	}
	
	public ParserRule getArrayIndexExpressionRule() {
		return getArrayIndexExpressionAccess().getRule();
	}

	//AttributeAccessorExpression returns actionlanguage::AttributeAccessorExpression:
	//	"." attribute=[types::Attribute];
	public ActionLanguageGrammarAccess.AttributeAccessorExpressionElements getAttributeAccessorExpressionAccess() {
		return gaActionLanguage.getAttributeAccessorExpressionAccess();
	}
	
	public ParserRule getAttributeAccessorExpressionRule() {
		return getAttributeAccessorExpressionAccess().getRule();
	}

	//NoAttributeSelectorExpression returns actionlanguage::DiscreteInteractionEndpointReference:
	//	position=PositionSelectorExpression;
	public ActionLanguageGrammarAccess.NoAttributeSelectorExpressionElements getNoAttributeSelectorExpressionAccess() {
		return gaActionLanguage.getNoAttributeSelectorExpressionAccess();
	}
	
	public ParserRule getNoAttributeSelectorExpressionRule() {
		return getNoAttributeSelectorExpressionAccess().getRule();
	}

	//PositionSelectorExpression returns actionlanguage::PositionSelector:
	//	kind=PositionSelectorKind ("->" successor=PositionSelectorExpression)?;
	public ActionLanguageGrammarAccess.PositionSelectorExpressionElements getPositionSelectorExpressionAccess() {
		return gaActionLanguage.getPositionSelectorExpressionAccess();
	}
	
	public ParserRule getPositionSelectorExpressionRule() {
		return getPositionSelectorExpressionAccess().getRule();
	}

	//enum PositionSelectorKind returns actionlanguage::PositionSelectorKind:
	//	SELF="self" | FIRST="first" | LAST="last" | PREV="prev" | NEXT="next";
	public ActionLanguageGrammarAccess.PositionSelectorKindElements getPositionSelectorKindAccess() {
		return gaActionLanguage.getPositionSelectorKindAccess();
	}
	
	public EnumRule getPositionSelectorKindRule() {
		return getPositionSelectorKindAccess().getRule();
	}

	//OperationCall returns actionlanguage::OperationCall:
	//	operation=[behavior::Operation] "(" (parameterBinding+=ParamaterBinding ("," parameterBinding+=ParamaterBinding)*)?
	//	")";
	public ActionLanguageGrammarAccess.OperationCallElements getOperationCallAccess() {
		return gaActionLanguage.getOperationCallAccess();
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//// TriggerMessageExpression
	//TriggerMessageExpression returns actionlanguage::TriggerMessageExpression:
	//	messageType=[msgtype::MessageType] "->" parameter=[behavior::Parameter];
	public ActionLanguageGrammarAccess.TriggerMessageExpressionElements getTriggerMessageExpressionAccess() {
		return gaActionLanguage.getTriggerMessageExpressionAccess();
	}
	
	public ParserRule getTriggerMessageExpressionRule() {
		return getTriggerMessageExpressionAccess().getRule();
	}

	//// end of TriggerMessageExpression
	//terminal NUMBER returns ecore::EBigDecimal:
	//	INT "." INT;
	public TerminalRule getNUMBERRule() {
		return gaActionLanguage.getNUMBERRule();
	} 

	//terminal BOOLEAN returns ecore::EBoolean:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return gaActionLanguage.getBOOLEANRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaActionLanguage.getIDRule();
	} 

	//DATATYPE returns ecore::EString:
	//	ID ("[" INT "]")*;
	public ActionLanguageGrammarAccess.DATATYPEElements getDATATYPEAccess() {
		return gaActionLanguage.getDATATYPEAccess();
	}
	
	public ParserRule getDATATYPERule() {
		return getDATATYPEAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaActionLanguage.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaActionLanguage.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaActionLanguage.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaActionLanguage.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaActionLanguage.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaActionLanguage.getANY_OTHERRule();
	} 
}
