testSpecificationName {

	nameProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLNameProvider';
	storageProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLStorageProvider';
	oclContext oclcontext::OCLContext;
	import 'http://www.muml.org/psm/allocation/language/oclcontext/1.0.0'

	
	context oclcontext::OCLContext
		def: getECUs(ecuNames : Set(String)) : Sequence(hardware::hwresourceinstance::ResourceInstance) =
			self.hardwarePlatformInstanceConfiguration.resources->select(ecuNames->includes(name) or ecuNames->isEmpty())
			
		def: getECU(ecuName : String) : hardware::hwresourceinstance::ResourceInstance =
			self.hardwarePlatformInstanceConfiguration.resources->any(name = ecuName)
			
		def: getInstance(instanceName : String) : pim::instance::ComponentInstance =
			self.componentInstanceConfiguration.componentInstances->any(name = instanceName)
		
		def: getInstances(instanceNames : Set(String)) : Set(pim::instance::ComponentInstance) =
			self.componentInstanceConfiguration.componentInstances->select(instanceNames->includes(name))
			
		def: allocateToDifferentECUs(instanceNames : Set(String))
			: Set(Tuple(first : pim::instance::ComponentInstance,
						second : pim::instance::ComponentInstance))
			=
			let instances : Set(pim::instance::ComponentInstance) = self.getInstances(instanceNames)
			in
			instances->product(instances)->reject(first = second)
			->iterate(it : Tuple(first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance); acc : Set(Tuple(first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance)) = Set{} |
				if acc->exists(Set{first, second} = Set{it.first, it.second}) then
					acc
				else
					acc->including(it)
				endif
			)
			

	constraint differentLocation foo {
		descriptors (first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance);
		ocl self.allocateToDifferentECUs(Set{'c1', 'c2', 'c3'});
	}
}