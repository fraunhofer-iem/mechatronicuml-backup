testSpecificationName {

	nameProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLNameProvider';
	storageProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLStorageProvider';
	oclContext oclcontext::OCLContext;
	import 'http://www.muml.org/psm/allocation/language/oclcontext/1.0.0'

	
	context hardware::hwplatforminstance::HWPlatformInstanceConfiguration
		def: getECUs(ecuNames : Set(String)) : Sequence(hardware::hwresourceinstance::ResourceInstance) =
			self.resources->select(ecuNames->includes(name))
		def: getECU(ecuName : String) : hardware::hwresourceinstance::ResourceInstance =
			self.resources->any(name = ecuName)
			
	context pim::instance::ComponentInstanceConfiguration
		def: getInstance(instanceName : String) : pim::instance::ComponentInstance =
			self.componentInstances->any(name = instanceName)
			

	constraint requiredHardwareResourceInstance foo {
		descriptors (ins : pim::instance::ComponentInstance, res : hardware::hwresourceinstance::ResourceInstance);
		ocl let c1 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.getInstance('c1')
		in
		let e1 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.getECU('e1')
		in
		let e2 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.getECU('e2')
		in
		Set{Tuple{ins : pim::instance::ComponentInstance = c1, res : hardware::hwresourceinstance::ResourceInstance = e1},
			Tuple{ins : pim::instance::ComponentInstance = c1, res : hardware::hwresourceinstance::ResourceInstance =e2}};
	}
}