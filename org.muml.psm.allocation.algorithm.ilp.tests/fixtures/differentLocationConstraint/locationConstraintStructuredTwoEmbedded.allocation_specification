testSpecificationName {

	nameProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLNameProvider';
	storageProvider 'org.muml.psm.allocation.language.xtext.provider.MUMLStorageProvider';
	oclContext oclcontext::OCLContext;
	import 'http://www.muml.org/psm/allocation/language/oclcontext/1.0.0'

	constraint differentLocation foo {
		descriptors (a : pim::instance::ComponentInstance, b : pim::instance::ComponentInstance);
		ocl let c1 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c1')
		in
		let c2 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c2')
		in
		Set{Tuple{a : pim::instance::ComponentInstance = c1, b : pim::instance::ComponentInstance = c2}};
	}
	
	constraint differentLocation sc1Embedded {
		descriptors (first : pim::instance::ComponentInstance, second : pim::instance::ComponentInstance);
		ocl let sc1 : pim::instance::StructuredComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='sc1').oclAsType(pim::instance::StructuredComponentInstance)
		in
		sc1.oclAsType(pim::instance::ComponentInstance)->asSet()->product(sc1.embeddedCIC.componentInstances)
		;
	}
}