testSpecificationName {
    service foo {
    	qos a {
    		weight coefficient;
    		descriptors (foo : pim::instance::ComponentInstance, bar : hardware::hwresourceinstance::ResourceInstance);
    		ocl	let c1 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c1')
			in
			let c2 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c2')
			in
			let c3 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c3')
			in
			let e1 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e1')
			in
			Set{Tuple{foo : pim::instance::ComponentInstance = c1, bar : hardware::hwresourceinstance::ResourceInstance = e1, coefficient = -1},
				Tuple{foo : pim::instance::ComponentInstance = c2, bar : hardware::hwresourceinstance::ResourceInstance = e1, coefficient = 42},
				Tuple{foo : pim::instance::ComponentInstance = c3, bar : hardware::hwresourceinstance::ResourceInstance = e1, coefficient = 4711}

            };
    	}
    	
    	qos b {
    		weight val;
    		descriptors (x : pim::instance::ComponentInstance, y : hardware::hwresourceinstance::ResourceInstance);
    		ocl let c1 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c1')
			in
			let c2 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c2')
			in
			let e1 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e1')
			in
			let e3 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e3')
			in
			Set{Tuple{x : pim::instance::ComponentInstance = c1, y : hardware::hwresourceinstance::ResourceInstance = e3, val = 80},
				Tuple{x : pim::instance::ComponentInstance = c1, y : hardware::hwresourceinstance::ResourceInstance = e1, val = 9},
				Tuple{x : pim::instance::ComponentInstance = c1, y : hardware::hwresourceinstance::ResourceInstance = e1, val = 8},
				Tuple{x : pim::instance::ComponentInstance = c2, y : hardware::hwresourceinstance::ResourceInstance = e3, val = 11}

            };
    	}
    }
    
    service foobar {
    	qos x {
    		weight val;
    		descriptors (a : pim::instance::ComponentInstance, b : hardware::hwresourceinstance::ResourceInstance), (c : pim::instance::ComponentInstance, d : hardware::hwresourceinstance::ResourceInstance);
    		ocl let c1 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c1')
    		in
    		let c2 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c2')
			in
			let e2 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e2')
			in
			let e3 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e3')
			in
			Set{Tuple{c = c2, d = e2, a = c1, b = e3, val = 7},
				Tuple{a = c1, c = c2, d = e3, b = e2, val = 8}
            }; 
    	}
    }
    
    service bar {
    	qos x {
    		weight val;
    		descriptors (x : pim::instance::ComponentInstance, y : hardware::hwresourceinstance::ResourceInstance);
    		ocl let c2 : pim::instance::ComponentInstance = self.componentInstanceConfiguration.componentInstances->any(name='c2')
			in
			let e2 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e2')
			in
			let e3 : hardware::hwresourceinstance::ResourceInstance = self.hardwarePlatformInstanceConfiguration.resources->any(name='e3')
			in
			Set{Tuple{x : pim::instance::ComponentInstance = c2, y : hardware::hwresourceinstance::ResourceInstance = e3, val = 0},
				Tuple{x : pim::instance::ComponentInstance = c2, y : hardware::hwresourceinstance::ResourceInstance = e2, val = 7}
            }; 
    	}
    }
    
    max measure foo + bar;
}
