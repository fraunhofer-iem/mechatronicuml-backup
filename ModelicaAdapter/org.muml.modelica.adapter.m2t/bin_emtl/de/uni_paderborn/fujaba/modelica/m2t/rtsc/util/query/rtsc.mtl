[module rtsc('http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')/]

[**
 * Returns an ordered set of all substatecharts.
 * It basically returns a forest which is constructed as follows:
 * selectSubstatecharts(rtsc) {
 *   do
 *	   - select an arbitrary state "s" (which embeds regions)
 *     - for rtsc in sortedByRegionPrioDESC(s)
 *       - store rtsc
 *       - selectSubStatecharts(rtsc)
 *   while (there exists an unselected state);
 * }
 * Long story short: sort descending by region prio
 * and then depth-first preorder (according to the ocl spec)
 * @param rtsc the root rtsc
*/]
[query public allSubstatecharts(rtsc : RealtimeStatechart) : OrderedSet(RealtimeStatechart) =
	rtsc->asOrderedSet()->closure(r : RealtimeStatechart |
		r.states->collect(
			embeddedRegions
		)->collect(embeddedStatechart)->sortedBy(
			-parentRegion.priority
		)
	)
/]

[**
 * Returns an ordered set of all substatecharts.
 * Basically it returns a forest (if we would also append OrderedSet{rtsc}
 * it would be a tree) where each tree is represented in post order.
 * The i-th element of the returned list represents the nodes at
 * level size() - i + 1 (where 1 <= i <= size()).
 * @param rtsc the root rtsc
*/]
[query public allSubstatechartsPostOrder(rtsc : RealtimeStatechart) : OrderedSet(OrderedSet(RealtimeStatechart)) =
	let leaves : OrderedSet(OrderedSet(RealtimeStatechart)) =
		-- calculate leave nodes
		OrderedSet{rtsc.allSubstatecharts()->select(states->forAll(embeddedRegions->isEmpty()))->asOrderedSet()}
	in
	leaves->closure(level : OrderedSet(RealtimeStatechart) |
		-- we can also do the whole computation without the intermediate
		-- candidates set but this way it is probably easier to understand.
		-- calculate candidates for the level at depth i-1 using the nodes from
		-- the level at depth i
		let candidates : OrderedSet(RealtimeStatechart) =
			level->select(embedded)->collect(
				parentRegion.parentState.parentStatechart
			)->asOrderedSet()
		in
		OrderedSet{
			-- collect the parent statecharts of all candidates
			let parents : OrderedSet(RealtimeStatechart) =
				candidates->collect(r : RealtimeStatechart | r.allParentStatecharts())->asOrderedSet()
			in
			-- if a candidate rtsc appears in the parents list it will
			-- be considered in a later phase 
			candidates->select(r : RealtimeStatechart |
				not parents->includes(r)
			)
		}
	)->prepend(leaves->at(1))->select(notEmpty())
/]

[**
 * Returns true if the rtsc is a port statechart.
 * @param rtsc the rtsc
*/]
[query public isPortRTSC(rtsc : RealtimeStatechart) : Boolean =
	not rtsc.parentRegion.oclIsUndefined()
	and rtsc.parentRegion.oclAsType(RegionInstance).embedsSinglePortStatechart
/]

[**
 * Returns true if the rtsc is a multiport statechart.
 * @param rtsc the rtsc
*/]
[query public isMultiPortRTSC(rtsc : RealtimeStatechart) : Boolean =
	not rtsc.parentRegion.oclIsUndefined()
	and rtsc.parentRegion.oclAsType(RegionInstance).embedsMultiPortStatechart
/]

[**
 * Returns true if the rtsc is a component statechart.
 * @param rtsc the rtsc
*/]
[query public isComponentRTSC(rtsc : RealtimeStatechart) : Boolean =
	not rtsc.embedded
/]

[**
 * Returns a set of parent statecharts which (directly or indirectly)
 * embed the passed statechart rtsc. rtsc is not part of the returned set.
 * @param rtsc the (embedded) rtsc
*/]
[query private allParentStatecharts(rtsc : RealtimeStatechart) : Set(RealtimeStatechart) =
	rtsc->asSet()->closure(r : RealtimeStatechart |
		if r.embedded then
			r.parentRegion.parentState.parentStatechart
		else
			r
		endif
	)
/]

[**
 * Returns the port statechart which (directly or indirectly) embeds
 * the statechart rtsc.
 * @param rtsc the (embedded) rtsc
*/]
[query public getParentPortStatechart(rtsc : RealtimeStatechart) : RealtimeStatechart =
	-- isPortRTSC() should be true for exactly one rtsc
	rtsc.allParentStatecharts()->union(Set(RealtimeStatechart){rtsc})->any(isPortRTSC())
/]

[**
 * Returns a set of exit points for the state.
 * @param state the state
*/]
[query public getExitPoints(state : State) : Set(ExitPoint) =
	state.connectionPoints->select(oclIsKindOf(ExitPoint))
/]

[**
 * Returns a set of entry points for the state.
 * @param state the state
*/]
[query public getEntryPoints(state : State) : Set(EntryPoint) =
	state.connectionPoints->select(oclIsKindOf(EntryPoint))
		->collect(oclAsType(EntryPoint))->asSet()
/]

[**
 * Returns a set of entry points for the state.
 * @param state the state
*/]
[query public getEntryPoints(rtsc : RealtimeStatechart) : Set(EntryPoint) =
	if rtsc.embedded then
		rtsc.parentRegion.parentState.getEntryPoints()
	else
		Set{}
	endif
/]

[**
 * Returns all transitions leading from entrypoints to a state
 * which is contained in the passed rtsc.
 * @param rtsc the rtsc
*/]
[query public getRelevantEntryPointTransitions(rtsc : RealtimeStatechart) : OrderedSet(Transition) =
	-- note: the order might vary between different executions (of the transformation)
	-- (it will stay the same between different invocations because acceleo evaluates
	-- the query only once)
	rtsc.getEntryPoints()->sortedBy(name)->collect(entryPoint : EntryPoint |
		entryPoint.getRelevantEntryPointTransitions(rtsc)
	)->asOrderedSet()
/]

[**
 * Returns all transitions leading from the passed entry point to a state
 * which is contained in the passed rtsc.
 * @param rtsc the rtsc
*/]
[query public getRelevantEntryPointTransitions(entryPoint : EntryPoint, rtsc : RealtimeStatechart) : OrderedSet(Transition) =
	entryPoint.outgoingTransitions->select(
		rtsc.states->includes(
			if target.oclIsKindOf(EntryPoint) then
				target.oclAsType(EntryPoint).state
			else
				target
			endif
		)
	)->asOrderedSet()
/]

[**
 * Returns true if the rtsc's parent state contains an entry point
 * @param rtsc the (embedded) rtsc
*/]
[query public isEnterable(rtsc : RealtimeStatechart) : Boolean =
	rtsc.embedded and rtsc.parentRegion.parentState.getEntryPoints()->notEmpty()
/]
