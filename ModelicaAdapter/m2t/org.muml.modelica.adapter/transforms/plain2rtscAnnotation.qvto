import transforms.naming;
import transforms.AnnotationBase;

modeltype DOT uses dot("http://www.muml.org/graphviz/dot/1.0.0");
modeltype PLAIN uses plain("http://www.muml.org/graphviz/plain/1.0.0");
modeltype UTIL uses util("http://www.muml.org/graphviz/util/1.0.0");
modeltype COMMON uses common("http://www.muml.org/graphviz/common/1.0.0");
modeltype RTSC uses muml::realtimestatechart("http://www.muml.org/pim/1.0.0");
modeltype CORE uses core("http://www.muml.org/core/1.0.0");
modeltype ECORE uses ecore("http://www.eclipse.org/emf/2002/Ecore");

// XXX: rtscModel unused
transformation plain2rtscAnnotation(inout rtscModel : RTSC, in dotModel : DOT, in plainModel : PLAIN)
	access Naming extends AnnotationBase;
	// extend from AnnotationBase in order to override helpers like Node::getPosition with a more
	// specific PlainNode::getPosition 

property WIDTH : Real = 0;
property HEIGHT : Real = 0;

property RTSC_SCALE : String = "scale";
property RTSC_WIDTH : String = "width";
property RTSC_HEIGHT : String = "height";

property TRANSITION_POLY_SOURCE : String = "source_points";
property TRANSITION_POLY_TARGET : String = "target_points";

property POLY_MESSAGE_DELEGATION : String = "message_delegation_points";
property POLY_MAILBOX_DELEGATION : String = "mailbox_delegation_points";

property ROOT_RTSC : RealtimeStatechart = null;
	

main() {
    log("transformation " + this.toString() + " started");
	// log(rtscModel.objects()[RealtimeStatechart]->any(true).resolve()->size().toString());
	// rtscModel.objects()[RealtimeStatechart]->map createContainer();
 	var plainGraphs : Set(PlainGraph) := plainModel.rootObjects()[PlainGraph]; 
 	assert fatal (plainGraphs->size() = 1) with log("expected exactly one PlainGraph (got: " + plainGraphs->size().toString() + ")");
 	plainGraphs->any(true).layout();
 	plainModel.objects()[PlainNode]->forEach(pNode) {
 		pNode.layout();
 	};
 	log("edges: " + plainModel.objects()[PlainEdge]->size().toString());
 	plainModel.objects()[PlainEdge]->forEach(pEdge) {
 		pEdge.layout();
 	};
    log("transformation " + this.toString() + " finished");
}

helper PlainGraph::layout() {
	dotModel.objects()[DotGraph]->select(parentGraph.oclIsUndefined())->any(true).invresolveone(RealtimeStatechart).annotate(self);
}

helper RealtimeStatechart::annotate(pGraph : PlainGraph) {
	this.ROOT_RTSC := self;
	log("rtsc annotate: " + self.name);
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	this.WIDTH := pGraph.width;
	this.HEIGHT := pGraph.height;
	ann.map addDetail(RTSC_SCALE, inchToMM(pGraph.scale));
	ann.map addDetail(RTSC_WIDTH, inchToMM(xTrans(pGraph.width)));
	ann.map addDetail(RTSC_HEIGHT, inchToMM(yTrans(pGraph.height)));
}

helper PlainEdge::layout() {
	var gSource : Node := self.source.getGNode();
	var gTarget : Node := self.target.getGNode();
	assert fatal (gSource != null) with log("source graphviz node not found");
	assert fatal (gTarget != null) with log("target graphviz node not found");
	var gSourceInv : OclAny := gSource.invresolveone();
	var gTargetInv : OclAny := gTarget.invresolveone();
	var gEdge : Edge := getGEdge(gSource, gTarget);
	assert fatal (gEdge != null) with log("graphviz edge not found: " + gSourceInv.toString() + " -> " + gTargetInv.toString());
	if (gSourceInv.oclIsKindOf(State) or gTargetInv.oclIsKindOf(State)) then {
		log("OK XXX" + gSourceInv.toString() + " # " + gTargetInv.toString());
		var gEdgeInv : Transition := gEdge.invresolveone(Transition);
		var ann : EAnnotation := gEdgeInv.annotate(self, getTransitionAnnotationKind(gSourceInv, gTargetInv));
		if (gTargetInv.oclIsKindOf(Transition)) then {
			ann.addNodeDetails(self.target);
		} endif;
		assert fatal (gEdgeInv != null) with log("no rtsc transition for graphviz edge")
	} else {
		if (gSourceInv.oclIsKindOf(AsynchronousMessageEvent) and gTargetInv.oclIsKindOf(AsynchronousMessageEvent)) then {
			gSourceInv.oclAsType(AsynchronousMessageEvent).annotate(self);
		} endif;
	} endif;
	//return graphvizModel.objects()[Edge]->select()
}

query getTransitionAnnotationKind(source : OclAny, target : OclAny) : String {
	return if (source.oclIsKindOf(State)) then
		TRANSITION_POLY_SOURCE
	else
		 TRANSITION_POLY_TARGET
	endif;
}

helper Transition::annotate(pEdge : PlainEdge, kind : String) : EAnnotation {
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	ann.addTransitionDetails(pEdge, kind);
	return ann;
}

helper AsynchronousMessageEvent::annotate(pEdge : PlainEdge) {
	var ann : EAnnotation := this.ROOT_RTSC.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	if (self.kind = EventKind::RAISE) then {
		ann.addTransitionDetails(pEdge, self.getMessageName() + '_' + POLY_MESSAGE_DELEGATION);
	} else {
		ann.addTransitionDetails(pEdge, self.getMailboxName() + '_' + POLY_MAILBOX_DELEGATION);
	} endif;
}

// this mapping is also called for a transition but ignored
mapping inout OclAny::annotate(pNode : Node)
	disjuncts State::annotate, AsynchronousMessageEvent::annotate;
	
mapping inout State::annotate(pNode : PlainNode) {
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	ann.addNodeDetails(pNode);
}

mapping inout AsynchronousMessageEvent::annotate(pNode : PlainNode) {
	log("annontate async");
	var ann : EAnnotation := this.ROOT_RTSC.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	ann.addNodeDetails(pNode, pNode.name + '_');
}

query getNodeSet() : Set(DotNode) {
	return dotModel.objects()[DotNode];
}

query getEdgeSet() : Set(DotEdge) {
	return dotModel.objects()[DotEdge];
}

helper PlainEdge::getPoints() : OrderedSet(Point) {
	return self.splinePoints;
}

helper PlainNode::getPosition() : Point {
	return self.position;
}

helper PlainNode::getWidth() : Real {
	return self.width;
}

helper PlainNode::getHeight() : Real {
	return self.height;
}