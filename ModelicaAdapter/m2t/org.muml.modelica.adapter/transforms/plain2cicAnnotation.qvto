import transforms.naming;
import transforms.AnnotationBase;

modeltype GRAPHVIZ uses dot("http://www.muml.org/graphviz/dot/1.0.0");
modeltype PLAIN uses common("http://www.muml.org/graphviz/common/1.0.0");
modeltype INSTANCE uses pim::instance("http://www.muml.org/pim/1.0.0");
modeltype CORE uses core("http://www.muml.org/core/1.0.0");
modeltype ECORE uses ecore("http://www.eclipse.org/emf/2002/Ecore");

transformation plain2rtscAnnotation(inout instanceModel : INSTANCE, in graphvizModel : GRAPHVIZ, in plainModel : PLAIN)
	access Naming, AnnotationBase;

property WIDTH : Real = 0;
property HEIGHT : Real = 0;

property RTSC_SCALE : String = "scale";
property RTSC_WIDTH : String = "width";
property RTSC_HEIGHT : String = "height";

property TRANSITION_POLY_SOURCE : String = "source_points";
property TRANSITION_POLY_TARGET : String = "target_points";

main() {
    log("transformation " + this.toString() + " started");
   // log(rtscModel.objects()[RealtimeStatechart]->any(true).resolve()->size().toString());
 //   rtscModel.objects()[RealtimeStatechart]->map createContainer();
 	assert fatal (plainModel.objects()[PLAIN::Graph]->size() = 1) with log("ERR");
 	plainModel.objects()[PLAIN::Graph]->any(true).layout();
 	plainModel.objects()[PLAIN::Edge]->layout();
 	plainModel.objects()[PLAIN::Node]->layout();
 	log("edges: " + plainModel.objects()[PLAIN::Edge]->size().toString());
    log("transformation " + this.toString() + " finished");
}

helper PLAIN::Graph::layout() {
	//graphvizModel.objects()[Graph]->select(parentGraph.oclIsUndefined())->any(true).invresolveone(RealtimeStatechart).annotate(self);
}

/* helper RealtimeStatechart::annotate(pGraph : PLAIN::Graph) {
	this.ROOT_RTSC := self;
	log("rtsc annotate: " + self.name);
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	this.WIDTH := pGraph.width;
	this.HEIGHT := pGraph.height;
	ann.map addDetail(RTSC_SCALE, inchToMM(pGraph.scale));
	ann.map addDetail(RTSC_WIDTH, inchToMM(xTrans(pGraph.width)));
	ann.map addDetail(RTSC_HEIGHT, inchToMM(yTrans(pGraph.height)));
}*/

helper PLAIN::Edge::layout() {
	var gSource : Node := self.source.getGNode();
	var gTarget : Node := self.target.getGNode();
	assert fatal (gSource != null) with log("source graphviz node not found");
	assert fatal (gTarget != null) with log("target graphviz node not found");
	var gSourceInv : OclAny := gSource.invresolveone();
	var gTargetInv : OclAny := gTarget.invresolveone();
	var gEdge : Edge := getGEdge(gSource, gTarget);
	assert fatal (gEdge != null) with log("graphviz edge not found: " + gSourceInv.toString() + " -> " + gTargetInv.toString());
	var gEdgeInv : PortConnectorInstance := gEdge.invresolveone(PortConnectorInstance);
	var ann : EAnnotation := gEdgeInv.annotate(self, getTransitionAnnotationKind(gSourceInv, gTargetInv));
	if (gTargetInv.oclIsKindOf(PortConnectorInstance)) then {
		ann.addNodeDetails(self.target);
	} endif;
	assert fatal (gEdgeInv != null) with log("no rtsc transition for graphviz edge")
	//return graphvizModel.objects()[Edge]->select()
}

query getTransitionAnnotationKind(source : OclAny, target : OclAny) : String {
	return TRANSITION_POLY_SOURCE
}

helper PortConnectorInstance::annotate(pEdge : PLAIN::Edge, kind : String) : EAnnotation {
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	ann.addTransitionDetails(pEdge, kind);
	return ann;
}

// this mapping is also called for a transition but ignored
mapping inout OclAny::annotate(pNode : PLAIN::Node)
	disjuncts PortInstance::annotate;
	
mapping inout PortInstance::annotate(pNode : PLAIN::Node) {
	var ann : EAnnotation := self.map getOrCreateAnnotation(ANNOTATION_SOURCE);
	ann.addNodeDetails(pNode);
}

query getNodeSet() : Set(Node) {
	return graphvizModel.objects()[Node];
}

query getEdgeSet() : Set(Edge) {
	return graphvizModel.objects()[Edge];
}