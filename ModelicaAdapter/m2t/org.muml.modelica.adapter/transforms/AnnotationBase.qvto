import transforms.naming;

modeltype DOT uses dot("http://www.muml.org/graphviz/dot/1.0.0");
modeltype COMMON uses common("http://www.muml.org/graphviz/common/1.0.0");
modeltype UTIL uses util("http://www.muml.org/graphviz/util/1.0.0");
modeltype CORE uses core("http://www.muml.org/core/1.0.0");
modeltype ECORE uses ecore("http://www.eclipse.org/emf/2002/Ecore");
modeltype transform uses transform("http://www.muml.de/modelica/transform/1.0.0");

library AnnotationBase access Naming;

property ABSTRACT_MSG : String = "this has to be implemented in a different library/transformation";

property WIDTH : Real = 0;
property HEIGHT : Real = 0;

property INCH_MM : Real = 25.4;

property ANNOTATION_SOURCE : String = "MODELICA_CODEGEN";

property NODE_X_LEFT : String = "xleft";
property NODE_Y_LEFT : String = "yleft";
property NODE_X_RIGHT : String = "xright";
property NODE_Y_RIGHT = "yright";

helper Node::layout() {
	//log("layouting: " + self.name);
	var gNode : Node := self.getGNode();
	assert fatal (gNode != null) with log("no graphviz node found for node " + self.name);
	assert fatal (gNode.invresolve()->size() = 1) with log("ERRX");
	var res : OclAny := gNode.invresolveone();
	//log(res.toString());
	assert fatal (res != null) with log("no match in rtsc model for graphviz node " + gNode.name);
	res.map annotate(self);
	//return null;
}

helper Edge::layout() {
	assert fatal (false) with log(ABSTRACT_MSG);
}

helper getGEdge(gSource : Node, gTarget : Node) : Edge {
	log("get edge for: " + gSource.name + " -> " + gTarget.name);
	var edges : Set(Edge) := getEdgeSet()->select(source = gSource and target = gTarget);
	assert fatal (edges->size() = 1) with log("unexpected edges size");
	return edges->any(true);
}

query getEdgeSet() : Set(Edge) {
	assert fatal (false) with log(ABSTRACT_MSG);
	return Set{}; // never reached
}

helper EAnnotation::addTransitionDetails(pEdge : Edge, kind : String) {
	var points : String := '';
	pEdge.getPoints()->forEach(p) {
		log(p.toString());
		points := points + ', ' + '{' + inchToMM(xTrans(p.x)) + ',' + inchToMM(yTrans(p.y)) + '}';
	};
	self.map addDetail(kind, points.substring(2, points.length()));
}

helper Edge::getPoints() : OrderedSet(Point) {
	assert fatal (false) with log(ABSTRACT_MSG);
	return OrderedSet{};
}

// this mapping is also called for a transition but ignored
mapping inout OclAny::annotate(pNode : Node) {
	assert fatal (false) with log("implement me");
}

query Node::getGNode() : Node {
	return getNodeSet()->select(name = self.name.replaceAll('"', ''))->any(true);
}

query getNodeSet() : Set(Node) {
	assert fatal (false) with log(ABSTRACT_MSG);
	return Set{}; // never reached
}

mapping inout ExtendableElement::getOrCreateAnnotation(src : String) : PositionExtension {
	init {
		result := self.extensions->selectByKind(PositionExtension)->any(true);
	}
	if (not self.extensions->includes(result)) then {
		self.extensions := self.extensions->union(Set{result});
	} endif;
	result.source := src;
}

helper EAnnotation::addNodeDetails(pNode : Node) {
	self.addNodeDetails(pNode, '');
}

helper EAnnotation::addNodeDetails(pNode : Node, prefix : String) {
	self.map addDetail(prefix + NODE_X_LEFT, inchToMM(xTrans(pNode.getPosition().x - pNode.getWidth() * 0.5)));
	self.map addDetail(prefix + NODE_X_RIGHT, inchToMM(xTrans(pNode.getPosition().x + pNode.getWidth() * 0.5)));
	self.map addDetail(prefix + NODE_Y_LEFT, inchToMM(yTrans(pNode.getPosition().y - pNode.getHeight() * 0.5)));
	self.map addDetail(prefix + NODE_Y_RIGHT, inchToMM(yTrans(pNode.getPosition().y + pNode.getHeight() * 0.5)));
}

helper Node::getPosition() : Point {
	assert fatal (false) with log(ABSTRACT_MSG);
	return null;
}

helper Node::getWidth() : Real {
	assert fatal (false) with log(ABSTRACT_MSG);
	return 0;
}

helper Node::getHeight() : Real {
	assert fatal (false) with log(ABSTRACT_MSG);
	return 0;
}

mapping inout EAnnotation::addDetail(key : String, val : String) {
	self.details += new EStringToStringMapEntry(key, val);
}

constructor EStringToStringMapEntry::EStringToStringMapEntry(key : String, val : String) {
	result.key := key;
	result.value := val;
}

query xTrans(val : Real) : Real {
	log("xTrans: " + this.WIDTH.toString());
	return val - (this.WIDTH * 0.5);
}

query yTrans(val : Real) : Real {
	return val - (this.HEIGHT * 0.5);
}

query inchToMM(inch : Real) : String {
	return _inchToMM(inch).toString();
}

query _inchToMM(inch : Real) : Real {
	return inch * INCH_MM;
}