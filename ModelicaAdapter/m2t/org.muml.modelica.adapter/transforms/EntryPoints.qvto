import transforms.naming;
import transforms.util;

modeltype MINSTANCE uses modelinstance('http://www.muml.org/core/modelinstance/1.0.0');
modeltype RTSC uses muml::realtimestatechart("http://www.fujaba.de/muml/0.4.0");
modeltype MSGTYPE uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype BEHAVIOR uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype TYPES uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype COREEXP uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype CORE uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype ACTION uses actionlanguage('http://www.fujaba.de/muml/actionlanguage/0.4.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TRANSFORM uses transform('http://www.fujaba.de/modelica/m2t/transform/0.4.0');

library EntryPoints
	access Naming extends Util; // extends is only used due to a qvto bug, which is fixed in luna
	
property INIT : String = "generatedInitState";
property OUT : String = "generatedOutputState";
property EXITVAR : String = "ExitVar";

helper RealtimeStatechart::translateEntryPoints() {
	self.embeddedStatecharts()->collect(states)->select(connectionPoints->notEmpty())
		->collect(connectionPoints)[EntryPoint]->translateEntryPoint();
	self.embeddedStatecharts()->collect(states)->map removeEntryPoints();
	return;
}

mapping inout State::removeEntryPoints()
	when {self.connectionPoints[EntryPoint]->notEmpty()}
{
	//var exitVar : Variable := self.map createExitableVariable();
	//createEntryExitableAssignment(self, exitVar, "false");
	//createExitExitableAssignment(self, exitVar, "true");
	self.connectionPoints[EntryPoint]->forEach(ep) {
		createExitAssignment(self, ep.resolveoneIn(EntryPoint::createVariable, Variable), "false");
	};
	self.outgoingTransitions->map fixupOutgoingTransition(self.getOrCreateStateExitVariable(self.parentStatechart), self.embeddedRegions->size());
	self.connectionPoints := self.connectionPoints->reject(cp : StateConnectionPoint | cp.oclIsKindOf(EntryPoint));
}

mapping inout Transition::fixupOutgoingTransition(exitVariable : Variable, rNum : Integer) {
	var expression : Expression := new ComparisonExpression(exitVariable, rNum.toString());
	if (not self.guard.oclIsUndefined()) then {
		expression := new LogicalExpression(expression, self.guard);
	} endif;
	self.guard := expression;
}

helper Set(EntryPoint)::conjunctEPVariables() : Expression {
	var l : OrderedSet(UnaryExpression) := self->getNegatedVariableExpressions();
	assert fatal (l->notEmpty()) with log("illegal createGuard call (entryPointSet is empty)");
	return while (res : Expression := l->at(1); l->notEmpty()) {
		var cur : UnaryExpression := l->at(1);
		l := l->excluding(cur)->asOrderedSet();
		if (res <> cur) then {
			res := new LogicalExpression(res, cur);
		} endif;
	}
}

helper Set(EntryPoint)::getNegatedVariableExpressions() : OrderedSet(UnaryExpression) {
	return self->collect(ep : EntryPoint |
		new UnaryExpression(new TypedNamedElementExpression(
			ep.resolveoneIn(EntryPoint::createVariable, Variable)
		))
	)->asOrderedSet();
}

helper EntryPoint::translateEntryPoint() {
	var variable : Variable := self.map createVariable();
	self.translateIncomingTransitions(variable);
	self.translateOutgoingTransitions(variable);
	//self.state.embeddedRegions->forEach(r) {
	//	var state : State := self.getOrCreateInitState(r);
	//};
	return;
}

mapping inout Transition::changeSource(source : State) {
	self.source := source;
}

helper resetVariables(inout state : State) {
	state.entryEvent := object EntryEvent {
		action := object Action {
			expressions := object Block {
				expressions := state.connectionPoints[EntryPoint]->map createAssignment();
			};
		};
	};
	return;
}

mapping EntryPoint::createAssignment() : Assignment {
	assignOperator := AssignOperator::ASSIGN;
	lhs_typedNamedElementExpression := object TypedNamedElementExpression {
		typedNamedElement := self.late resolveone(Variable);
	};
	rhs_assignExpression := new LiteralExpression("false");
}

helper EntryPoint::translateIncomingTransitions(variable : Variable) {
	self.incomingTransitions->map translateIncomingTransition(variable);
	return;
}

mapping inout Transition::translateIncomingTransition(variable : Variable) {
	self.target := self.target.oclAsType(EntryPoint).state;
	self.action := object Action {
		expressions := object Block {
			expressions := new Assignment(variable, "true");
		};
	};
}

helper EntryPoint::translateOutgoingTransitions(variable : Variable) {
	self.outgoingTransitions->translateOutgoingTransition(variable);
	return;
}

helper Transition::translateOutgoingTransition(variable : Variable) {
	var source : EntryPoint := self.source.oclAsType(EntryPoint);
	// FIXME: target might be a StateConnectionPoint
	var target : State := self.target.getTarget();
	var exitVariable : Variable := source.state.getOrCreateStateExitVariable(source.state.parentStatechart);
	var initState : State := getOrCreateInitState(exitVariable, target.parentStatechart);
	//createEntryEPAssignment(initState, epVar, cepVar);
	changeTransition(self, initState, target, variable,
		source.getTransitionPriority(), true);
	return;
}

/*helper createEntryEPAssignment(state : State, epVar : Variable, cepVar : Variable) {
	var block : Block := getOrCreateEntryBlock(state);
	block.expressions += new Assignment(cepVar, epVar);
	return;
}*/

helper createEntryAssignment(state : State, variable : Variable, value : String) {
	var block : Block := getOrCreateEntryBlock(state);
	block.expressions += new Assignment(variable, value);
	return;
}

helper createExitAssignment(state : State, variable : Variable, value : String) {
	var block : Block := getOrCreateExitBlock(state);
	block.expressions += new Assignment(variable, value);
	return;
}

query EntryPoint::getTransitionPriority() : Integer {
	return self.state.connectionPoints[EntryPoint]->indexOf(self) + 1;
}

helper changeTransition(inout transition : Transition, source : State, inout target : State, variable : Variable, priority : Integer, condition : Boolean) {
	//var transition : Transition := new Transition(source, target, priority);
	transition.priority := priority;
	assert fatal (transition.guard.oclIsUndefined()) with log("guard must not be set");
	transition.source := source;
	transition.guard := new ComparisonExpression(variable, if condition then 'true' else 'false' endif);
	//source.parentStatechart.transitions += transition;
	// XXX: does self work here?
	//source.parentStatechart.transitions := source.parentStatechart.transitions->reject(t : Transition | t = self);
	//target.incomingTransitions := target.incomingTransitions->reject(t : Transition | t = self);
	return;
}


query Vertex::getTarget() : State {
	return if self.oclIsKindOf(StateConnectionPoint) then
		-- XXX: (only valid for entry points)
		self.oclAsType(StateConnectionPoint).state
	else
		self.oclAsType(State)
	endif;
}

helper getOrCreateInitState(exitVariable : Variable, inout rtsc : RealtimeStatechart) : State {
	var state : State := rtsc.resolveoneIn(RealtimeStatechart::createInitState, State);
	if (state.oclIsUndefined()) then {
		var oldInit : State := rtsc.states->select(initial)->any(true);
		oldInit.initial := false;
		log("states: " + rtsc.states->size().toString());
		state := rtsc.map createInitState(exitVariable);
		rtsc.transitions += new Transition(state, oldInit, 1);
		log("states: " + rtsc.states->size().toString());
	} endif;
	return state;
}

mapping inout RealtimeStatechart::createInitState(exitVariable : Variable) : State {
	name := INIT;
	initial := true;
	self.states += result;
	getOrCreateEntryBlock(result).expressions += new Assignment(exitVariable, '0');
	getOrCreateExitBlock(result).expressions += new Assignment(exitVariable, new ArithmeticExpression(
		new TypedNamedElementExpression(exitVariable), new LiteralExpression('1')));
}

query RealtimeStatechart::getInitName() : String {
	return INIT;
}


helper State::getOrCreateStateExitVariable(rtsc : RealtimeStatechart) : Variable {
	var variable : Variable := self.resolveoneIn(State::createExitVariable, Variable);
	if (variable.oclIsUndefined()) then {
		variable := self.map createExitVariable();
	} endif;
	return variable;
}

mapping State::createExitVariable() : Variable {
	init {
		result := createVariable(self.parentStatechart, self.getExitVariableVariableName(), self.getDataType(INT));
	}
}

mapping inout EntryPoint::createVariable() : Variable {
	init {
		log("get: " + self.getDataType(BOOL).toString());
		result := createVariable(self.state.parentStatechart, self.getVariableName(), self.getDataType(BOOL));
	}
}

/*mapping inout EntryPoint::createCEPVariable() : Variable {
	init {
		result := createVariable(self.state.parentStatechart, self.getCVariableName(), self.getBooleanType());
	}
}*/

/*mapping inout State::createExitableVariable() : Variable {
	init {
		result := createVariable(self.parentStatechart, self.getExitableVariableName(), self.getBooleanType());
	}
}*/

query EntryPoint::getCVariableName() : String {
	return self.getVariableName() + 'Copy';
}

query State::getExitVariableVariableName() : String {
	return self.name.replaceAll(' ', '_') + EXITVAR;
}