import transforms.naming;
import transforms.util;
import transforms.GraphvizBase;

modeltype DOT uses dot("http://www.muml.org/graphviz/dot/1.0.0");
modeltype INSTANCE uses muml::instance("http://www.muml.org/pim/1.0.0");
modeltype COMPONENT uses muml::component("http://www.muml.org/pim/1.0.0");
modeltype MSGTYPE uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype ECORE uses ecore('http://www.eclipse.org/emf/2002/Ecore');

transformation cic2graphviz(in instanceModel : INSTANCE, out dotModel : DOT)
	access Naming, Util extends GraphvizBase;

main() {
	// for testing
	//var cicSet : Set(ComponentInstanceConfiguration) :=  instanceModel.objects()[ComponentInstanceConfiguration]->select(name = 'OvertakerVehicle');
	var cicSet : Set(ComponentInstanceConfiguration) := instanceModel.rootObjects()[ComponentInstanceConfiguration];
	var size : Integer := cicSet->size();
	assert fatal (size = 1) with log("unexpected cicSet size: " + size.toString());
	cicSet->map cic2graphviz();
	// remove orphans (like "removed" settings)
	// TODO: kill more orphans
	dotModel.removeOrphans();
}

helper DOT::removeOrphans() {
	self.getOrphans()->forEach(o) {
		self.removeElement(o);
	};
}

query DOT::getOrphans() : Set(Element) {
	return self.objects()->select(
		container().oclIsUndefined() and not oclIsKindOf(DotGraph)
	);
}

/*
	a component is represented by a subgraph
	the component's ports are represented as nodes in the subgraph
	the "main" graph just connects nodes from the subgraphs
*/
mapping ComponentInstanceConfiguration::cic2graphviz() : DotGraph
	inherits EObject::initialGraphSettings, EObject::initialNodeSettings, EObject::initialEdgeSettings
{
	if (not self.parentStructuredComponentInstance.oclIsUndefined()) then {
		nodes := self.parentStructuredComponentInstance.portInstances->map portInstance2node()->flatten();
	} endif;
	subgraphs := self.componentInstances->map componentInstance2graph();
	edges := self.portConnectorInstances->map connectorInstance2edges()->flatten();
	edgeSettings := OrderedSet{};
}

mapping ComponentInstanceConfiguration::structuredComponentInstancePortInstances2node() : Sequence(DotNode)
	when {not self.parentStructuredComponentInstance.oclIsUndefined()}
{
	self.parentStructuredComponentInstance.portInstances->map portInstance2node();
}

mapping ComponentInstance::componentInstance2graph() : DotGraph {
	id := self.getName();
	nodes := self.portInstances->map portInstance2node()->flatten();
}

mapping PortInstance::portInstance2node() : Sequence(DotNode)
	disjuncts PortInstance::contOrHybPortInstance2nodes, PortInstance::discretePortInstance2nodes;
	
mapping PortInstance::contOrHybPortInstance2nodes() : Sequence(DotNode)
	when {not self.portType.oclIsKindOf(DiscretePort)}
{
	init {
		result += self.map contOrHybPortInstance2node();
	}
}

mapping PortInstance::contOrHybPortInstance2node() : DotNode {
	// continuous or hybrid port
	name := self.getName();
}

mapping PortInstance::discretePortInstance2nodes() : Sequence(DotNode)
	when {self.portType.oclIsKindOf(DiscretePort)}
{
	init {
		result := self.portType.oclAsType(DiscretePort).receiverMessageTypes->inPortInstance2node(self);
		result += self.portType.oclAsType(DiscretePort).senderMessageTypes->outPortInstance2node(self);
	}
}

helper MessageType::inPortInstance2node(portInstance : PortInstance) : DotNode {
	return portInstance.map inPortInstance2node(self);
}

helper MessageType::outPortInstance2node(portInstance : PortInstance) : DotNode {
	return portInstance.map outPortInstance2node(self);
}

mapping PortInstance::inPortInstance2node(messageType : MessageType) : DotNode {
	init {
		result := new DotNode(self, messageType, 'inputDelegationPort');
	}
}

mapping PortInstance::outPortInstance2node(messageType : MessageType) : DotNode {
	init {
		result := new DotNode(self, messageType, 'outputDelegationPort');
	}
}

constructor DotNode::DotNode(portInstance : PortInstance, messageType : MessageType, suffix : String) {
	name := portInstance.getName() + '_' + messageType.getName() + '_' + suffix;
}

mapping DiscreteMultiPortInstance::portInstance2node() : Sequence(DotNode) {
	init {
		assert fatal (self.subInteractionEndpointInstances->select(not oclIsKindOf(DiscreteSinglePortInstance))->notEmpty()) with log("invalid multiport");
		result := self.subInteractionEndpointInstances->collect(
			oclAsType(DiscreteSinglePortInstance)
		)->map portInstance2node()->flatten();
	}
}

mapping PortConnectorInstance::connectorInstance2edges() : Sequence(DotEdge)
	disjuncts PortConnectorInstance::contOrHybConnectorInstance2edges, PortConnectorInstance::discreteConnectorInstance2edges;

mapping PortConnectorInstance::discreteConnectorInstance2edges() : Sequence(DotEdge)
	when {self.connectorEndpointInstances->forAll(oclAsType(PortInstance).portType.oclIsKindOf(DiscretePort))}
{
	init {
		var source : DiscretePortInstance := self.connectorEndpointInstances->at(1).oclAsType(DiscretePortInstance);
		var target : DiscretePortInstance := self.connectorEndpointInstances->at(2).oclAsType(DiscretePortInstance);
		result := source.portType.oclAsType(DiscretePort).receiverMessageTypes->createEdge(self, false)->flatten();
		result += source.portType.oclAsType(DiscretePort).senderMessageTypes->createEdge(self, true)->flatten();
	}
}


helper MessageType::createEdge(connectorInstance : PortConnectorInstance, isSourceSender : Boolean) : DotEdge {
	return connectorInstance.map discreteConnectorInstance2edge(self, isSourceSender);
}

mapping PortConnectorInstance::discreteConnectorInstance2edge(messageType : MessageType, isSourceSender : Boolean) : DotEdge {
	init {
		var sender : PortInstance := if isSourceSender then self.portInstances->at(1) else self.portInstances->at(2) endif;
		var receiver : PortInstance := if isSourceSender then self.portInstances->at(2) else self.portInstances->at(1) endif;
		result := new DotEdge(
			//sender.map outPortInstance2node(messageType),
			self.getSenderNode(sender, isSourceSender, messageType),
			self.getReceiverNode(receiver, isSourceSender, messageType)
		);
	}
}

query PortConnectorInstance::getSenderNode(sender : PortInstance, isSourceSender : Boolean, messageType : MessageType) : DotNode {
	return if self.oclIsKindOf(DelegationConnectorInstance) then
		if isSourceSender then
			sender.map outPortInstance2node(messageType)
		else
			sender.map inPortInstance2node(messageType)
		endif
	else
		sender.map outPortInstance2node(messageType)
	endif;
}

query PortConnectorInstance::getReceiverNode(receiver : PortInstance, isSourceSender : Boolean, messageType : MessageType) : DotNode {
	return if self.oclIsKindOf(DelegationConnectorInstance) then
		if isSourceSender then
			receiver.map outPortInstance2node(messageType)
		else
			receiver.map inPortInstance2node(messageType)
		endif
	else
		receiver.map inPortInstance2node(messageType)
	endif
}

mapping PortConnectorInstance::contOrHybConnectorInstance2edges() : Sequence(DotEdge)
	when {not self.connectorEndpointInstances->forAll(oclAsType(PortInstance).portType.oclIsKindOf(DiscretePort))}
{
	init {
		result += self.map contOrHybConnectorInstance2edge();
	}
}

// only needed to do an easier invresolve in dot2cicAnnotation.qvto
mapping PortConnectorInstance::contOrHybConnectorInstance2edge() : DotEdge {
	init {
		result := new DotEdge(
			self.portInstances->at(1).map contOrHybPortInstance2node(),
			self.portInstances->at(2).map contOrHybPortInstance2node()
		);
	}
}

constructor DotEdge::DotEdge(source : DotNode, target : DotNode) {
	result.source := source;
	result.target := target;
}