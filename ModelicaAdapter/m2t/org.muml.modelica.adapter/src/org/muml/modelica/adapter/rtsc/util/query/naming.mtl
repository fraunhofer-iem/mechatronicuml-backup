[module naming('http://www.muml.org/pim/behavior/1.0.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')/]

[import org::muml::modelica::adapter::rtsc::util::query::rtsc]

[**
 * Returns the relatively qualified name of the statechart rtsc. The
 * name is relative to the passed ref statechart. If rtsc = ref then
 * the empty string is returned
 * @param rtsc the realtimestatechart
 * @param ref the reference statechart (in case of null the fully qualified name is returned)
*/]
[query public getRelativelyQualifiedName(rtsc : RealtimeStatechart, ref : RealtimeStatechart) : String =
	if rtsc.embedded and rtsc <> ref then
		let name : String = rtsc.parentRegion.parentState.parentStatechart.getRelativelyQualifiedName(ref)
		in 
		if name <> '' then
			name + '.'
		else
			''
		endif + rtsc.parentRegion.parentState.getName() + '.' + rtsc.parentRegion.getRegionRealtimeStatechartName()
	else
		''
	endif
/]

[**
 * Returns the fully qualified name of the statechart rtsc. If the statechart
 * rtsc is not embedded the empty string is returned.
 * @param rtsc the realtimestatechart
*/]
[query public getFullyQualifiedName(rtsc : RealtimeStatechart) : String =
	rtsc.getRelativelyQualifiedName(null)
/]

[**
 * Returns the name for a region's statechart
 * @param region the region
*/]
[query public getRegionRealtimeStatechartName(region : Region) : String =
	'region_' + region.priority + '_' + region.embeddedStatechart.getName()
/]

[**
 * Calculates and returns the transition's name.
 * @param transition the transition
*/]
[query public getName(transition : Transition) : String =
	'transition_' + 
	if transition.source.oclIsKindOf(EntryPoint) then
		transition.statechart.getEntryPointDelegationStateName() + '_'
	else
		transition.source.getName() + '_' + transition.priority + '_'
	endif
	+
	if transition.target.oclIsKindOf(EntryPoint) then
		transition.target.oclAsType(EntryPoint).state.getName()
	else
		transition.target.getName()
	endif
/]

[**
 * Returns the fully qualified transition name. If the transition belongs
 * to the root statechart the plain transition name is returned.
 * @param transition the transition
*/]
[query public getFullyQualifiedName(transition : Transition) : String =
	if transition.statechart.embedded then
		transition.statechart.getFullyQualifiedName() + '.' + transition.getName()
	else
		transition.getName()
	endif
/]

[**
 * Returns the fully qualified state name. If the state's statechart
 * is not embedded the plain state name is returned.
 * @param state the state
*/]
[query public getFullyQualifiedName(state : realtimestatechart::State) : String =
	if state.parentStatechart.embedded then
		state.parentStatechart.getFullyQualifiedName() + '.' + state.getName()
	else
		state.getName()
	endif
/]

[**
 * Returns the name of a vertex.
 * @param vertex the vertex
*/]
[query public getName(vertex : Vertex) : String =
	if vertex.oclIsKindOf(EntryPoint) then
		'enp_' + vertex.oclAsType(NamedElement).getName()
	else if vertex.oclIsKindOf(ExitPoint) then
		'exp_' + vertex.oclAsType(NamedElement).getName()
	else
		vertex.oclAsType(NamedElement).getName()
	endif
	endif
/]

[**
 * Returns the name of the state's exit marker.
 * @param state the state
*/]
[query public getExitMarkerName(state : realtimestatechart::State) : String =
	state.getName() + 'ExitMarker'
/]

[**
 * Returns the fully qualified name of the state's exit marker. If
 * the state's statechart is not embedded the plain state's exit marker
 * name is returned.
 * @param state the sate
*/]
[query public getFullyQualifiedExitMarkerName(state : realtimestatechart::State) : String =
	if state.parentStatechart.embedded then
		state.parentStatechart.getFullyQualifiedName() + '.' + state.getExitMarkerName()
	else
		state.getExitMarkerName()
	endif
/]

[**
 * Returns the name of a entry point's delegation
 * state.
*/]
[query public getEntryPointDelegationStateName(rtsc : RealtimeStatechart) : String =
	getUniqueNameRec('DelegationState', 'suf', rtsc.states->collect(name)->asSet())
/]

[**
 * Returns an unique name (unique with respect to the names specified by
 * the names set).
 * @param name the desired name
 * @param suffix the suffix which is concated to name if name is not unique
 * @param names set of already used names
*/]
[query public getUniqueNameRec(name : String, suffix : String, names : Set(String)) : String =
	if names->includes(name) then
		getUniqueNameRec(name + suffix, suffix, names)
	else
		name
	endif
 /]

[**
 * Get the name of a trigger message event's mailbox
 * @param ev the AsynchronousMessageEvent
*/]
[query public getMailboxName(messageType : MessageType) : String =
	'mailbox_' + messageType.getName()
/]

[**
 * Get the name of a trigger message event's parameter variable.
 * @param param the parameter
 * @param messageType the message type which belongs to the trigger message event
*/]
[query public getTriggerMessageEventParameterVariableName(param : Parameter, messageType : MessageType) : String =
	messageType.getMailboxName() + '_' + param.getName()
/]

[**
 * Returns valid Modelica identifier name.
 * @param namedElement the named element
*/]
[query public getName(namedElement : NamedElement) : String =
	if Set{0..9}->collect(toString())->includes(namedElement.name.substring(1, 1)) then
		'_'
	else
		''
	endif + namedElement.name.replaceAll('\\W', '_')
/]

[**
 * Returns the model name of a rtsc.
 * @param rtsc the rtsc
*/]
[query public getModelName(rtsc : RealtimeStatechart) : String =
	rtsc.getName().toUpperFirst()
/]

[**
 * Returns the path of the rtsc model file.
 * @param rtsc the rtsc
 * @param parentPackage the name of the parent package
*/]
[query public getPath(rtsc : RealtimeStatechart, parentPackage : String) : String =
	rtsc.getModelName().getPath(parentPackage)
/]

[**
 * Returns the path of the model file.
 * @param modelName the name of the model element
 * @param parentPackage the name of the parent package
*/]
[query private getPath(modelName : String, parentPackage : String) : String =
	parentPackage.replaceAll('\\.', '/') + '/' + modelName + '/' + modelName + '.mo'
/]