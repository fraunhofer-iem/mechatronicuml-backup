[module queries('http://www.muml.org/pim/behavior/1.0.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')/]

[import org::muml::modelica::adapter::rtsc::util::query::annotation]
[import org::muml::modelica::adapter::rtsc::util::query::naming]
[import org::muml::modelica::adapter::rtsc::util::query::rtsc]
[import org::muml::modelica::adapter::rtsc::util::query::reporter]

[**
 * Creates an annotation for a transition declaration
 * @param transition the transition
*/]
[query public createTransitionDeclAnnotation(transition : Transition) : String =
	transition.createNodeDeclAnnotation()
/]

[**
 * Returns the transition Modelica type for a transition declaration.
 * @param transition the transition
*/]
[query public getModelicaTransitionTypeDecl(transition : Transition) : String =
	'RealTimeCoordinationLibrary.RealTimeCoordination.' +
	if transition.source = transition.target then
		'SelfTransition'
	else
		'Transition'
	endif
/]

[**
 * Creates an annotation for a connect statement which connects two
 * steps.
 * @param transition the transition
 * @param isPseudoSource if true it indicates that a transition from the pseudo node to the transition's target should be made
 */]
[query public createTransitionConnectAnnotation(transition : Transition, isPseudoSource : Boolean) : String =
	let points : String =
		if isPseudoSource then
			transition.getAnnotationDetail('MODELICA_CODEGEN', 'source_points')
		else
			transition.getAnnotationDetail('MODELICA_CODEGEN', 'target_points')
		endif
	in
	'annotation (Line(points={' + points + '}, color={0,0,0}, smooth=Smooth.None))'
/]

[**
 * Returns a set of all transitions which RECEIVE the passed syncChannel
 * @param ch the synchronization channel
 * @param transition the transition that receives the synchronization
*/]
[query public getSyncReceivingTransitions(ch : SynchronizationChannel, transition : Transition) : OrderedSet(Transition) =
	ch.getPossibleReceivingSendingStatecharts(transition.statechart)->collect(transitions)
	->select(
		not synchronization.oclIsUndefined() and synchronization.syncChannel.name = ch.name and synchronization.kind = SynchronizationKind::RECEIVE
	)->asOrderedSet()
/]

[**
 * Returns a set of all transitions which SEND the passed syncChannel
 * @param ch the synchronization channel
 * @param transition the transition that sends the synchronization or null
*/]
[query public getSyncSendingTransitions(ch : SynchronizationChannel, transition : Transition) : OrderedSet(Transition) =
	ch.getPossibleReceivingSendingStatecharts(if transition.oclIsUndefined() then null else transition.statechart endif)->collect(transitions)
	->select(
		not synchronization.oclIsUndefined() and synchronization.syncChannel.name = ch.name and synchronization.kind = SynchronizationKind::SEND
	)->asOrderedSet()
/]

[**
 * Returns a set of possible statecharts for sending/receiving
 * synchronizations
 * @param ch the synchronization channel
 * @param rtsc the rtsc which sends/receives the sychronization
*/]
[query private getPossibleReceivingSendingStatecharts(ch : SynchronizationChannel, rtsc : RealtimeStatechart) : OrderedSet(RealtimeStatechart) =
	ch.state.embeddedRegions->select(
		not OrderedSet{embeddedStatechart}->union(embeddedStatechart.allSubstatecharts())->includes(rtsc)
	)->collect(
		OrderedSet{embeddedStatechart}->union(embeddedStatechart.allSubstatecharts())
	)->asOrderedSet()
/]

[**
 * Returns the name of the state's outport.
 * @param state the state
*/]
[query public getOutPort(vertex : Vertex) : String =
	if vertex.oclIsKindOf(State) and vertex.oclAsType(State).simple then
		'outPort'
	else
		'suspend'
	endif
/]

[**
 * Returns all states from the statechart (and substatecharts).
 * The states are ordered by name.
 * @param rtsc the rtsc
*/]
[query private allStates(rtsc : RealtimeStatechart) : OrderedSet(State) =
	rtsc.states->union(rtsc.allSubstatecharts()->collect(states)->asSet())->sortedBy(name)
/]

[**
 * Returns all complex states from the statechart (and substatecharts).
 * @param rtsc the rtsc
*/]
[query private allComplexStates(rtsc : RealtimeStatechart) : OrderedSet(State) =
	rtsc.allStates()->select(not simple)
/]

[**
 * Returns all states which have synchronization channels
 * (this also includes states from "substatecharts").
 * @param rtsc the realtimestatechart
*/]
[query public allStatesWithSynchronizationChannels(rtsc : RealtimeStatechart) : OrderedSet(State) =
	rtsc.allComplexStates()->select(channels->notEmpty())
/]

[**
 * Calculates set of transition conditions where one of them has
 * to evaluate to true in order to leave a state via an exit point.
 * @param transitionSet the set of an exit point's incoming transitions
*/]
[query public getTransitionConditions(transitionSet : Set(Transition)) : Set(Set(Transition)) =
	let ref : Transition = transitionSet->any(true)
	in
	let mySet : Set(Transition) = transitionSet->select(ref.statechart = statechart)
	in
	let remainder : Set(Transition) = transitionSet - mySet
	in
	if remainder->isEmpty() then
		Set{mySet}
	else
		mySet->product(getTransitionConditions(remainder))->collectNested(Set{first}->union(second->flatten()))->asSet()
	endif
/]

[**
 * Returns the name of the transition's source node which
 * should be used in a connect equation.
 * @param transition the transition
*/]
[query public getSourceName(transition : Transition) : String =
	if transition.source.oclIsKindOf(ExitPoint) then
		transition.source.oclAsType(ExitPoint).state.getName()
	else
		transition.source.getName()
	endif
/]

[**
 * Returns the name of the transition's target node which
 * should be used in a connect equation.
 * @param transition the transition
*/]
[query public getTargetName(transition : Transition) : String =
	if transition.target.oclIsKindOf(EntryPoint) then
		transition.target.oclAsType(EntryPoint).state.getName()
	else
		transition.target.getName()
	endif
/]

[**
 * Returns the index of the transition's target state inPort.
 * @param transition the transition
*/]
[query public getInPortIndex(transition : Transition) : Integer =
	if transition.target.oclIsKindOf(EntryPoint) then
		let target : EntryPoint = transition.target.oclAsType(EntryPoint)
		in
		let entryPointSet : OrderedSet(EntryPoint) = target.state.getEntryPoints()->sortedBy(name)
		in
		target.state.incomingTransitions->size() + entryPointSet->collect(incomingTransitions)->indexOf(transition)
	else if transition.target.oclIsKindOf(ExitPoint) then
		1
	else
		transition.target.incomingTransitions->indexOf(transition)
	endif
	endif
/]

[**
 * Returns the index of the transition's source state outPort.
 * @param transition the transition
*/]
[query public getOutPortIndex(transition : Transition) : Integer =
	if transition.source.oclIsKindOf(EntryPoint) then
		(if transition.target.oclIsKindOf(EntryPoint) then
			transition.target.oclAsType(EntryPoint).state.parentStatechart
		 else
			transition.target.oclAsType(State).parentStatechart
		 endif
		).getRelevantEntryPointTransitions()->indexOf(transition)
	else if transition.source.oclIsKindOf(ExitPoint) then
		let exitPoint : ExitPoint = transition.source.oclAsType(ExitPoint)
		in
		let transitionSet : OrderedSet(Transition) = exitPoint.state.getExitPoints()
			->collect(outgoingTransitions)->asSet()->sortedBy(t : Transition |
				t.getFullyQualifiedName()
			)
		in
		transitionSet->indexOf(transition) + exitPoint.state.outgoingTransitions->size()
	else
		transition.source.outgoingTransitions->size() - transition.priority + 1
	endif
	endif
/]

[**
 * Reports an error in case of an unsupported transition action.
 * @param transition the transition
 * @param expression the transition action expression
 */]
[query public checkValidTransitionAction(transition : Transition, expression : Expression) : Boolean =
	if not expression.validDoEventEntryExitTransitionAction() then
		(transition.getFullyQualifiedName() + ': only component rtsc operations are supported in a transition action')
			->asSequence()->displayErrors()._not()
	else
		true
	endif
/]

[**
 * Reports an error in case of an unsupported transition guard.
 * @param transition the transition
 * @param expression the transition's guard expression
 */]
[query public checkValidTransitionGuard(transition : Transition, expression : Expression) : Boolean =
	let valid : Boolean
	=
	expression.allSubExpressions()->select(
		oclIsKindOf(OperationCall)
	)->collect(
		oclAsType(OperationCall)
	)->forAll(oc : OperationCall |
		let container : OclAny = oc.operation.eContainer()
		in
		container.oclIsKindOf(RealtimeStatechart) and
		container.oclAsType(RealtimeStatechart).operations->includes(oc.operation)
	)
	in
	if not valid then
		(transition.getFullyQualifiedName() + ': only operations of the transition\'s parent rtsc are supported in a transition action')
			->asSequence()->displayErrors()._not()
	else
		true
	endif
/]