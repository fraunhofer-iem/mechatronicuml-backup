[module queries('http://www.muml.org/pim/behavior/1.0.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.de/modelica/transform/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0')/]

[import org::muml::modelica::adapter::rtsc::util::query::annotation]
[import org::muml::modelica::adapter::rtsc::util::query::rtsc]
[import org::muml::modelica::adapter::rtsc::util::query::naming]
[import org::muml::modelica::adapter::rtsc::util::query::reporter]

[**
 * Creates an annotation for a state declaration
 * @param element the state
*/]
[query public createStateDeclAnnotation(element : ExtendableElement) : String =
	element.createNodeDeclAnnotation()
/]

[**
 * Creates an annotation for a region declaration
 * @TODO: implement me and do not return a hardcoded annotation
 * @param region the region
*/]
[query public createRegionDeclAnnotation(region : ExtendableElement) : String =
	'annotation(Placement(transformation(extent={{0,0},{30,30}})))'
/]

[**
 * Creates an annotation for the connection of the parallel step's
 * entry to the region.
 * @TODO: implement me and do not return a hardcoded annotation
 * @param region the region
*/]
[query public createRegionConnectAnnotation(region : ExtendableElement) : String =
	'annotation(Line(points={{0,0},{2,2}}, color={0,0,0},smooth=Smooth.None))'
/]

[**
 * Creates an annotation for the connection of the entry
 * and the initial step.
 * @TODO: implement me and do not return a hardcoded annotation
 * @param state the initial state
*/]
[query public createInitialStepConnectAnnotation(state : State) : String =
	'annotation(Line(points={{0,0},{2,2}}, color={0,0,0},smooth=Smooth.None))'
/]

[**
 * Returns the name of a complex state
 * @param state the complex state
*/]
[query public getComplexStateModelName(state : State) : String =
	'Complex_' + state.parentStatechart.getName() + '_' + state.getName()
/]

[**
 * Returns the path of the complex state's model file.
 * @param state the complex state
 * @param parentPackage the name of the parent package
*/]
[query public getPath(state : State, parentPackage : String) : String =
	let modelName : String = state.getComplexStateModelName()
	in
	parentPackage.replaceAll('\\.', '/') + '/' + modelName + '/' + modelName + '.mo'
/]

[**
 * Returns the initial state of the realtimestatechart
 * @param rtsc the realtimestatechart
*/]
[query public getInitialState(rtsc : RealtimeStatechart) : realtimestatechart::State =
	rtsc.states->select(s : realtimestatechart::State | s.initial)->at(1)
/]

[**
 * Returns the name of the invariant.
 * @param state the state to which the invariant (clock constraint) belongs to
 * @param clockConstraint the clock constraint
*/]
[query public getInvariantName(state : State, clockConstraint : ClockConstraint) : String =
	-- according to the techreport there is at most one invariant for a clock
	state.getName() + 'Invariant' + clockConstraint.clock.getName()
/]

[**
 * Returns the name of the corresponding modelica element for the
 * passed clock constraint/invariant.
 * @param clockConstraint the clock constraint
*/]
[query public getInvariantModelName(clockConstraint : ClockConstraint) : String =
	if clockConstraint.operator = ComparingOperator::LESS_OR_EQUAL then
		'RealTimeCoordinationLibrary.RealTimeCoordination.TimeElements.TimeInvariant.TimeInvariantLessOrEqual'
	else if clockConstraint.operator = ComparingOperator::LESS then
		'RealTimeCoordinationLibrary.RealTimeCoordination.TimeElements.TimeInvariant.TimeInvariantLess'
	else
		'ERROR: unexpected invariant operator'
	endif
	endif
/]

[**
 * Returns the nIn value for the passed state.
 * @param state the state
*/]
[query public getnInValue(state : State) : Integer =
	if state.initial and state.parentStatechart.embedded then
		if state.incomingTransitions->select(source.oclIsKindOf(EntryPoint))->notEmpty() then
			-- 0 because the delegation state already points to this state (because an entry point points to this state)
			0
		else
			-- 1 because we have to connect the parallel or delegation state with this state
			1
		endif
	else
		0
	endif + state.incomingTransitions->size() + state.getEntryPoints()->collect(incomingTransitions->size())->sum()
/]

[**
 * Returns the name for a do event's variable.
 * @param state the state which contains the do event
 * @param rtscSet ordered set of rtscs
*/]
[query private getUniqueDoEventVariableName(state : State, rtscSet : OrderedSet(RealtimeStatechart)) : String =
	let idx : Integer = rtscSet->indexOf(state.parentStatechart)
	in
	let predecessors : OrderedSet(RealtimeStatechart)
	=
	if idx = 1 then
		OrderedSet{}
	else
		rtscSet->subOrderedSet(1, idx - 1)
	endif
	in
	let names : Set(String) =
	predecessors->collect(states)->collect(s : realtimestatechart::State |
		getUniqueDoEventVariableName(s, predecessors)
	)->asSet()
	in
	getUniqueNameRec('doEvent_' + state.getFullyQualifiedName().replaceAll('\\.', '_'), '_doEvent', names)
/]

[**
 * Returns the name unique name for a do event's variable.
 * @param doEvent the do event
 * @param rtsc the (root) rtsc
*/]
[query public getVariableName(doEvent : DoEvent, rtsc : RealtimeStatechart) : String =
	let rtscSet : OrderedSet(RealtimeStatechart)
	=
	rtsc.allSubstatecharts()->including(rtsc)->sortedBy(getFullyQualifiedName())
	in
	let names : Set(String)
	=
	rtscSet->collect(allAvailableVariables)->collect(
		name
	)->union(
		rtscSet->collect(allAvailableOperations)->collect(name)
	)->asSet()
	in
	getUniqueNameRec(getUniqueDoEventVariableName(doEvent.eContainer().oclAsType(State), rtscSet), '_doEvent', names)
/]

[**
 * Returns true if the state resets clocks in an entry or exit
 * event
 * @param state the state
*/]
[query public hasClockResets(state : State) : Boolean =
	not state.entryEvent.oclIsUndefined() and state.entryEvent.clockResets->notEmpty()
	or not state.exitEvent.oclIsUndefined() and state.exitEvent.clockResets->notEmpty()
/]

[**
 * Reports an error in case of an unsupported entry, exit, doevent action
 * @param state the state
 * @param expression the expression
 */]
[query public checkValidEntryExitDoEventAction(state : State, expression : Expression) : Boolean =
	if not expression.validDoEventEntryExitTransitionAction() then
		(state.getFullyQualifiedName() + ': only component rtsc operations are supported in an entry, exit, or doevent action')
			->asSequence()->displayErrors()._not()
	else
		true
	endif
/]