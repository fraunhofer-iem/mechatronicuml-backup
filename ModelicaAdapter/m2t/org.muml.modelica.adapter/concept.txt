terminology:
- cic = component instance configuration
- ci = component instance
- rtsc = realtime statechart
- enterable rtsc/region: a region/rtsc which can be "entered" via an entry point

- main entry point: generateElement in generate.mtl
  * execute qvto transformation (RegionInstanceInstantiator)
  * select first cic from the "instance" model element category and call
    generateRootCIC

RegionInstantiation.qvto transformation
- returns a mapping which maps an atomic ci to its behavior
- selects the (unique) first state of the rtsc:
  * remove all regions which belong to a port rtsc
  * add a RegionInstance for each port instance
  * in case of a multiport instance repeat the steps above for the rtsc
    of the multiport (adds multiport.subInteractionEndpointInstances->size()
    many RegionInstances for a subport rtsc)
- fixup regions (that is replace all Regions with a RegionInstance (just for
  the sake of consistency))

- generateRootCIC in component.mtl
  * generates model for the toplevel cic
  * generate ci declarations
  * generate code for assemblies
  * generate model code (generateComponentInstance) for each ci in the cic

- generateComponentInstance in component.mtl
  * create a package for this ci
  * switch(ci) {
        case continous atomic ci:
            generate ports only
        case software atomic ci:
            generateRTSC
            generatePorts
            instantiate behavior
            connectPorts (connects the component ports with the rtsc ports)
        case structured ci:
            generatePartDeclarations
            generatePorts
            createAssemblies (between the parts)
            createDelegations (between the component ports and the parts'
                ports)
    }

- generateRTSC in rtsc/rtsc.mtl
  * createLayoutAnnotations
  * create a package for this rtsc
  * create rtsc model code (if the rtsc is no component rtsc the model extends
    Modelica_StateGraph2.PartialParallel)

general mappings in the rtsc generation:
State -> RealTimeCoordinationLibrary.Step
Transition -> RealTimeCoordinationLibrary.Transition

complex states:
- encapsulated in an own model which extends
  Modelica_StateGraph2.PartialParallel
- for each region a rtsc is instantiated
- generate a Modelica.Blocks.Interfaces.BooleanInput for each entry point
  * connect each entry point with the corresponding entry points of the regions
- exit points are considered in the region rtscs

enterable rtsc (entry points):
- generate a Modelica.Blocks.Interfaces.BooleanInput for each entry point
- create an additional step ("DelegationState") which acts as the "initial"
  state
- the DelegationState is connected to the "original" initial state of the rtsc
  and all states which can be reached via an entry point
- if the complex state was entered via an entry point the previously defined
  BooleanInput for this particular entry point is set to true and a transition
  to the "target" of the entry point is made
- if all BooleanInputs are set to false an transition to the "original" initial
  state is made

exit points (context: region rtsc):
- generate a Step for each exit point of the parentState's exit points
- a transition to an exit point (target = exit point) is simply translated as a
  transition to the corresponding Step (which was declared/generated in the
  previous step)

exit points (context: "outer" rtsc):
- a transition which originates from an exit point is translated as follows:
  * source: the complex state's suspend port
  * target: the original target
  * condition: getTransitionConditions in transition/queries.mtl
- a transition fires if one of the conditions evaluate to true
- problems: in case of multiple exit points each region rtsc can make a
  transition to a different exit point => the complex state is never left
  via an exit point => (potential) deadlock (XXX: does the techreport
  does not define the "special" transitions semantics we discussed orally
  some time ago)

- getTransitionConditions in transition/queries.mtl
  * input: the exit point's incomingTransitions {t_1, ..., t_n}
  * group these transitions into sets A_1, ..., A_r where r is the number of
    regions in the complex state to which the exit point belongs to
  * for all t_i, t_j in A_k it holds: t_i.statechart = t_j.statechart
    (that is we grouped all transitions which belong to the same statechart
    into one set)
  * return: A_1 x A_2 x ... x A_r (the cartesian product of these sets)

  the transition condition for a transition originating from an exit point
  can be calculated as follows:
  BIG_OR {(t^1, ..., t^r) in result} (t^1.target.name.active AND t^2.target.name.active AND ... AND t^r.target.name.active)
  (WTF: why do we do this so complicated? Isn't it sufficient to simply check
  if the exit point's Step is active in each region of the complex state?)

actions:
- all actions (entry, exit, do, transition) are defined in the component
  rtsc in order to obey to the single assignment rule
- each variable access is translated to a fully qualified variable name

hybrid ports:
- each hybrid port is translated to a variable
- additionally Modelica.Blocks.Interfaces.<DataType> block is added to
  the component rtsc (which is "connected" to/associated with the previously
  defined variable)

raise message events (context: "port rtsc"; rtsc/async/async.mtl):
- defined in a port rtsc
- for each messagetype which can be raised a
  RealTimeCoordinationLibrary.Message is generated
- for each parameter of the messagetype a so called "parameter binding
  variable" is created
- each parameter binding variable is "connected" with the previously
  generated Message
- the concrete value of a raise message event is bound to the parameter
  binding variable when the corresponding transition fires (XXX: this is
  done in the component rtsc in order to enforce a fixed execution order
  (first transition action then raise message event))

trigger message events (context: "port rtsc"; rtsc/async/async.mtl):
- defined in a port rtsc
- for each messagetype which can be received in the port rtsc a
  RealTimeCoordinationLibrary.Mailbox is generated
- for each parameter of the messagetype a parameter variable is created
- the parameter variable is bound to the Mailbox so that the received
  value can be used in a transition action/raise message event

RTSC layouting:
- execute rtsc layouter (rtsc/layout/RealtimeStatechartLayouter.java)
- uses graphviz for the layouting of the states, transitions, mailboxes
  and messages
- problems: cis aren't laid out, not all visual rtsc elements are laid
  out
