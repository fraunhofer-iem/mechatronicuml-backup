[module port_queries('http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')/]

[import de::uni_paderborn::fujaba::modelica::m2t::component::naming]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::async::queries]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::async::helper::queries]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::reporter]
[import de::uni_paderborn::fujaba::modelica::m2t::rtsc::util::query::annotation]

[**
 * Creates an annotation for a port instance declaration.
 * @TODO: implement me and do not return a hardcoded annotation
 * @param portInstance the port instance
*/]
[query public createPortDeclAnnotation(portInstance : DiscretePortInstance, messageType : MessageType, inPort : Boolean) : String =
	--let i : Integer = portInstance.componentInstance.portInstances->indexOf(portInstance)
	--in
	--let j : Integer = portInstance.receiverMessageTypes->union(portInstance.senderMessageTypes)->asOrderedSet()->indexOf(messageType)
	--in
	--'annotation(Placement(transformation(extent={{' + ((i-1)*35) + ',' + (j*20) + '},{' + ((i-1)*35 + 30) + ',' + ((j+1)*20) + '}})))'
	portInstance.createNodeDeclAnnotation(messageType.name + '_' + if inPort then 'inputDelegationPort' else 'outputDelegationPort' endif)
/]

[query public createPortDeclAnnotation(portInstance : ContinuousPortInstance) : String =
	-- XXX: are we going to layout hybrid ports, too?
	portInstance.createNodeDeclAnnotation('')
/]

[**
 * Returns the of the rtsc input port for the passed message type.
 * @param messageType the MessageType
*/]
[query public getRTSCInputPortName(portInstance : PortInstance, messageType : MessageType) : String =
	portInstance.getBehaviorVariableName() + '.' + portInstance.getInputPortName(messageType)
/]

[**
 * Returns the name of the rtsc output port for the passed message type.
 * @param messageType the MessageType
*/]
[query public getRTSCOutputPortName(portInstance : PortInstance, messageType : MessageType) : String =
	portInstance.getBehaviorVariableName() + '.' + portInstance.getOutputPortName(messageType)
/]

[**
 * Create port connect annotation.
 * @TODO: implement me!
 * @param portInstance a portInstance
]
[query public createPortConnectAnnotation(portInstance : PortInstance) : String =
	'annotation(Line(points={{0,0},{2,2}}, color={0,0,0},smooth=Smooth.None))'
/]

[**
 * Check if datatypes of the message type's parameters are valid.
 * For instance array data types cannot be transformed because
 * the RealtimeCoordinationLibrary does not support them.
 * @param portInstance the discrete port instance
*/]
[query public checkMessageTypesValidParameterDataTypes(messageTypeSet : OrderedSet(MessageType)) : Boolean =
	messageTypeSet->collect(parameters)->select(dataType.oclIsKindOf(ArrayDataType))->collect(
		'message type parameter "' + name + '" must not have an array datatype (type: '
		+ dataType.name + ')' 
	)->asSequence()->displayErrors()
/] 