[module type('http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/modelica/m2t/transform/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')/]


[**
 * Returns the primitive datatype of the given
 * ArrayDataType
 * @param type the array data type
*/]
[query private getPrimitiveType(type : ArrayDataType) : PrimitiveDataType =
	type.getIntermediateDataTypes()->select(oclIsKindOf(PrimitiveDataType))->any(true).oclAsType(PrimitiveDataType)
/]

[**
 * Returns the corresponding modelica type
 * @param type the data type
*/]
[query public getType(type : DataType) : String =
	if type.oclIsKindOf(ArrayDataType) then
		type.oclAsType(ArrayDataType).getPrimitiveType()._getType()
	else
		type._getType()
	endif
/]

[**
 * Returns an ordered set of all intermediate array data types
 * @param type the array data type
*/]
[query public getIntermediateArrayDataTypes(type : ArrayDataType) : OrderedSet(ArrayDataType) =
	type.getIntermediateDataTypes()->select(oclIsKindOf(ArrayDataType))
/]

[**
 * Returns an ordered set containing all intermediate data types
 * @param type the array data type
*/]
[query private getIntermediateDataTypes(type : ArrayDataType) : OrderedSet(DataType) =
	type->asOrderedSet()->union(
		type.oclAsType(DataType)->asSet()->closure(t |
			if t.oclIsKindOf(ArrayDataType) then
				t.oclAsType(ArrayDataType).type
			else
				t
			endif
		)
	)->asOrderedSet()
/]

[**
 * Returns the corresponding modelica type for the
 * given PrimitiveDataType
 * @param type the primitive data type
*/]
[query private _getType(type : DataType) : String =
	if type.name.contains('int')  then
		'Integer'
	else if type.name = 'double' then
		'Real'
	else if type.name = 'boolean' then
		'Boolean'
	else
		-- this might be incorrect
		type.name.toLower().toUpperFirst()
	endif
	endif
	endif
/]