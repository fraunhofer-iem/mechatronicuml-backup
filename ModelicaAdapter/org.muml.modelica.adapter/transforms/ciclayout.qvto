import transforms.cic2graphviz;
import transforms.dot2cicAnnotation;
import transforms.GraphvizDotLayouterTransformation;
import transforms.util;

modeltype DOT uses dot("http://www.fujaba.de/graphviz/dot/0.1.0");
modeltype PLAIN uses plain("http://www.fujaba.de/graphviz/plain/0.1.0");
modeltype INSTANCE uses muml::instance("http://www.fujaba.de/muml/0.4.0");

transformation ciclayout(inout cicModel : INSTANCE)
	access cic2graphviz, dot2cicAnnotation, Util;

main() {
	var dotInModel : DOT := DOT.createEmptyModel().oclAsType(DOT);
	var ret : Status := new cic2graphviz(cicModel, dotInModel).transform();
	assert fatal (ret.succeeded()) with log("cic2graphviz failed");
	log("nodes: " + dotInModel.objects()[DotNode]->size().toString());
	var dotOutModel : DOT := DOT.createEmptyModel().oclAsType(DOT);
	ret := new GraphvizDotLayouterTransformation(dotInModel, dotOutModel).transform();
	assert fatal (ret.succeeded()) with log("GraphvizDotLayouterTransformation failed");
	log("nodes (plain): " + dotOutModel.objects()[DotNode]->size().toString());
	ret := new dot2cicAnnotation(cicModel, dotInModel, dotOutModel).transform();
	assert fatal (ret.succeeded()) with log("dot2cicAnnotation failed");
	log("transformation " + this.toString() + " finished");
}
