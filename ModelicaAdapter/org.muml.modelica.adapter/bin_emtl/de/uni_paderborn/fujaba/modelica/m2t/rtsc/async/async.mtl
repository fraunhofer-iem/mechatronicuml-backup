[module async('http://www.fujaba.de/muml/realtimestatechart/0.4.0',
			  'http://www.fujaba.de/muml/behavior/0.4.0',
			  'http://www.fujaba.de/muml/msgtype/0.4.0',
			  'http://www.fujaba.de/modelica/m2t/transform/0.4.0')]

[import org::muml::modelica::adapter::rtsc::actionlanguage::expression]
[import org::muml::modelica::adapter::rtsc::async::helper::port]

[import org::muml::modelica::adapter::rtsc::async::queries]
[import org::muml::modelica::adapter::rtsc::async::helper::queries]
[import org::muml::modelica::adapter::rtsc::util::query::naming]
[import org::muml::modelica::adapter::rtsc::util::query::rtsc]

[**
 * Create raise message declarations.
 * @param rtsc the (port) realtime statechart
*/]
[template public createRaiseMessageEventDeclarations(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllRaiseMessageEvents();
}]
	// raise message event declarations
[for (ev : AsynchronousMessageEvent | events->getAsyncMessageEventRepr())]
	RealTimeCoordinationLibrary.RealTimeCoordination.Message [ev.getMessageName()/](
		[comment we probably cannot reuse messages... /]
		nIn=[ev.getAsyncMessageEventEquivalenceClass(events)->size() /],
		numberOfMessageIntegers=[ev.getIntegerParameterBindings()->size()/],
		numberOfMessageReals=[ev.getRealParameterBindings()->size()/],
		numberOfMessageBooleans=[ev.getBooleanParameterBindings()->size()/])
		[ev.createMessageDeclAnnotation(rtsc)/];
	[createOutputDelegationPortDecl(ev, rtsc)/]
	[for (pb : ParameterBinding | ev.message.parameterBinding)]
	[pb.getType()/] [pb.getRaiseMessageEventPBVariableName(ev)/];
	[pb.getExpressionTypeName()/] [pb.getExpressionTypeInstanceName(ev)/](y=pre([pb.getRaiseMessageEventPBVariableName(ev)/]));
	[/for]
[/for]
	// end raise message event declarations
[/template]

[**
 * Create a declaration for an output delegation port
 * @param ev the AsynchronousMessageEvent
 * @param rtsc the root realtime statechart
*/]
[template public createOutputDelegationPortDecl(ev : AsynchronousMessageEvent, rtsc : RealtimeStatechart)]
[createOutputDelegationPortDecl(ev.message.instanceOf, ev.message.instanceOf.getOutputDelegationPortName())/]
	[ev.createRaiseMessageEventOutputDelegationPortDeclAnnotation(rtsc)/];
[/template]

[**
 * Create raise message events.
 * @param rtsc the (port) realtime statechart
*/]
[template public createRaiseMessageEvents(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllRaiseMessageEvents(); 
}]
	// connect raise message events
[for (ev : AsynchronousMessageEvent | getAsyncMessageEventRepr(events))]
	[comment maybe split pb connects in a separate template (better readability) /]
	[for (pb : ParameterBinding | ev.getIntegerParameterBindings())]
	connect([pb.getExpressionTypeInstanceName(ev)/].y,
		[ev.getMessageName()/].u_integers['[' + ev.getIntegerParameterBindings()->indexOf(pb) + ']' /]);
	[/for]
	[for (pb : ParameterBinding | ev.getRealParameterBindings())]
	connect([pb.getExpressionTypeInstanceName(ev)/].y,
		[ev.getMessageName()/].u_reals['[' + ev.getRealParameterBindings()->indexOf(pb) + ']' /]);
	[/for]
	[for (pb : ParameterBinding | ev.getBooleanParameterBindings())]
	connect([pb.getExpressionTypeInstanceName(ev)/].y,
		[ev.getMessageName()/].u_booleans['[' + ev.getBooleanParameterBindings()->indexOf(pb) + ']' /]);
	[/for]
	connect([ev.getMessageName()/].message_output_port,
		[ev.getOutputDelegationPortName()/])
		[ev.createRaiseMessageEventOutputDelegationPortConnectAnnotation(rtsc)/];
	[let eq_class : OrderedSet(AsynchronousMessageEvent) = ev.getAsyncMessageEventEquivalenceClass(events)->asOrderedSet()]
	[for (event : AsynchronousMessageEvent | eq_class)]
	[comment do we have to order the events in order to reflect some transition priorities? /]
	connect([event.getTransition().getRelativelyQualifiedName(event.getParentPortStatechart())/].firePort,
		[event.getMessageName()/].conditionPort['[' + eq_class->indexOf(event) + ']'/]);
		[comment event.createRaiseMessageEventMessageConnectAnnotation() /]
	[/for]
	[/let]
[/for]
	// end connect raise message events
[/template]

[**
 * Assign the parameter binding variables for all raise message events.
 * @param rtsc the (root) realtime statechart
*/]
[template public raiseMessageEventsAssignPBVariables(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllRaiseMessageEvents();
}]
	// assign parameter binding variables
[for (ev : AsynchronousMessageEvent | events)]
	when [ev.getTransition().getFullyQualifiedName()/].fire then
	[for (pb : ParameterBinding | ev.message.parameterBinding)]
		[pb.getRaiseMessageEventPBVariableFullyQualifiedName(ev)/] := [pb.value.generateExpression(false, ev.getTransition().statechart.getFullyQualifiedName())/];
	[/for]
	end when;
[/for]
	// end assign parameter binding variables
[/template]

[**
 * Create declarations for a trigger message events
 * @param rtsc the (port) realtime statechart
*/]
[template public createTriggerMessageEventDeclarations(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllTriggerMessageEvents();
}]
	// trigger message event declarations
[for (ev : AsynchronousMessageEvent | events->getAsyncMessageEventRepr())]
	RealTimeCoordinationLibrary.RealTimeCoordination.Mailbox [ev.getMailboxName()/](
		[comment we have exactly one input delegation port /]
		nIn=1,
		nOut=[ev.getAsyncMessageEventEquivalenceClass(events)->size()/],
		numberOfMessageIntegers=[ev.getIntegerParameters()->size()/],
		numberOfMessageReals=[ev.getRealParameters()->size()/],
		numberOfMessageBooleans=[ev.getBooleanParameters()->size()/])
		[ev.createMailboxDeclAnnotation(rtsc)/];
	[createInputDelegationPortDecl(ev, rtsc)/]
	[for (param : Parameter | ev.message.instanceOf.parameters)]
	[param.getType()/] [param.getTriggerMessageEventParameterVariableName(ev.message.instanceOf)/];
	[/for]
[/for]
	// end trigger message event declarations
[/template]

[**
 * Create a declaration for an output delegation port
 * @param ev the AsynchronousMessageEvent
 * @param rtsc the root realtime statechart
*/]
[template public createInputDelegationPortDecl(ev : AsynchronousMessageEvent, rtsc : RealtimeStatechart)]
[createInputDelegationPortDecl(ev.message.instanceOf, ev.message.instanceOf.getInputDelegationPortName())/]
	[ev.createInputDelegationPortDeclAnnotation(rtsc)/];
[/template]

[**
 * Create the trigger message event connections
 * @param rtsc the (port) realtime statechart
*/]
[template public createTriggerMessageEvents(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllTriggerMessageEvents();
}]
	// connect trigger message events
[for (ev : AsynchronousMessageEvent | events->getAsyncMessageEventRepr())]
	connect([ev.getMailboxName()/].mailbox_input_port['[1]'/],
		[ev.getInputDelegationPortName()/])
		[ev.createInputDelegationPortConnectAnnotation(rtsc)/];
	[let eq_class : OrderedSet(AsynchronousMessageEvent) = ev.getAsyncMessageEventEquivalenceClass(events)->asOrderedSet()]
	[for (event : AsynchronousMessageEvent | eq_class)]
	connect([event.getMailboxName()/].mailbox_output_port['[' + eq_class->indexOf(event) + ']'/],
		[event.getTransition().getRelativelyQualifiedName(event.getParentPortStatechart())/].transition_input_port['[1]'/]);
	[/for]
	[/let]
[/for]
	// end connect trigger message events
[/template]

[**
 * Assign the parameter variables for all trigger message events
 * @param rtsc the component realtime statechart
*/]
[template public triggerMessageEventsAssignParameterVariables(rtsc : RealtimeStatechart) {
	events : Set(AsynchronousMessageEvent) = rtsc.getAllTriggerMessageEvents();
}]
	// assign trigger message parameter bindings to the corresponding parameter binding variables
[for (ev : AsynchronousMessageEvent | events)]
	when [ev.getTransition().getFullyQualifiedName()/].fire then
	[let integerParameters : OrderedSet(Parameter) = ev.getIntegerParameters()]
	[for (param : Parameter | integerParameters)]
		[param.getTriggerMessageEventParameterVariableFullyQualifiedName(ev)/] := [ev.getTransition().getFullyQualifiedName()/].transition_input_port['[1]'/].integers['[' + integerParameters->indexOf(param) + ']'/];
	[/for][/let]
	[let realParameters : OrderedSet(Parameter) = ev.getRealParameters()]
	[for (param : Parameter | realParameters)]
		[param.getTriggerMessageEventParameterVariableFullyQualifiedName(ev)/] := [ev.getTransition().getFullyQualifiedName()/].transition_input_port['[1]'/].reals['[' + realParameters->indexOf(param) + ']'/];
	[/for][/let]
	[let booleanParameters : OrderedSet(Parameter) = ev.getBooleanParameters()]
	[for (param : Parameter | booleanParameters)]
		[param.getTriggerMessageEventParameterVariableFullyQualifiedName(ev)/] := [ev.getTransition().getFullyQualifiedName()/].transition_input_port['[1]'/].booleans['[' + booleanParameters->indexOf(param) + ']'/];
	[/for][/let]
	end when;
[/for]
	// end trigger message parameter bindings to the corresponding parameter binding variables
[/template]

[**
 * Create delegation port declarations for all raise message
 * events which can be sent by the regionInstance's embedded
 * statechart.
 * @param regionInstance the region instance
*/]
[template private createSingleOutputPortDeclaration(regionInstance : RegionInstance) ? (
	regionInstance.embeddedStatechart.getAllRaiseMessageEvents()->getAsyncMessageEventRepr()->notEmpty()
)]
	// raise message event delegation port declarations for region [regionInstance.name/]
[for (ev : AsynchronousMessageEvent | regionInstance.embeddedStatechart.getAllRaiseMessageEvents()->getAsyncMessageEventRepr())]
	[createOutputDelegationPortDecl(ev.message.instanceOf, ev.getOutputDelegationPortName(regionInstance))/]
		[createPortDeclMultiCompAnnotation(ev)/];
[/for]
	// end raise message event delegation port declarations for region [regionInstance.name/]
[/template]

[**
 * Create delegation port declarations for all trigger message
 * events which can be received by the regionInstance's embedded
 * statechart.
 * @param regionInstance the region instance
*/]
[template private createSingleInputPortDeclaration(regionInstance : RegionInstance) ? (
	regionInstance.embeddedStatechart.getAllTriggerMessageEvents()->getAsyncMessageEventRepr()->notEmpty()
)]
	// trigger message event delegation port declarations for region [regionInstance.name/]
[for (ev : AsynchronousMessageEvent | regionInstance.embeddedStatechart.getAllTriggerMessageEvents()->getAsyncMessageEventRepr())]
	[createInputDelegationPortDecl(ev.message.instanceOf, ev.getInputDelegationPortName(regionInstance))/]
		[createPortDeclMultiCompAnnotation(ev)/];
[/for]
	// end trigger message event delegation port declarations for region [regionInstance.name/]
[/template]

[**
 * Create delegation port declarations for a component or
 * multiport rtsc.
 * @param rtsc the component or multiport rtsc
*/]
[template public createPortDeclarations(rtsc : RealtimeStatechart) ? (rtsc.isComponentRTSC() or rtsc.isMultiPortRTSC())]
[createPortDeclarationsRecursive(rtsc)/]
[/template]

[**
 * Create delegation port declarations for a component or multiport rtsc
 * (max recursion depth: 2)
 * @param rtsc the component or multiport rtsc
*/]
[template public createPortDeclarationsRecursive(rtsc : RealtimeStatechart) ? (rtsc.isComponentRTSC() or rtsc.isMultiPortRTSC()) {
	regionInstanceSet : Set(RegionInstance) = rtsc.states->any(true).embeddedRegions->select(
		oclAsType(RegionInstance).embedsSinglePortStatechart or oclAsType(RegionInstance).embedsMultiPortStatechart
	)->collect(oclAsType(RegionInstance))->asSet();
}]
[for (regionInstance : RegionInstance | regionInstanceSet)]
[if regionInstance.embedsSinglePortStatechart]
[createSingleInputPortDeclaration(regionInstance)/]
[createSingleOutputPortDeclaration(regionInstance)/][elseif regionInstance.embedsMultiPortStatechart]
[createPortDeclarationsRecursive(regionInstance.embeddedStatechart)/]
[/if]
[/for]
[/template]

[**
 * Connect the raise message event output ports of the component or multiport rtsc
 * with the corresponding ports of the regionInstance's embedded singleport rtsc.
 * @param regionInstance the region instance which embeds the single port rtsc
*/]
[template private connectOutputPorts(regionInstance : RegionInstance) ? (regionInstance.embedsSinglePortStatechart)]
	// raise message event port delegations for region [regionInstance.name/]
[for (ev : AsynchronousMessageEvent | regionInstance.embeddedStatechart.getAllRaiseMessageEvents()->getAsyncMessageEventRepr())]
	connect([ev.getOutputDelegationPortName(regionInstance)/],
		[regionInstance.parentState.getName() + '.' + regionInstance.getRegionRealtimeStatechartName() + '.' + ev.getOutputDelegationPortName()/]);
[/for]
	// end raise message event port delegations for region [regionInstance.name/]
[/template]

[**
 * Connect the raise message event output ports of the component rtsc
 * with the corresponding ports of the regionInstance's embedded multiport rtsc.
 * @param regionInstance the region instance which embeds the multiport rtsc
*/]
[template private connectOutputPorts(regionInstance : RegionInstance) ? (regionInstance.embedsMultiPortStatechart)]
[for (r : RegionInstance | regionInstance.embeddedStatechart.states->any(true).embeddedRegions->select(oclAsType(RegionInstance).embedsSinglePortStatechart)->collect(oclAsType(RegionInstance))->asSet())]
	// raise message event multiport delegations (target singleport rtsc: [r.name/])
[for (ev : AsynchronousMessageEvent | r.embeddedStatechart.getAllRaiseMessageEvents()->getAsyncMessageEventRepr())]
	connect([ev.getOutputDelegationPortName(r)/],
		[regionInstance.parentState.getName() + '.' + regionInstance.getRegionRealtimeStatechartName() + '.' + ev.getOutputDelegationPortName(r)/]);
[/for]
	// end raise message event multiport delegations (target singleport rtsc: [r.name/])
[/for]
[/template]

[**
 * Connect the trigger message event input ports of the component or multiport rtsc
 * with the corresponding ports of the regionInstance's embedded singleport rtsc.
 * @param regionInstance the region instance which embeds the single port rtsc
*/]
[template private connectInputPorts(regionInstance : RegionInstance) ? (regionInstance.embedsSinglePortStatechart)]
	// trigger message event port delegations for region [regionInstance.name/]
[for (ev : AsynchronousMessageEvent | regionInstance.embeddedStatechart.getAllTriggerMessageEvents()->getAsyncMessageEventRepr())]
	connect([regionInstance.parentState.getName() + '.' + regionInstance.getRegionRealtimeStatechartName() + '.' + ev.getInputDelegationPortName()/],
		[ev.getInputDelegationPortName(regionInstance)/]);
[/for]
	// end trigger message event port delegations for region [regionInstance.name/]
[/template]

[**
 * Connect the trigger message event input ports of the component rtsc
 * with the corresponding ports of the regionInstance's embedded multiport rtsc.
 * @param regionInstance the region instance which embeds the multiport rtsc
*/]
[template private connectInputPorts(regionInstance : RegionInstance) ? (regionInstance.embedsMultiPortStatechart)]
[for (r : RegionInstance | regionInstance.embeddedStatechart.states->any(true).embeddedRegions->select(oclAsType(RegionInstance).embedsSinglePortStatechart)->collect(oclAsType(RegionInstance))->asSet())]
	// trigger message event multiport delegations (target singleport rtsc: [r.name/])
[for (ev : AsynchronousMessageEvent | r.embeddedStatechart.getAllTriggerMessageEvents()->getAsyncMessageEventRepr())]
	connect([ev.getInputDelegationPortName(r)/],
		[regionInstance.parentState.getName() + '.' + regionInstance.getRegionRealtimeStatechartName() + '.' + ev.getInputDelegationPortName(r)/]);
[/for]
	// end trigger message event multiport delegations (target singleport rtsc: [r.name/])
[/for]
[/template]

[**
 * Connect the asynchronous message event ports of
 * a) a component rtsc with the corresponding ports of the single or multiport rtsc
 * b) a multiport rtsc with the corresponding ports of the singleport rtsc
 * @param rtsc the component or multiport rtsc
*/]
[template public connectPorts(rtsc : RealtimeStatechart) ? (rtsc.isComponentRTSC() or rtsc.isMultiPortRTSC()) {
	regionInstanceSet : Set(RegionInstance) = rtsc.states->any(true).embeddedRegions->collect(
		oclAsType(RegionInstance)
	)->select(
		embedsSinglePortStatechart or embedsMultiPortStatechart
	)->asSet();
}]
[for (regionInstance : RegionInstance | regionInstanceSet)]
[connectInputPorts(regionInstance)/]
[connectOutputPorts(regionInstance)/]
[/for]
[/template]