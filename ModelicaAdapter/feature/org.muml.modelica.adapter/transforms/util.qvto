import transforms.naming;


modeltype MUMLCORE uses core('http://www.muml.org/core/1.0.0');
modeltype MINSTANCE uses modelinstance('http://www.muml.org/modelinstance/1.0.0');
modeltype RTSC uses pim::realtimestatechart("http://www.muml.org/pim/1.0.0");
modeltype MSGTYPE uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype BEHAVIOR uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype TYPES uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype COREEXP uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype CORE uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype ACTION uses actionlanguage('http://www.muml.org/pim/actionlanguage/1.0.0');
modeltype ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype TRANSFORM uses transform('http://www.muml.de/modelica/transform/1.0.0');

library Util
	access Naming;
	
property KEY : String = "org.muml.types.category";
property BOOL : String = "boolean";
property INT : String = "int32";
property INIT : String = "generatedInitState";
property OUT : String = "generatedOutputState";
property EXITVAR : String = "ExitVar";

constructor LogicalExpression::LogicalExpression(left : Expression, right : Expression) {
	operator := LogicOperator::AND;
	leftExpression := left;
	rightExpression := right;
}

constructor UnaryExpression::UnaryExpression(expression : Expression) {
	operator := UnaryOperator::NOT;
	enclosedExpression := expression;
}

constructor ArithmeticExpression::ArithmeticExpression(left : Expression, right : Expression) {
	operator := ArithmeticOperator::PLUS;
	leftExpression := left;
	rightExpression := right;
}

constructor ArithmeticExpression::ArithmeticExpression(left : Expression, right : Expression, op : ArithmeticOperator) {
	operator := op;
	leftExpression := left;
	rightExpression := right;
}

constructor State::State(name : String, initial : Boolean) {
	result.name := name;
	result.initial := initial;
}

helper getOrCreateEntryOrExitEventBlock(inout event : EntryOrExitEvent) : Block {
	if (event.action.oclIsUndefined()) then {
		event.action := object Action{};
	} endif;
	if (event.action.expressions->isEmpty()) then {
		event.action.expressions := OrderedSet{object Block{}};
	} endif;
	if (not event.action.expressions->at(1).oclIsKindOf(Block)) then {
		event.action.expressions := createListWithFirstExpression(object Block{}, event.action.expressions);
	} endif;
	return event.action.expressions->at(1).oclAsType(Block);
}

helper getOrCreateEntryBlock(inout state : State) : Block {
	if (state.entryEvent.oclIsUndefined()) then {
		state.entryEvent := object EntryEvent{};
	} endif;
	return getOrCreateEntryOrExitEventBlock(state.entryEvent);
}

helper getOrCreateExitBlock(inout state : State) : Block {
	if (state.exitEvent.oclIsUndefined()) then {
		state.exitEvent := object ExitEvent{};
	} endif;
	return getOrCreateEntryOrExitEventBlock(state.exitEvent);
}

query createListWithFirstExpression(expression : Expression, expressionList : OrderedSet(Expression)) : OrderedSet(Expression) {
	return expression->asOrderedSet()->union(expressionList)->asOrderedSet();
}

constructor ComparisonExpression::ComparisonExpression(variable : Variable, value : String) {
	operator := ComparingOperator::EQUAL;
	leftExpression := new TypedNamedElementExpression(variable);
	rightExpression := new LiteralExpression(value);
}

constructor TypedNamedElementExpression::TypedNamedElementExpression(typedNamedElement : TypedNamedElement) {
	result.typedNamedElement := typedNamedElement;
}

constructor LiteralExpression::LiteralExpression(value : String) {
	result.value := value;
}

constructor Transition::Transition(source : State, target : State, priority : Integer) {
	result.source := source;
	result.target := target;
	result.priority := priority;
}

constructor Assignment::Assignment(variable : Variable, value : String) {
	assignOperator := AssignOperator::ASSIGN;
	lhs_typedNamedElementExpression := new TypedNamedElementExpression(variable);
	rhs_assignExpression := new LiteralExpression(value);
}

constructor Assignment::Assignment(lhs : Variable, rhs : Variable) {
	assignOperator := AssignOperator::ASSIGN;
	lhs_typedNamedElementExpression := new TypedNamedElementExpression(lhs);
	rhs_assignExpression := new TypedNamedElementExpression(rhs);
}

constructor Assignment::Assignment(lhs : Variable, rhs : Expression) {
	assignOperator := AssignOperator::ASSIGN;
	lhs_typedNamedElementExpression := new TypedNamedElementExpression(lhs);
	rhs_assignExpression := rhs;
}

helper createVariable(inout rtsc : RealtimeStatechart, name : String, type : DataType) : Variable {
	log("creating: " + name);
	var variable : Variable := new Variable(name, type);
	rtsc.variables += variable;
	return variable;
}

constructor Variable::Variable(name : String, type : DataType) {
	//assert fatal (not type.oclIsUndefined()) with log("type cannot be undefined");
	result.name := name;
	result.dataType := type;
}

query EObject::getDataType(type : String) : DataType {
	var root : RootNode := self->asSet()->closure(e : EObject |
		if e.oclIsKindOf(Entry) then
			-- gross hack
			e.oclAsType(Entry).key
		else
			if e.oclIsKindOf(RootNode) then
				e
			else
				e.eContainer()
			endif
		endif
	)->any(oclIsKindOf(RootNode)).oclAsType(RootNode);
	assert fatal (not root.oclIsUndefined()) with log("root undefined");
	//assert fatal (root.oclAsType(RootNode).categories->notEmpty()) with log("XXX");
	var cat : ModelElementCategory := root.categories->select(key = KEY)->any(true);
	//var cat : ModelElementCategory := root.categories->any(true);
	//assert fatal (not cat.oclIsUndefined()) with log("cat undefined");
	var ret : DataType := cat.modelElements->select(oclIsKindOf(DataType) and oclAsType(DataType).name = type)->any(true).oclAsType(DataType);
	assert fatal (not ret.oclIsUndefined()) with log("datatype not found");
	return ret;
}

query RealtimeStatechart::embeddedStatecharts() : Set(RealtimeStatechart) {
	return self->asSet()->closure(rtsc : RealtimeStatechart |
		rtsc.states->select(not simple)->collect(embeddedRegions)->collect(embeddedStatechart)->asSet()
	)->union(Set{self});
}