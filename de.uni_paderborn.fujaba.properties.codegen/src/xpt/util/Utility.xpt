«IMPORT properties»
«EXTENSION Metamodel»

«DEFINE TabElementFilter FOR properties::PropertyTab»
public class «name.toString().toFirstUpper()»TabElementFilter extends de.uni_paderborn.fujaba.properties.runtime.filter.ElementFilter {
	public «name.toString().toFirstUpper()»TabElementFilter() {
		super("«id»");
	}
}
«ENDDEFINE»


«DEFINE Utility FOR PropertyGenerator»
/**
 * @generated
 */
public class PropertiesUtil {
	
	/**
	 * @generated
	 */
	public static PropertiesUtil INSTANCE = new PropertiesUtil();
	
	/**
	 * @generated
	 */
	private PropertiesUtil() {
	}
	
	/**
	 * @generated
	 */
	private org.eclipse.emf.common.notify.AdapterFactory adapterFactory;
	
	/**
	 * @generated
	 */
	public org.eclipse.emf.common.notify.AdapterFactory getAdapterFactory() {
		if (adapterFactory == null) {
			adapterFactory = createAdapterFactory();
		}
		return adapterFactory;
	}

	/**
	 * @generated
	 */
	protected org.eclipse.emf.edit.provider.ComposedAdapterFactory createAdapterFactory() {
		java.util.List<org.eclipse.emf.common.notify.AdapterFactory> factories = new java.util.ArrayList<org.eclipse.emf.common.notify.AdapterFactory>();
		fillItemProviderFactories(factories);
		return new org.eclipse.emf.edit.provider.ComposedAdapterFactory(factories);
	}

	/**
	 * @generated
	 */
	protected void fillItemProviderFactories(java.util.List<org.eclipse.emf.common.notify.AdapterFactory> factories) {

		«FOREACH { this }.union(referencedGenerators).packages AS this»
		factories.add(new «genPackage.fullyQualifiedName()».provider.«genPackage.prefix»ItemProviderAdapterFactory());
		«ENDFOREACH»

		factories.add(new org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory());
		factories.add(new org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory());
	}

	/**
	 * @generated
	 */
	public org.eclipse.emf.common.notify.AdapterFactory getItemProvidersAdapterFactory() {
		return adapterFactory;
	}
}
«ENDDEFINE»
	