«IMPORT properties»
«EXTENSION Metamodel»

«DEFINE ClassEditor FOR Class»
/**
 * @generated
 */
public «IF genClass.ecoreClass.abstract»abstract«ENDIF» class «genEditorName()» extends «EXPAND extends-» {
	«EXPAND classBody»
}
«ENDDEFINE» 

«DEFINE extends FOR Class-»
«IF superClasses.isEmpty-»
	de.uni_paderborn.fujaba.properties.runtime.editors.ClassPropertyEditor
«ELSE-»
	«superClasses.first().genQualifiedEditorName()»
«ENDIF-»
«ENDDEFINE»


«DEFINE classBody FOR Class»
«REM»debug output:
/*
«FOREACH genLocalProperties() AS this»
«genFeature.ecoreFeature.name»

«ENDFOREACH»
*/
«ENDREM»

	/**
	 * @generated
	 */
	public «genEditorName()»(String tab, org.eclipse.emf.common.notify.AdapterFactory adapterFactory, org.eclipse.emf.ecore.EClass eClass) {
		super(tab, adapterFactory, eClass);
	}

	/**
	 * @generated
	 */
	@Override
	protected void createProperties() {
		super.createProperties();
		«FOREACH propertyCategories.select(c | genLocalProperties().category.contains(c)) AS this»
		addSubCategory("«genCategoryKey()»", "«title»", «IF vertical»org.eclipse.swt.SWT.VERTICAL«ELSE»org.eclipse.swt.SWT.HORIZONTAL«ENDIF», «open»);
		«ENDFOREACH»
		«REM»reject inherited properties that a super constructor already initialized«ENDREM»
		«FOREACH genLocalProperties().select(p | p.shouldGenerateEditor()).
			reject(p | genInheritedProperties().select(p.shouldGenerateEditor()).genFeature.contains(p.genFeature)) AS this»
			«EXPAND addEditor FOR editor»
		«ENDFOREACH»
	}

	«FOREACH genLocalProperties().select(p | p.shouldGenerateEditor()) AS this-»
	/**
	 * @generated
	 */
	protected void «genAdder()»(String category, boolean front) {
		addEditorToCategory(category, «genCreator()»(), front);
	}

	«EXPAND createMethod(false)»
	«ENDFOREACH»

	«FOREACH genOverriddenProperties() AS this»
	/**
	 * @generated
	 */
	@Override
	protected void «genAdder()»(String category, boolean front) {
		«IF editor != null»
		category = "«category.genCategoryKey()»";
		front = «EXPAND front FOR editor»;
		super.«genAdder()»(category, front);
		«ENDIF»
	}

	«EXPAND createMethod(true)»
	«ENDFOREACH»

«IF !genClass.ecoreClass.abstract»


	//
	// instantiation
	//
	
	
	/**
	 * @generated
	 */
	public «genEditorName()»(String tab) {
		this(tab, «package.generator.genPluginId()».util.PropertiesUtil.INSTANCE.getAdapterFactory(), «this.genClass.genClassLiteral()»);
	}
	
	/**
	 * @generated
	 */
	public static class Factory implements de.uni_paderborn.fujaba.properties.runtime.factory.IPropertyEditorFactory {
		@Override
		public de.uni_paderborn.fujaba.properties.runtime.editors.IPropertyEditor createPropertyEditor(String tab) {
			return new «genEditorName()»(tab);
		}
		
		@Override
		public boolean hasTab(java.lang.String tab) {
			return java.util.Arrays.asList(
				new java.lang.String[] { «FOREACH genAllTabs() AS tab SEPARATOR ',\n'»"«tab.id»"«ENDFOREACH» }
			).contains(tab);
		}
	}
«ENDIF»
«ENDDEFINE»

«DEFINE createMethod(Boolean override) FOR Property»
	/**
	 * @generated
	 */
	«IF override-»
	@Override
	«ENDIF-»
	protected de.uni_paderborn.fujaba.properties.runtime.editors.IPropertyEditor «genCreator()»() {
		«IF !shouldGenerateEditor()-»
			return null;
		«ELSE-»
			final org.eclipse.emf.ecore.EStructuralFeature feature = «genFeature.genFeatureLiteral()»;
			final de.uni_paderborn.fujaba.properties.runtime.editors.AbstractStructuralFeaturePropertyEditor editor = «IF editor == null»null;«ELSE»«EXPAND createEditor(this, "feature") FOR editor»«ENDIF»
			«EXPAND addVisibilityFilter("editor", "feature") FOREACH visibilityFilters»
			«IF genDocumentation() != null»
			editor.setTooltipMessage("«genDocumentation().escapeString()»");
			«ENDIF»
			«EXPAND addCreationConstraintFilter("editor", "feature") FOREACH creationConstraint.filters»
			return editor;
		«ENDIF»
	}
«ENDDEFINE»

«DEFINE addEditor FOR PropertyEditor»
	if (getTab() == null || "«property.tab.id»".equals(getTab())) {
«property.genAdder()»(«EXPAND categoryKey FOR property-», «EXPAND front»);
	}
«ENDDEFINE»

«DEFINE front FOR PropertyEditor»true«ENDDEFINE»
«DEFINE front FOR ObjectPropertyEditor»false«ENDDEFINE»

«DEFINE categoryKey FOR Property-»
«IF category != null-»
	"«category.genCategoryKey()-»"
«ELSE-»
	null
«ENDIF-»
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR PropertyEditor-»
UNKNOWN PROPERTY EDITOR
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR CheckboxPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.CheckboxPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»


«DEFINE createEditor(Property property, String featureVar) FOR SpinnerPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.SpinnerPropertyEditor(adapterFactory, «featureVar», «digits»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR RadioPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.OptionPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR ComboBoxPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.ComboPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR TextPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.TextPropertyEditor(adapterFactory, «featureVar», «multiLine»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR ListPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.ListPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR FlattenedListPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.FlattenedListPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR ObjectPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.NavigationFeaturePropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR OCLPropertyEditor-»
new de.uni_paderborn.fujaba.properties.runtime.editors.OCLPropertyEditor(adapterFactory, «featureVar»);
«ENDDEFINE»

«DEFINE createEditor(Property property, String featureVar) FOR CustomPropertyEditor-»
new «fullyQualifiedClassName»(adapterFactory, «featureVar»);
«ENDDEFINE»


«DEFINE addVisibilityFilter(String editorVar, String featureVar) FOR Filter»«ENDDEFINE»

«DEFINE addVisibilityFilter(String editorVar, String featureVar) FOR OCLFilter»
	{
		final org.eclipse.ocl.ecore.OCLExpression expression = de.uni_paderborn.fujaba.properties.runtime.RuntimePlugin.createOCLExpression("«expression.escapeString()»", «featureVar», getEClass());
		«editorVar».registerOCLAdapter(expression, new org.eclipse.emf.common.notify.impl.AdapterImpl() {
			@Override
			public void notifyChanged(org.eclipse.emf.common.notify.Notification notification) {
				«editorVar».updateVisibility(true, true);
			}
		});
		final org.eclipse.ocl.Query<org.eclipse.emf.ecore.EClassifier, ?, ?> query = de.uni_paderborn.fujaba.properties.runtime.RuntimePlugin.OCL_ECORE.createQuery(expression);
		org.eclipse.jface.viewers.IFilter filter = new org.eclipse.jface.viewers.IFilter() {

			@Override
			public boolean select(Object object) {
				return object != null && Boolean.TRUE.equals(query.evaluate(object));
			}

		};
		if (filter != null) {
			«editorVar».addVisibilityFilter(filter);
		}
	}
«ENDDEFINE»


«DEFINE addCreationConstraintFilter(String editorVar, String featureVar) FOR Filter»«ENDDEFINE»

«DEFINE addCreationConstraintFilter(String editorVar, String featureVar) FOR OCLFilter»
	{
		final org.eclipse.ocl.ecore.OCLExpression expression = de.uni_paderborn.fujaba.properties.runtime.RuntimePlugin.createOCLExpression("«expression.escapeString()»", «featureVar», getEClass());
		final org.eclipse.ocl.Query<org.eclipse.emf.ecore.EClassifier, ?, ?> query = de.uni_paderborn.fujaba.properties.runtime.RuntimePlugin.OCL_ECORE.createQuery(expression);
		query.getEvaluationEnvironment().add("eclass", null);
		de.uni_paderborn.fujaba.properties.runtime.filter.ICreationFilter filter = new de.uni_paderborn.fujaba.properties.runtime.filter.ICreationFilter() {

			@Override
			public boolean select(Object object, org.eclipse.emf.ecore.EClass eClass) {
				query.getEvaluationEnvironment().replace("eclass", eClass);
				return Boolean.TRUE.equals(query.evaluate(object));
			}

				
		};
		if (filter != null) {
			«editorVar».addCreationFilter(filter);
		}
	}
«ENDDEFINE»