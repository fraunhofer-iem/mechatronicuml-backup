/*
 * generated by Xtext
 */
grammar InternalMtctl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.uni_paderborn.fujaba.muml.verification.uppaal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uni_paderborn.fujaba.muml.verification.uppaal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uni_paderborn.fujaba.muml.verification.uppaal.services.MtctlGrammarAccess;

}

@parser::members {

 	private MtctlGrammarAccess grammarAccess;
 	
    public InternalMtctlParser(TokenStream input, MtctlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PropertyRepository";	
   	}
   	
   	@Override
   	protected MtctlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePropertyRepository
entryRulePropertyRepository returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRepositoryRule()); }
	 iv_rulePropertyRepository=rulePropertyRepository 
	 { $current=$iv_rulePropertyRepository.current; } 
	 EOF 
;

// Rule PropertyRepository
rulePropertyRepository returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyRepositoryAccess().getPropertiesPropertyParserRuleCall_0()); 
	    }
		lv_properties_0_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRepositoryRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_0_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getSemicolonKeyword_1());
    }
(
(
		lv_comment_2_0=RULE_SL_COMMENT
		{
			newLeafNode(lv_comment_2_0, grammarAccess.getPropertyAccess().getCommentSL_COMMENTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"comment",
        		lv_comment_2_0, 
        		"SL_COMMENT");
	    }

)
)?)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLeadsToExprParserRuleCall()); 
    }
    this_LeadsToExpr_0=ruleLeadsToExpr
    { 
        $current = $this_LeadsToExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLeadsToExpr
entryRuleLeadsToExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLeadsToExprRule()); }
	 iv_ruleLeadsToExpr=ruleLeadsToExpr 
	 { $current=$iv_ruleLeadsToExpr.current; } 
	 EOF 
;

// Rule LeadsToExpr
ruleLeadsToExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLeadsToExprAccess().getImplyExprParserRuleCall_0()); 
    }
    this_ImplyExpr_0=ruleImplyExpr
    { 
        $current = $this_ImplyExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLeadsToExprAccess().getLeadsToExprLeftOpdAction_1_0(),
            $current);
    }
)	otherlv_2='leadsTo' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLeadsToExprAccess().getLeadsToKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLeadsToExprAccess().getRightOpdImplyExprParserRuleCall_1_2_0()); 
	    }
		lv_rightOpd_3_0=ruleImplyExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLeadsToExprRule());
	        }
       		set(
       			$current, 
       			"rightOpd",
        		lv_rightOpd_3_0, 
        		"ImplyExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImplyExpr
entryRuleImplyExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplyExprRule()); }
	 iv_ruleImplyExpr=ruleImplyExpr 
	 { $current=$iv_ruleImplyExpr.current; } 
	 EOF 
;

// Rule ImplyExpr
ruleImplyExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImplyExprAccess().getAndExprParserRuleCall_0()); 
    }
    this_AndExpr_0=ruleAndExpr
    { 
        $current = $this_AndExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImplyExprAccess().getImplyExprLeftOpdAction_1_0(),
            $current);
    }
)	otherlv_2='implies' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImplyExprAccess().getImpliesKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImplyExprAccess().getRightOpdAndExprParserRuleCall_1_2_0()); 
	    }
		lv_rightOpd_3_0=ruleAndExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImplyExprRule());
	        }
       		set(
       			$current, 
       			"rightOpd",
        		lv_rightOpd_3_0, 
        		"AndExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpr
entryRuleAndExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExprRule()); }
	 iv_ruleAndExpr=ruleAndExpr 
	 { $current=$iv_ruleAndExpr.current; } 
	 EOF 
;

// Rule AndExpr
ruleAndExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExprAccess().getOrExprParserRuleCall_0()); 
    }
    this_OrExpr_0=ruleOrExpr
    { 
        $current = $this_OrExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExprAccess().getAndExprLeftOpdAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExprAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExprAccess().getRightOpdOrExprParserRuleCall_1_2_0()); 
	    }
		lv_rightOpd_3_0=ruleOrExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExprRule());
	        }
       		set(
       			$current, 
       			"rightOpd",
        		lv_rightOpd_3_0, 
        		"OrExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOrExpr
entryRuleOrExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExprRule()); }
	 iv_ruleOrExpr=ruleOrExpr 
	 { $current=$iv_ruleOrExpr.current; } 
	 EOF 
;

// Rule OrExpr
ruleOrExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExprAccess().getNotExprParserRuleCall_0()); 
    }
    this_NotExpr_0=ruleNotExpr
    { 
        $current = $this_NotExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExprAccess().getOrExprLeftOpdAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExprAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExprAccess().getRightOpdNotExprParserRuleCall_1_2_0()); 
	    }
		lv_rightOpd_3_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExprRule());
	        }
       		set(
       			$current, 
       			"rightOpd",
        		lv_rightOpd_3_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNotExpr
entryRuleNotExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotExprRule()); }
	 iv_ruleNotExpr=ruleNotExpr 
	 { $current=$iv_ruleNotExpr.current; } 
	 EOF 
;

// Rule NotExpr
ruleNotExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotExprAccess().getNotKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNotExprAccess().getNotExprAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNotExprAccess().getOpdNotExprParserRuleCall_0_2_0()); 
	    }
		lv_opd_2_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotExprRule());
	        }
       		set(
       			$current, 
       			"opd",
        		lv_opd_2_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNotExprAccess().getQuantifierExprParserRuleCall_1()); 
    }
    this_QuantifierExpr_3=ruleQuantifierExpr
    { 
        $current = $this_QuantifierExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQuantifierExpr
entryRuleQuantifierExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuantifierExprRule()); }
	 iv_ruleQuantifierExpr=ruleQuantifierExpr 
	 { $current=$iv_ruleQuantifierExpr.current; } 
	 EOF 
;

// Rule QuantifierExpr
ruleQuantifierExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQuantifierExprAccess().getUniversalQuantExprParserRuleCall_0()); 
    }
    this_UniversalQuantExpr_0=ruleUniversalQuantExpr
    { 
        $current = $this_UniversalQuantExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuantifierExprAccess().getExistentialQuantExprParserRuleCall_1()); 
    }
    this_ExistentialQuantExpr_1=ruleExistentialQuantExpr
    { 
        $current = $this_ExistentialQuantExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuantifierExprAccess().getTemporalQuantifierExprParserRuleCall_2()); 
    }
    this_TemporalQuantifierExpr_2=ruleTemporalQuantifierExpr
    { 
        $current = $this_TemporalQuantifierExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getQuantifierExprAccess().getAtomExprParserRuleCall_3()); 
    }
    this_AtomExpr_3=ruleAtomExpr
    { 
        $current = $this_AtomExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUniversalQuantExpr
entryRuleUniversalQuantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUniversalQuantExprRule()); }
	 iv_ruleUniversalQuantExpr=ruleUniversalQuantExpr 
	 { $current=$iv_ruleUniversalQuantExpr.current; } 
	 EOF 
;

// Rule UniversalQuantExpr
ruleUniversalQuantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='forall' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUniversalQuantExprAccess().getForallKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUniversalQuantExprAccess().getLeftParenthesisKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getUniversalQuantExprAccess().getUniversalQuantExprAction_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUniversalQuantExprAccess().getVarVariableBindingParserRuleCall_3_0()); 
	    }
		lv_var_3_0=ruleVariableBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniversalQuantExprRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_3_0, 
        		"VariableBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUniversalQuantExprAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUniversalQuantExprAccess().getFormulaNotExprParserRuleCall_5_0()); 
	    }
		lv_formula_5_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniversalQuantExprRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_5_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExistentialQuantExpr
entryRuleExistentialQuantExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExistentialQuantExprRule()); }
	 iv_ruleExistentialQuantExpr=ruleExistentialQuantExpr 
	 { $current=$iv_ruleExistentialQuantExpr.current; } 
	 EOF 
;

// Rule ExistentialQuantExpr
ruleExistentialQuantExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='exists' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExistentialQuantExprAccess().getExistsKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExistentialQuantExprAccess().getLeftParenthesisKeyword_1());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getExistentialQuantExprAccess().getExistenceQuantExprAction_2(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExistentialQuantExprAccess().getVarVariableBindingParserRuleCall_3_0()); 
	    }
		lv_var_3_0=ruleVariableBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistentialQuantExprRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_3_0, 
        		"VariableBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExistentialQuantExprAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExistentialQuantExprAccess().getFormulaNotExprParserRuleCall_5_0()); 
	    }
		lv_formula_5_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExistentialQuantExprRule());
	        }
       		set(
       			$current, 
       			"formula",
        		lv_formula_5_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariableBinding
entryRuleVariableBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableBindingRule()); }
	 iv_ruleVariableBinding=ruleVariableBinding 
	 { $current=$iv_ruleVariableBinding.current; } 
	 EOF 
;

// Rule VariableBinding
ruleVariableBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableBindingAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableBindingAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableBindingAccess().getSetSetExprParserRuleCall_2_0()); 
	    }
		lv_set_2_0=ruleSetExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableBindingRule());
	        }
       		set(
       			$current, 
       			"set",
        		lv_set_2_0, 
        		"SetExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTemporalQuantifierExpr
entryRuleTemporalQuantifierExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemporalQuantifierExprRule()); }
	 iv_ruleTemporalQuantifierExpr=ruleTemporalQuantifierExpr 
	 { $current=$iv_ruleTemporalQuantifierExpr.current; } 
	 EOF 
;

// Rule TemporalQuantifierExpr
ruleTemporalQuantifierExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemporalQuantifierExprAccess().getEFExprParserRuleCall_0()); 
    }
    this_EFExpr_0=ruleEFExpr
    { 
        $current = $this_EFExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemporalQuantifierExprAccess().getAFExprParserRuleCall_1()); 
    }
    this_AFExpr_1=ruleAFExpr
    { 
        $current = $this_AFExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemporalQuantifierExprAccess().getEGExprParserRuleCall_2()); 
    }
    this_EGExpr_2=ruleEGExpr
    { 
        $current = $this_EGExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemporalQuantifierExprAccess().getAGExprParserRuleCall_3()); 
    }
    this_AGExpr_3=ruleAGExpr
    { 
        $current = $this_AGExpr_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEFExpr
entryRuleEFExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFExprRule()); }
	 iv_ruleEFExpr=ruleEFExpr 
	 { $current=$iv_ruleEFExpr.current; } 
	 EOF 
;

// Rule EFExpr
ruleEFExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='EF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEFExprAccess().getEFKeyword_0_0());
    }

    |	otherlv_1='E<>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEFExprAccess().getEKeyword_0_1());
    }
)(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEFExprAccess().getEFExprAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEFExprAccess().getExprNotExprParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEFExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAFExpr
entryRuleAFExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAFExprRule()); }
	 iv_ruleAFExpr=ruleAFExpr 
	 { $current=$iv_ruleAFExpr.current; } 
	 EOF 
;

// Rule AFExpr
ruleAFExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='AF' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAFExprAccess().getAFKeyword_0_0());
    }

    |	otherlv_1='A<>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAFExprAccess().getAKeyword_0_1());
    }
)(
    {
        $current = forceCreateModelElement(
            grammarAccess.getAFExprAccess().getAFExprAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAFExprAccess().getExprNotExprParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAFExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEGExpr
entryRuleEGExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEGExprRule()); }
	 iv_ruleEGExpr=ruleEGExpr 
	 { $current=$iv_ruleEGExpr.current; } 
	 EOF 
;

// Rule EGExpr
ruleEGExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='EG' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEGExprAccess().getEGKeyword_0_0());
    }

    |	otherlv_1='E[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEGExprAccess().getEKeyword_0_1());
    }
)(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEGExprAccess().getEGExprAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEGExprAccess().getExprNotExprParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEGExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAGExpr
entryRuleAGExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAGExprRule()); }
	 iv_ruleAGExpr=ruleAGExpr 
	 { $current=$iv_ruleAGExpr.current; } 
	 EOF 
;

// Rule AGExpr
ruleAGExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='AG' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAGExprAccess().getAGKeyword_0_0());
    }

    |	otherlv_1='A[]' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAGExprAccess().getAKeyword_0_1());
    }
)(
    {
        $current = forceCreateModelElement(
            grammarAccess.getAGExprAccess().getAGExprAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAGExprAccess().getExprNotExprParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleNotExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAGExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"NotExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAtomExpr
entryRuleAtomExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomExprRule()); }
	 iv_ruleAtomExpr=ruleAtomExpr 
	 { $current=$iv_ruleAtomExpr.current; } 
	 EOF 
;

// Rule AtomExpr
ruleAtomExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtomExprAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtomExprAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtomExprAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAtomExprAccess().getPredicateExprParserRuleCall_1()); 
    }
    this_PredicateExpr_3=rulePredicateExpr
    { 
        $current = $this_PredicateExpr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomExprAccess().getComparisonExprParserRuleCall_2()); 
    }
    this_ComparisonExpr_4=ruleComparisonExpr
    { 
        $current = $this_ComparisonExpr_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePredicateExpr
entryRulePredicateExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateExprRule()); }
	 iv_rulePredicateExpr=rulePredicateExpr 
	 { $current=$iv_rulePredicateExpr.current; } 
	 EOF 
;

// Rule PredicateExpr
rulePredicateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getTrueExprParserRuleCall_0()); 
    }
    this_TrueExpr_0=ruleTrueExpr
    { 
        $current = $this_TrueExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getFalseExprParserRuleCall_1()); 
    }
    this_FalseExpr_1=ruleFalseExpr
    { 
        $current = $this_FalseExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getDeadlockExprParserRuleCall_2()); 
    }
    this_DeadlockExpr_2=ruleDeadlockExpr
    { 
        $current = $this_DeadlockExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getConnectorOverflowExprParserRuleCall_3()); 
    }
    this_ConnectorOverflowExpr_3=ruleConnectorOverflowExpr
    { 
        $current = $this_ConnectorOverflowExpr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getStateExprParserRuleCall_4()); 
    }
    this_StateExpr_4=ruleStateExpr
    { 
        $current = $this_StateExpr_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getMessageExprParserRuleCall_5()); 
    }
    this_MessageExpr_5=ruleMessageExpr
    { 
        $current = $this_MessageExpr_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateExprAccess().getTransitionExprParserRuleCall_6()); 
    }
    this_TransitionExpr_6=ruleTransitionExpr
    { 
        $current = $this_TransitionExpr_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDeadlockExpr
entryRuleDeadlockExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeadlockExprRule()); }
	 iv_ruleDeadlockExpr=ruleDeadlockExpr 
	 { $current=$iv_ruleDeadlockExpr.current; } 
	 EOF 
;

// Rule DeadlockExpr
ruleDeadlockExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeadlockExprAccess().getDeadlockExprAction_0(),
            $current);
    }
)	otherlv_1='deadlock' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDeadlockExprAccess().getDeadlockKeyword_1());
    }
)
;





// Entry rule entryRuleConnectorOverflowExpr
entryRuleConnectorOverflowExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConnectorOverflowExprRule()); }
	 iv_ruleConnectorOverflowExpr=ruleConnectorOverflowExpr 
	 { $current=$iv_ruleConnectorOverflowExpr.current; } 
	 EOF 
;

// Rule ConnectorOverflowExpr
ruleConnectorOverflowExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConnectorOverflowExprAccess().getConnectorOverflowExprAction_0(),
            $current);
    }
)	otherlv_1='connectorOverflow' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConnectorOverflowExprAccess().getConnectorOverflowKeyword_1());
    }
)
;





// Entry rule entryRuleTrueExpr
entryRuleTrueExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrueExprRule()); }
	 iv_ruleTrueExpr=ruleTrueExpr 
	 { $current=$iv_ruleTrueExpr.current; } 
	 EOF 
;

// Rule TrueExpr
ruleTrueExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTrueExprAccess().getTrueExprAction_0(),
            $current);
    }
)	otherlv_1='true' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTrueExprAccess().getTrueKeyword_1());
    }
)
;





// Entry rule entryRuleFalseExpr
entryRuleFalseExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFalseExprRule()); }
	 iv_ruleFalseExpr=ruleFalseExpr 
	 { $current=$iv_ruleFalseExpr.current; } 
	 EOF 
;

// Rule FalseExpr
ruleFalseExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFalseExprAccess().getFalseExprAction_0(),
            $current);
    }
)	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFalseExprAccess().getFalseKeyword_1());
    }
)
;





// Entry rule entryRuleStateExpr
entryRuleStateExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateExprRule()); }
	 iv_ruleStateExpr=ruleStateExpr 
	 { $current=$iv_ruleStateExpr.current; } 
	 EOF 
;

// Rule StateExpr
ruleStateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateExprAccess().getStateActiveExprParserRuleCall_0()); 
    }
    this_StateActiveExpr_0=ruleStateActiveExpr
    { 
        $current = $this_StateActiveExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateExprAccess().getSubstateOfExprParserRuleCall_1()); 
    }
    this_SubstateOfExpr_1=ruleSubstateOfExpr
    { 
        $current = $this_SubstateOfExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateExprAccess().getStateInStatechartExprParserRuleCall_2()); 
    }
    this_StateInStatechartExpr_2=ruleStateInStatechartExpr
    { 
        $current = $this_StateInStatechartExpr_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStateActiveExpr
entryRuleStateActiveExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateActiveExprRule()); }
	 iv_ruleStateActiveExpr=ruleStateActiveExpr 
	 { $current=$iv_ruleStateActiveExpr.current; } 
	 EOF 
;

// Rule StateActiveExpr
ruleStateActiveExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='stateActive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateActiveExprAccess().getStateActiveKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateActiveExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateActiveExprAccess().getStateStateMapExprParserRuleCall_2_0()); 
	    }
		lv_state_2_0=ruleStateMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateActiveExprRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_2_0, 
        		"StateMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateActiveExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSubstateOfExpr
entryRuleSubstateOfExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubstateOfExprRule()); }
	 iv_ruleSubstateOfExpr=ruleSubstateOfExpr 
	 { $current=$iv_ruleSubstateOfExpr.current; } 
	 EOF 
;

// Rule SubstateOfExpr
ruleSubstateOfExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='substateOf' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubstateOfExprAccess().getSubstateOfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubstateOfExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubstateOfExprAccess().getStateStateMapExprParserRuleCall_2_0()); 
	    }
		lv_state_2_0=ruleStateMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubstateOfExprRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_2_0, 
        		"StateMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubstateOfExprAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubstateOfExprAccess().getSuperstateStateMapExprParserRuleCall_4_0()); 
	    }
		lv_superstate_4_0=ruleStateMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubstateOfExprRule());
	        }
       		set(
       			$current, 
       			"superstate",
        		lv_superstate_4_0, 
        		"StateMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSubstateOfExprAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleStateInStatechartExpr
entryRuleStateInStatechartExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateInStatechartExprRule()); }
	 iv_ruleStateInStatechartExpr=ruleStateInStatechartExpr 
	 { $current=$iv_ruleStateInStatechartExpr.current; } 
	 EOF 
;

// Rule StateInStatechartExpr
ruleStateInStatechartExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='stateInStatechart' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateInStatechartExprAccess().getStateInStatechartKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateInStatechartExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateInStatechartExprAccess().getStateStateMapExprParserRuleCall_2_0()); 
	    }
		lv_state_2_0=ruleStateMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateInStatechartExprRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_2_0, 
        		"StateMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStateInStatechartExprAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStateInStatechartExprAccess().getStatechartStatechartMapExprParserRuleCall_4_0()); 
	    }
		lv_statechart_4_0=ruleStatechartMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateInStatechartExprRule());
	        }
       		set(
       			$current, 
       			"statechart",
        		lv_statechart_4_0, 
        		"StatechartMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateInStatechartExprAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleMessageExpr
entryRuleMessageExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageExprRule()); }
	 iv_ruleMessageExpr=ruleMessageExpr 
	 { $current=$iv_ruleMessageExpr.current; } 
	 EOF 
;

// Rule MessageExpr
ruleMessageExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMessageExprAccess().getMessageInBufferExprParserRuleCall_0()); 
    }
    this_MessageInBufferExpr_0=ruleMessageInBufferExpr
    { 
        $current = $this_MessageInBufferExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageExprAccess().getMessageInTransitExprParserRuleCall_1()); 
    }
    this_MessageInTransitExpr_1=ruleMessageInTransitExpr
    { 
        $current = $this_MessageInTransitExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageExprAccess().getMessageDiscardedExprParserRuleCall_2()); 
    }
    this_MessageDiscardedExpr_2=ruleMessageDiscardedExpr
    { 
        $current = $this_MessageDiscardedExpr_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMessageInTransitExpr
entryRuleMessageInTransitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageInTransitExprRule()); }
	 iv_ruleMessageInTransitExpr=ruleMessageInTransitExpr 
	 { $current=$iv_ruleMessageInTransitExpr.current; } 
	 EOF 
;

// Rule MessageInTransitExpr
ruleMessageInTransitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='messageInTransit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageInTransitExprAccess().getMessageInTransitKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageInTransitExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageInTransitExprAccess().getMessageMessageMapExprParserRuleCall_2_0()); 
	    }
		lv_message_2_0=ruleMessageMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageInTransitExprRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_2_0, 
        		"MessageMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageInTransitExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMessageInBufferExpr
entryRuleMessageInBufferExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageInBufferExprRule()); }
	 iv_ruleMessageInBufferExpr=ruleMessageInBufferExpr 
	 { $current=$iv_ruleMessageInBufferExpr.current; } 
	 EOF 
;

// Rule MessageInBufferExpr
ruleMessageInBufferExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='messageInBuffer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageInBufferExprAccess().getMessageInBufferKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageInBufferExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageInBufferExprAccess().getMessageMessageMapExprParserRuleCall_2_0()); 
	    }
		lv_message_2_0=ruleMessageMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageInBufferExprRule());
	        }
       		set(
       			$current, 
       			"message",
        		lv_message_2_0, 
        		"MessageMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageInBufferExprAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageInBufferExprAccess().getBufferBufferMapExprParserRuleCall_4_0()); 
	    }
		lv_buffer_4_0=ruleBufferMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageInBufferExprRule());
	        }
       		set(
       			$current, 
       			"buffer",
        		lv_buffer_4_0, 
        		"BufferMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMessageInBufferExprAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleMessageDiscardedExpr
entryRuleMessageDiscardedExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageDiscardedExprRule()); }
	 iv_ruleMessageDiscardedExpr=ruleMessageDiscardedExpr 
	 { $current=$iv_ruleMessageDiscardedExpr.current; } 
	 EOF 
;

// Rule MessageDiscardedExpr
ruleMessageDiscardedExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='messageDiscarded' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageDiscardedExprAccess().getMessageDiscardedKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageDiscardedExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageDiscardedExprAccess().getBufferBufferMapExprParserRuleCall_2_0()); 
	    }
		lv_buffer_2_0=ruleBufferMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageDiscardedExprRule());
	        }
       		set(
       			$current, 
       			"buffer",
        		lv_buffer_2_0, 
        		"BufferMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageDiscardedExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTransitionExpr
entryRuleTransitionExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionExprRule()); }
	 iv_ruleTransitionExpr=ruleTransitionExpr 
	 { $current=$iv_ruleTransitionExpr.current; } 
	 EOF 
;

// Rule TransitionExpr
ruleTransitionExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTransitionExprAccess().getTransitionFiringExprParserRuleCall()); 
    }
    this_TransitionFiringExpr_0=ruleTransitionFiringExpr
    { 
        $current = $this_TransitionFiringExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTransitionFiringExpr
entryRuleTransitionFiringExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionFiringExprRule()); }
	 iv_ruleTransitionFiringExpr=ruleTransitionFiringExpr 
	 { $current=$iv_ruleTransitionFiringExpr.current; } 
	 EOF 
;

// Rule TransitionFiringExpr
ruleTransitionFiringExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='transitionFiring' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionFiringExprAccess().getTransitionFiringKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionFiringExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionFiringExprAccess().getTransitionTransitionMapExprParserRuleCall_2_0()); 
	    }
		lv_transition_2_0=ruleTransitionMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionFiringExprRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_2_0, 
        		"TransitionMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionFiringExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComparisonExpr
entryRuleComparisonExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExprRule()); }
	 iv_ruleComparisonExpr=ruleComparisonExpr 
	 { $current=$iv_ruleComparisonExpr.current; } 
	 EOF 
;

// Rule ComparisonExpr
ruleComparisonExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getComparisonExprAccess().getComparisonExprAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getLhsMapExprParserRuleCall_1_0()); 
	    }
		lv_lhs_1_0=ruleMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"MapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getOpComparisonOpEnumRuleCall_2_0()); 
	    }
		lv_op_2_0=ruleComparisonOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ComparisonOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExprAccess().getRhsMapExprParserRuleCall_3_0()); 
	    }
		lv_rhs_3_0=ruleMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExprRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"MapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMapExpr
entryRuleMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMapExprRule()); }
	 iv_ruleMapExpr=ruleMapExpr 
	 { $current=$iv_ruleMapExpr.current; } 
	 EOF 
;

// Rule MapExpr
ruleMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMapExprAccess().getMumlElemExprParserRuleCall_0()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMapExprAccess().getBufferMessageCountExprParserRuleCall_1()); 
    }
    this_BufferMessageCountExpr_1=ruleBufferMessageCountExpr
    { 
        $current = $this_BufferMessageCountExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMapExprAccess().getConstExprParserRuleCall_2()); 
    }
    this_ConstExpr_2=ruleConstExpr
    { 
        $current = $this_ConstExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMapExprAccess().getSourceStateExprParserRuleCall_3()); 
    }
    this_SourceStateExpr_3=ruleSourceStateExpr
    { 
        $current = $this_SourceStateExpr_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMapExprAccess().getTargetStateExprParserRuleCall_4()); 
    }
    this_TargetStateExpr_4=ruleTargetStateExpr
    { 
        $current = $this_TargetStateExpr_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleTransitionMapExpr
entryRuleTransitionMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionMapExprRule()); }
	 iv_ruleTransitionMapExpr=ruleTransitionMapExpr 
	 { $current=$iv_ruleTransitionMapExpr.current; } 
	 EOF 
;

// Rule TransitionMapExpr
ruleTransitionMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTransitionMapExprAccess().getMumlElemExprParserRuleCall()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleStateMapExpr
entryRuleStateMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateMapExprRule()); }
	 iv_ruleStateMapExpr=ruleStateMapExpr 
	 { $current=$iv_ruleStateMapExpr.current; } 
	 EOF 
;

// Rule StateMapExpr
ruleStateMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStateMapExprAccess().getMumlElemExprParserRuleCall_0()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateMapExprAccess().getSourceStateExprParserRuleCall_1()); 
    }
    this_SourceStateExpr_1=ruleSourceStateExpr
    { 
        $current = $this_SourceStateExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStateMapExprAccess().getTargetStateExprParserRuleCall_2()); 
    }
    this_TargetStateExpr_2=ruleTargetStateExpr
    { 
        $current = $this_TargetStateExpr_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStatechartMapExpr
entryRuleStatechartMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatechartMapExprRule()); }
	 iv_ruleStatechartMapExpr=ruleStatechartMapExpr 
	 { $current=$iv_ruleStatechartMapExpr.current; } 
	 EOF 
;

// Rule StatechartMapExpr
ruleStatechartMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStatechartMapExprAccess().getMumlElemExprParserRuleCall()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBufferMapExpr
entryRuleBufferMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBufferMapExprRule()); }
	 iv_ruleBufferMapExpr=ruleBufferMapExpr 
	 { $current=$iv_ruleBufferMapExpr.current; } 
	 EOF 
;

// Rule BufferMapExpr
ruleBufferMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getBufferMapExprAccess().getMumlElemExprParserRuleCall()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMessageMapExpr
entryRuleMessageMapExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageMapExprRule()); }
	 iv_ruleMessageMapExpr=ruleMessageMapExpr 
	 { $current=$iv_ruleMessageMapExpr.current; } 
	 EOF 
;

// Rule MessageMapExpr
ruleMessageMapExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getMessageMapExprAccess().getMumlElemExprParserRuleCall()); 
    }
    this_MumlElemExpr_0=ruleMumlElemExpr
    { 
        $current = $this_MumlElemExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBufferMessageCountExpr
entryRuleBufferMessageCountExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBufferMessageCountExprRule()); }
	 iv_ruleBufferMessageCountExpr=ruleBufferMessageCountExpr 
	 { $current=$iv_ruleBufferMessageCountExpr.current; } 
	 EOF 
;

// Rule BufferMessageCountExpr
ruleBufferMessageCountExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='bufferMessageCount' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBufferMessageCountExprAccess().getBufferMessageCountKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBufferMessageCountExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBufferMessageCountExprAccess().getBufferBufferMapExprParserRuleCall_2_0()); 
	    }
		lv_buffer_2_0=ruleBufferMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBufferMessageCountExprRule());
	        }
       		set(
       			$current, 
       			"buffer",
        		lv_buffer_2_0, 
        		"BufferMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBufferMessageCountExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleSourceStateExpr
entryRuleSourceStateExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourceStateExprRule()); }
	 iv_ruleSourceStateExpr=ruleSourceStateExpr 
	 { $current=$iv_ruleSourceStateExpr.current; } 
	 EOF 
;

// Rule SourceStateExpr
ruleSourceStateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sourceState' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSourceStateExprAccess().getSourceStateKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSourceStateExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceStateExprAccess().getTransitionTransitionMapExprParserRuleCall_2_0()); 
	    }
		lv_transition_2_0=ruleTransitionMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceStateExprRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_2_0, 
        		"TransitionMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSourceStateExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTargetStateExpr
entryRuleTargetStateExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTargetStateExprRule()); }
	 iv_ruleTargetStateExpr=ruleTargetStateExpr 
	 { $current=$iv_ruleTargetStateExpr.current; } 
	 EOF 
;

// Rule TargetStateExpr
ruleTargetStateExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='targetState' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTargetStateExprAccess().getTargetStateKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTargetStateExprAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTargetStateExprAccess().getTransitionTransitionMapExprParserRuleCall_2_0()); 
	    }
		lv_transition_2_0=ruleTransitionMapExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTargetStateExprRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_2_0, 
        		"TransitionMapExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTargetStateExprAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleMumlElemExpr
entryRuleMumlElemExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMumlElemExprRule()); }
	 iv_ruleMumlElemExpr=ruleMumlElemExpr 
	 { $current=$iv_ruleMumlElemExpr.current; } 
	 EOF 
;

// Rule MumlElemExpr
ruleMumlElemExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMumlElemExprRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMumlElemExprAccess().getElemEObjectCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMumlElemExprAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMumlElemExprRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMumlElemExprAccess().getInstanceEObjectCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMumlElemExprAccess().getRightSquareBracketKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleConstExpr
entryRuleConstExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstExprRule()); }
	 iv_ruleConstExpr=ruleConstExpr 
	 { $current=$iv_ruleConstExpr.current; } 
	 EOF 
;

// Rule ConstExpr
ruleConstExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstExprAccess().getValEIntParserRuleCall_0_0()); 
	    }
		lv_val_0_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstExprRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstExprAccess().getTimeUnitTimeUnitExprParserRuleCall_1_0()); 
	    }
		lv_timeUnit_1_0=ruleTimeUnitExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstExprRule());
	        }
       		set(
       			$current, 
       			"timeUnit",
        		lv_timeUnit_1_0, 
        		"TimeUnitExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTimeUnitExpr
entryRuleTimeUnitExpr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeUnitExprRule()); } 
	 iv_ruleTimeUnitExpr=ruleTimeUnitExpr 
	 { $current=$iv_ruleTimeUnitExpr.current.getText(); }  
	 EOF 
;

// Rule TimeUnitExpr
ruleTimeUnitExpr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='days' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getDaysKeyword_0()); 
    }

    |
	kw='hrs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getHrsKeyword_1()); 
    }

    |
	kw='mins' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getMinsKeyword_2()); 
    }

    |
	kw='secs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getSecsKeyword_3()); 
    }

    |
	kw='msecs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getMsecsKeyword_4()); 
    }

    |
	kw='\u00C2\u00B5secs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getSecsKeyword_5()); 
    }

    |
	kw='nsecs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeUnitExprAccess().getNsecsKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleSetExpr
entryRuleSetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetExprRule()); }
	 iv_ruleSetExpr=ruleSetExpr 
	 { $current=$iv_ruleSetExpr.current; } 
	 EOF 
;

// Rule SetExpr
ruleSetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSetExprAccess().getInstanceSetExprParserRuleCall_0()); 
    }
    this_InstanceSetExpr_0=ruleInstanceSetExpr
    { 
        $current = $this_InstanceSetExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSetExprAccess().getSubinstanceSetExprParserRuleCall_1()); 
    }
    this_SubinstanceSetExpr_1=ruleSubinstanceSetExpr
    { 
        $current = $this_SubinstanceSetExpr_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSetExprAccess().getIntervalSetExprParserRuleCall_2()); 
    }
    this_IntervalSetExpr_2=ruleIntervalSetExpr
    { 
        $current = $this_IntervalSetExpr_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetExprAccess().getStateSetExprAction_3_0(),
            $current);
    }
)	otherlv_4='States' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetExprAccess().getStatesKeyword_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetExprAccess().getTransitionSetExprAction_4_0(),
            $current);
    }
)	otherlv_6='Transitions' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSetExprAccess().getTransitionsKeyword_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetExprAccess().getMessageSetExprAction_5_0(),
            $current);
    }
)	otherlv_8='MessageTypes' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSetExprAccess().getMessageTypesKeyword_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetExprAccess().getClockSetExprAction_6_0(),
            $current);
    }
)	otherlv_10='Clocks' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSetExprAccess().getClocksKeyword_6_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetExprAccess().getBufferSetExprAction_7_0(),
            $current);
    }
)	otherlv_12='Buffers' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSetExprAccess().getBuffersKeyword_7_1());
    }
))
;





// Entry rule entryRuleIntervalSetExpr
entryRuleIntervalSetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalSetExprRule()); }
	 iv_ruleIntervalSetExpr=ruleIntervalSetExpr 
	 { $current=$iv_ruleIntervalSetExpr.current; } 
	 EOF 
;

// Rule IntervalSetExpr
ruleIntervalSetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIntervalSetExprAccess().getIntervalSetExprAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntervalSetExprAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		lv_lowerVal_2_0=RULE_INT
		{
			newLeafNode(lv_lowerVal_2_0, grammarAccess.getIntervalSetExprAccess().getLowerValINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntervalSetExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lowerVal",
        		lv_lowerVal_2_0, 
        		"INT");
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntervalSetExprAccess().getCommaKeyword_3());
    }
(
(
		lv_upperVal_4_0=RULE_INT
		{
			newLeafNode(lv_upperVal_4_0, grammarAccess.getIntervalSetExprAccess().getUpperValINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntervalSetExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"upperVal",
        		lv_upperVal_4_0, 
        		"INT");
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIntervalSetExprAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleInstanceSetExpr
entryRuleInstanceSetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceSetExprRule()); }
	 iv_ruleInstanceSetExpr=ruleInstanceSetExpr 
	 { $current=$iv_ruleInstanceSetExpr.current; } 
	 EOF 
;

// Rule InstanceSetExpr
ruleInstanceSetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInstanceSetExprAccess().getInstanceSetExprAction_0(),
            $current);
    }
)	otherlv_1='Instances' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceSetExprAccess().getInstancesKeyword_1());
    }
	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstanceSetExprAccess().getLessThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceSetExprAccess().getTypeMumlElemExprParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleMumlElemExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceSetExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"MumlElemExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstanceSetExprAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleSubinstanceSetExpr
entryRuleSubinstanceSetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubinstanceSetExprRule()); }
	 iv_ruleSubinstanceSetExpr=ruleSubinstanceSetExpr 
	 { $current=$iv_ruleSubinstanceSetExpr.current; } 
	 EOF 
;

// Rule SubinstanceSetExpr
ruleSubinstanceSetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSubinstanceSetExprAccess().getSubinstanceSetExprAction_0(),
            $current);
    }
)	otherlv_1='Subinstances' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubinstanceSetExprAccess().getSubinstancesKeyword_1());
    }
	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubinstanceSetExprAccess().getLessThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSubinstanceSetExprAccess().getTypeMumlElemExprParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleMumlElemExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSubinstanceSetExprRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"MumlElemExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSubinstanceSetExprAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_QNAME_0=RULE_QNAME    {
		$current.merge(this_QNAME_0);
    }

    { 
    newLeafNode(this_QNAME_0, grammarAccess.getQualifiedNameAccess().getQNAMETerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule ComparisonOp
ruleComparisonOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getComparisonOpAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparisonOpAccess().getEQUALSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='>' 
	{
        $current = grammarAccess.getComparisonOpAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparisonOpAccess().getGREATEREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparisonOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparisonOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<' 
	{
        $current = grammarAccess.getComparisonOpAccess().getLESSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparisonOpAccess().getLESSEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=' 
	{
        $current = grammarAccess.getComparisonOpAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getComparisonOpAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='!=' 
	{
        $current = grammarAccess.getComparisonOpAccess().getNOT_EQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getComparisonOpAccess().getNOT_EQUALEnumLiteralDeclaration_5()); 
    }
));



RULE_QNAME : RULE_ID ('.' RULE_ID)+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


