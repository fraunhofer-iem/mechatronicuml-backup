/**
 */
package org.muml.uppaal.adapter.mtctl.quantifiers.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.muml.uppaal.adapter.mtctl.quantifiers.util.QuantifiersAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class QuantifiersItemProviderAdapterFactory extends QuantifiersAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public QuantifiersItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.AFExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AFExprItemProvider afExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.AFExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAFExprAdapter() {
		if (afExprItemProvider == null) {
			afExprItemProvider = new AFExprItemProvider(this);
		}

		return afExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.AGExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AGExprItemProvider agExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.AGExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAGExprAdapter() {
		if (agExprItemProvider == null) {
			agExprItemProvider = new AGExprItemProvider(this);
		}

		return agExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.EFExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFExprItemProvider efExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.EFExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFExprAdapter() {
		if (efExprItemProvider == null) {
			efExprItemProvider = new EFExprItemProvider(this);
		}

		return efExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.EGExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EGExprItemProvider egExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.EGExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEGExprAdapter() {
		if (egExprItemProvider == null) {
			egExprItemProvider = new EGExprItemProvider(this);
		}

		return egExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.ExistenceQuantExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistenceQuantExprItemProvider existenceQuantExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.ExistenceQuantExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistenceQuantExprAdapter() {
		if (existenceQuantExprItemProvider == null) {
			existenceQuantExprItemProvider = new ExistenceQuantExprItemProvider(this);
		}

		return existenceQuantExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.BoundVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundVariableItemProvider boundVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.BoundVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundVariableAdapter() {
		if (boundVariableItemProvider == null) {
			boundVariableItemProvider = new BoundVariableItemProvider(this);
		}

		return boundVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.UniversalQuantExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniversalQuantExprItemProvider universalQuantExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.UniversalQuantExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniversalQuantExprAdapter() {
		if (universalQuantExprItemProvider == null) {
			universalQuantExprItemProvider = new UniversalQuantExprItemProvider(this);
		}

		return universalQuantExprItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.muml.uppaal.adapter.mtctl.quantifiers.LeadsToExpr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeadsToExprItemProvider leadsToExprItemProvider;

	/**
	 * This creates an adapter for a {@link org.muml.uppaal.adapter.mtctl.quantifiers.LeadsToExpr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeadsToExprAdapter() {
		if (leadsToExprItemProvider == null) {
			leadsToExprItemProvider = new LeadsToExprItemProvider(this);
		}

		return leadsToExprItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (afExprItemProvider != null) afExprItemProvider.dispose();
		if (agExprItemProvider != null) agExprItemProvider.dispose();
		if (efExprItemProvider != null) efExprItemProvider.dispose();
		if (egExprItemProvider != null) egExprItemProvider.dispose();
		if (existenceQuantExprItemProvider != null) existenceQuantExprItemProvider.dispose();
		if (boundVariableItemProvider != null) boundVariableItemProvider.dispose();
		if (universalQuantExprItemProvider != null) universalQuantExprItemProvider.dispose();
		if (leadsToExprItemProvider != null) leadsToExprItemProvider.dispose();
	}

}
