<?xml version="1.0" encoding="UTF-8"?>
<uppaal:NTA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:declarations="http://www.uni-paderborn.de/uppaal/declarations/0.4.0" xmlns:expressions="http://www.uni-paderborn.de/uppaal/expressions/0.4.0" xmlns:statements="http://www.uni-paderborn.de/uppaal/statements/0.4.0" xmlns:system="http://www.uni-paderborn.de/uppaal/declarations/system" xmlns:types="http://www.uni-paderborn.de/uppaal/types/0.4.0" xmlns:uppaal="http://www.uni-paderborn.de/uppaal/0.4.0" xsi:schemaLocation="http://www.uni-paderborn.de/uppaal/declarations/0.4.0 http://www.uni-paderborn.de/uppaal/0.4.0#//declarations http://www.uni-paderborn.de/uppaal/expressions/0.4.0 http://www.uni-paderborn.de/uppaal/0.4.0#//expressions http://www.uni-paderborn.de/uppaal/statements/0.4.0 http://www.uni-paderborn.de/uppaal/0.4.0#//statements http://www.uni-paderborn.de/uppaal/declarations/system http://www.uni-paderborn.de/uppaal/0.4.0#//declarations/system http://www.uni-paderborn.de/uppaal/types/0.4.0 http://www.uni-paderborn.de/uppaal/0.4.0#//types" name="MumlElement_EinparkhilfeCIC">
  <globalDeclarations>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:ChannelPrefixExpression" urgent="true" channelType="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.3"/>
      <variable xsi:type="declarations:Variable" name="hurry"/>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MUMLInt"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="-2147483648"/>
          <upperBound xsi:type="expressions:LiteralExpression" text="2147483647"/>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MUMLShort"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="-32768"/>
          <upperBound xsi:type="expressions:LiteralExpression" text="32767"/>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MUMLByte"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="-128"/>
          <upperBound xsi:type="expressions:LiteralExpression" text="127"/>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="NUM_OF_MESSAGE_KINDS">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="4"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="NUM_MAX_MESSAGES_IN_TRANSIT">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="126"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MAX_BUFFER_SIZE">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="42"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MAX_NUM_OF_MESSAGE_BUFFERS_PER_ROLE">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="1"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MessageId"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MessageKind"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.4/@elements.0"/>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="Message"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Variable" name="mId"/>
        </declaration>
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Variable" name="mType"/>
        </declaration>
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
          <variable xsi:type="declarations:Variable" name="mArgsPosition"/>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="Buffer"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="types:RangeTypeSpecification">
            <bounds>
              <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
              <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </bounds>
          </typeDefinition>
          <variable xsi:type="declarations:Variable" name="tail"/>
        </declaration>
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
          <variable xsi:type="declarations:Variable" name="messages">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
          </variable>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MumlElement_startParameters"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Variable" name="MumlElement_startMessageID"/>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MumlElement_stopParameters"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Variable" name="MumlElement_stopMessageID"/>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MumlElement_freiParameters"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Variable" name="MumlElement_freiMessageID"/>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="MumlElement_akzeptiereStopParameters"/>
      <typeDefinition xsi:type="types:StructTypeSpecification">
        <declaration>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStopMessageID"/>
        </declaration>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="NUM_OF_DISCRETE_PORT_INSTANCES">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="2"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="NUM_OF_COMPONENT_INSTANCES">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="2"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="discretePortInstance"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:ArithmeticExpression" operator="-">
            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
          </upperBound>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypeDeclaration">
      <type name="componentInstance"/>
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:ArithmeticExpression" operator="-">
            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.17/@elements.0"/>
            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
          </upperBound>
        </bounds>
      </typeDefinition>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="next">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="previous">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="first">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="last">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="-1"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.16/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="self">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="1"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:ArithmeticExpression" operator="-">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.7/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
            </upperBound>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="buffer_assignment">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <index xsi:type="expressions:ArithmeticExpression">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.4/@elements.0"/>
          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
        </index>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ArrayInitializer">
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="0"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="0"/>
            </initializer>
          </initializer>
          <initializer xsi:type="declarations:ArrayInitializer">
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="0"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="0"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="types:RangeTypeSpecification">
          <bounds>
            <lowerBound xsi:type="expressions:LiteralExpression" text="-1"/>
            <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
          </bounds>
        </dataTypeExpression>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="bufferSize">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <index xsi:type="expressions:ArithmeticExpression">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.4/@elements.0"/>
          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
        </index>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ArrayInitializer">
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="2"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="2"/>
            </initializer>
          </initializer>
          <initializer xsi:type="declarations:ArrayInitializer">
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="2"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="2"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
            <initializer xsi:type="declarations:ExpressionInitializer">
              <expression xsi:type="expressions:LiteralExpression" text="-1"/>
            </initializer>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Variable" name="overflow"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:LiteralExpression" text="15"/>
        </bounds>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="intermediateLocationSemaphore"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
      <variable xsi:type="declarations:Variable" name="buffers">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.7/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
      <variable xsi:type="declarations:Variable" name="connectors">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Variable" name="earliest">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Variable" name="latest">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.2"/>
      <variable xsi:type="declarations:Variable" name="transmissionTimes">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="nullMessageKind">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="0"/>
        </initializer>
      </variable>
      <variable xsi:type="declarations:Variable" name="MumlElement_start">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="1"/>
        </initializer>
      </variable>
      <variable xsi:type="declarations:Variable" name="MumlElement_stop">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="2"/>
        </initializer>
      </variable>
      <variable xsi:type="declarations:Variable" name="MumlElement_frei">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="3"/>
        </initializer>
      </variable>
      <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStop">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="4"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="nullMessageId">
        <initializer xsi:type="declarations:ExpressionInitializer">
          <expression xsi:type="expressions:LiteralExpression" text="0"/>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="nullMessage">
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.0"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
      <variable xsi:type="declarations:Variable" name="freeIds">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="1"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="2"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="3"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="4"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="5"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="6"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="7"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="8"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="9"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="10"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="11"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="12"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="13"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="14"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="15"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="17"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="16"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="19"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="18"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="21"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="20"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="23"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="22"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="25"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="24"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="27"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="26"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="29"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="28"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="31"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="30"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="34"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="35"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="32"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="33"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="38"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="39"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="36"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="37"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="42"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="43"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="40"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="41"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="46"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="47"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="44"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="45"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="51"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="50"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="49"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="48"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="55"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="54"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="53"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="52"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="59"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="58"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="57"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="56"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="63"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="62"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="61"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="60"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="68"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="69"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="70"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="71"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="64"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="65"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="66"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="67"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="76"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="77"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="78"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="79"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="72"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="73"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="74"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="75"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="85"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="84"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="87"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="86"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="81"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="80"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="83"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="82"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="93"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="92"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="95"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="94"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="89"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="88"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="91"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="90"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="102"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="103"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="100"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="101"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="98"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="99"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="96"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="97"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="110"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="111"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="108"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="109"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="106"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="107"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="104"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="105"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="119"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="118"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="117"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="116"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="115"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="114"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="113"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="112"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="126"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="125"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="124"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="123"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="122"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="121"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="120"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.12/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_startNullMessage"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.13/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_stopNullMessage"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.14/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_freiNullMessage"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.15/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStopNullMessage"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        </bounds>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MumlElement_startTail"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        </bounds>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MumlElement_stopTail"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        </bounds>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MumlElement_freiTail"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="types:RangeTypeSpecification">
        <bounds>
          <lowerBound xsi:type="expressions:LiteralExpression" text="0"/>
          <upperBound xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
        </bounds>
      </typeDefinition>
      <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStopTail"/>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.12/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_startMessageArguments">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.13/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_stopMessageArguments">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.14/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_freiMessageArguments">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.15/@type.0"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStopMessageArguments">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="add">
        <block>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.50/@elements.0/@parameter.0/@elements.0"/>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                  <index xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.50/@elements.0/@parameter.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
                  </index>
                </identifier>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.50/@elements.0/@parameter.1/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.50/@elements.0/@parameter.0/@elements.0"/>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
              </expression>
            </expression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="b" callType="CALL_BY_REFERENCE"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="e"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Function" name="getNumberOfElementsInBuffer">
        <block>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:ScopedIdentifierExpression">
              <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.51/@elements.0/@parameter.0/@elements.0"/>
              <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="b"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="check">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
              <variable xsi:type="declarations:Variable" name="nextMessage">
                <initializer xsi:type="declarations:ExpressionInitializer">
                  <expression xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.52/@elements.0/@parameter.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                      <index xsi:type="expressions:LiteralExpression" text="0"/>
                    </identifier>
                  </expression>
                </initializer>
              </variable>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LogicalExpression">
              <firstExpr xsi:type="expressions:CompareExpression" operator="!=">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.52/@elements.0/@parameter.1/@elements.0"/>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:CompareExpression">
                <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                  <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.52/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                  <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                </firstExpr>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.52/@elements.0/@parameter.1/@elements.0"/>
              </secondExpr>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="buffer"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mKind"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="checkMessageInBuffer">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:IfStatement">
              <ifExpression xsi:type="expressions:CompareExpression">
                <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                  <scope xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@parameter.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </identifier>
                  </scope>
                  <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                </firstExpr>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.53/@elements.0/@parameter.1/@elements.0"/>
              </ifExpression>
              <thenStatement xsi:type="statements:ReturnStatement">
                <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
              </thenStatement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="buffer"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mKind"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="remove">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.52/@elements.0">
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.0/@elements.0"/>
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.1/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
                  <variable xsi:type="declarations:Variable" name="i"/>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ForLoop">
                <initialization xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                </initialization>
                <condition xsi:type="expressions:CompareExpression" operator="&lt;">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                    <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                  </secondExpr>
                </condition>
                <iteration xsi:type="expressions:PostIncrementDecrementExpression">
                  <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                </iteration>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      </identifier>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                        <index xsi:type="expressions:ArithmeticExpression">
                          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                        </index>
                      </identifier>
                    </secondExpr>
                  </expression>
                </statement>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                      <index xsi:type="expressions:ArithmeticExpression" operator="-">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                      </index>
                    </identifier>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.36/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
                  <expression xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.54/@elements.0/@parameter.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
                  </expression>
                </expression>
              </statement>
            </thenStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.11/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="buffer" callType="CALL_BY_REFERENCE"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="m"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="receive">
        <block>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.52/@elements.0">
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.55/@elements.0/@parameter.0/@elements.0"/>
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.55/@elements.0/@parameter.0/@elements.0"/>
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.55/@elements.0/@parameter.1/@elements.0"/>
                </index>
              </argument>
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.55/@elements.0/@parameter.1/@elements.0"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="receiver"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mKind"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
      <variable xsi:type="declarations:Function" name="requestId">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:IfStatement">
              <ifExpression xsi:type="expressions:CompareExpression" operator="!=">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                </firstExpr>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
              </ifExpression>
              <thenStatement xsi:type="statements:Block">
                <declarations>
                  <declaration xsi:type="declarations:TypedDeclaration">
                    <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
                    <variable xsi:type="declarations:Variable" name="result"/>
                  </declaration>
                </declarations>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@statement.0/@statement/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </secondExpr>
                  </expression>
                </statement>
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                  </expression>
                </statement>
                <statement xsi:type="statements:ReturnStatement">
                  <returnExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.56/@elements.0/@block/@statement.0/@statement/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                </statement>
              </thenStatement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
          </statement>
        </block>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="releaseId">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:IfStatement">
              <ifExpression xsi:type="expressions:CompareExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                </firstExpr>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@parameter.0/@elements.0"/>
              </ifExpression>
              <thenStatement xsi:type="statements:ReturnStatement">
                <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
              </thenStatement>
            </statement>
          </statement>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:IfStatement">
              <ifExpression xsi:type="expressions:CompareExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                </firstExpr>
                <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
              </ifExpression>
              <thenStatement xsi:type="statements:Block">
                <statement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.37/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.57/@elements.0/@parameter.0/@elements.0"/>
                  </expression>
                </statement>
                <statement xsi:type="statements:ReturnStatement">
                  <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
                </statement>
              </thenStatement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="id"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Function" name="addMumlElement_startArguments">
        <block>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.46/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.42/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.58/@elements.0/@parameter.0/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.42/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:ArithmeticExpression" operator="-">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.42/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.12/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="m"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Function" name="addMumlElement_stopArguments">
        <block>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.47/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.43/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.59/@elements.0/@parameter.0/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.43/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:ArithmeticExpression" operator="-">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.43/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.13/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="m"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Function" name="addMumlElement_freiArguments">
        <block>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.48/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.44/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.60/@elements.0/@parameter.0/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.44/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:ArithmeticExpression" operator="-">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.44/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.14/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="m"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      <variable xsi:type="declarations:Function" name="addMumlElement_akzeptiereStopArguments">
        <block>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.49/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.45/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.61/@elements.0/@parameter.0/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ExpressionStatement">
            <expression xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.45/@elements.0"/>
            </expression>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:ArithmeticExpression" operator="-">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.45/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
            </returnExpression>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.15/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="m"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="removeMumlElement_startArguments">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:Block">
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.46/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </scope>
                    <identifier identifier="#//@globalDeclarations/@declaration.12/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@parameter.0/@elements.0"/>
                </ifExpression>
                <thenStatement xsi:type="statements:Block">
                  <declarations>
                    <declaration xsi:type="declarations:TypedDeclaration">
                      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
                      <variable xsi:type="declarations:Variable" name="j"/>
                    </declaration>
                  </declarations>
                  <statement xsi:type="statements:ForLoop">
                    <initialization xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:ArithmeticExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                      </secondExpr>
                    </initialization>
                    <condition xsi:type="expressions:CompareExpression" operator="&lt;">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                    </condition>
                    <iteration xsi:type="expressions:PostIncrementDecrementExpression">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    </iteration>
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.46/@elements.0">
                          <index xsi:type="expressions:ArithmeticExpression" operator="-">
                            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                          </index>
                        </firstExpr>
                        <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.46/@elements.0">
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.62/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                        </secondExpr>
                      </expression>
                    </statement>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.46/@elements.0">
                        <index xsi:type="expressions:ArithmeticExpression" operator="-">
                          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                        </index>
                      </firstExpr>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.38/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.42/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ReturnStatement">
                    <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
                  </statement>
                </thenStatement>
              </statement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mId"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="removeMumlElement_stopArguments">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:Block">
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.47/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </scope>
                    <identifier identifier="#//@globalDeclarations/@declaration.13/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@parameter.0/@elements.0"/>
                </ifExpression>
                <thenStatement xsi:type="statements:Block">
                  <declarations>
                    <declaration xsi:type="declarations:TypedDeclaration">
                      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
                      <variable xsi:type="declarations:Variable" name="j"/>
                    </declaration>
                  </declarations>
                  <statement xsi:type="statements:ForLoop">
                    <initialization xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:ArithmeticExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                      </secondExpr>
                    </initialization>
                    <condition xsi:type="expressions:CompareExpression" operator="&lt;">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                    </condition>
                    <iteration xsi:type="expressions:PostIncrementDecrementExpression">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    </iteration>
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.47/@elements.0">
                          <index xsi:type="expressions:ArithmeticExpression" operator="-">
                            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                          </index>
                        </firstExpr>
                        <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.47/@elements.0">
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.63/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                        </secondExpr>
                      </expression>
                    </statement>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.47/@elements.0">
                        <index xsi:type="expressions:ArithmeticExpression" operator="-">
                          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                        </index>
                      </firstExpr>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.39/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.43/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ReturnStatement">
                    <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
                  </statement>
                </thenStatement>
              </statement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mId"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="removeMumlElement_freiArguments">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:Block">
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.48/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </scope>
                    <identifier identifier="#//@globalDeclarations/@declaration.14/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@parameter.0/@elements.0"/>
                </ifExpression>
                <thenStatement xsi:type="statements:Block">
                  <declarations>
                    <declaration xsi:type="declarations:TypedDeclaration">
                      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
                      <variable xsi:type="declarations:Variable" name="j"/>
                    </declaration>
                  </declarations>
                  <statement xsi:type="statements:ForLoop">
                    <initialization xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:ArithmeticExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                      </secondExpr>
                    </initialization>
                    <condition xsi:type="expressions:CompareExpression" operator="&lt;">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                    </condition>
                    <iteration xsi:type="expressions:PostIncrementDecrementExpression">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    </iteration>
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.48/@elements.0">
                          <index xsi:type="expressions:ArithmeticExpression" operator="-">
                            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                          </index>
                        </firstExpr>
                        <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.48/@elements.0">
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.64/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                        </secondExpr>
                      </expression>
                    </statement>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.48/@elements.0">
                        <index xsi:type="expressions:ArithmeticExpression" operator="-">
                          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                        </index>
                      </firstExpr>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.40/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.44/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ReturnStatement">
                    <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
                  </statement>
                </thenStatement>
              </statement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mId"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      <variable xsi:type="declarations:Function" name="removeMumlElement_akzeptiereStopArguments">
        <block>
          <declarations>
            <declaration xsi:type="declarations:TypedDeclaration">
              <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
              <variable xsi:type="declarations:Variable" name="i"/>
            </declaration>
          </declarations>
          <statement xsi:type="statements:ForLoop">
            <initialization xsi:type="expressions:AssignmentExpression">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
            </initialization>
            <condition xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
            </condition>
            <iteration xsi:type="expressions:PostIncrementDecrementExpression">
              <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
            </iteration>
            <statement xsi:type="statements:Block">
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.49/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                    </scope>
                    <identifier identifier="#//@globalDeclarations/@declaration.15/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@parameter.0/@elements.0"/>
                </ifExpression>
                <thenStatement xsi:type="statements:Block">
                  <declarations>
                    <declaration xsi:type="declarations:TypedDeclaration">
                      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
                      <variable xsi:type="declarations:Variable" name="j"/>
                    </declaration>
                  </declarations>
                  <statement xsi:type="statements:ForLoop">
                    <initialization xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:ArithmeticExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@declarations/@declaration.0/@elements.0"/>
                        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                      </secondExpr>
                    </initialization>
                    <condition xsi:type="expressions:CompareExpression" operator="&lt;">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                    </condition>
                    <iteration xsi:type="expressions:PostIncrementDecrementExpression">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    </iteration>
                    <statement xsi:type="statements:ExpressionStatement">
                      <expression xsi:type="expressions:AssignmentExpression">
                        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.49/@elements.0">
                          <index xsi:type="expressions:ArithmeticExpression" operator="-">
                            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                          </index>
                        </firstExpr>
                        <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.49/@elements.0">
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.65/@elements.0/@block/@statement.0/@statement/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                        </secondExpr>
                      </expression>
                    </statement>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:AssignmentExpression">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.49/@elements.0">
                        <index xsi:type="expressions:ArithmeticExpression" operator="-">
                          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.5/@elements.0"/>
                          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                        </index>
                      </firstExpr>
                      <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.41/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ExpressionStatement">
                    <expression xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.45/@elements.0"/>
                    </expression>
                  </statement>
                  <statement xsi:type="statements:ReturnStatement">
                    <returnExpression xsi:type="expressions:LiteralExpression" text="true"/>
                  </statement>
                </thenStatement>
              </statement>
            </statement>
          </statement>
          <statement xsi:type="statements:ReturnStatement">
            <returnExpression xsi:type="expressions:LiteralExpression" text="false"/>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mId"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="sendMumlElement_start">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                </scope>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.12/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="MumlElement_startInstance">
                    <initializer xsi:type="declarations:ArrayInitializer">
                      <initializer xsi:type="declarations:ExpressionInitializer">
                        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                      </initializer>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="message">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.36/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="mId">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.56/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.12/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.1"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.2/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.58/@elements.0">
                    <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  </secondExpr>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.50/@elements.0">
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                  </argument>
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                    </index>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:ConditionExpression">
                  <ifExpression xsi:type="expressions:CompareExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                      <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                    </secondExpr>
                  </ifExpression>
                  <thenExpression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                  </thenExpression>
                  <elseExpression xsi:type="expressions:PostIncrementDecrementExpression">
                    <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.66/@elements.0/@parameter.0/@elements.0"/>
                    </expression>
                  </elseExpression>
                </expression>
              </statement>
            </thenStatement>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.27/@elements.0"/>
                <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
              </expression>
            </elseStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="sender"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="sendMumlElement_stop">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                </scope>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.13/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="MumlElement_stopInstance">
                    <initializer xsi:type="declarations:ArrayInitializer">
                      <initializer xsi:type="declarations:ExpressionInitializer">
                        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                      </initializer>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="message">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.36/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="mId">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.56/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.13/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.2/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.59/@elements.0">
                    <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  </secondExpr>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.50/@elements.0">
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                  </argument>
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                    </index>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:ConditionExpression">
                  <ifExpression xsi:type="expressions:CompareExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                      <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                    </secondExpr>
                  </ifExpression>
                  <thenExpression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                  </thenExpression>
                  <elseExpression xsi:type="expressions:PostIncrementDecrementExpression">
                    <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.67/@elements.0/@parameter.0/@elements.0"/>
                    </expression>
                  </elseExpression>
                </expression>
              </statement>
            </thenStatement>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.27/@elements.0"/>
                <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
              </expression>
            </elseStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="sender"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="sendMumlElement_frei">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                </scope>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.14/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="MumlElement_freiInstance">
                    <initializer xsi:type="declarations:ArrayInitializer">
                      <initializer xsi:type="declarations:ExpressionInitializer">
                        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                      </initializer>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="message">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.36/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="mId">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.56/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.14/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.2/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.60/@elements.0">
                    <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  </secondExpr>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.50/@elements.0">
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                  </argument>
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                    </index>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:ConditionExpression">
                  <ifExpression xsi:type="expressions:CompareExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                      <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                    </secondExpr>
                  </ifExpression>
                  <thenExpression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                  </thenExpression>
                  <elseExpression xsi:type="expressions:PostIncrementDecrementExpression">
                    <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.68/@elements.0/@parameter.0/@elements.0"/>
                    </expression>
                  </elseExpression>
                </expression>
              </statement>
            </thenStatement>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.27/@elements.0"/>
                <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
              </expression>
            </elseStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="sender"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="sendMumlElement_akzeptiereStop">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:CompareExpression" operator="&lt;">
              <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                </scope>
                <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.15/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="MumlElement_akzeptiereStopInstance">
                    <initializer xsi:type="declarations:ArrayInitializer">
                      <initializer xsi:type="declarations:ExpressionInitializer">
                        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                      </initializer>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="message">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.36/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.8/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="mId">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.35/@elements.0"/>
                    </initializer>
                  </variable>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.56/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.15/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.2/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.4"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.2/@elements.0"/>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.61/@elements.0">
                    <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                  </secondExpr>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.50/@elements.0">
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                  </argument>
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.1/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:AssignmentExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                    </index>
                  </firstExpr>
                  <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:ConditionExpression">
                  <ifExpression xsi:type="expressions:CompareExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
                      <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
                      <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
                    </secondExpr>
                  </ifExpression>
                  <thenExpression xsi:type="expressions:AssignmentExpression">
                    <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                    </firstExpr>
                    <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
                  </thenExpression>
                  <elseExpression xsi:type="expressions:PostIncrementDecrementExpression">
                    <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.32/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.69/@elements.0/@parameter.0/@elements.0"/>
                    </expression>
                  </elseExpression>
                </expression>
              </statement>
            </thenStatement>
            <elseStatement xsi:type="statements:ExpressionStatement">
              <expression xsi:type="expressions:AssignmentExpression">
                <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.27/@elements.0"/>
                <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
              </expression>
            </elseStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="sender"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.4"/>
      <variable xsi:type="declarations:Function" name="consume">
        <block>
          <statement xsi:type="statements:IfStatement">
            <ifExpression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.0/@elements.0"/>
              <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
            </ifExpression>
            <thenStatement xsi:type="statements:Block">
              <declarations>
                <declaration xsi:type="declarations:TypedDeclaration">
                  <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
                  <variable xsi:type="declarations:Variable" name="nextMessage">
                    <initializer xsi:type="declarations:ExpressionInitializer">
                      <expression xsi:type="expressions:ScopedIdentifierExpression">
                        <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.0/@elements.0"/>
                          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
                            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.0/@elements.0"/>
                            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                          </index>
                        </scope>
                        <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
                          <index xsi:type="expressions:LiteralExpression" text="0"/>
                        </identifier>
                      </expression>
                    </initializer>
                  </variable>
                </declaration>
              </declarations>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.57/@elements.0">
                  <argument xsi:type="expressions:ScopedIdentifierExpression">
                    <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                    <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                  </argument>
                </expression>
              </statement>
              <statement xsi:type="statements:ExpressionStatement">
                <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.54/@elements.0">
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.0/@elements.0"/>
                    <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.0/@elements.0"/>
                      <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                    </index>
                  </argument>
                  <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                </expression>
              </statement>
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.1"/>
                </ifExpression>
                <thenStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.62/@elements.0">
                    <argument xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                    </argument>
                  </expression>
                </thenStatement>
              </statement>
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
                </ifExpression>
                <thenStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.63/@elements.0">
                    <argument xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                    </argument>
                  </expression>
                </thenStatement>
              </statement>
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
                </ifExpression>
                <thenStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.64/@elements.0">
                    <argument xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                    </argument>
                  </expression>
                </thenStatement>
              </statement>
              <statement xsi:type="statements:IfStatement">
                <ifExpression xsi:type="expressions:CompareExpression">
                  <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@parameter.1/@elements.0"/>
                  <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.4"/>
                </ifExpression>
                <thenStatement xsi:type="statements:ExpressionStatement">
                  <expression xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.65/@elements.0">
                    <argument xsi:type="expressions:ScopedIdentifierExpression">
                      <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.70/@elements.0/@block/@statement.0/@thenStatement/@declarations/@declaration.0/@elements.0"/>
                      <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.0/@elements.0"/>
                    </argument>
                  </expression>
                </thenStatement>
              </statement>
            </thenStatement>
          </statement>
        </block>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="receiver"/>
        </parameter>
        <parameter>
          <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
          <variable xsi:type="declarations:Parameter" name="mKind"/>
        </parameter>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.2"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_cFrei0">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:ChannelPrefixExpression" urgent="true" channelType="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.3"/>
      <variable xsi:type="declarations:Variable" name="exit_MumlElement_Initial">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.2"/>
      <variable xsi:type="declarations:Variable" name="MumlElement_cHindernis0">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:ChannelPrefixExpression" urgent="true" channelType="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.3"/>
      <variable xsi:type="declarations:Variable" name="exit_MumlElement_Initial0">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:ChannelPrefixExpression" urgent="true" channelType="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.3"/>
      <variable xsi:type="declarations:Variable" name="exit_MumlElement_aktiv0">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:ChannelPrefixExpression" urgent="true" channelType="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.3"/>
      <variable xsi:type="declarations:Variable" name="enter_MumlElement_aktiv0_in_MumlElement_RolleHinderniserkennung0_via_MumlElement_aktiv0_ENTRY0">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.1/@type.0"/>
      <variable xsi:type="declarations:Variable" name="trigger1">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
    <declaration xsi:type="declarations:TypedDeclaration">
      <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.1/@type.0"/>
      <variable xsi:type="declarations:Variable" name="trigger2">
        <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
        <initializer xsi:type="declarations:ArrayInitializer">
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
          <initializer xsi:type="declarations:ExpressionInitializer">
            <expression xsi:type="expressions:LiteralExpression" text="0"/>
          </initializer>
        </initializer>
      </variable>
    </declaration>
  </globalDeclarations>
  <template name="Connector" init="#//@template.0/@location.0">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="sender"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="receiver"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="min"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="max"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="types:PredefinedType ../../../plugin/de.uni_paderborn.uppaal/model/stdlib.xmi#//@types.1"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="loss"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="tmp"/>
      </declaration>
    </declarations>
    <location name="Idle">
      <invariant xsi:type="expressions:LogicalExpression" operator="imply">
        <firstExpr xsi:type="expressions:CompareExpression" operator=">">
          <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
            <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
            </scope>
            <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:CompareExpression" operator="&lt;=">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
            </index>
          </firstExpr>
          <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.3/@elements.0"/>
        </secondExpr>
      </invariant>
    </location>
    <location name="transfer_loc" locationTimeKind="COMMITED"/>
    <edge source="#//@template.0/@location.0" target="#//@template.0/@location.1">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:LogicalExpression">
          <firstExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.52/@elements.0">
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
            </argument>
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@edge.0/@selection.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:LogicalExpression">
            <firstExpr xsi:type="expressions:CompareExpression" operator=">=">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
                </index>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.2/@elements.0"/>
            </firstExpr>
            <secondExpr xsi:type="expressions:CompareExpression" operator="&lt;=">
              <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.33/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
                  <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
                </index>
              </firstExpr>
              <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.3/@elements.0"/>
            </secondExpr>
          </secondExpr>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.54/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.30/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
        </argument>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@edge.0/@selection.0/@elements.0"/>
      </update>
      <update xsi:type="expressions:ConditionExpression">
        <ifExpression xsi:type="expressions:CompareExpression">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:ArithmeticExpression" operator="-">
            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.6/@elements.0"/>
            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
          </secondExpr>
        </ifExpression>
        <thenExpression xsi:type="expressions:AssignmentExpression">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
        </thenExpression>
        <elseExpression xsi:type="expressions:PostIncrementDecrementExpression">
          <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.31/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.0/@elements.0"/>
          </expression>
        </elseExpression>
      </update>
      <selection>
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.9/@type.0"/>
        <variable xsi:type="declarations:Variable" name="i"/>
      </selection>
    </edge>
    <edge source="#//@template.0/@location.1" target="#//@template.0/@location.0">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:CompareExpression" operator="&lt;">
          <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
            <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
                <index xsi:type="expressions:ScopedIdentifierExpression">
                  <scope xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
                  <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                </index>
              </index>
            </scope>
            <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.26/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:ScopedIdentifierExpression">
              <scope xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
              <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
            </index>
          </secondExpr>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.50/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:ScopedIdentifierExpression">
              <scope xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
              <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
            </index>
          </index>
        </argument>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.0/@location.1" target="#//@template.0/@location.0">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:CompareExpression" operator=">=">
          <firstExpr xsi:type="expressions:ScopedIdentifierExpression">
            <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
                <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
                <index xsi:type="expressions:ScopedIdentifierExpression">
                  <scope xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
                  <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
                </index>
              </index>
            </scope>
            <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.0/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.26/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:ScopedIdentifierExpression">
              <scope xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@declarations/@declaration.0/@elements.0"/>
              <identifier identifier="#//@globalDeclarations/@declaration.10/@typeDefinition/@declaration.1/@elements.0"/>
            </index>
          </secondExpr>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.27/@elements.0"/>
        <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
      </update>
    </edge>
    <edge source="#//@template.0/@location.1" target="#//@template.0/@location.0">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:CompareExpression">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.0/@parameter.4/@elements.0"/>
          <secondExpr xsi:type="expressions:LiteralExpression" text="true"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
    </edge>
  </template>
  <template name="MumlElement_ParksystemComponentRTSC" init="#//@template.1/@location.1">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.19/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="componentInstanceID"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="discretePortInstanceID"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="msg"/>
      </declaration>
    </declarations>
    <location name="MumlElement_ParksystemComponentRTSC_IDLE"/>
    <location name="MumlElement_Initial_ACTIVE_IN_MumlElement_ParksystemComponentRTSC"/>
  </template>
  <template name="MumlElement_RolleParksystem0" init="#//@template.2/@location.1">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.19/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="componentInstanceID"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="discretePortInstanceID"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="msg"/>
      </declaration>
    </declarations>
    <location name="MumlElement_RolleParksystem0_IDLE"/>
    <location name="MumlElement_ausgeschaltet0_ACTIVE_IN_MumlElement_RolleParksystem0"/>
    <location name="MumlElement_einparkend0_ACTIVE_IN_MumlElement_RolleParksystem0">
      <invariant xsi:type="expressions:CompareExpression" operator="&lt;=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.71/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </invariant>
    </location>
    <location name="MumlElement_fehler0_ACTIVE_IN_MumlElement_RolleParksystem0"/>
    <location name="MumlElement_stoppend0_ACTIVE_IN_MumlElement_RolleParksystem0"/>
    <location name="INTERMEDIATE" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE0" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE1" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE2" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE3" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE4" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE5" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <edge source="#//@template.2/@location.4" target="#//@template.2/@location.5">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.4"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.4"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.4"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.2/@location.1" target="#//@template.2/@location.6">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.71/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.66/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.2" target="#//@template.2/@location.7">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.71/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
      </update>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.2/@location.2" target="#//@template.2/@location.8">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.67/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.2" target="#//@template.2/@location.9">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:CompareExpression" operator=">=">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.71/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.3" target="#//@template.2/@location.10">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.67/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.2/@location.4" target="#//@template.2/@location.11">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.2/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.3"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.2/@location.5" target="#//@template.2/@location.1">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.6" target="#//@template.2/@location.2">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.7" target="#//@template.2/@location.2">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.8" target="#//@template.2/@location.4">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.9" target="#//@template.2/@location.3">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.10" target="#//@template.2/@location.4">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.2/@location.11" target="#//@template.2/@location.4">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
  </template>
  <template name="MumlElement_HinderniserkennungComponentRTSC" init="#//@template.3/@location.1">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.19/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="componentInstanceID"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="discretePortInstanceID"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="msg"/>
      </declaration>
    </declarations>
    <location name="MumlElement_HinderniserkennungComponentRTSC_IDLE"/>
    <location name="MumlElement_Initial0_ACTIVE_IN_MumlElement_HinderniserkennungComponentRTSC"/>
  </template>
  <template name="MumlElement_RolleHinderniserkennung0" init="#//@template.4/@location.1">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.19/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="componentInstanceID"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="discretePortInstanceID"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="msg"/>
      </declaration>
    </declarations>
    <location name="MumlElement_RolleHinderniserkennung0_IDLE"/>
    <location name="MumlElement_inaktiv0_ACTIVE_IN_MumlElement_RolleHinderniserkennung0"/>
    <location name="MumlElement_aktiv0_ACTIVE_IN_MumlElement_RolleHinderniserkennung0"/>
    <location name="MumlElement_RolleHinderniserkennung0_AUX_MumlElement_aktiv0_MumlElement_aktiv0_ENTRY0" locationTimeKind="COMMITED"/>
    <location name="MumlElement_aktiv0_EXIT01" locationTimeKind="COMMITED"/>
    <location name="MumlElement_aktiv0_EXIT02" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE6" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE7" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE8" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <edge source="#//@template.4/@location.3" target="#//@template.4/@location.2">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <synchronization kind="!">
        <channelExpression identifier="#//@globalDeclarations/@declaration.76/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.2" target="#//@template.4/@location.4">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:LogicalExpression">
          <firstExpr xsi:type="expressions:CompareExpression">
            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            </firstExpr>
            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
          </secondExpr>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.2" target="#//@template.4/@location.5">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:LogicalExpression">
          <firstExpr xsi:type="expressions:CompareExpression">
            <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.78/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            </firstExpr>
            <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
          </secondExpr>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.2"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.4" target="#//@template.4/@location.6">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.69/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization kind="!">
        <channelExpression identifier="#//@globalDeclarations/@declaration.75/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.5" target="#//@template.4/@location.7">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.69/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization kind="!">
        <channelExpression identifier="#//@globalDeclarations/@declaration.75/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.1" target="#//@template.4/@location.8">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.55/@elements.0">
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
          <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.1"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@declarations/@declaration.0/@elements.0"/>
        <secondExpr xsi:type="expressions:ScopedIdentifierExpression">
          <scope xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.29/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.25/@elements.0">
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
              <index xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.1"/>
            </index>
          </scope>
          <identifier identifier="#//@globalDeclarations/@declaration.11/@typeDefinition/@declaration.1/@elements.0">
            <index xsi:type="expressions:LiteralExpression" text="0"/>
          </identifier>
        </secondExpr>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.70/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.4/@parameter.1/@elements.0"/>
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.34/@elements.1"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
    <edge source="#//@template.4/@location.6" target="#//@template.4/@location.1">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.4/@location.7" target="#//@template.4/@location.1">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.4/@location.8" target="#//@template.4/@location.3">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
  </template>
  <template name="MumlElement_statechart0" init="#//@template.5/@location.0">
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.19/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="componentInstanceID"/>
    </parameter>
    <parameter>
      <typeDefinition xsi:type="expressions:DataPrefixExpression">
        <dataTypeExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.18/@type.0"/>
      </typeDefinition>
      <variable xsi:type="declarations:Parameter" name="discretePortInstanceID"/>
    </parameter>
    <declarations>
      <declaration xsi:type="declarations:TypedDeclaration">
        <typeDefinition xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.10/@type.0"/>
        <variable xsi:type="declarations:Variable" name="msg"/>
      </declaration>
    </declarations>
    <location name="MumlElement_statechart0_IDLE"/>
    <location name="MumlElement_beobachtend0_ACTIVE_IN_MumlElement_statechart0">
      <invariant xsi:type="expressions:CompareExpression" operator="&lt;=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.73/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </invariant>
    </location>
    <location name="MumlElement_hindernis0_ACTIVE_IN_MumlElement_statechart0"/>
    <location name="INTERMEDIATE9" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE10" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE11" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE12" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <location name="INTERMEDIATE13" colorCode="#ffffff" locationTimeKind="COMMITED"/>
    <edge source="#//@template.5/@location.1" target="#//@template.5/@location.3">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:AssignmentExpression" operator="-=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.75/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.5/@location.2" target="#//@template.5/@location.4">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:AssignmentExpression" operator="-=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.78/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.75/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.5/@location.0" target="#//@template.5/@location.5">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.73/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
      </update>
      <update xsi:type="expressions:AssignmentExpression" operator="+=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
      <synchronization>
        <channelExpression identifier="#//@globalDeclarations/@declaration.76/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </channelExpression>
      </synchronization>
    </edge>
    <edge source="#//@template.5/@location.1" target="#//@template.5/@location.6">
      <guard xsi:type="expressions:LogicalExpression">
        <firstExpr xsi:type="expressions:CompareExpression" operator=">=">
          <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.73/@elements.0">
            <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
          </firstExpr>
          <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:NegationExpression">
          <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
        </secondExpr>
      </guard>
      <update xsi:type="expressions:AssignmentExpression">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.73/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="0"/>
      </update>
      <update xsi:type="expressions:AssignmentExpression" operator="+=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:AssignmentExpression" operator="-=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:FunctionCallExpression" function="#//@globalDeclarations/@declaration.68/@elements.0">
        <argument xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.1" target="#//@template.5/@location.7">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <update xsi:type="expressions:AssignmentExpression" operator="-=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.77/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:AssignmentExpression" operator="+=">
        <firstExpr xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.78/@elements.0">
          <index xsi:type="expressions:IdentifierExpression" identifier="#//@template.5/@parameter.1/@elements.0"/>
        </firstExpr>
        <secondExpr xsi:type="expressions:LiteralExpression" text="1"/>
      </update>
      <update xsi:type="expressions:PostIncrementDecrementExpression">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.3" target="#//@template.5/@location.0">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.4" target="#//@template.5/@location.0">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.5" target="#//@template.5/@location.1">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.6" target="#//@template.5/@location.1">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
    <edge source="#//@template.5/@location.7" target="#//@template.5/@location.2">
      <update xsi:type="expressions:PostIncrementDecrementExpression" operator="--">
        <expression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </update>
    </edge>
  </template>
  <template name="UrgencyProvider" init="#//@template.6/@location.0">
    <location name="idle"/>
    <edge source="#//@template.6/@location.0" target="#//@template.6/@location.0">
      <guard xsi:type="expressions:NegationExpression">
        <negatedExpression xsi:type="expressions:IdentifierExpression" identifier="#//@globalDeclarations/@declaration.28/@elements.0"/>
      </guard>
      <synchronization kind="!">
        <channelExpression identifier="#//@globalDeclarations/@declaration.0/@elements.0"/>
      </synchronization>
    </edge>
  </template>
  <systemDeclarations>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="MumlElement_ParksystemComponentRTSC_component_0" referredTemplate="#//@template.1"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="MumlElement_RolleParksystem0_0" referredTemplate="#//@template.2"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="MumlElement_HinderniserkennungComponentRTSC_component_1" referredTemplate="#//@template.3"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="MumlElement_RolleHinderniserkennung0_1" referredTemplate="#//@template.4"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="MumlElement_statechart0_component_1" referredTemplate="#//@template.5"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="Connector_0_1" referredTemplate="#//@template.0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="false"/>
    </declaration>
    <declaration xsi:type="system:TemplateDeclaration">
      <declaredTemplate name="Connector_1_0" referredTemplate="#//@template.0"/>
      <argument xsi:type="expressions:LiteralExpression" text="1"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="0"/>
      <argument xsi:type="expressions:LiteralExpression" text="false"/>
    </declaration>
    <system>
      <instantiationList template="#//@systemDeclarations/@declaration.5/@declaredTemplate #//@systemDeclarations/@declaration.6/@declaredTemplate #//@systemDeclarations/@declaration.2/@declaredTemplate #//@systemDeclarations/@declaration.0/@declaredTemplate #//@systemDeclarations/@declaration.3/@declaredTemplate #//@systemDeclarations/@declaration.1/@declaredTemplate #//@systemDeclarations/@declaration.4/@declaredTemplate #//@template.6"/>
    </system>
  </systemDeclarations>
</uppaal:NTA>
