<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<templates>

<!--<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_leadsTo"
deleted="false" 
description="after first_expression holds, eventually second_expression holds" 
id="leadsTo"
enabled="true" 
name="leadsTo">${first_expression} leadsTo ${second_expression}</template>-->

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_forall"
deleted="false" 
description="expression should hold for all elements in the set" 
id="forall"
enabled="true" 
name="forall">forall(${name}:${Set})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_Instances"
deleted="false" 
description="set of instances of a type" 
id="Instances"
enabled="true" 
name="Instances">Instances&lt;${Type}&gt;</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_Subinstances"
deleted="false" 
description="set of subinstances of a multi discrete interaction endpoint" 
id="Subinstances"
enabled="true" 
name="Subinstances">Subinstances&lt;${Type}&gt;</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_exists"
deleted="false" 
description="there exists one element in the set for which the expression holds" 
id="exists"
enabled="true" 
name="exists">exists(${name}:${Set})</template>

<template autoinsert="true"
context="org.muml.uppaal.adapter.mtctl.kw_stateActive"
 deleted="false" 
 description="true iff state is active"
 id = "stateActive"
 enabled="true" 
 name="stateActive">stateActive(${state})</template>
 
<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_substateOf"
deleted="false" 
description="true iff state is a (proper) substate of superstate" 
id="substateOf"
enabled="true" 
name="substateOf">substateOf(${state},${superstate})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_stateInStatechart"
deleted="false" 
description="true iff state is indirectly contained in a statechart" 
id="stateInStatechart"
enabled="true" 
name="stateInStatechart">stateInStatechart(${state},${statechart})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_messageInTransit"
deleted="false" 
description="true iff message is in transit (i.e. message has been sent but not yet arrived in the receiver's buffer)" 
id="messageInTransit"
enabled="true" 
name="messageInTransit">messageInTransit(${message})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_messageInBuffer"
deleted="false" 
description="true iff message is in buffer" 
id="messageInBuffer"
enabled="true" 
name="messageInBuffer">messageInBuffer(${message},${buffer})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_messageDiscarded"
deleted="false" 
description="true iff a message of buffer gets discarded" 
id="messageDiscarded"
enabled="true" 
name="messageDiscarded">messageDiscarded(${buffer})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_transitionFiring"
deleted="false" 
description="true iff transition is firing" 
id="transitionFiring"
enabled="true" 
name="transitionFiring">transitionFiring(${transition})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_bufferMessageCount"
deleted="false" 
description="returns the current number of elements in a buffer" 
id="bufferMessageCount"
enabled="true" 
name="bufferMessageCount">bufferMessageCount(${buffer})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_sourceState"
deleted="false" 
description="returns the source state of the transition" 
id="sourceState"
enabled="true" 
name="sourceState">sourceState(${transition})</template>

<template autoinsert="true" 
context="org.muml.uppaal.adapter.mtctl.kw_targetState"
deleted="false" 
description="returns the target state of the transition" 
id="targetState"
enabled="true" 
name="targetState">targetState(${transition})</template>

</templates>