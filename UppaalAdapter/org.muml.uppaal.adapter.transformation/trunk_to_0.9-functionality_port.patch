Index: transforms/MUML2UPPAAL.qvto
===================================================================
--- transforms/MUML2UPPAAL.qvto	(revision 19035)
+++ transforms/MUML2UPPAAL.qvto	(working copy)
@@ -1370,6 +1370,7 @@
 	mapping pim::realtimestatechart::SynchronizationChannel :: SynchronizationChannel2SynchronizationChannel() : pim::realtimestatechart::SynchronizationChannel{
     	_name := self._name;
     	_comment := self._comment;
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     --	_state := self._state.map State2State();
     	_selectorType := self._selectorType.map DataType2DataType();
Index: transforms/cic/Protocol2CIC.qvto
===================================================================
--- transforms/cic/Protocol2CIC.qvto	(revision 19035)
+++ transforms/cic/Protocol2CIC.qvto	(working copy)
@@ -82,6 +82,7 @@
 mapping pim::protocol::CoordinationProtocol :: CoordinationProtocol2CoordinationProtocol() : pim::protocol::CoordinationProtocol{
     	_name := self._name;
     	_comment := self._comment;
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	
     	_verificationConstraintRepositories := self.verificationConstraintRepositories.map VerificationConstraintRepository2VerificationConstraintRepository();
@@ -193,6 +194,7 @@
 			result := new MessageType();		
 			result._name := self._name;
     		result._comment := self._comment;
+    		-- result._annotation := self._annotation.map EAnnotation2EAnnotation();
     		result._extensions := self._extensions.map Extension2Extension();
     		result._parameters := self._parameters.map Parameter2Parameter();
     		//do not set the repository to make sure not to execute the if condition again before finishing this transformation
@@ -218,6 +220,7 @@
     			result := new Parameter();  	
     			result._name := self._name;
     			result._comment := self._comment;
+    			-- result._annotation := self._annotation.map EAnnotation2EAnnotation();
     			result._extensions := self._extensions.map Extension2Extension();
     			result._dataType := self._dataType.map DataType2DataType();
     			}
@@ -242,6 +245,7 @@
     			result._name := self._name;
     			result._comment := self._comment;
     			result._primitiveType := self._primitiveType;
+    			-- result._annotation := self._annotation.map EAnnotation2EAnnotation();
     			result._extensions := self._extensions.map Extension2Extension();
     			};
    		 }
@@ -253,6 +257,7 @@
 //Overridden to replace _dataType := self._dataType.map PrimitiveDataType2PrimitiveDataType();
 mapping actionlanguage::NondeterministicChoiceExpression :: NondeterministicChoiceExpression2NondeterministicChoiceExpression() : actionlanguage::NondeterministicChoiceExpression{
     	_comment := self._comment;
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_range := self._range.map Range2Range();
     	
@@ -272,6 +277,7 @@
     			result := new ArrayDataType();
     			result._name := self._name;
     			result._comment := self._comment;
+    			-- result._annotation := self._annotation.map EAnnotation2EAnnotation();
     			result._extensions := self._extensions.map Extension2Extension();
     			result._type := self._type.map DataType2DataType();
     			result._cardinality := self._cardinality.map NaturalNumber2NaturalNumber();
@@ -293,6 +299,7 @@
     			result := new RangedPrimitiveDataType();
     			result._name := self._name;
     			result._comment := self._comment;
+    			-- result._annotation := self._annotation.map EAnnotation2EAnnotation();
     			result._extensions := self._extensions.map Extension2Extension();
     			
     			//Make sure to call PrimitiveDataType2PrimitiveDataType2().
Index: transforms/lib/MUML2MUML.qvto
===================================================================
--- transforms/lib/MUML2MUML.qvto	(revision 19035)
+++ transforms/lib/MUML2MUML.qvto	(working copy)
@@ -39,7 +39,7 @@
  	 			
  mapping actionlanguage::Block :: normalBlock2Block() : actionlanguage::Block{
  _comment := self._comment;
-
+ -- _annotation := self._annotation.map EAnnotation2EAnnotation();
  _extensions := self._extensions.map Extension2Extension();
  _expressions := self._expressions.map Expression2Expression();
  }
@@ -48,7 +48,7 @@
       	
 mapping actionlanguage::WhileLoop :: WhileLoop2WhileLoop() : actionlanguage::WhileLoop{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_block := self._block.map Block2Block();
     	_loopTest := self._loopTest.map Expression2Expression();
@@ -56,7 +56,7 @@
    		 
 mapping actionlanguage::DoWhileLoop :: DoWhileLoop2DoWhileLoop() : actionlanguage::DoWhileLoop{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_block := self._block.map Block2Block();
     	_loopTest := self._loopTest.map Expression2Expression();
@@ -66,7 +66,7 @@
     	_comment := self._comment;
     	_assignOperator := self._assignOperator;
     	_incrementDecrementOperator := self._incrementDecrementOperator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_rhs_assignExpression := self._rhs_assignExpression.map Expression2Expression();
     	_lhs_typedNamedElementExpression := self._lhs_typedNamedElementExpression.map TypedNamedElementExpression2TypedNamedElementExpression();
@@ -74,7 +74,7 @@
    		 
 mapping actionlanguage::ForLoop :: ForLoop2ForLoop() : actionlanguage::ForLoop{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_block := self._block.map Block2Block();
     	_loopTest := self._loopTest.map Expression2Expression();
@@ -84,7 +84,7 @@
    		 
 mapping actionlanguage::IfStatement :: IfStatement2IfStatement() : actionlanguage::IfStatement{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_ifCondition := self._ifCondition.map Expression2Expression();
     	_ifBlock := self._ifBlock.map Block2Block();
@@ -94,7 +94,7 @@
 
  mapping ElseIfStatement::ElseIfStatement2ElseIfStatement(): ElseIfStatement { 
  		_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();    	
     	_elseIfBlock := self.elseIfBlock.map Block2Block();    	
     	_elseIfCondition := self.elseIfCondition.map Expression2Expression();       	 		
@@ -102,7 +102,7 @@
  
 mapping actionlanguage::OperationCall :: OperationCall2OperationCall() : actionlanguage::OperationCall{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_operation := self._operation.map Operation2Operation();
     	_parameterBinding := self._parameterBinding.map ParameterBinding2ParameterBinding();
@@ -110,14 +110,14 @@
    		 
 mapping actionlanguage::ReturnStatement :: ReturnStatement2ReturnStatement() : actionlanguage::ReturnStatement{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_expression := self._expression.map Expression2Expression();
    		 }
    		 
 mapping actionlanguage::TriggerMessageExpression :: TriggerMessageExpression2TriggerMessageExpression() : actionlanguage::TriggerMessageExpression{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_messageType := self._messageType.map MessageType2MessageType();
     	_parameter := self._parameter.map Parameter2Parameter();
@@ -125,7 +125,7 @@
    		 
 mapping actionlanguage::DiscreteInteractionEndpointReference :: DiscreteInteractionEndpointReference2DiscreteInteractionEndpointReference() : actionlanguage::DiscreteInteractionEndpointReference{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_typedNamedElementExpression := self._typedNamedElementExpression.map TypedNamedElementExpression2TypedNamedElementExpression();
     	_position := self._position.map PositionSelector2PositionSelector();
@@ -134,21 +134,21 @@
 mapping actionlanguage::PositionSelector :: PositionSelector2PositionSelector() : actionlanguage::PositionSelector{
     	_comment := self._comment;
     	_kind := self._kind;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_successor := self._successor.map PositionSelector2PositionSelector();
    		 }
    		 
 mapping actionlanguage::LocalVariableDeclarationStatement :: LocalVariableDeclarationStatement2LocalVariableDeclarationStatement() : actionlanguage::LocalVariableDeclarationStatement{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_variable := self._variable.map Variable2Variable();
    		 }
    		 
 mapping actionlanguage::TypedNamedElementExpression :: TypedNamedElementExpression2TypedNamedElementExpression() : actionlanguage::TypedNamedElementExpression{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_typedNamedElement := self._typedNamedElement.map TypedNamedElement2TypedNamedElement();
     	_elementAccessors := self._elementAccessors.map ElementAccessorExpression2ElementAccessorExpression();
@@ -159,28 +159,28 @@
 
 mapping ArrayIndexExpression :: ArrayIndexExpression2ArrayIndexExpression() : ArrayIndexExpression {
 		_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_index := self._index.map Expression2Expression();
 }
 
 mapping AttributeAccessorExpression :: AttributeAccessorExpression2AttributeAccessorExpression() : AttributeAccessorExpression {
 		_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_attribute := self._attribute.map Attribute2Attribute();
 }	 
    		 
 mapping actionlanguage::ArrayInitializeExpression :: ArrayInitializeExpression2ArrayInitializeExpression() : actionlanguage::ArrayInitializeExpression{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_expressions := self._expressions.map Expression2Expression();
    		 }
    		 
 mapping actionlanguage::NondeterministicChoiceExpression :: NondeterministicChoiceExpression2NondeterministicChoiceExpression() : actionlanguage::NondeterministicChoiceExpression{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_range := self._range.map Range2Range();
     	_dataType := self._dataType.map PrimitiveDataType2PrimitiveDataType();
@@ -193,7 +193,7 @@
    		 
 mapping pim::valuetype::TimeValue :: TimeValue2TimeValue() : pim::valuetype::TimeValue{
     	_unit := self._unit;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_value := self._value.map Expression2Expression();
    		 }
@@ -381,14 +381,14 @@
    		 }
    		 
 mapping mtctl::PropertyRepository :: PropertyRepository2PropertyRepository() : mtctl::PropertyRepository{
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_properties := self._properties.map Property2Property();
    		 }
    		 
 mapping mtctl::Property :: Property2Property() : mtctl::Property{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_expression := self._expression.map Expression2Expression();
    		 }
@@ -398,7 +398,7 @@
 mapping pim::types::ArrayDataType :: ArrayDataType2ArrayDataType() : pim::types::ArrayDataType{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_type := self._type.map DataType2DataType();
     	_cardinality := self._cardinality.map NaturalNumber2NaturalNumber();
@@ -408,7 +408,7 @@
     	_name := self._name;
     	_comment := self._comment;
     	_primitiveType := self._primitiveType;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
    		 }
    		 
@@ -417,7 +417,7 @@
 mapping pim::types::RangedPrimitiveDataType :: RangedPrimitiveDataType2RangedPrimitiveDataType() : pim::types::RangedPrimitiveDataType{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_rangedType := self._rangedType.map PrimitiveDataType2PrimitiveDataType();
     	_range := self._range.map Range2Range();
@@ -426,7 +426,7 @@
 mapping pim::types::StructureDataType :: StructureDataType2StructureDataType() : pim::types::StructureDataType{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_attributes := self.attributes.map Attribute2Attribute();
    		 }
@@ -434,7 +434,7 @@
 mapping Attribute :: Attribute2Attribute() : Attribute{
 		_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_dataType := self._dataType.map DataType2DataType();
 }   		 
@@ -447,7 +447,7 @@
       	
 mapping pim::instance::AssemblyConnectorInstance :: AssemblyConnectorInstance2AssemblyConnectorInstance() : pim::instance::AssemblyConnectorInstance{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_type := self._type.map Connector2Connector();
     	_connectorEndpointInstances := self._connectorEndpointInstances.map ConnectorEndpointInstance2ConnectorEndpointInstance();
@@ -455,7 +455,7 @@
    		 
 mapping pim::instance::DelegationConnectorInstance :: DelegationConnectorInstance2DelegationConnectorInstance() : pim::instance::DelegationConnectorInstance{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_type := self._type.map Connector2Connector();
     	_connectorEndpointInstances := self._connectorEndpointInstances.map ConnectorEndpointInstance2ConnectorEndpointInstance();
@@ -464,7 +464,7 @@
 mapping pim::instance::ComponentInstanceConfiguration :: ComponentInstanceConfiguration2ComponentInstanceConfiguration() : pim::instance::ComponentInstanceConfiguration{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_verificationConstraintRepositories := self._verificationConstraintRepositories.map VerificationConstraintRepository2VerificationConstraintRepository();
     	_componentInstances := self._componentInstances.map ComponentInstance2ComponentInstance();
@@ -475,7 +475,7 @@
 mapping pim::instance::ContinuousPortInstance :: ContinuousPortInstance2ContinuousPortInstance() : pim::instance::ContinuousPortInstance{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectorInstances += self.connectorInstances.map ConnectorInstance2ConnectorInstance();     				
     	    			
@@ -487,7 +487,7 @@
 mapping pim::instance::HybridPortInstance :: HybridPortInstance2HybridPortInstance() : pim::instance::HybridPortInstance{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectorInstances += self.connectorInstances.map ConnectorInstance2ConnectorInstance();     				
     	    			
@@ -501,7 +501,7 @@
 mapping pim::instance::DiscreteSinglePortInstance :: DiscreteSinglePortInstance2DiscreteSinglePortInstance() : pim::instance::DiscreteSinglePortInstance{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectorInstances += self.connectorInstances.map ConnectorInstance2ConnectorInstance();     				
     	    			
@@ -516,7 +516,7 @@
 mapping pim::instance::DiscreteMultiPortInstance :: DiscreteMultiPortInstance2DiscreteMultiPortInstance() : pim::instance::DiscreteMultiPortInstance{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectorInstances += self.connectorInstances.map ConnectorInstance2ConnectorInstance();     				
     	    			
@@ -530,7 +530,7 @@
    		 
 mapping pim::instance::CoordinationProtocolInstance :: CoordinationProtocolInstance2CoordinationProtocolInstance() : pim::instance::CoordinationProtocolInstance{
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_portInstances := self._portInstances.map PortInstance2PortInstance();
     	_coordinationProtocolPart := self._coordinationProtocolPart.map CoordinationProtocolPart2CoordinationProtocolPart();
@@ -538,7 +538,7 @@
    		 
 mapping pim::instance::StructuredComponentInstance :: StructuredComponentInstance2StructuredComponentInstance() : pim::instance::StructuredComponentInstance{
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_componentType := self._componentType.map Component2Component();
     	_portInstances := self._portInstances.map PortInstance2PortInstance();
@@ -549,7 +549,7 @@
    		 
 mapping pim::instance::AtomicComponentInstance :: AtomicComponentInstance2AtomicComponentInstance() : pim::instance::AtomicComponentInstance{
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_componentType := self._componentType.map Component2Component();
     	_portInstances := self._portInstances.map PortInstance2PortInstance();
@@ -692,7 +692,7 @@
     	_name := self._name;
     	_kind := self._kind;
     	_optional := self._optional;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectors += self.connectors.map Connector2Connector();     				
     	    			
@@ -705,7 +705,7 @@
 mapping pim::component::DiscretePort :: DiscretePort2DiscretePort() : pim::component::DiscretePort{
     	_comment := self._comment;
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectors += self.connectors.map Connector2Connector();     				
     	    			
@@ -727,7 +727,7 @@
 mapping pim::component::ComponentPart :: ComponentPart2ComponentPart() : pim::component::ComponentPart{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_componentType := self._componentType.map Component2Component();
     	_parentComponent := self._parentComponent.map StructuredComponent2StructuredComponent();
@@ -739,7 +739,7 @@
     	_name := self._name;
     	_comment := self._comment;
     	_componentKind := self._componentKind;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_ports := self._ports.map Port2Port();
     	_embeddedComponentParts := self._embeddedComponentParts.map ComponentPart2ComponentPart();
@@ -751,7 +751,7 @@
       	
 mapping pim::component::AssemblyConnector :: AssemblyConnector2AssemblyConnector() : pim::component::AssemblyConnector{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_connectorEndpoints := self._connectorEndpoints.map ConnectorEndpoint2ConnectorEndpoint();
     	_parentComponent := self._parentComponent.map StructuredComponent2StructuredComponent();
@@ -759,7 +759,7 @@
    		 
 mapping pim::component::DelegationConnector :: DelegationConnector2DelegationConnector() : pim::component::DelegationConnector{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_connectorEndpoints := self._connectorEndpoints.map ConnectorEndpoint2ConnectorEndpoint();
     	_parentComponent := self._parentComponent.map StructuredComponent2StructuredComponent();
@@ -772,7 +772,7 @@
     	_name := self._name;
     	_kind := self._kind;
     	_optional := self._optional;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectors += self.connectors.map Connector2Connector();     				
     	    			
@@ -787,7 +787,7 @@
       	
 mapping pim::component::CoordinationProtocolPart :: CoordinationProtocolPart2CoordinationProtocolPart() : pim::component::CoordinationProtocolPart{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_coordinationProtocol := self._coordinationProtocol.map CoordinationProtocol2CoordinationProtocol();
     	_portParts := self._portParts.map PortPart2PortPart();
@@ -797,7 +797,7 @@
       	
 mapping pim::component::PortPart :: PortPart2PortPart() : pim::component::PortPart{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectors += self.connectors.map Connector2Connector();     				
     	    			
@@ -811,7 +811,7 @@
     	_name := self._name;
     	_comment := self._comment;
     	_componentKind := self._componentKind;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_ports := self._ports.map Port2Port();
     	_behavior := self._behavior.map Behavior2Behavior();
@@ -882,7 +882,7 @@
 mapping pim::msgtype::MessageType :: MessageType2MessageType() : pim::msgtype::MessageType{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_parameters := self._parameters.map Parameter2Parameter();
     	_repository := self._repository.map MessageTypeRepository2MessageTypeRepository();
@@ -891,7 +891,7 @@
 mapping pim::msgtype::MessageTypeRepository :: MessageTypeRepository2MessageTypeRepository() : pim::msgtype::MessageTypeRepository{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_messageTypes := self._messageTypes.map MessageType2MessageType();
    		 }
@@ -903,7 +903,7 @@
 mapping pim::behavior::Operation :: Operation2Operation() : pim::behavior::Operation{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_implementations := self._implementations.map Expression2Expression();
     	_parameters := self._parameters.map Parameter2Parameter();
@@ -913,13 +913,13 @@
 mapping pim::behavior::Parameter :: Parameter2Parameter() : pim::behavior::Parameter{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_dataType := self._dataType.map DataType2DataType();
    		 }
    		 
 mapping pim::behavior::ParameterBinding :: ParameterBinding2ParameterBinding() : pim::behavior::ParameterBinding{
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_parameter := self._parameter.map Parameter2Parameter();
     	_value := self._value.map Expression2Expression();
@@ -931,7 +931,7 @@
     	_name := self._name;
     	_comment := self._comment;
     	_constant := self._constant;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_dataType := self._dataType.map DataType2DataType();
     	_initializeExpression := self._initializeExpression.map Expression2Expression();
@@ -952,7 +952,7 @@
    		 
 mapping pim::realtimestatechart::Clock :: Clock2Clock() : pim::realtimestatechart::Clock{
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_statechart := self._statechart.map RealtimeStatechart2RealtimeStatechart();
    		 }
@@ -960,7 +960,7 @@
 mapping pim::realtimestatechart::Region :: Region2Region() : pim::realtimestatechart::Region{
     	_comment := self._comment;
     	_priority := self._priority;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_embeddedStatechart := self._embeddedStatechart.map RealtimeStatechart2RealtimeStatechart();
     	_parentState := self._parentState.map State2State();
@@ -972,7 +972,7 @@
     	_initial := self._initial;
     	_final := self._final;
     	_urgent := self._urgent;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_outgoingTransitions := self._outgoingTransitions.map Transition2Transition();
     	_incomingTransitions := self._incomingTransitions.map Transition2Transition();
@@ -993,7 +993,7 @@
     	_comment := self._comment;
     	_blockable := self._blockable;
     	_urgent := self._urgent;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_synchronization := self._synchronization.map Synchronization2Synchronization();
     	_target := self._target.map Vertex2Vertex();
@@ -1009,7 +1009,7 @@
    		 
 mapping pim::realtimestatechart::ClockConstraint :: ClockConstraint2ClockConstraint() : pim::realtimestatechart::ClockConstraint{
     	_operator := self._operator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_bound := self._bound.map TimeValue2TimeValue();
     	_clock := self._clock.map Clock2Clock();
@@ -1017,7 +1017,7 @@
    		 
 mapping pim::realtimestatechart::Action :: Action2Action() : pim::realtimestatechart::Action{
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_expressions := self._expressions.map Expression2Expression();
    		 }
@@ -1038,7 +1038,7 @@
 mapping pim::realtimestatechart::SynchronizationChannel :: SynchronizationChannel2SynchronizationChannel() : pim::realtimestatechart::SynchronizationChannel{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_state := self._state.map State2State();
     	_selectorType := self._selectorType.map DataType2DataType();
@@ -1046,7 +1046,7 @@
    		 
 mapping pim::realtimestatechart::Synchronization :: Synchronization2Synchronization() : pim::realtimestatechart::Synchronization{
     	_kind := self._kind;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_syncChannel := self._syncChannel.map SynchronizationChannel2SynchronizationChannel();
     	_selectorExpression := self._selectorExpression.map Expression2Expression();
@@ -1057,7 +1057,7 @@
 mapping pim::realtimestatechart::RealtimeStatechart :: RealtimeStatechart2RealtimeStatechart() : pim::realtimestatechart::RealtimeStatechart{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_behavioralElement := self._behavioralElement.map BehavioralElement2BehavioralElement();
     	_operations := self._operations.map Operation2Operation();
@@ -1075,7 +1075,7 @@
 mapping pim::realtimestatechart::StateEvent :: StateEvent2StateEvent() : pim::realtimestatechart::StateEvent disjuncts pim::realtimestatechart::DoEvent::DoEvent2DoEvent, pim::realtimestatechart::EntryOrExitEvent::EntryOrExitEvent2EntryOrExitEvent;
       	
 mapping pim::realtimestatechart::Message :: Message2Message() : pim::realtimestatechart::Message{
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_instanceOf := self._instanceOf.map MessageType2MessageType();
     	_parameterBinding := self._parameterBinding.map ParameterBinding2ParameterBinding();
@@ -1098,7 +1098,7 @@
 mapping pim::realtimestatechart::EntryPoint :: EntryPoint2EntryPoint() : pim::realtimestatechart::EntryPoint{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_outgoingTransitions := self._outgoingTransitions.map Transition2Transition();
     	_incomingTransitions := self._incomingTransitions.map Transition2Transition();
@@ -1108,7 +1108,7 @@
 mapping pim::realtimestatechart::ExitPoint :: ExitPoint2ExitPoint() : pim::realtimestatechart::ExitPoint{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_outgoingTransitions := self._outgoingTransitions.map Transition2Transition();
     	_incomingTransitions := self._incomingTransitions.map Transition2Transition();
@@ -1118,7 +1118,7 @@
 mapping core::expressions::common::UnaryExpression :: UnaryExpression2UnaryExpression() : core::expressions::common::UnaryExpression{
     	_comment := self._comment;
     	_operator := self._operator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_enclosedExpression := self._enclosedExpression.map Expression2Expression();
    		 }
@@ -1128,7 +1128,7 @@
 mapping core::expressions::common::ComparisonExpression :: ComparisonExpression2ComparisonExpression() : core::expressions::common::ComparisonExpression{
     	_comment := self._comment;
     	_operator := self._operator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_leftExpression := self._leftExpression.map Expression2Expression();
     	_rightExpression := self._rightExpression.map Expression2Expression();
@@ -1137,7 +1137,7 @@
 mapping core::expressions::common::ArithmeticExpression :: ArithmeticExpression2ArithmeticExpression() : core::expressions::common::ArithmeticExpression{
     	_comment := self._comment;
     	_operator := self._operator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_leftExpression := self._leftExpression.map Expression2Expression();
     	_rightExpression := self._rightExpression.map Expression2Expression();
@@ -1146,7 +1146,7 @@
 mapping core::expressions::common::LogicalExpression :: LogicalExpression2LogicalExpression() : core::expressions::common::LogicalExpression{
     	_comment := self._comment;
     	_operator := self._operator;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_leftExpression := self._leftExpression.map Expression2Expression();
     	_rightExpression := self._rightExpression.map Expression2Expression();
@@ -1155,7 +1155,7 @@
 mapping core::expressions::common::LiteralExpression :: LiteralExpression2LiteralExpression() : core::expressions::common::LiteralExpression{
     	_comment := self._comment;
     	_value := self._value;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
    		 }
    		 
@@ -1166,7 +1166,7 @@
     	_expressionText := self._expressionText;
     	_language := self._language;
     	_languageVersion := self._languageVersion;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
    		 }
 
@@ -1182,6 +1182,7 @@
 	        	result := self.timeValue.value.map Expression2Expression().deepclone().oclAsType(core::expressions::Expression);	
 	        }endif;
 	        
+	        -- result._annotation := self._annotation.map EAnnotation2EAnnotation();
 	        result._extensions := self._extensions.map Extension2Extension();
 	        result._comment := self._comment;      
         }        
@@ -1209,7 +1210,7 @@
       	
 mapping pim::pattern::CoordinationPattern :: CoordinationPattern2CoordinationPattern() : pim::pattern::CoordinationPattern {
 		name := self.name;
-		
+		-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	
     	verificationConstraintRepositories := self.verificationConstraintRepositories.map VerificationConstraintRepository2VerificationConstraintRepository();
@@ -1243,7 +1244,7 @@
 }
 mapping pim::pattern::CoordinationPatternVariant :: CoordinationPatternVariant2CoordinationPatternVariant() : pim::pattern::CoordinationPatternVariant {
 			name := self.name;
-		
+		-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	
     	verificationConstraintRepositories := self.verificationConstraintRepositories.map VerificationConstraintRepository2VerificationConstraintRepository();
@@ -1260,7 +1261,7 @@
 mapping pim::protocol::CoordinationProtocol :: CoordinationProtocol2CoordinationProtocol() : pim::protocol::CoordinationProtocol{
     	_name := self._name;
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_verificationConstraintRepositories := self._verificationConstraintRepositories.map VerificationConstraintRepository2VerificationConstraintRepository();
     	_roles := self._roles.map Role2Role();
@@ -1270,7 +1271,7 @@
 mapping pim::protocol::Role :: Role2Role() : pim::protocol::Role{
     	_comment := self._comment;
     	_name := self._name;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	connectors += self.connectors.map Connector2Connector();     				
     	_behavior := self._behavior.map Behavior2Behavior();
@@ -1285,7 +1286,7 @@
    		 
 mapping pim::protocol::RoleConnector :: RoleConnector2RoleConnector() : pim::protocol::RoleConnector{
     	_comment := self._comment;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_connectorEndpoints := self._connectorEndpoints.map ConnectorEndpoint2ConnectorEndpoint();
     	_coordinationProtocol := self._coordinationProtocol.map AbstractCoordinationSpecification2AbstractCoordinationSpecification();
@@ -1295,7 +1296,7 @@
 mapping pim::protocol::ConnectorQualityOfServiceAssumptions :: ConnectorQualityOfServiceAssumptions2ConnectorQualityOfServiceAssumptions() : pim::protocol::ConnectorQualityOfServiceAssumptions{
     	_comment := self._comment;
     	_messageLossPossible := self._messageLossPossible;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_minMessageDelay := self._minMessageDelay.map TimeValue2TimeValue();
     	_maxMessageDelay := self._maxMessageDelay.map TimeValue2TimeValue();
@@ -1321,7 +1322,7 @@
     	_name := self._name;
     	_comment := self._comment;
     	_bufferOverflowAvoidanceStrategy := self._bufferOverflowAvoidanceStrategy;
-    	
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
     	_bufferSize := self._bufferSize.map NaturalNumber2NaturalNumber();
     	_messageType := self._messageType.map MessageType2MessageType();
Index: transforms/lib/MUML2UPPAAL/Async/Functions.qvto
===================================================================
--- transforms/lib/MUML2UPPAAL/Async/Functions.qvto	(revision 19035)
+++ transforms/lib/MUML2UPPAAL/Async/Functions.qvto	(working copy)
@@ -61,24 +61,6 @@
 			};			
 		};
 		
-		// third paramter argsPosition - the position where the arguments of the lay
-		
-		var argsPosition : Variable := object Variable {
-			name := 'argsPosition';
-		};
-		
-		
-		parameter += object Parameter{
-			variableDeclaration := object DataVariableDeclaration {
-				typeDefinition := object TypeReference{
-				
-					referredType := INT ;
-				};
-				variable += argsPosition;
-			};			
-		};
-		
-		
 		block := object Block {
 				
 		
@@ -93,7 +75,7 @@
 			};				
 			
 			--if(message.mType == muml_m){
-			--	removemuml_mArguments(argsPosition); 
+			--	removemuml_mArguments(messageToDiscard); 
 	 		--	}
 	 		-- ..	
 			messageTypes()->forEach(mType) {
@@ -114,7 +96,7 @@
 								expression := object FunctionCallExpression {
 									function := mType.map createRemoveForMessageTypeFunction();
 									argument += object IdentifierExpression {
-											identifier := argsPosition;
+											identifier := id;
 									};									
 								};	
 							};
@@ -585,99 +567,63 @@
 		
 		};
 		
-		var i : Variable := object Variable{
-			name := "i";
-			
-		};
 		block := object Block {
-			// int i;
-			declarations := object LocalDeclarations {
-				declaration +=object DataVariableDeclaration {
-					typeDefinition := object TypeReference {
-						referredType := INT;
-					};
-					variable := i;	
-				};				
-			};
 			
-			statement += object ForLoop {
-				initialization := object AssignmentExpression {
+			statement += object ExpressionStatement {
+			
+				expression := object AssignmentExpression {
+				
 					firstExpr := object IdentifierExpression {
-						identifier := i;
+					
+						identifier := self.map createParameterTypeBufferFieldVariable(); // resolve here?
+						
+						index += object IdentifierExpression {
+							identifier := self.map createParameterTypeTailVariable(); // resolve here?
+						};
+						
 					};
-					secondExpr := object LiteralExpression {
-						text := 0.repr();
+					
+					secondExpr := object IdentifierExpression {
+						identifier := m;
 					};
+					
 					operator := AssignmentOperator::EQUAL;
-				};
-				condition := object CompareExpression {
-					firstExpr := object IdentifierExpression {
-						identifier := i;
-					};
-					secondExpr := object ArithmeticExpression {
-						firstExpr := object IdentifierExpression {
-							identifier := map createNumberOfMessagesInTransitConstant();
-						};
-						secondExpr := object LiteralExpression {
-							text := 1.repr();
-						};
-						operator := ArithmeticOperator::ADD;
-					};
-					operator := CompareOperator::LESS
+					
 				};
-				iteration := object IncrementDecrementExpression {
+				
+			};
+			
+			statement += object ExpressionStatement {
+				
+				expression := object IncrementDecrementExpression {
+				
 					expression := object IdentifierExpression {
-						identifier := i;
+						identifier := self.map createParameterTypeTailVariable();
 					};
+					
 					position := IncrementDecrementPosition::POST;
+					
 					operator := IncrementDecrementOperator::INCREMENT;
+				
 				};
-				statement := object IfStatement {
-					ifExpression := object CompareExpression {
-						firstExpr := object ScopedIdentifierExpression {
-							scope := object IdentifierExpression {
-								identifier := self.map createParameterTypeBufferFieldVariable();
-								index := object IdentifierExpression {
-									identifier := i;
-								};
-							};
-							identifier := object IdentifierExpression {
-								identifier := self.map createParameterTypeMessageIdVariable();
-							};
-						};
-						secondExpr := object LiteralExpression {
-							text := 0.repr();
-						};
-						operator := CompareOperator::EQUAL;
-					};
-					thenStatement := object Block {
-						statement += object ExpressionStatement {
-							expression := object AssignmentExpression {
-								firstExpr := object IdentifierExpression {
-									identifier := self.map createParameterTypeBufferFieldVariable();
-									index := object IdentifierExpression {
-										identifier := i;
-									};
-								};
-								secondExpr := object IdentifierExpression {
-									identifier := m;
-								};
-								operator := AssignmentOperator::EQUAL;
-							};
-						};
-						statement += object ReturnStatement {
-							returnExpression := object IdentifierExpression{
-								identifier := i;
-							};
-						};					
-					}
-				}
+				
 			};
 			
 			statement += object ReturnStatement {
-				returnExpression := object LiteralExpression {
-					text := "-1";
-				}
+				
+				returnExpression := object ArithmeticExpression {
+					
+					firstExpr := object IdentifierExpression {
+						identifier := self.map createParameterTypeTailVariable();
+					};
+					
+					secondExpr := object LiteralExpression {
+						text := 1.repr();
+					};
+					
+					operator := ArithmeticOperator::SUBTRACT;
+				};
+				
 			};
 			
 		}
@@ -692,47 +638,297 @@
 			referredType := BOOL;
 		};
 			
-		var mArgsPosition : Variable := object Variable {
-			name := 'mArgsPosition';
+		var mId : Variable := object Variable {
+			name := 'mId';
 		};
 		
 		parameter += object Parameter {
 			variableDeclaration := object DataVariableDeclaration {
 			
 				typeDefinition := object TypeReference {
-					referredType := INT;
+					referredType := map createMessageIdType();
 				};
 				
-				variable += mArgsPosition;
+				variable += mId;
 			};
 		};
 		
 		block := object Block {
 			
-			statement += object ExpressionStatement {
-				expression := object AssignmentExpression {
+			var i : Variable := object Variable {
+				name := 'i';
+			};
+			
+			declarations := object LocalDeclarations {
+			
+				declaration += object DataVariableDeclaration {
+					
+					typeDefinition := object TypeReference {
+						referredType := INT;
+					};
+					
+					variable += i;
+					
+				};
+				
+			};
+			
+			statement += object ForLoop {
+				
+				initialization := object AssignmentExpression {
+					
 					firstExpr := object IdentifierExpression {
-						identifier := self.map createParameterTypeBufferFieldVariable();	
-						index += object IdentifierExpression {
-							identifier := mArgsPosition;
-						}
+						identifier := i;
 					};
 					
-					secondExpr := object IdentifierExpression {
-						identifier := self.map createParameterTypeNullConstantVariable();
+					secondExpr := object LiteralExpression {
+						text := 0.repr();
 					};
 					
 					operator := AssignmentOperator::EQUAL;
-				}
+					
+				};
+				
+				condition := object CompareExpression {
+					
+					firstExpr := object IdentifierExpression {
+						identifier := i;
+					};
+					
+					secondExpr := object IdentifierExpression {
+						identifier := map createNumberOfMessagesInTransitConstant();
+					};
+					
+					operator := CompareOperator::LESS;
+				
+				};
+				
+				iteration := object IncrementDecrementExpression {
+					
+					expression := object IdentifierExpression {
+						identifier := i;
+					};
+					
+					position := IncrementDecrementPosition::POST;
+					
+					operator := IncrementDecrementOperator::INCREMENT;
+					
+				};
+				
+				statement := object Block {
+					
+					statement += object IfStatement {
+						
+						ifExpression := object CompareExpression {
+							
+							firstExpr := object ScopedIdentifierExpression {
+								
+								scope := object IdentifierExpression {
+								
+									identifier := self.map createParameterTypeBufferFieldVariable(); // resolve here?
+								
+									index += object IdentifierExpression {
+										
+										identifier := i;
+										
+									};
+								
+								};
+								
+								identifier := object IdentifierExpression {
+									identifier := self.map createParameterTypeMessageIdVariable(); // resolve here?
+								};
+								
+							};
+							
+							
+							secondExpr := object IdentifierExpression {
+								identifier := mId;
+							};
+							
+						};
+						
+						thenStatement := object Block {
+							
+							var j : Variable := object Variable {
+								name := 'j';
+							};
+							
+							declarations := object LocalDeclarations {
+								
+								declaration += object DataVariableDeclaration {
+									
+									typeDefinition := object TypeReference {
+										referredType := INT;	
+									};
+									
+									variable += j;
+								}
+								
+							};
+							
+							statement += object ForLoop {
+								
+								initialization := object AssignmentExpression {
+									
+									firstExpr := object IdentifierExpression {
+										identifier := j;
+									};
+									
+									secondExpr := object ArithmeticExpression {
+										
+										firstExpr := object IdentifierExpression {
+											identifier := i;
+										};
+										
+										secondExpr := object LiteralExpression {
+											text := 1.repr();
+										};
+										
+										operator := ArithmeticOperator::ADD;
+										
+									};
+									
+									operator := AssignmentOperator::EQUAL;
+								};
+								
+								condition := object CompareExpression {
+									
+									firstExpr := object IdentifierExpression {
+										identifier := j;
+									};
+									
+									secondExpr := object IdentifierExpression {
+										identifier := map createNumberOfMessagesInTransitConstant();
+									};
+									
+									operator := CompareOperator::LESS;
+								
+								};
+								
+								iteration := object IncrementDecrementExpression {
+									
+									expression := object IdentifierExpression {
+										identifier := j;
+									};
+									
+									position := IncrementDecrementPosition::POST;
+									
+									operator := IncrementDecrementOperator::INCREMENT;
+									
+								};
+								
+								statement := object ExpressionStatement {
+									
+									expression := object AssignmentExpression {
+										
+										firstExpr := object IdentifierExpression {
+											
+											identifier := self.map createParameterTypeBufferFieldVariable();
+											
+											index += object ArithmeticExpression {
+												
+												firstExpr := object IdentifierExpression {
+													identifier := j;	
+												};
+												
+												secondExpr := object LiteralExpression {
+													text := 1.repr();
+												};
+												
+												operator := ArithmeticOperator::SUBTRACT;
+												
+											};
+										};
+										
+										secondExpr := object IdentifierExpression {
+											
+											identifier := self.map createParameterTypeBufferFieldVariable();
+											
+											index += object IdentifierExpression {
+												identifier := j;
+											};
+											
+										}; 
+										
+										operator := AssignmentOperator::EQUAL;
+										
+									};
+									
+								};
+								
+							};
+							
+							statement += object ExpressionStatement {
+								
+								expression := object AssignmentExpression {
+									
+									firstExpr := object IdentifierExpression {
+									
+										identifier := self.map createParameterTypeBufferFieldVariable();
+									
+										index += object ArithmeticExpression {
+											
+											firstExpr := object IdentifierExpression {
+												identifier := map createNumberOfMessagesInTransitConstant();	
+											};
+											
+											secondExpr := object LiteralExpression {
+												text := 1.repr();
+											};
+											
+											operator := ArithmeticOperator::SUBTRACT;
+											
+										};
+									
+									};
+									
+									secondExpr := object IdentifierExpression {
+										identifier := self.map createParameterTypeNullConstantVariable();
+									};
+									
+								};
+								
+							};
+							
+							statement += object ExpressionStatement {
+								
+								expression := object IncrementDecrementExpression {
+								
+									expression := object IdentifierExpression {
+										identifier := self.map createParameterTypeTailVariable();
+									};
+									
+									position := IncrementDecrementPosition::POST;
+									
+									operator := IncrementDecrementOperator::DECREMENT;
+								
+								};
+							
+							};
+							
+							statement += object ReturnStatement {
+								returnExpression := object LiteralExpression {
+									text := true.repr();
+								};
+							};
+								
+						};
+						
+					};
+					 
+				};
+								
 			};
+			
 			statement += object ReturnStatement {
 				returnExpression := object LiteralExpression {
-					text := true.repr();
-				}
-			}
+					text := false.repr();
+				};
+			};
+			
 		}
 		
-		
 	}
 	
 	
@@ -2187,7 +2383,7 @@
 										};
 										
 										identifier := object IdentifierExpression {
-											identifier := map createMessageArgumentsPositionVariable();
+											identifier := map createMessageTypeMessageIdVariable();
 										};
 										
 									};
@@ -2503,14 +2699,6 @@
 						};
 						argument += object IdentifierExpression {
 							identifier := messageTypeToDiscard;
-						argument += object ScopedIdentifierExpression{
-							scope := object IdentifierExpression{
-								identifier := e;
-							};
-							identifier := object IdentifierExpression {
-								identifier := map createMessageArgumentsPositionVariable();
-							}
-						};
 					};
 				};									
 	 		};		
Index: transforms/lib/MUML2UPPAAL/Async/Variables.qvto
===================================================================
--- transforms/lib/MUML2UPPAAL/Async/Variables.qvto	(revision 19035)
+++ transforms/lib/MUML2UPPAAL/Async/Variables.qvto	(working copy)
@@ -619,14 +619,10 @@
 	
 		index += object ValueIndex {
 		
-			sizeExpression := object ArithmeticExpression {
-				firstExpr := object IdentifierExpression {
-					identifier := map createNumberOfMessagesInTransitConstant();
-				};
-				secondExpr := object LiteralExpression {
-					text := 1.repr();
-				};
+			sizeExpression := object IdentifierExpression {
+				identifier := map createNumberOfMessagesInTransitConstant();
 			}
+		
 		};
 		
 	}
Index: transforms/lib/MUML2UPPAAL/Async.qvto
===================================================================
--- transforms/lib/MUML2UPPAAL/Async.qvto	(revision 19035)
+++ transforms/lib/MUML2UPPAAL/Async.qvto	(working copy)
@@ -1181,7 +1181,7 @@
 			};
 		};
 	 		
-	 	-- clearConnector(tmp.mId, tmp.mType, tmp.mArgsPosition);
+	 	-- clearConnector(tmp.mId, tmp.mType);
 		update += object FunctionCallExpression {
 			function := map createClearConnectorFunction();
 			argument +=  object ScopedIdentifierExpression {
@@ -1203,16 +1203,6 @@
 					identifier := map createTmpVariable();
 				}
 			};
-			
-			argument +=  object ScopedIdentifierExpression {
-				identifier := object IdentifierExpression {
-					identifier := map createMessageArgumentsPositionVariable();
-				};
-
-				scope := object IdentifierExpression {
-					identifier := map createTmpVariable();
-				}
-			};
 		};
 		
 			
Index: transforms/mtctl/MTCTLQuantifierNormalization.qvto
===================================================================
--- transforms/mtctl/MTCTLQuantifierNormalization.qvto	(revision 19035)
+++ transforms/mtctl/MTCTLQuantifierNormalization.qvto	(working copy)
@@ -29,7 +29,8 @@
 }
 
 //Filter not-enabled property repositories
-mapping mtctl::PropertyRepository :: PropertyRepository2PropertyRepository() : mtctl::PropertyRepository when {self.oclAsType(ecore::EObject).eContainer().oclAsType(VerifiableElement).extensions->exists(oclIsKindOf(ElementToVerifyExtension))} {
+mapping mtctl::PropertyRepository :: PropertyRepository2PropertyRepository() : mtctl::PropertyRepository when {self.eContainer().oclAsType(VerifiableElement).extensions->exists(oclIsKindOf(ElementToVerifyExtension))} {
+	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
 	_extensions := self._extensions.map Extension2Extension();
 	_properties := self._properties.map Property2Property();
 }
@@ -38,7 +39,7 @@
 //Overridden from MUML2MUML: check if we should apply one of our mappings here, otherwise fall back to a simple copying map
 //TODO clean this up: mappings for subtypes do not have to be called here
 mapping mtctl::Expression :: Expression2Expression() : mtctl::Expression disjuncts
-	mtctl::quantifiers::QuantifierExpr::QuantifierExpr2RolledOut, 
+	QuantifierExpr::QuantifierExpr2RolledOut, 
 	 mtctl::sets::SubinstanceSetExpr::SubinstanceSetExpr2SubinstanceSetExpr,
 	  mtctl::sets::InstanceSetExpr::InstanceSetExpr2InstanceSetExpr,
 	   mtctl::predicates::SubstateOfExpr::SubstateOfExpr2SubstateOfExpr,
Index: transforms/rtsc/RTSCCompositeTransitionNormalization.qvto
===================================================================
--- transforms/rtsc/RTSCCompositeTransitionNormalization.qvto	(revision 19035)
+++ transforms/rtsc/RTSCCompositeTransitionNormalization.qvto	(working copy)
@@ -198,6 +198,7 @@
 mapping pim::realtimestatechart::EntryPoint :: EntryPoint2EntryPoint() : pim::realtimestatechart::EntryPoint{
     	_name := self._name;
     	_comment := self._comment;
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
 //    	_outgoingTransitions := self._outgoingTransitions.map Transition2Transition();
 //    	_incomingTransitions := self._incomingTransitions.map Transition2Transition();
@@ -207,6 +208,7 @@
 mapping pim::realtimestatechart::ExitPoint :: ExitPoint2ExitPoint() : pim::realtimestatechart::ExitPoint{
     	_name := self._name;
     	_comment := self._comment;
+    	-- _annotation := self._annotation.map EAnnotation2EAnnotation();
     	_extensions := self._extensions.map Extension2Extension();
 //    	_outgoingTransitions := self._outgoingTransitions.map Transition2Transition();
 //    	_incomingTransitions := self._incomingTransitions.map Transition2Transition();
Index: transforms/rtsc/RTSCDoEventNormalization.qvto
===================================================================
--- transforms/rtsc/RTSCDoEventNormalization.qvto	(revision 19035)
+++ transforms/rtsc/RTSCDoEventNormalization.qvto	(working copy)
@@ -229,6 +229,7 @@
     	comment := self.comment;
     	blockable := self.blockable;
     	urgent := self.urgent;
+    	-- annotation := self.annotation.map EAnnotation2EAnnotation();
     	extensions := self.extensions.map Extension2Extension();
     	synchronization := self.synchronization.map Synchronization2Synchronization();
     	//do not set the target state because this transition is redirected to an entry point
@@ -249,6 +250,7 @@
     	comment := self.comment;
     	blockable := self.blockable;
     	urgent := self.urgent;
+    	-- annotation := self.annotation.map EAnnotation2EAnnotation();
     	extensions := self.extensions.map Extension2Extension();
     	synchronization := self.synchronization.map Synchronization2Synchronization();
     	target := self.target.map Vertex2Vertex();
@@ -267,6 +269,7 @@
 mapping pim::realtimestatechart::EntryPoint :: EntryPoint2EntryPoint() : pim::realtimestatechart::EntryPoint{
     	name := self.name;
     	comment := self.comment;
+    	-- annotation := self.annotation.map EAnnotation2EAnnotation();
     	extensions := self.extensions.map Extension2Extension();
     	outgoingTransitions := self.outgoingTransitions.map Transition2Transition();
     	if(self.state.doEvent != null){
@@ -281,6 +284,7 @@
 mapping pim::realtimestatechart::ExitPoint :: ExitPoint2ExitPoint() : pim::realtimestatechart::ExitPoint{
     	name := self.name;
     	comment := self.comment;
+    	-- annotation := self.annotation.map EAnnotation2EAnnotation();
     	extensions := self.extensions.map Extension2Extension();
     	outgoingTransitions := self.outgoingTransitions.map Transition2Transition();
     	incomingTransitions := self.incomingTransitions.map Transition2Transition();
@@ -298,6 +302,7 @@
     	comment := self.comment;
     	blockable := self.blockable;
     	urgent := self.urgent;
+    	-- annotation := self.annotation.map EAnnotation2EAnnotation();
     	extensions := self.extensions.map Extension2Extension();
     	synchronization := self.synchronization.map Synchronization2Synchronization();
     	target := self.target.map Vertex2Vertex();
Index: transforms/rtsc/RTSCUrgencyNormalization.qvto
===================================================================
--- transforms/rtsc/RTSCUrgencyNormalization.qvto	(revision 19035)
+++ transforms/rtsc/RTSCUrgencyNormalization.qvto	(working copy)
@@ -195,8 +195,8 @@
 	
 //TODO clean this up: mappings for subtypes do not have to be called here	
 mapping Expression :: Expression2Expression() : Expression disjuncts
-	mtctl::predicates::TransitionFiringExpr::TransitionFiringExpr2OrExpr,
-	 mtctl::predicates::TransitionFiringExpr::TransitionFiringExpr2NonUrgentTransitionFiringExpr,
+	TransitionFiringExpr::TransitionFiringExpr2OrExpr,
+	 TransitionFiringExpr::TransitionFiringExpr2NonUrgentTransitionFiringExpr,
 	  mtctl::quantifiers::BoundVariable::BoundVariable2BoundVariable,
 	   mtctl::booleanlogic::AndExpr::AndExpr2AndExpr,
 	    mtctl::sets::SetExpr::SetExpr2SetExpr,
@@ -236,7 +236,7 @@
 	                                      mtctl::sets::StateSetExpr::StateSetExpr2StateSetExpr,
 	                                       mtctl::quantifiers::UniversalQuantExpr::UniversalQuantExpr2UniversalQuantExpr,
 	                                        mtctl::quantifiers::TemporalQuantifierExpr::TemporalQuantifierExpr2TemporalQuantifierExpr,
-	                                         mtctl::predicates::TransitionFiringExpr ::TransitionFiringExpr2TransitionFiringExpr,
+	                                         TransitionFiringExpr ::TransitionFiringExpr2TransitionFiringExpr,
 	                                          mtctl::predicates::TrueExpr::TrueExpr2TrueExpr,
 	                                           mtctl::predicates::StateActiveExpr::StateActiveExpr2StateActiveExpr;
 
