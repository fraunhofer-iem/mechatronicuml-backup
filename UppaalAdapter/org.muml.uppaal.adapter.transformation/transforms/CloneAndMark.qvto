//import transforms.lib.MUML2MUML;
import ImplicitCopy;

modeltype modelinstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype muml_instance uses pim::instance('http://www.muml.org/pim/1.0.0');
modeltype muml uses pim('http://www.muml.org/pim/1.0.0');
modeltype constraintModel uses pim::constraint('http://www.muml.org/pim/1.0.0');
modeltype verificationExtension uses 'http://www.muml.org/uppaal/adapter/extension/verificationextension/1.0.0';
modeltype storydriven uses 'http://www.muml.org/core/1.0.0';

//Clones input and marks the only element in the element_to_verify extent with an ElementToVerifyExtension
transformation CloneAndMark(in input:muml, in element_to_verify:muml, out output:muml) extends ImplicitCopy;

main() {
	input.objects()[RootNode]->map transform().oclAsType(RootNode);
	var markedElement := element_to_verify.objects()[VerifiableElement]->any(true).oclAsType(VerifiableElement).map transform().oclAsType(VerifiableElement);
	markedElement.oclAsType(ExtendableElement).extensions += object ElementToVerifyExtension{}
}