import ImplicitCopy;
import transforms.lib.RTSCUtil;
import transforms.lib.MultiMappingUtil;
import transforms.lib.ExternalizedStrings;

modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype verificationExtension uses 'http://www.muml.org/uppaal/adapter/extension/verificationextension/1.0.0';
modeltype modelinstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');

/**
* Introduce regions into states that periodically execute the states' do event 
*/
transformation RTSCDoEventNormalization(in input:rtsc, out output:rtsc);

main() {
	assert fatal (input.objects()[Transition]->forAll(t | not t.source.isCompositeState() and not t.target.isCompositeState())) with log("Composite transitions unsupported here.");
	input.objects()[RootNode]->map transform().oclAsType(RootNode);
}

//State2State
mapping State :: transform() : State {
				
		name := self.name;
		
		connectionPoints := self.connectionPoints->map transform().oclAsType(StateConnectionPoint);
		
		--only map incoming and outgoing transitions simple if the source state is already a composite state. 
		--In this case there are no composite transitions that would have to be redirected to entry/exit points.
		if(self.embeddedRegions->size()>0)
		then{
			incomingTransitions := self.incomingTransitions->map transform().oclAsType(Transition);
			outgoingTransitions := self.outgoingTransitions->map transform().oclAsType(Transition);
		}
		endif;
		
		
		embeddedRegions := self.embeddedRegions->map transform().oclAsType(Region);
		
		entryEvent := self.entryEvent.map transform().oclAsType(EntryEvent);
		exitEvent := self.exitEvent.map transform().oclAsType(ExitEvent);
		
		--Translate Do-events
		if(not self.doEvent.oclIsUndefined() and self.doEvent != null)		
			then{
			
			--map do-event to region and contained rtsc
			var doRegion : Region := self.doEvent.map Do2DoRegion(); 
			embeddedRegions += doRegion;

			doRegion.embeddedStatechart := self.map createDoRtsc();

			
			--create States
			self.map createDoRtsc().states += self.map createWaitState();
			self.map createWaitState().invariants += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::LESS;
																		};
			self.map createDoRtsc().states += self.map createReleaseState();
			self.map createReleaseState().invariants += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::LESS;
																		};
			self.map createDoRtsc().states += self.map createDoneState();
			self.map createDoneState().invariants += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::LESS_OR_EQUAL;
																		};
			
			--create transitions between states
				-- Wait -> Release
			var curTransition : Transition;
			curTransition := map createTransition(self.map createWaitState(), self.map createReleaseState(), 2);
			self.map createDoRtsc().transitions += curTransition;
			curTransition.clockConstraints += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::LESS;
																		};
			
				-- Realease -> Done
			curTransition := map createTransition(self.map createReleaseState(), self.map createDoneState(), 2);
			self.map createDoRtsc().transitions += curTransition;
			curTransition.clockConstraints  += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::LESS;
																		};
			curTransition.action := self.doEvent.action.mapAction();
			
			
				-- Done -> Wait
			curTransition := map createTransition(self.map createDoneState(), self.map createWaitState(), 2);
			self.map createDoRtsc().transitions += curTransition;
			curTransition.clockConstraints += object ClockConstraint{
																		clock:= self.map createDoClock();
																		bound:= self.doEvent.period.mapTimeValue();
																		operator := ComparingOperator::EQUAL;
																		};
			curTransition.clockResets += self.map createDoClock();
			
			--create Entry-Points for each incoming transition of state if there is no Entry-Point yet (state is simple)
			if(self.connectionPoints[EntryPoint]->size()<1)
				then{
					
					--redirect incoming transitions to entry point
					if(self.embeddedRegions->size()<1)
					then{
						self.incomingTransitions->forEach(transition){
							-- create entry point for each incoming transition
							var entryPoint : EntryPoint := object EntryPoint{name:= "doEntry".addSuffixNumberUnderline();};
							connectionPoints += entryPoint;
							
							-- redirect the transition to entry point
							entryPoint.incomingTransitions := transition.map transform().oclAsType(Transition);
							transition.map transform().oclAsType(Transition).target := entryPoint;
							
							-- set it to urgent
							transition.map transform().oclAsType(Transition).urgent := true;
							
							-- create transition to wait
								-- Entry -> Wait
							curTransition := map createTransition(entryPoint,self.map createWaitState(), 1);
							self.map createDoRtsc().transitions += curTransition;
							curTransition.urgent := true;
							
							-- steal the action :)
							curTransition.action := transition.map transform().oclAsType(Transition).action;
							
							-- steal the send message event
							curTransition.events := transition.map transform().oclAsType(Transition).raiseMessageEvent; 
							}
					}
					endif;

				}
				--otherwise create Transition from each entry-point to wait state
				else{
					self.connectionPoints[EntryPoint]->forEach(curEntryPoint){
						curTransition := map createTransition(curEntryPoint.map transform().oclAsType(StateConnectionPoint), self.map createWaitState(), 1);
						self.map createDoRtsc().transitions += curTransition;
						curTransition.urgent := true;
					}
				}
			endif;
			
			--create Exit-Point for each outgoing Transition if there is none yet (state is simple)
				if(self.connectionPoints[ExitPoint]->size()<1)
				then{
				
				
					if(self.embeddedRegions->size()<1)
						then{
							self.outgoingTransitions->forEach(transition){
								-- create exit point for each outgoing transition
								var exitPoint : ExitPoint := object ExitPoint{name:= "doExit".addSuffixNumberUnderline();};
								connectionPoints += exitPoint;
							
								-- redirect the transition to entry point
								exitPoint.outgoingTransitions := transition.map transform().oclAsType(Transition);
								transition.map transform().oclAsType(Transition).source := exitPoint;
							
								-- set it to urgent
								transition.map transform().oclAsType(Transition).urgent := true;
							
								-- create transitions from wait to exit point
								curTransition := map createTransition(self.map createWaitState(), exitPoint, 1);
								self.map createDoRtsc().transitions += curTransition;
								curTransition.urgent := transition.urgent;
								
								-- add guard
								curTransition.guard := transition.guard.mapExpression();
								-- add synchronization
								curTransition.synchronization := transition.synchronization.mapSynchronization();
								-- add trigger message event
								curTransition.events := transition.triggerMessageEvent.mapAsynchronousMessageEvent(); 
								
								-- create transitions from done to exit point
								curTransition := map createTransition(self.map createDoneState(), exitPoint, 1);
								self.map createDoRtsc().transitions += curTransition;
								curTransition.urgent := transition.urgent;
							
								-- steel the guard :) 
								curTransition.guard := transition.map transform().oclAsType(Transition).guard;
								-- steal the synchronization
								curTransition.synchronization := transition.map transform().oclAsType(Transition).synchronization;
								-- steal the trigger message event
								curTransition.events := transition.map transform().oclAsType(Transition).triggerMessageEvent;
								
							}
					}
					endif;
				
				}
				--otherwise create Transition from wait and done state to each exit point
				else{
					self.connectionPoints[ExitPoint]->forEach(curExitPoint){
						curTransition := map createTransition(self.map createWaitState(), curExitPoint.map transform().oclAsType(StateConnectionPoint), 1);
						self.map createDoRtsc().transitions += curTransition;
						curTransition.urgent := true;
						curTransition := map createTransition(self.map createDoneState(), curExitPoint.map transform().oclAsType(StateConnectionPoint), 1);
						self.map createDoRtsc().transitions += curTransition;
						curTransition.urgent := true;
					}
				}
			endif;
				
			}
		endif;
		
		invariants := self.invariants->map transform().oclAsType(ClockConstraint);		
		initial := self.initial;	
		final := self.final;	
		urgent := self.urgent;	
		channels := self.channels->map transform().oclAsType(SynchronizationChannel);	
		parentStatechart := self.parentStatechart.map transform().oclAsType(RealtimeStatechart);
		extensions := self.extensions.oclAsType(CommittedExtension).map transform().oclAsType(CommittedExtension);	
}
	
//Transition2Transition
mapping pim::realtimestatechart::Transition :: transform() : pim::realtimestatechart::Transition disjuncts Transition::doTargetTransition2Transition, Transition::doSourceTransition2Transition, Transition::normalTransition2Transition;

mapping pim::realtimestatechart::Transition :: doTargetTransition2Transition() : pim::realtimestatechart::Transition when{not (self.target.oclAsType(State).doEvent = null)}{
    	priority := self.priority;
    	comment := self.comment;
    	blockable := self.blockable;
    	urgent := self.urgent;
    	extensions := self.extensions.map transform().oclAsType(core::Extension);
    	synchronization := self.synchronization.map transform().oclAsType(Synchronization);
    	//do not set the target state because this transition is redirected to an entry point
    	if(not self.target.oclIsKindOf(State))
    		target := self.target.map transform().oclAsType(Vertex);
    	source := self.source.map transform().oclAsType(Vertex);
    	clockResets := self.clockResets.map transform().oclAsType(Clock);
    	clockConstraints := self.clockConstraints.map transform().oclAsType(ClockConstraint);
    	absoluteDeadlines := self.absoluteDeadlines.map transform().oclAsType(AbsoluteDeadline);
    	relativeDeadline := self.relativeDeadline.map transform().oclAsType(RelativeDeadline);
    	guard := self.guard.map transform().oclAsType(Expression);
    	events := self.events.map transform().oclAsType(TransitionEvent);
    	action := self.action.map transform().oclAsType(Action);
}
   		 
mapping pim::realtimestatechart::Transition :: doSourceTransition2Transition() : pim::realtimestatechart::Transition when{not (self.source.oclAsType(State).doEvent = null)}{
    	priority := self.priority;
    	comment := self.comment;
    	blockable := self.blockable;
    	urgent := self.urgent;
    	extensions := self.extensions.map transform().oclAsType(core::Extension);
    	synchronization := self.synchronization.map transform().oclAsType(Synchronization);
    	target := self.target.map transform().oclAsType(Vertex);
    	//do not set the source state because this transition will have an exit point as source
    	if(not self.source.oclIsKindOf(State))
    		source := self.source.map transform().oclAsType(Vertex);
    	clockResets := self.clockResets.map transform().oclAsType(Clock);
    	clockConstraints := self.clockConstraints.map transform().oclAsType(ClockConstraint);
    	absoluteDeadlines := self.absoluteDeadlines.map transform().oclAsType(AbsoluteDeadline);
    	relativeDeadline := self.relativeDeadline.map transform().oclAsType(RelativeDeadline);
    	guard := self.guard.map transform().oclAsType(Expression);
    	events := self.events.map transform().oclAsType(TransitionEvent);
    	action := self.action.map transform().oclAsType(Action);
}
   		 
//EntryPoint2EntryPoint
mapping pim::realtimestatechart::EntryPoint :: transform() : pim::realtimestatechart::EntryPoint{
    	name := self.name;
    	comment := self.comment;
    	extensions := self.extensions.map transform().oclAsType(core::Extension);
    	outgoingTransitions := self.outgoingTransitions.map transform().oclAsType(Transition);
    	if(self.state.doEvent != null){
    		outgoingTransitions += map createTransition(result, self.state.map createWaitState(), 1);
    		map createTransition(result, self.state.map createWaitState(), 1).urgent := true;
    		incomingTransitions := self.incomingTransitions.map transform().oclAsType(Transition);
    	};
    	
    	state := self.state.map transform().oclAsType(State);
}
   		 
//ExitPoint2ExitPoint
mapping pim::realtimestatechart::ExitPoint :: transform() : pim::realtimestatechart::ExitPoint{
    	name := self.name;
    	comment := self.comment;
    	extensions := self.extensions.map transform().oclAsType(core::Extension);
    	outgoingTransitions := self.outgoingTransitions.map transform().oclAsType(Transition);
    	incomingTransitions := self.incomingTransitions.map transform().oclAsType(Transition);
    	
    	if(self.state.doEvent != null){
    		incomingTransitions += map createTransition(self.state.map createWaitState(), result, 1);
    		incomingTransitions += map createTransition(self.state.map createDoneState(), result, 1);
    	};
    	
    	state := self.state.map transform().oclAsType(State);
}

mapping pim::realtimestatechart::Transition :: normalTransition2Transition() : pim::realtimestatechart::Transition{
    	priority := self.priority;
    	comment := self.comment;
    	blockable := self.blockable;
    	urgent := self.urgent;
    	extensions := self.extensions.map transform().oclAsType(core::Extension);
    	synchronization := self.synchronization.map transform().oclAsType(Synchronization);
    	target := self.target.map transform().oclAsType(Vertex);
    	source := self.source.map transform().oclAsType(Vertex);
    	clockResets := self.clockResets.map transform().oclAsType(Clock);
    	clockConstraints := self.clockConstraints.map transform().oclAsType(ClockConstraint);
    	absoluteDeadlines := self.absoluteDeadlines.map transform().oclAsType(AbsoluteDeadline);
    	relativeDeadline := self.relativeDeadline.map transform().oclAsType(RelativeDeadline);
    	guard := self.guard.map transform().oclAsType(Expression);
    	events := self.events.map transform().oclAsType(TransitionEvent);
    	action := self.action.map transform().oclAsType(Action);
}
   		
mapping DoEvent :: Do2DoRegion() : Region{
		var state := self.container().oclAsType(State);
		priority := state.getUniqueRegionPriority(1);
		embeddedStatechart := state.map createDoRtsc();

}	

mapping State :: createDoRtsc() : RealtimeStatechart {
		name := doRtscName;
		clocks += self.map createDoClock();	
}

mapping State :: createWaitState(): State{
	initial := true;
	name := waitState;
	parentStatechart := self.map createDoRtsc();
}

mapping State :: createReleaseState(): State{
	name := releaseState;
	parentStatechart := self.map createDoRtsc();
}

mapping State :: createDoneState(): State{
	name := doneState;
	parentStatechart := self.map createDoRtsc();
}


mapping State :: createExitPoint() : ExitPoint{
	name := "doExit".addSuffixNumberUnderline();
}



mapping State :: createDoClock() : Clock {
	name := "doClock".addSuffixNumberUnderline();
}

mapping createTransition(sourceState:Vertex, targetState:Vertex, pri : Integer):Transition{
	source := sourceState;
	target := targetState;
	urgent := false;
	priority := sourceState.getUniqueTransitionPriority(pri);
}

	
helper disjungateExpressions(firstExp:Expression, secondExp:Expression):Expression{
	if(not (firstExp = secondExp))
	then{
	return object LogicalExpression{
		leftExpression := firstExp.mapExpression();
		rightExpression := secondExp.mapExpression();
		operator := LogicOperator::OR;
		}
	}
	endif;
	return firstExp.mapExpression();
}