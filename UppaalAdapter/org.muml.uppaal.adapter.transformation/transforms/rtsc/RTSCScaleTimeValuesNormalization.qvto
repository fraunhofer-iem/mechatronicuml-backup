import transforms.lib.MUML2MUML;
import de.uni_paderborn.fujaba.muml.verification.uppaal._blackbox.TimeLibUnit;


modeltype muml_rtsc uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');

modeltype muml_valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven_common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype storydriven_expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype modelinstance uses 'http://www.fujaba.de/modelinstance/0.4.0';
modeltype mtctlQuantifiers uses mtctl::Quantifiers('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlPredicates uses mtctl::Predicates('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlSets uses mtctl::Sets('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlBooleanLogic uses mtctl::BooleanLogic('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlComparables uses mtctl::Comparables('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');


/**
* Normalize time units used in the model (to one common time unit)
*/
transformation RTSCScaleTimeValuesNormalization(in input:muml_rtsc, out output:muml_rtsc);

	main() {
		
		input.objects()[RootNode]->map RootNode2RootNode();
	}

	-- TODO move this to ExpressionUtils
	constructor storydriven_common::LiteralExpression :: LiteralExpression(i : Integer) {
		value := i.repr()
	}

	query getTimeUnits() : OrderedSet(String) {
		
		return OrderedSet {'DAYS', 'HOURS', 'MINUTES', 'SECONDS', 'MILLISECONDS', 'MICROSECONDS', 'NANOSECONDS'}
	}

	query getShortestTimeUnit() : TimeUnit {
			
		var usedTimeUnits : OrderedSet(TimeUnit) = input.objects()[TimeValue]->collect(unit)
			->union(input.objects()[ConstExpr]->collect(timeUnit))->select(not oclIsUndefined())->asOrderedSet();
		return usedTimeUnits->sortedBy(u | getTimeUnits()->indexOf(u.repr()))->last();
	}
	
	mapping TimeValue :: TimeValue2TimeValue() : TimeValue {
		var shortest : TimeUnit = getShortestTimeUnit();
		var upscale : Integer = getUpscaleFactor(self.unit, shortest);
		unit := shortest;
		if(upscale = 1) {
			value := self.value.map Expression2Expression();
		} else {
			value := object ArithmeticExpression {
				leftExpression := self.value.map Expression2Expression();
				operator :=  ArithmeticOperator::TIMES;
				rightExpression := new LiteralExpression(upscale);
			}	
		}
	}
	
	mapping ConstExpr :: ConstExpr2ConstExpr() : ConstExpr {
		if (self.timeUnit = null) {
			val := self.val;
		}
		else {
			var shortest: TimeUnit = getShortestTimeUnit();
			var upscale : Integer = getUpscaleFactor(self.timeUnit, shortest);
		
			val := self.val * upscale;
			timeUnit := shortest;
		}
	}
	
