import transforms.lib.RTSCUtil;
import ImplicitCopy;
import transforms.lib.MultiMappingUtil;

/* Normalizes transitions with deadlines by adding an intermediate state.
*  MTCTL properties with transitionFiring expressions (with transitions with deadlines) 
*  are normalized into stateActive expressions.
*/
transformation RTSCDeadlineTransitionNormalization(in input:muml_rtsc, out output:muml_rtsc);

modeltype muml uses 'http://www.muml.org/pim/1.0.0';
modeltype muml_rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype muml_connector uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype muml_constraint uses pim::constraint('http://www.muml.org/pim/1.0.0');
modeltype muml_behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype muml_protocol uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype muml_actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';
modeltype muml_msgtype uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype muml_types uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype muml_valuetype uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype storydriven_core_expressions_common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype storydriven_core_expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype extension uses 'http://www.muml.org/uppaal/adapter/extension/verificationextension/1.0.0';
modeltype modelinstance uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype mtctlQuantifiers uses mtctl::quantifiers('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlPredicates uses mtctl::predicates('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlSets uses mtctl::sets('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlBooleanLogic uses mtctl::booleanlogic('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlComparables uses mtctl::comparables('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';


main() {

	input.objects()[RootNode]->map transform().oclAsType(RootNode);

}

property intermediateStateNamePrefix : String = 'INTERMEDIATE';

//RealtimeStatechart2RealtimeStatechart
mapping RealtimeStatechart :: transform() : RealtimeStatechart {
				
	name := self.name;
	
	behavioralElement := self.behavioralElement.map transform().oclAsType(BehavioralElement);
			
	clocks += self.clocks->map transform().oclAsType(Clock);
	clocks += self.map RTSC2RelativeDeadlineClock();
	
	variables += self.variables->map transform().oclAsType(Variable);
	operations += self.operations->map transform().oclAsType(Operation);
		
	states += self.states->map transform().oclAsType(State);
	states += self.transitions->map Transition2IntermediateState();
	
	-- map all transitions between vertices of this statechart	
	transitions += self.getTransitions()->map transform().oclAsType(Transition);
	transitions += self.getTransitions()->map Transition2InitialTransition();
	transitions += self.getTransitions()->map Transition2FinalTransition();
							
}

mapping Variable :: Variable2InitializeAssignment() : Assignment when {self.initializeExpression != null} {
	
	lhs_typedNamedElementExpression := object TypedNamedElementExpression {
		typedNamedElement := self.map transform().oclAsType(TypedNamedElement);
	};
	
	assignOperator := AssignOperator::ASSIGN;
	
	rhs_assignExpression := self.map Variable2InitializeExpression();
	
}

mapping Variable :: Variable2InitializeExpression() : Expression
	disjuncts Variable::Variable2ExplicitInitializeExpression, Variable::Variable2ImplicitInitializeExpression;
	
mapping Variable :: Variable2ExplicitInitializeExpression() : Expression when {self.initializeExpression != null} {
	
	init {
		result := self.initializeExpression.map transform().oclAsType(Expression);
	}
	
}

mapping Variable :: Variable2ImplicitInitializeExpression() : Expression when {self.initializeExpression = null} {
	
	init {
		result := self.dataType.map DataType2Initializer();
	}

}

mapping DataType :: DataType2Initializer() : Expression
	disjuncts PrimitiveDataType::PrimitiveDataType2Initializer, ArrayDataType::ArrayDataType2Initializer;

mapping ArrayDataType :: ArrayDataType2Initializer() : ArrayInitializeExpression {
	
	Set{0..self.cardinality.value}->forEach(index) {
		expressions += self.type.map DataType2Initializer();
	}
	
}

mapping PrimitiveDataType :: PrimitiveDataType2Initializer() : LiteralExpression {
	
	value := self.primitiveType.getDefaultValue();
	
}

query PrimitiveTypes :: getDefaultValue() : String {
	
	return switch {
		case (self = PrimitiveTypes::BOOLEAN) 'false';
		case (self = PrimitiveTypes::INT8) ''; // FIXME
		case (self = PrimitiveTypes::INT16) '0';
		case (self = PrimitiveTypes::INT32) '0';
		case (self = PrimitiveTypes::INT64) '0L';
		case (self = PrimitiveTypes::DOUBLE) '0.0d';
		else assert fatal (false) with log("Illegal enum value");
	}
	
}

//State2State
mapping State :: transform() : State {
		
	name := self.name;
	
	initial := self.initial;	
	urgent := self.urgent;
	final := self.final;
	
	channels += self.channels->map transform().oclAsType(SynchronizationChannel);	
	
	invariants += self.invariants->map transform().oclAsType(ClockConstraint);
	
	connectionPoints += self.connectionPoints->map transform().oclAsType(StateConnectionPoint);
		
	embeddedRegions += self.embeddedRegions->map transform().oclAsType(Region);
	
	/*
	if (self.doEvent != null) 
	then {
		embeddedRegions += self.map State2DoRegion();
	}
	endif;
	*/
	
	entryEvent := self.entryEvent.map transform().oclAsType(EntryEvent);
	doEvent := self.doEvent.map transform().oclAsType(DoEvent);
	exitEvent := self.exitEvent.map transform().oclAsType(ExitEvent);
			
}

/*
mapping Assignment :: Assignment2Initialzer() : Expression {
	
	init {
		result := self.rhs_assignExpression.map Expression2Expression();
	}
	
}
*/

//Transition2Transition
mapping Transition :: transform() : Transition when {not self.hasDeadline()} {
		
	source := self.source.map transform().oclAsType(Vertex);
	
	target := self.target.map transform().oclAsType(Vertex);
	
	guard := self.guard.map transform().oclAsType(Expression);

	clockConstraints += self.clockConstraints->map transform().oclAsType(ClockConstraint);
	
	synchronization := self.synchronization.map transform().oclAsType(Synchronization);
	
	events += self.triggerMessageEvent.map transform().oclAsType(AsynchronousMessageEvent);
	
	action := self.action.map transform().oclAsType(Action);			
		
	events += self.raiseMessageEvent.map transform().oclAsType(AsynchronousMessageEvent);
	
	clockResets += self.clockResets->map transform().oclAsType(Clock);
		
	priority := self.priority;
	
	urgent := self.urgent;
		
	
	end {
		assert fatal (result.source != null) with log('Source state must be specified.');
		assert fatal (result.target != null) with log('Target state must be specified.');
	}
				
}


mapping AbsoluteDeadline :: AbsoluteDeadline2Invariant() : ClockConstraint when {self.hasUpperBound()} {
	
	bound := self.upperBound.map transform().oclAsType(TimeValue);
	
	operator := ComparingOperator::LESS_OR_EQUAL;
	
	clock := self.clock.map transform().oclAsType(Clock);
}

mapping RelativeDeadline :: RelativeDeadline2Invariant(rtsc : RealtimeStatechart) : ClockConstraint when {self.hasUpperBound()} {
	
	bound := self.upperBound.map transform().oclAsType(TimeValue);
	
	operator := ComparingOperator::LESS_OR_EQUAL;
	
	clock := rtsc.map RTSC2RelativeDeadlineClock();
}

mapping AbsoluteDeadline :: AbsoluteDeadline2TimeGuard() : ClockConstraint when {self.hasLowerBound()} {
	
	bound := self.lowerBound.map transform().oclAsType(TimeValue);
	
	operator := ComparingOperator::GREATER_OR_EQUAL;
	
	clock := self.clock.map transform().oclAsType(Clock);
}

mapping RelativeDeadline :: RelativeDeadline2TimeGuard(rtsc : RealtimeStatechart) : ClockConstraint	when {self.hasLowerBound()} {
	
	bound := self.lowerBound.map transform().oclAsType(TimeValue);
	
	operator := ComparingOperator::GREATER_OR_EQUAL;
	
	clock := rtsc.map RTSC2RelativeDeadlineClock();
}



property relativeDeadlineClockNamePrefix : String = 'RELATIVE';

mapping RealtimeStatechart :: RTSC2RelativeDeadlineClock() : Clock when {self.getTransitions()->exists(not relativeDeadline.oclIsUndefined())} {
	name := relativeDeadlineClockNamePrefix.addSuffixNumberUnderline();
}


query Deadline :: hasLowerBound() : Boolean {
	return not self.lowerBound.oclIsUndefined()
}

query Deadline :: hasUpperBound() : Boolean {
	return not self.upperBound.oclIsUndefined()
}

query Transition :: hasDeadline() : Boolean {
	return self.absoluteDeadlines->notEmpty() or self.relativeDeadline != null
}

// override DynamicPredicate to introduce TransitionFiringExpr2StateActiveExpr
//mapping mtctl::predicates::DynamicPredicateExpr :: DynamicPredicateExpr2DynamicPredicateExpr() : mtctl::predicates::DynamicPredicateExpr
//disjuncts mtctl::predicates::TransitionFiringExpr::TransitionFiringExpr2StateActiveExpr,
//mtctl::predicates::MessageInTransitExpr::MessageInTransitExpr2MessageInTransitExpr,
// mtctl::predicates::MessageInBufferExpr::MessageInBufferExpr2MessageInBufferExpr,
//  mtctl::predicates::MessageDiscardedExpr::MessageDiscardedExpr2MessageDiscardedExpr,
//   mtctl::predicates::DeadlockExpr::DeadlockExpr2DeadlockExpr,
//    mtctl::predicates::ConnectorOverflowExpr::ConnectorOverflowExpr2ConnectorOverflowExpr,
//     mtctl::predicates::TransitionFiringExpr::TransitionFiringExpr2TransitionFiringExpr,
//      mtctl::predicates::StateActiveExpr::StateActiveExpr2StateActiveExpr;

// replaces the disjuncts-mapping above
mapping mtctl::predicates::TransitionFiringExpr :: transform() : mtctl::predicates::DynamicPredicateExpr{
	init
	{
		if (self.transition.oclAsType(MumlElemExpr).elem.oclAsType(Transition).hasDeadline())
		then {
			result := self.map TransitionFiringExpr2StateActiveExpr();
		}
		else
		{
			result := object TransitionFiringExpr {
				transition := self.transition.map transform().oclAsType(MapExpr);
			}
		}
		endif;
	}
}

// a transition with a deadline is firing iff the intermediate state is active
mapping TransitionFiringExpr :: TransitionFiringExpr2StateActiveExpr() : StateActiveExpr {
	state := object MumlElemExpr {
		elem := self.transition.oclAsType(MumlElemExpr).elem.oclAsType(Transition).map Transition2IntermediateState().oclAsType(ecore::EObject);
		instance := self.transition.oclAsType(MumlElemExpr).instance.map transform().oclAsType(EObject);
	};
}

mapping Transition :: Transition2InitialTransition() : Transition when {self.hasDeadline()} {
	
	source := self.source.map transform().oclAsType(Vertex);
	target := self.map Transition2IntermediateState(); 
	
	guard := self.guard.map transform().oclAsType(Expression);
	clockConstraints += self.clockConstraints->map transform().oclAsType(ClockConstraint);
	events += self.triggerMessageEvent.map transform().oclAsType(AsynchronousMessageEvent);
	synchronization := self.synchronization.map transform().oclAsType(Synchronization);
		
	if (self.relativeDeadline != null)
	then {
		clockResets += self.getStatechart().map RTSC2RelativeDeadlineClock();
	}
	endif;
	
	priority := self.priority;
	urgent := self.urgent;
	
}

mapping Transition :: Transition2IntermediateState() : State when {self.hasDeadline()} {
	
	name := intermediateStateNamePrefix.addSuffixNumberUnderline();
	invariants += self.absoluteDeadlines->map AbsoluteDeadline2Invariant();
	invariants += self.relativeDeadline.map RelativeDeadline2Invariant(self.getStatechart());
}

mapping Transition :: Transition2FinalTransition() : Transition when {self.hasDeadline()} {

	source := self.map Transition2IntermediateState();
	target := self.target.map transform().oclAsType(Vertex);
	
	clockConstraints += self.absoluteDeadlines->map AbsoluteDeadline2TimeGuard();
	clockConstraints += self.relativeDeadline.map RelativeDeadline2TimeGuard(self.getStatechart());
	
	events += self.raiseMessageEvent.map transform().oclAsType(AsynchronousMessageEvent);
	
	action := self.action.map transform().oclAsType(Action);
		
	clockResets += self.clockResets->map transform().oclAsType(Clock);
	
	priority := 1;
	
	-- set urgency to false in order to consider the entire deadline interval
	urgent := false;
	
}