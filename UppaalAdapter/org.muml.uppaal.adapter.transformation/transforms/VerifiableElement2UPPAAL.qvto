import transforms.VerifiableElement2VerifiableCIC;
import transforms.VerifiableCIC2UPPAAL;

modeltype verification_options uses 'http://www.muml.org/uppaal/adapter/options/1.0.0';
modeltype muml uses 'http://www.muml.org/pim/1.0.0';
modeltype uppaal uses 'http://www.muml.org/uppaal/1.0.0';
modeltype uppaal_requirements uses 'http://www.muml.org/uppaal/requirements/1.0.0';

/*
* Transforms a VerifiableElement to UPPAAL
* "out originalCIC" contains the complex properties specified for the VerifiableElement
* "out mtctlStaticallyNormalizedModel" contains the statically normalized MTCTL properties
* "out verifiableCIC" contains normalized and split MTCTL properties
*/
transformation VerifiableElement2UPPAAL(in input:muml, in options: verification_options, out output_uppaal:uppaal, out output_req : uppaal_requirements, out originalCIC : muml, out mtctlStaticallyNormalizedModel: muml, out verifiableCIC : muml);

main() {
	var verifiableElem2VerifiableCIC : VerifiableElement2VerifiableCIC = new VerifiableElement2VerifiableCIC(input, options, verifiableCIC, mtctlStaticallyNormalizedModel, originalCIC);
	var retcode : Status = verifiableElem2VerifiableCIC.transform();
	assert fatal (retcode.succeeded()) with log('VerifiableElement2VerifiableCIC transformation failed: ' + retcode.raisedException().repr());

	var uppaalModel : uppaal = uppaal.createEmptyModel().oclAsType(uppaal);
	var uppaalReq : uppaal_requirements = uppaal_requirements.createEmptyModel().oclAsType(uppaal_requirements);
	var cicToUppaal : VerifiableCIC2UPPAAL = new VerifiableCIC2UPPAAL(verifiableCIC, options, output_uppaal, output_req);
	retcode := cicToUppaal.transform();
	assert fatal (retcode.succeeded()) with log('CIC2UPPAAL transformation failed: ' + retcode.raisedException().repr());

}
