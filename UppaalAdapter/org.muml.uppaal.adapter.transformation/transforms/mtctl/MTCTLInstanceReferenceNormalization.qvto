import ImplicitCopy;
import org.muml.uppaal.adapter._blackbox.MtctlLibrary;

modeltype muml_cic uses pim::instance('http://www.muml.org/pim/1.0.0');

modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype mumlConstraint uses pim::constraint('http://www.muml.org/pim/constraint/1.0.0');
modeltype mumlMessageType uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype mumlBehavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype modelinstance uses core::modelinstance('http://www.muml.org/core/1.0.0');

modeltype mtctl uses 'http://www.muml.org/uppaal/adapter/mtctl/1.0.0';
modeltype mtctlQuantifiers uses mtctl::quantifiers('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlPredicates uses mtctl::predicates('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlSets uses mtctl::sets('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlBooleanLogic uses mtctl::booleanlogic('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlComparables uses mtctl::comparables('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

//Sets the 'instance' features in all MumlElemExpr
transformation MTCTLInstanceReferenceNormalization(in input:muml_cic, out output:muml_cic){ //extends library MUML2MUML;

main() {
	input.objects()[RootNode]->map transform();
	assert(output.objects()[MumlElemExpr]->forAll(e : MumlElemExpr | e.instance.oclIsUndefined() implies e.elem.oclIsKindOf(BoundVariable) or e.elem.oclIsKindOf(MessageType) or e.eContainer().oclIsKindOf(InstanceSetExpr) or e.eContainer().oclIsKindOf(SubinstanceSetExpr))) with log("MTCTLInstanceReferenceNormalization failed");
}

//MumlElemExpr2MumlElemExpr
mapping MumlElemExpr :: transform() : MumlElemExpr {
	elem := self.elem.map transform().oclAsType(EObject);
	if (self.instance != null) {
		instance := self.instance.map transform().oclAsType(EObject);
	} else
		instance := inferInstanceFor(self).map transform().oclAsType(EObject);
}
}