import transforms.lib.MUML2MUML;
import org.muml.uppaal.adapter._blackbox.MtctlLibrary;

modeltype muml_cic uses muml::instance('http://www.muml.org/pim/1.0.0');

modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype mumlConstraint uses 'http://www.muml.org/pim/constraint/1.0.0';
modeltype mumlMessageType uses 'http://www.muml.org/pim/msgtype/1.0.0';
modeltype mumlBehavior uses 'http://www.muml.org/pim/behavior/1.0.0';
modeltype modelinstance uses 'http://www.muml.org/core/modelinstance/1.0.0';

modeltype mtctl uses 'http://www.muml.org/uppaal/adapter/mtctl/1.0.0';
modeltype mtctlQuantifiers uses mtctl::Quantifiers('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlPredicates uses mtctl::Predicates('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlSets uses mtctl::Sets('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlBooleanLogic uses mtctl::BooleanLogic('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype mtctlComparables uses mtctl::Comparables('http://www.muml.org/uppaal/adapter/mtctl/1.0.0');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

//Sets the 'instance' features in all MumlElemExpr
transformation MTCTLInstanceReferenceNormalization(in input:muml_cic, out output:muml_cic) extends library MUML2MUML;

main() {
	input.objects()[RootNode]->map RootNode2RootNode();
	assert(output.objects()[MumlElemExpr]->forAll(e : MumlElemExpr | e.instance.oclIsUndefined() implies e.elem.oclIsKindOf(BoundVariable) or e.elem.oclIsKindOf(MessageType) or e.eContainer().oclIsKindOf(InstanceSetExpr) or e.eContainer().oclIsKindOf(SubinstanceSetExpr))) with log("MTCTLInstanceReferenceNormalization failed");
}

mapping MumlElemExpr :: MumlElemExpr2MumlElemExpr() : MumlElemExpr {
	elem := self.elem.map EObject2EObject();
	if (self.instance != null) {
		instance := self.instance.map EObject2EObject();
	} else
		instance := inferInstanceFor(self).map EObject2EObject();
}