import transforms.lib.MUML2MUML;
import transforms.mtctl.MTCTLQuantifierNormalization;
import transforms.mtctl.MTCTLStaticNormalization; 
import transforms.mtctl.MTCTLPropertySplitTransformation;
import transforms.mtctl.MTCTLInstanceReferenceNormalization;
import transforms.CloneModel;

modeltype muml uses 'http://www.fujaba.de/muml/0.4.0';

modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype mumlConstraint uses 'http://www.fujaba.de/muml/constraint/0.4.0';
modeltype mumlBehavior uses 'http://www.fujaba.de/muml/behavior/0.4.0';
modeltype modelinstance uses 'http://www.muml.org/core/modelinstance/1.0.0';
modeltype verification_extension uses 'http://www.fujaba.de/muml/verification/extension/0.4.0';

modeltype mtctl uses 'http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl';
modeltype mtctlQuantifiers uses mtctl::Quantifiers('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlPredicates uses mtctl::Predicates('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlSets uses mtctl::Sets('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlBooleanLogic uses mtctl::BooleanLogic('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype mtctlComparables uses mtctl::Comparables('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';

transformation MTCTLTransformation(in input:muml, out staticallyNormalizedOutput:muml, out propertySplitOutput:muml) access MTCTLInstanceReferenceNormalization, MTCTLQuantifierNormalization, MTCTLStaticNormalization, MTCTLPropertySplitTransformation;

main() {
	//Clone input model and delete all verification property repositories that do not belong to a VerifiableElement with an ElementToVerifyExtension
	var clonedModel := muml.createEmptyModel().oclAsType(muml);
	var cloneTransformation := new CloneModel(input, clonedModel);
	var retcode := cloneTransformation.transform();
	assert fatal (retcode.succeeded()) with log ('Clone Transformation failed: ' + retcode.raisedException().repr());
	clonedModel.objects()[VerifiableElement]->select(ve | not ve.extension->exists(oclIsKindOf(ElementToVerifyExtension)))->forEach(verifiableElement) {
		verifiableElement.verificationConstraintRepositories->forEach(repository) {
			clonedModel.removeElement(repository);
		};
		verifiableElement.verificationConstraintRepositories := OrderedSet {};
	};

	//Normalize MumlElemExpr::instance references
	var instanceRefNormalizedModel := muml.createEmptyModel().oclAsType(muml);
	var refNormalization := new MTCTLInstanceReferenceNormalization(clonedModel, instanceRefNormalizedModel);	
	retcode := refNormalization.transform();
	assert fatal (retcode.succeeded()) with log('Setting MumlElemExpr::instance normalization failed: ' + retcode.raisedException().repr());
	
	//Quantifier normalization (needs write access to its input model. However, the InstanceReferenceNormalization already creates a copy)
	var intermediateModel := muml.createEmptyModel().oclAsType(muml);
	var quantifierNormalization := new MTCTLQuantifierNormalization(instanceRefNormalizedModel, intermediateModel);	
	retcode := quantifierNormalization.transform();
	assert fatal (retcode.succeeded()) with log('MTCTL Quantifier Normalization failed: ' + retcode.raisedException().repr());
	
	//Static normalization
	var staticNormalization := new MTCTLStaticNormalization(intermediateModel, staticallyNormalizedOutput);
	retcode := staticNormalization.transform();
	assert fatal (retcode.succeeded()) with log('Static MTCTL Normalization failed: ' + retcode.raisedException().repr());
	
	//PropertySplitNormalization
	var propertySplitTransformation := new MTCTLPropertySplitTransformation(staticallyNormalizedOutput, propertySplitOutput);
	retcode := propertySplitTransformation.transform();
	assert fatal (retcode.succeeded()) with log('MTCTL Property Split Transformation failed: ' + retcode.raisedException().repr());

	
}
