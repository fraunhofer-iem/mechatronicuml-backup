library Queries;

modeltype uppaal uses 'http://www.muml.org/uppaal/1.0.0';
modeltype uppaal_templates uses uppaal::templates('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_expressions uses uppaal::expressions('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_statements uses uppaal::statements('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_types uses uppaal::types('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_declarations uses uppaal::declarations('http://www.muml.org/uppaal/1.0.0');
modeltype muml_rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype muml_actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';
modeltype muml_behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype muml_types uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype muml_component uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype storydriven uses 'http://www.muml.org/core/1.0.0';
modeltype storydriven_common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype storydriven_expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype extension uses 'http://www.fujaba.de/muml/verification/extension/0.4.0';

modeltype x uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');

	query RealtimeStatechart :: belongsToRole() : Boolean {
		return assert fatal (false) with log('Should never be reached.');
	}

	query muml_behavior::Variable :: variableContainedInPortBeforeHierarchyNormalization() : Boolean {	
		return assert fatal (false) with log ('Should never be reached');
	}
	
	query Clock :: clockContainedInPortBeforeHierarchyNormalization() : Boolean {
		return assert fatal (false) with log ('Should never be reached');
	}
	
	query Operation :: operationContainedInPortBeforeHierarchyNormalization() : Boolean {
		return assert fatal (false) with log('Should never be reached');
	}
	
	query SynchronizationChannel :: synchronizationChannelContainedInPortBeforeHierarchyNormalization() : Boolean {
		return assert fatal (false) with log ('Should never be reached');
	}	
	
	query State :: getLocationKind() : LocationKind {				
		return switch {
			case (self.isCommitted()) LocationKind::COMMITED;
			case (self.urgent) LocationKind::URGENT;
			else LocationKind::NORMAL;
		}
	}
	
	query State :: isCommitted() : Boolean {		
		return self.extension->exists(oclIsKindOf(CommittedExtension));
	}
	
	query muml_behavior::Variable :: getOwningStatechart() : RealtimeStatechart {
		
		return
			if (self.container().oclIsKindOf(RealtimeStatechart))
			then self.container().oclAsType(RealtimeStatechart)
			else null
			endif
		
	}
	
	query Operation :: getOwningStatechart() : RealtimeStatechart {
		
		assert fatal (self.container().oclIsKindOf(RealtimeStatechart)) with log('Operation must be contained by statechart.');
		
		return self.container().oclAsType(RealtimeStatechart)
	}
		
	query TransitionEvent :: getOwningStatechart() : RealtimeStatechart {
		
		assert fatal (self.container().oclIsKindOf(Transition)) with log('Transition event must be contained by statechart.');
		
		return self.container().oclAsType(Transition).statechart;
	}
	
	query RealtimeStatechart :: getComponentStatechart() : RealtimeStatechart {
		
		var highestParent : RealtimeStatechart = self.getHighestParentStatechart();
		
		return
			if (highestParent.behavioralElement != null and highestParent.behavioralElement.oclIsKindOf(Component))
			then highestParent
			else null
			endif
	}
	
	query RealtimeStatechart :: isComponentStatechart() : Boolean {
		
		return not self.getComponentStatechart().oclIsUndefined();
	}
		
	query muml_behavior::Variable :: isPortOrRoleVariable() : Boolean {
		
		var statechart : RealtimeStatechart = self.getOwningStatechart();
		var isPortOrRoleVariable : Boolean := statechart.belongsToRole();
		
		if (not isPortOrRoleVariable) {
			isPortOrRoleVariable := self.variableContainedInPortBeforeHierarchyNormalization();						
		};
		return isPortOrRoleVariable;
	}
	
	query SynchronizationChannel :: isPortOrRoleSyncChannel() : Boolean {
		
		var statechart : RealtimeStatechart = self.state.parentStatechart;
		var isPortOrRoleChannel : Boolean := statechart.belongsToRole();
		
		if (not isPortOrRoleChannel) {
			isPortOrRoleChannel := self.synchronizationChannelContainedInPortBeforeHierarchyNormalization();						
		};
		return isPortOrRoleChannel;
	}
	
	query Operation :: isPortOrRoleOperation() : Boolean {
		return self.operationContainedInPortBeforeHierarchyNormalization();						
	}
	
	query muml_behavior::Variable :: isComponentVariable() : Boolean {
		
		var statechart : RealtimeStatechart = self.getOwningStatechart();
		
		return (not statechart.oclIsUndefined()) and statechart.isComponentStatechart()
	}
	
	query Clock :: isPortOrRoleClock() : Boolean {
		
		var isPortOrRoleClock :=  self.statechart.belongsToRole();
		if (not isPortOrRoleClock) {
			isPortOrRoleClock := self.clockContainedInPortBeforeHierarchyNormalization();
		};
		return isPortOrRoleClock;
	}
	
	query Clock :: isComponentClock() : Boolean {
		
		return self.statechart.isComponentStatechart()		
	}