import transforms.lib.MUML2UPPAAL.Async.Binding;
import transforms.lib.MUML2UPPAAL.Async.Functions;
import transforms.lib.MUML2UPPAAL.Async.Variables;


library Events;

modeltype uppaal_declarations uses uppaal::declarations('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype uppaal_expressions uses uppaal::expressions('http://www.uni-paderborn.de/uppaal/0.4.0');
modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype protocol uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype component uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype muml_actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';
modeltype muml_instance uses muml::instance('http://www.muml.org/pim/1.0.0');

	query AsynchronousMessageEvent :: belongsToSubrole() : Boolean {
		return assert fatal (false) with log("Should be overridden")
	}


	mapping AsynchronousMessageEvent :: RaiseMessageEvent2ArrayInitializerExpressionDeclarations(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : List(Declaration) when {self.kind = EventKind::RAISE} {
		
		init {
			result += self.message.parameterBinding->map ParameterBinding2ArrayInitializerExpressionBindingVariableDecl(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);

			result += self.message.parameterBinding->map ParameterBinding2ArrayInitializeFunctionDeclaration(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);	
		}
			
	}
	
		
	mapping AsynchronousMessageEvent :: RaiseMessageEvent2InitializerFunctionCalls(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : List(FunctionCallExpression) when {self.kind = EventKind::RAISE} {
		
		init {
			
			self.message.parameterBinding->select(b | b.value.oclIsKindOf(actionlanguage::ArrayInitializeExpression))->forEach(b) {
				
				result += object FunctionCallExpression {
					
					function := b.map ParameterBinding2ArrayInitializeFunction(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
					
					argument += object IdentifierExpression {
						identifier := b.map ParameterBinding2ArrayInitializerExpressionBindingVariable(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
					};
					
					argument += object IdentifierExpression {
						
						assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID required.');
						
						if(self.belongsToSubrole())
						then {
							assert fatal (subPortOrRoleInstanceID != null) with log('Sub-Port/role instance ID required.');
							identifier := subPortOrRoleInstanceID
						} else {
							identifier := portOrRoleInstanceID
						} endif;
					}
					
				}
				
			}	
				
		}
				
	}
			
	mapping AsynchronousMessageEvent :: RaiseMessageEvent2SendFunctionCall(componentInstanceID : Variable, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable) : FunctionCallExpression when {self.kind = EventKind::RAISE} {
		
		function := self.message.instanceOf.map createSendFunction();
		
		argument += object IdentifierExpression {
			
			assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID required.');
		
			if(self.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Sub-Port/role instance ID required.');
				identifier := subPortOrRoleInstanceID
			} else {
				identifier := portOrRoleInstanceID
			} endif;
					
		};
		
		self.message.parameterBinding->forEach(pBinding) {
			
			if(pBinding.value.oclIsKindOf(actionlanguage::ArrayInitializeExpression)) {
				argument += object IdentifierExpression {
					identifier := pBinding.map ParameterBinding2ArrayInitializerExpressionBindingVariable(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
				}
			} else {
				argument += pBinding.value.map Expression2Expressions(componentInstanceID, portOrRoleInstanceID, subPortOrRoleInstanceID);
			}
			
		}
				
	}
	
	mapping AsynchronousMessageEvent :: TriggerMessageEvent2ConsumeFunctionCall(portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable, ports : OrderedSet(DiscretePortInstance)) : FunctionCallExpression when {self.kind = EventKind::TRIGGER} {
		
		function := map createConsumeFunction(ports);
		
		argument += object IdentifierExpression {
			
			assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID required.');
		
			if(self.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Sub-Port/role instance ID required.');
				identifier := subPortOrRoleInstanceID
			} else {
				identifier := portOrRoleInstanceID
			} endif;
			
		};
		
		argument += object IdentifierExpression {
			identifier := self.message.instanceOf.map createMessageKindConstant()
		}
		
	}
	
	mapping AsynchronousMessageEvent :: TriggerMessageEvent2StoreMessageExpression(statechart : RealtimeStatechart, portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable, portInstances : OrderedSet(DiscretePortInstance)) : AssignmentExpression when {self.kind = EventKind::TRIGGER} {

		init {
			var targetID : Variable = null;
			if(self.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Sub-Port/role instance ID required.');
				targetID := subPortOrRoleInstanceID
			} else {
				targetID := portOrRoleInstanceID
			} endif;
		}


		firstExpr := object IdentifierExpression {
					
			identifier := statechart.map createMsgVariable();
			
		};
		
		secondExpr := object ScopedIdentifierExpression {
				
			scope := object IdentifierExpression {
			
				identifier := map createBuffersVariable();
			
				index += object IdentifierExpression {
					identifier := targetID;
				};

				index += object IdentifierExpression {
					identifier := portInstances->map createBufferAssignmentArrayVariable();

					index += object IdentifierExpression {
						identifier := targetID
					};

					index += object IdentifierExpression {
						identifier := self.message.instanceOf.map createMessageKindConstant();
					};

				}
			
			};
			
			identifier := object IdentifierExpression {
				
				identifier := map createMessagesFieldVariable();
				
				index += object LiteralExpression {
					text := 0.repr();
				};
				
			};
			
		};
		
		operator := AssignmentOperator::EQUAL;

	}	
				
	mapping AsynchronousMessageEvent :: TriggerMessageEvent2ReceiveFunctionCall(portOrRoleInstanceID : Variable, subPortOrRoleInstanceID : Variable, portInstances : OrderedSet(DiscretePortInstance)) : FunctionCallExpression when {self.kind = EventKind::TRIGGER} {
		
		function := map createReceiveFunction(portInstances);
		
		argument += object IdentifierExpression {
			
			assert fatal (portOrRoleInstanceID != null) with log('Port/role instance ID required.');
		
			if(self.belongsToSubrole())
			then {
				assert fatal (subPortOrRoleInstanceID != null) with log('Sub-Port/role instance ID required.');
				identifier := subPortOrRoleInstanceID
			} else {
				identifier := portOrRoleInstanceID
			} endif;
			
		};
		argument += object IdentifierExpression {
			identifier := self.message.instanceOf.map createMessageKindConstant()
		}
		
	}