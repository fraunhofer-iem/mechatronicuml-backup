library Enums;

modeltype uppaal_expressions uses uppaal::expressions('http://www.muml.org/uppaal/1.0.0');
modeltype uppaal_templates uses uppaal::templates('http://www.muml.org/uppaal/1.0.0');
modeltype actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';
modeltype common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
	
	query ComparingOperator::mapOperator() : CompareOperator {
		
		return switch {
			case (self = ComparingOperator::LESS) CompareOperator::LESS;
			case (self = ComparingOperator::LESS_OR_EQUAL) CompareOperator::LESS_OR_EQUAL;
			case (self = ComparingOperator::EQUAL) CompareOperator::EQUAL;
			case (self = ComparingOperator::GREATER_OR_EQUAL) CompareOperator::GREATER_OR_EQUAL;
			case (self = ComparingOperator::GREATER) CompareOperator::GREATER;
			case (self = ComparingOperator::UNEQUAL) CompareOperator::UNEQUAL;
			else assert fatal (false) with log("Illegal enum value");
		}
		
	}
	
	query LogicOperator::mapOperator() : LogicalOperator {
		
		return switch {
			case (self = LogicOperator::AND) LogicalOperator::AND;
			case (self = LogicOperator::OR) LogicalOperator::OR;
			case (self = LogicOperator::IMPLY) LogicalOperator::IMPLY;
			else null; -- only return null since UPPAAL does not support all kinds of logical operators (e.g. xor)
		}
		
	}
	
	query common::ArithmeticOperator::mapOperator() : uppaal_expressions::ArithmeticOperator {
		
		return switch {
			case (self = common::ArithmeticOperator::PLUS) uppaal_expressions::ArithmeticOperator::ADD;
			case (self = common::ArithmeticOperator::MINUS) uppaal_expressions::ArithmeticOperator::SUBTRACT;
			case (self = common::ArithmeticOperator::TIMES) uppaal_expressions::ArithmeticOperator::MULTIPLICATE;
			case (self = common::ArithmeticOperator::DIVIDE) uppaal_expressions::ArithmeticOperator::DIVIDE;
			case (self = common::ArithmeticOperator::MODULO) uppaal_expressions::ArithmeticOperator::MODULO;
			else assert fatal (false) with log("Illegal enum value");
		}
		
	}
	
	query actionLanguage::AssignOperator::mapOperator() : uppaal_expressions::AssignmentOperator {
		
		return switch {
			case (self = actionLanguage::AssignOperator::ASSIGN) uppaal_expressions::AssignmentOperator::EQUAL;
			case (self = actionLanguage::AssignOperator::PLUS_EQUAL) uppaal_expressions::AssignmentOperator::PLUS_EQUAL;
			case (self = actionLanguage::AssignOperator::MINUS_EQUAL) uppaal_expressions::AssignmentOperator::MINUS_EQUAL;
			else assert fatal (false) with log("Illegal enum value");
		}
		
	}
	
	query actionLanguage::IncrementDecrementOperator::mapOperator() : uppaal_expressions::IncrementDecrementOperator {
		
		return switch {
			case (self = actionLanguage::IncrementDecrementOperator::INCREMENT) uppaal_expressions::IncrementDecrementOperator::INCREMENT;
			case (self = actionLanguage::IncrementDecrementOperator::DECREMENT) uppaal_expressions::IncrementDecrementOperator::DECREMENT;
		}
		
	}
	
	query rtsc::SynchronizationKind::mapSyncKind() : uppaal_templates::SynchronizationKind {
		
		return switch {
			case (self = rtsc::SynchronizationKind::SEND) uppaal_templates::SynchronizationKind::SEND;
			case (self = rtsc::SynchronizationKind::RECEIVE) uppaal_templates::SynchronizationKind::RECEIVE;
			else assert fatal (false) with log("Illegal enum value");
		}
		
	}