<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="muml" nsURI="http://www.fujaba.de/muml/0.2.2" nsPrefix="muml">
  <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
  <eSubpackages name="model" nsURI="http://www.fujaba.de/muml/model/0.2.2" nsPrefix="model">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The model package contains the core meta-model of MechatronicUML. The&#xD;&#xA;subpackages define the base classes for the component model, real-time &#xD;&#xA;statecharts, message interfaces and coordination pattern."/>
    </eAnnotations>
    <eSubpackages name="component" nsURI="http://www.fujaba.de/muml/model/component/0.3.14"
        nsPrefix="component">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package components contains all classes for modeling atomic and structured components.&#xD;&#xA;Components are defined on the type level and may be instantiated in a component instance configuration."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Component" abstract="true" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement #//model/constraint/ConstrainableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class is the super class of all classes representing a concrete component type such as a structured, atomic or a continuous component.&#xA;&#xA;Component types are implemented as a variation of the composite design pattern. Concerning the composite pattern this class represents the role &quot;component&quot;."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniquePortNames"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniquePortNames" value="self.ports->isUnique(name)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ports" upperBound="-1"
            eType="#//model/component/Port" containment="true" eOpposite="#//model/component/Port/component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports of a component represent the interaction points between the component and its environment."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referencingComponentParts"
            upperBound="-1" eType="#//model/component/ComponentPart" eOpposite="#//model/component/ComponentPart/componentType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This association contains all component parts which have this component as their type."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="componentType" eType="#//model/component/ComponentKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This attribute specifies the kind of the component. A component may be either&#xD;&#xA;discrete software component, a continuous component, a hybrid component &#xD;&#xA;or a hardware component."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Port" abstract="true" eSuperTypes="#//model/connector/ConnectorEndpoint #//model/constraint/ConstrainableElement #//model/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Ports represent the interaction points between a component and the components environment."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="component" eType="#//model/component/Component"
            eOpposite="#//model/component/Component/ports">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component, this port belongs to. Theoretically the bounds&#xA;should be 1..1, but that would prevent the possibility for&#xA;ComponentPart.portsDerived to be a containment reference&#xA;(see ComponentPart.portsDerived)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectors" upperBound="-1"
            eType="#//model/component/PortConnector" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectors->select(c | c.oclIsKindOf(PortConnector)).oclAsType(PortConnector)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContinuousPort" eSuperTypes="#//model/component/DirectedTypedPort">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a concrete port specification which provides the &#xD;&#xA;continuous functionality of a port. A continuous port emits a signal value.&#xD;&#xA;A signal value has a data type and it has concrete values at all points in time."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscretePort" eSuperTypes="#//model/component/Port #//model/connector/DiscreteInteractionEndpoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a concrete port specification which provides the discrete functionality of a port."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneMessageType DiscretePortAndRoleSameMessageTypes DiscretePortRequiresBehavior DiscretePortAtStructuredComponentHasNoBehavior DiscretePortRequiresRole MultiPortMustRefineMultiRole"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneMessageType" value="not self.senderMessageTypes->isEmpty() or not self.receiverMessageTypes->isEmpty()"/>
          <details key="DiscretePortRequiresBehavior" value="-- this also holds for a hybrid port, ports of structured components do not require a behavior&#xD;&#xA;(not self.component.oclIsUndefined() and self.component.oclIsTypeOf(component::AtomicComponent))&#xD;&#xA;&#x9;implies not self.behavior.oclIsUndefined()"/>
          <details key="DiscretePortAtStructuredComponentHasNoBehavior" value="(not self.component.oclIsUndefined() and self.component.oclIsTypeOf(component::StructuredComponent))&#xA;&#x9;implies self.behavior.oclIsUndefined()"/>
          <details key="DiscretePortRequiresRole" value="self.oclIsTypeOf(component::DiscretePort) implies not self.refines.oclIsUndefined()"/>
          <details key="DiscretePortAndRoleSameMessageTypes" value="not self.refines.oclIsUndefined() implies&#xA;&#x9;(self.senderMessageTypes = self.refines.senderMessageTypes&#xA;&#x9; and&#xA;&#x9; self.receiverMessageTypes = self.refines.receiverMessageTypes&#xA;&#x9;)"/>
          <details key="MultiPortMustRefineMultiRole" value="if not (self.refines.oclIsUndefined() and self.refines.cardinality.oclIsUndefined() and self.refines.cardinality.upperBound.oclIsUndefined()) then&#xD;&#xA;       self.multiPort implies self.refines.multiRole&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="refines" eType="#//model/protocol/Role"
            eOpposite="#//model/protocol/Role/port">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role of a coordination pattern that this port refines."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteInPort" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an IN port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() >= 1 and self.senderMessageTypes ->size() = 0"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteOutPort"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() = 0 and self.senderMessageTypes ->size() >= 1"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteInOutPort"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an IN OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() >= 1 and self.senderMessageTypes ->size() >= 1"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageBuffer"
            upperBound="-1" eType="#//model/protocol/MessageBuffer" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.refines.receiverMessageBuffer"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The derived properties of the refined role regarding the receiver message buffers."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiPort" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral=""
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is a multi port."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if not (self.cardinality.oclIsUndefined()) then&#xD;&#xA;&#x9;(self.cardinality.upperBound.value > 1) or self.cardinality.upperBound.infinity&#xD;&#xA;else&#xD;&#xA;&#x9;false&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentPart" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement #//model/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="CardinalityLowerBoundSet TypeNotEqualToParent CardinalityUpperBoundSet"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a component part. Component parts are used to specify&#xD;&#xA;the inner structure of a structured component. A component part represents&#xD;&#xA;another component that is embedded in a  structured &#xD;&#xA;component. It is specified on the model level and is &#xD;&#xA;always typed over a component (either structured or atomic)."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="CardinalityLowerBoundSet" value="self.cardinality.lowerBound->notEmpty()"/>
          <details key="TypeNotEqualToParent" value="self.componentType &lt;> self.parentComponent"/>
          <details key="CardinalityUpperBoundSet" value="self.cardinality.upperBound->notEmpty()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentType" lowerBound="1"
            eType="#//model/component/Component" eOpposite="#//model/component/Component/referencingComponentParts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component type typing this component part."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentComponent" lowerBound="1"
            eType="#//model/component/StructuredComponent" eOpposite="#//model/component/StructuredComponent/embeddedParts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The structured component type containing this component part."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="assemblyConnectors"
            upperBound="-1" eType="#//model/component/AssemblyConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The assemblies originating in port parts of this component part."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.ports.portConnectors->select(c | c.oclIsKindOf(AssemblyConnector)).oclAsType(AssemblyConnector)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="delegationConnectors"
            upperBound="-1" eType="#//model/component/DelegationConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The delegations connecting a port part of this component part with a port of the parent component type."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.ports.portConnectors->select(c | c.oclIsKindOf(DelegationConnector)).oclAsType(DelegationConnector)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1"
            eType="#//model/valuetype/Range" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The cardinality of a ComponentPart specifies how many instances of a ComponentPart are allowed to exist at runtime."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ports" upperBound="-1"
            eType="#//model/component/Port" changeable="false" volatile="true" transient="true"
            unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if componentType.oclIsUndefined() then&#xD;&#xA;&#x9;OrderedSet { }&#xD;&#xA;else&#xD;&#xA;&#x9;componentType.ports&#xD;&#xA;endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports of this part. They are derived from the ports of the&#xD;&#xA;componentType of this component part. It is a containment&#xD;&#xA;reference, so that GMF is able to let them flow around the&#xD;&#xA;component.&#xD;&#xA;Because this feature is derived, transient, volatile the model file&#xD;&#xA;will not store the ports in this feature."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiPart" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral=""
            unsettable="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the part is a multi part.&#xD;&#xA;It is only used to simplify OCL constraints."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.cardinality.upperBound.value > 1 or self.cardinality.upperBound.infinity"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StaticStructuredComponent" eSuperTypes="#//model/component/StructuredComponent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A static structured component is a structured component whose internal structure consisting of component part, ports, delegation, and assemblies cannot be changed during run-time."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AtomicComponent" eSuperTypes="#//model/component/Component #//model/behavior/BehavioralElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an atomic component. Atomic components must not be further sub-divided into component parts. In contrast to structured components atomic components own a behavior in form of a realtime statechart.&#xD;&#xA;&#xD;&#xA;The different component types are implemented as a variation of the composite design pattern. Concerning the composite pattern this class represents the role &quot;leaf&quot;."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SoftwareComponentRequiresBehavior" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT implies (not self.behavior.oclIsUndefined())"/>
          <details key="ValidComponentType" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT&#xA;or self.componentType = component::ComponentKind::CONTINUOUS_COMPONENT"/>
          <details key="SoftwareComponentValidPorts" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsTypeOf(component::DiscretePort) or p.oclIsTypeOf(component::HybridPort))&#xA;&#x9;)"/>
          <details key="ContinuousComponentValidPorts" value="self.componentType = component::ComponentKind::CONTINUOUS_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsTypeOf(component::ContinuousPort))&#xA;&#x9;)"/>
          <details key="AtomicComponentsNamesMustBeUnique" value="AtomicComponent.allInstances().name->count(self.name) = 1"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="SoftwareComponentRequiresBehavior ValidComponentType SoftwareComponentValidPorts ContinuousComponentValidPorts AtomicComponentsNamesMustBeUnique"/>
        </eAnnotations>
        <eOperations name="toString" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return &quot;Atomic_Component_&quot; + getName();"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortConnector" abstract="true" eSuperTypes="#//model/connector/Connector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class is the common super class of delegations and assemblies between two ports."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentComponent" eType="#//model/component/StructuredComponent"
            eOpposite="#//model/component/StructuredComponent/connectors">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The structured component this connector belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ports" upperBound="-1"
            eType="#//model/component/Port" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(c | c.oclIsKindOf(Port)).oclAsType(Port)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssemblyConnector" eSuperTypes="#//model/component/PortConnector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an assembly connector. Assembly connectors connect the port parts of two component parts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value=""/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="NoSelfAssembliesForSinglePortsOfSingleParts" value="(self.fromPort.cardinality.upperBound.value &lt;= 1 and self.from.cardinality.upperBound.value &lt;= 1)&#xD;&#xA;implies&#xD;&#xA;self.fromPort &lt;> self.toPort"/>
          <details key="ValidContinuousPortDirections" value="not self.fromContinuousPort.oclIsUndefined() and not self.toContinuousPort.oclIsUndefined()&#xA;&#x9;implies&#xA;&#x9;self.fromContinuousPort.kind &lt;> self.toContinuousPort.kind"/>
          <details key="AssemblyBetweenDiscretePortsRequiresCoordinationPattern" value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;-- assembly between two discrete ports requires a coordination pattern&#xA;&#x9;not self.coordinationPattern.oclIsUndefined()&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="AssemblyBetweenDiscretePortsRequiresSameCoordinationPattern"
              value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;not self.fromDiscretePort.refines.oclIsUndefined() and not self.toDiscretePort.refines.oclIsUndefined()&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;-- both refinements must belong to the same pattern&#xA;&#x9;&#x9;self.fromDiscretePort.refines.coordinationPattern = self.toDiscretePort.refines.coordinationPattern&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="AssemblyBetweenDiscretePortsRequiresDifferentRoles" value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;not self.fromDiscretePort.refines.oclIsUndefined() and not self.toDiscretePort.refines.oclIsUndefined()&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;-- both ports should have different roles (unless the pattern has only one role)&#xA;&#x9;&#x9;(self.fromDiscretePort.refines.coordinationPattern.roles->size() = 2 implies (self.fromDiscretePort.refines.name &lt;> self.toDiscretePort.refines.name))&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="AssemblyBetweenDiscretePortsSameMessageInterfaces" value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;-- message interfaces must be compatible&#xA;&#x9;self.fromDiscretePort.senderMessageInterface = self.toDiscretePort.receiverMessageInterface&#xA;&#x9;and&#xA;&#x9;self.fromDiscretePort.receiverMessageInterface = self.toDiscretePort.senderMessageInterface&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="ValidDiscreteInPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteInPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteOutPort&#xA;&#x9;)"/>
          <details key="ValidDiscreteOutPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteInPort&#xA;&#x9;)"/>
          <details key="ValidDiscreteInOutPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteInOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteInOutPort&#xA;&#x9;)"/>
          <details key="ValidContinuousInPortCombination" value="not self.fromContinuousPort.oclIsUndefined() and self.fromContinuousPort.isContinuousInPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousOutPort&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;not self.toHybridPort.oclIsUndefined() and self.toHybridPort.isHybridOutPort&#xA;&#x9;)"/>
          <details key="ValidContinuousOutPortCombination" value="not self.fromContinuousPort.oclIsUndefined() and self.fromContinuousPort.isContinuousOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousInPort&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;not self.toHybridPort.oclIsUndefined() and self.toHybridPort.isHybridInPort&#xA;&#x9;)"/>
          <details key="ValidHybridInPortCombination" value="not self.fromHybridPort.oclIsUndefined() and self.fromHybridPort.isHybridInPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousOutPort&#xA;&#x9;)"/>
          <details key="ValidHybridOutPortCombination" value="not self.fromHybridPort.oclIsUndefined() and self.fromHybridPort.isHybridOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousInPort&#xA;&#x9;)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol"
            eType="#//model/protocol/CoordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination pattern that defines the protocol of this assembly.&#xD;&#xA;&#xD;&#xA;\todosd{Why does it reference the CoordinationPattern and not the PatternOccurence?}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentParts" lowerBound="2"
            upperBound="2" eType="#//model/component/ComponentPart" changeable="false"
            volatile="true" transient="true" derived="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DelegationConnector" eSuperTypes="#//model/component/PortConnector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a delegation connector. A delegation connector &#xD;&#xA;connects a port of a structured component type and a port part of &#xD;&#xA;component part the structured component contains.&#xD;&#xA;The delegation has no behavior. In a running system, the port of the structured&#xD;&#xA;component and the port of the component part will be the same object like &#xD;&#xA;interfaces of classes where interface and class are the same object at runtime."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value=""/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValidContinuousPortDirections" value="not self.fromContinuousPort.oclIsUndefined() and not self.toContinuousPort.oclIsUndefined()&#xA;&#x9;implies&#xA;&#x9;self.fromContinuousPort.kind = self.toContinuousPort.kind"/>
          <details key="DelegationBetweenContinuousPortsRequiresSameDataType" value="not self.fromContinuousPort.oclIsUndefined() and not self.toContinuousPort.oclIsUndefined()&#xA;&#x9;implies&#xA;&#x9;self.fromContinuousPort.type = self.toContinuousPort.type"/>
          <details key="DelegationBetweenDiscretePortsRequiresSameCoordinationPattern"
              value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;not self.fromDiscretePort.refines.oclIsUndefined() and not self.toDiscretePort.refines.oclIsUndefined()&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;-- both refinements must belong to the same pattern&#xA;&#x9;&#x9;self.fromDiscretePort.refines.coordinationPattern = self.toDiscretePort.refines.coordinationPattern&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="DelegationBetweenDiscretePortsRequiresSameRoles" value="if not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined() then&#xA;&#x9;not self.fromDiscretePort.refines.oclIsUndefined() and not self.toDiscretePort.refines.oclIsUndefined()&#xA;&#x9;&#x9;and&#xA;&#x9;&#x9;-- both ports should have the same roles&#xA;&#x9;&#x9;self.fromDiscretePort.refines.name = self.toDiscretePort.refines.name&#xA;else&#xA;&#x9;true&#xA;endif"/>
          <details key="DiscreteMultiPortDelegationRequiresMultiPortOrSinglePortAndMultiPart"
              value="not self.fromDiscretePort.oclIsUndefined() and not self.toDiscretePort.oclIsUndefined()&#xA;and self.fromPort.isMultiPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;-- the target port is a multi port&#xA;&#x9;&#x9;self.toPort.isMultiPort&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;-- the target part is a multi part&#xA;&#x9;&#x9;self.componentPart.isMultiPart&#xA;&#x9;)"/>
          <details key="ValidDiscreteInPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteInPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteInPort&#xA;&#x9;)"/>
          <details key="ValidDiscreteOutPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteOutPort&#xA;&#x9;)"/>
          <details key="ValidDiscreteInOutPortCombination" value="not self.fromDiscretePort.oclIsUndefined() and self.fromDiscretePort.isDiscreteInOutPort&#xA;&#x9;implies (&#xA;&#x9;&#x9;not self.toDiscretePort.oclIsUndefined() and self.toDiscretePort.isDiscreteInOutPort&#xA;&#x9;)"/>
          <details key="ValidContinuousInPortCombination" value="not self.fromContinuousPort.oclIsUndefined() and self.fromContinuousPort.isContinuousInPort&#xD;&#xA;&#x9;implies (&#xD;&#xA;&#x9;&#x9;(not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousInPort)&#xD;&#xA;&#x9;&#x9;or&#xD;&#xA;&#x9;&#x9;(not self.toHybridPort.oclIsUndefined() and self.toHybridPort.isHybridInPort)&#xD;&#xA;&#x9;)"/>
          <details key="ValidContinuousOutPortCombination" value="-- not self.fromContinuousPort.oclIsUndefined() and self.fromContinuousPort.isContinuousOutPort implies (not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousOutPort) &#xD;&#xA;&#xD;&#xA;not self.fromContinuousPort.oclIsUndefined() and self.fromContinuousPort.isContinuousOutPort&#xD;&#xA;&#x9;implies (&#xD;&#xA;&#x9;&#x9;(not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousOutPort)&#xD;&#xA;&#x9;&#x9;or&#xD;&#xA;&#x9;&#x9;(not self.toHybridPort.oclIsUndefined() and self.toHybridPort.isHybridOutPort)&#xD;&#xA;&#x9;)"/>
          <details key="ValidHybridInPortCombination" value="not self.fromHybridPort.oclIsUndefined() and self.fromHybridPort.isHybridInPort&#xD;&#xA;&#x9;implies (&#xD;&#xA;&#x9;&#x9;not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousInPort&#xD;&#xA;&#x9;)"/>
          <details key="ValidHybridOutPortCombination" value="not self.fromHybridPort.oclIsUndefined() &#xD;&#xA;and &#xD;&#xA;self.fromHybridPort.isHybridOutPort &#xD;&#xA;implies (not self.toContinuousPort.oclIsUndefined() and self.toContinuousPort.isContinuousOutPort) "/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentPart" lowerBound="1"
            eType="#//model/component/ComponentPart" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component part of the port part which is connected by this delegation."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ComponentKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The entries of the enumeration represent different kinds of components. These&#xD;&#xA;are discrete software components, continous components containing controller&#xD;&#xA;code, and hybrid components that is a discrete software component which may have &#xD;&#xA;continuous input signals."/>
        </eAnnotations>
        <eLiterals name="SOFTWARE_COMPONENT" literal="software component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A component of this kind represent discrete software components. A discrete software component has a behavior specification which is given by means of a real-time statechart."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="CONTINUOUS_COMPONENT" value="1" literal="continuous component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A continuous component represents a continuous controller. Such components do not carry a behavior specification in MechatronicUML. Instead, we assume that the behavior of such components is modeled by using a control engineering tool like Matlab/Simulink, Dymola/Modelica or CamelView. In MechatronicUML, only the interface of these components is modeled. The interface is given by their ports."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="HYBRID_COMPONENT" value="2" literal="hybrid component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A hybrid component bridges the gap between discrete software components and continuous control components. A hybrid component may be considered as a discrete software component which has special ports for reading and writing continuous signals from and to continuous components, e.g., for setting a new reference value to a controller."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HybridPort" eSuperTypes="#//model/component/DirectedTypedPort">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a hybrid port which acts as a bridge between continuous&#xD;&#xA;controllers and discrete software. A hybrid port emits or receives a signal value &#xD;&#xA;which has a data type and a concrete value at all points in time. Then, the&#xD;&#xA;hybrid port discretizes the signal value in given time intervals and provides the&#xD;&#xA;value as variable to its Real-Time Statechart. The hybrid port does not define message&#xD;&#xA;interfaces."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="samplingInterval" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sampling interval defines the time between two updates of the continuous signal which is received or send by this hybrid port. If the port is an IN-port, the sampling interval defines how often the continuous signal is read and stored internally. If the hybrid port in an OUT-port, the sampling interval defines how often a new value is send via this port. "/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ContinuousPortDirectionKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Decides the direction of a continous port."/>
        </eAnnotations>
        <eLiterals name="IN">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represent an IN-Port of a continous port."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="OUT" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represent an OUT-Port of a continous port."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocolOccurrence"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A coordination protocol (pattern) can occur within a structured component. It defines the communication behavior of an assembly connection that connects discrete ports with each other."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol"
            lowerBound="1" eType="#//model/protocol/CoordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination protocol (pattern) of this PatternOccurence."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ports" lowerBound="1"
            upperBound="-1" eType="#//model/component/Port">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports that take part in this protocol.&#xD;&#xA;&#xD;&#xA;\todosd{I suggest to change this reference so that it references a DiscretePort.}"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredComponent" abstract="true"
          eSuperTypes="#//model/component/Component">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a structured component which is capable of including arbitraryly many component parts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="StructuredComponentNoHybridPort ValidComponentType NoCyclicComponentPartHierarchy DiscreteStructuredComponentValidParts HybridStructuredComponentValidParts DiscreteStructuredComponentValidPorts HybridStructuredComponentValidPorts ComponentPartsHaveUniqueName"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="StructuredComponentNoHybridPort" value="self.ports->forAll(port | not port.oclIsTypeOf(component::HybridPort))"/>
          <details key="ValidComponentType" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT&#xA;or self.componentType = component::ComponentKind::HYBRID_COMPONENT"/>
          <details key="NoCyclicComponentPartHierarchy" value="not self.allStructuredComponents->includes(self)"/>
          <details key="DiscreteStructuredComponentValidParts" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT&#xA;implies&#xA;&#x9;-- collect all atomic components from parent parts and union them&#xA;&#x9;-- with own atomic components&#xA;&#x9;self.allAtomicComponents->union(&#xA;&#x9;&#x9;self.embeddedParts->select(&#xA;&#x9;&#x9;&#x9;componentType.oclIsTypeOf(component::AtomicComponent)&#xA;&#x9;&#x9;)->collect(componentType.oclAsType(component::AtomicComponent))->asOrderedSet()&#xA;&#x9;)->forAll(componentType = component::ComponentKind::SOFTWARE_COMPONENT)"/>
          <details key="HybridStructuredComponentValidParts" value="self.componentType = component::ComponentKind::HYBRID_COMPONENT&#xA;implies&#xA;&#x9;-- collect all atomic components from parent parts and union them&#xA;&#x9;-- with own atomic components&#xA;&#x9;self.allAtomicComponents->union(&#xA;&#x9;&#x9;self.embeddedParts->select(&#xA;&#x9;&#x9;&#x9;componentType.oclIsTypeOf(component::AtomicComponent)&#xA;&#x9;&#x9;)->collect(componentType.oclAsType(component::AtomicComponent))->asOrderedSet()&#xA;&#x9;)->exists(componentType = component::ComponentKind::CONTINUOUS_COMPONENT)"/>
          <details key="DiscreteStructuredComponentValidPorts" value="self.componentType = component::ComponentKind::SOFTWARE_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsTypeOf(component::DiscretePort))&#xA;&#x9;)"/>
          <details key="HybridStructuredComponentValidPorts" value="self.componentType = component::ComponentKind::HYBRID_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsTypeOf(component::DiscretePort) or p.oclIsTypeOf(component::ContinuousPort))&#xA;&#x9;)"/>
          <details key="ComponentPartsHaveUniqueName" value="self.embeddedParts -> isUnique(name)"/>
        </eAnnotations>
        <eOperations name="toString" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return &quot;Structured_Component_&quot; + getName();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedParts" lowerBound="1"
            upperBound="-1" eType="#//model/component/ComponentPart" containment="true"
            eOpposite="#//model/component/ComponentPart/parentComponent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component parts this structured component contains."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectors" upperBound="-1"
            eType="#//model/component/PortConnector" containment="true" eOpposite="#//model/component/PortConnector/parentComponent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connectors this structured component contains. These can either be delegations or assemblies."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allStructuredComponents"
            upperBound="-1" eType="#//model/component/StructuredComponent" changeable="false"
            volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self->closure(&#xA;&#x9;embeddedParts->select(&#xA;&#x9;&#x9;componentType.oclIsTypeOf(StructuredComponent)&#xA;&#x9;).componentType.oclAsType(StructuredComponent)&#xA;)"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Transitive closure of all StructuredComponents which are used (specified&#xA;as a componentType for a ComponentPart) in the component hierarchy."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAtomicComponents"
            upperBound="-1" eType="#//model/component/AtomicComponent" changeable="false"
            volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.allStructuredComponents->collect(&#xA;&#x9;embeddedParts->select(&#xA;&#x9;&#x9;componentType.oclIsTypeOf(component::AtomicComponent)&#xA;&#x9;)->collect(componentType.oclAsType(component::AtomicComponent))&#xA;)->asOrderedSet()"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Transitive closure of all AtomicComponents which are used (specified&#xA;as a componentType for a ComponentPart) in the component hierarchy.&#xA;Note: AtomicComponents from directly embeddedParts are NOT included"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DirectedTypedPort" abstract="true"
          eSuperTypes="#//model/component/Port #//model/behavior/TypedNamedElement">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1"
            eType="#//model/component/ContinuousPortDirectionKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides the direction of a continous port."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="optional" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            defaultValueLiteral="false"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="outPort" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is an OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.kind = component::ContinuousPortDirectionKind::OUT"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="inPort" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is an IN port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.kind = component::ContinuousPortDirectionKind::IN"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="constraint" nsURI="http://www.fujaba.de/muml/model/constraint/0.3.13"
        nsPrefix="constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package constraint provides abstract super classes for modeling different&#xD;&#xA;kinds of constraints that may be attached to ConstrainableElements of the&#xD;&#xA;MechatronicUML meta-model. "/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Constraint" abstract="true" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a constraint. A constraint defines certain properties a system has to fullfill. In terms of model checking a constraint represents the specification of the system."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="correctness" eType="#//model/constraint/Correctness"
            defaultValueLiteral="Correctness.UNKNOWN">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The correctness of this constraint encoded as a literal of the enum type &quot;Correctness&quot;."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="background" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This attribute decides whether background checking is activated for this constraint. If it is activated the correctness of the constraint is checked whenever the model changes. These checks are performed in the background such that user interaction is not interrupted."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="constrainableElement"
            lowerBound="1" eType="#//model/constraint/ConstrainableElement" eOpposite="#//model/constraint/ConstrainableElement/constraint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The element this constraint applies to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="correct" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute is &quot;true&quot; if and only if this.correctness == Correctness.CORRECT holds."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.correctness = constraint::Correctness::CORRECT"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="Correctness">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This enumeration encodes the correctness result of a constraint. The correctness&#xD;&#xA;is UNKNOWN if the constraint has not yet been verified or if the verification failed&#xD;&#xA;for some reason. The constraint is CORRECT, if the verification returned true.&#xD;&#xA;Otherwise the constraint is VIOLATED."/>
        </eAnnotations>
        <eLiterals name="UNKNOWN" literal="unknown"/>
        <eLiterals name="CORRECT" value="1" literal="correct"/>
        <eLiterals name="VIOLATED" value="2" literal="violated"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ModelingConstraint" abstract="true"
          eSuperTypes="#//model/constraint/Constraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A modeling constraint is a static semantics constraint that restricts the model.&#xD;&#xA;It can be checked statically and will not be used for verification."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VerifiableConstraint" abstract="true"
          eSuperTypes="#//model/constraint/Constraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A verifiable constraint is a dynamic semantics constraint that will be used for&#xD;&#xA;verification of the model. This class serves as a super class for all types of &#xD;&#xA;verifiable constraints."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TextualConstraint" eSuperTypes="#//model/constraint/VerifiableConstraint ../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents all verifable constraints that can be entered as a string in a predefined&#xD;&#xA;constraint language like, e.g., CTL or TCTL. Therefore, it contains a textual expression&#xD;&#xA;which is used to store the constraint text and the language."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="textualExpression"
            eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/TextualExpression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A textual expression which stores the constraint text and the language in which &#xD;&#xA;the constraint is specified."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConstrainableElement" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all model elements that may carry a constraint."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="constraint" upperBound="-1"
            eType="#//model/constraint/Constraint" containment="true" eOpposite="#//model/constraint/Constraint/constrainableElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The constraint for this element."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="instance" nsURI="http://www.fujaba.de/muml/model/instance/0.3.15"
        nsPrefix="instance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package instance contains all classes for building configurations of component instances.&#xD;&#xA;&#xD;&#xA;Component instances are built from component types and connected by connectors. The resulting structure is a component instance configuration."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentInstance" abstract="true"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a component instance. It is an instantiation of a component."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentType" lowerBound="1"
            eType="#//model/component/Component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component type of which this instance is derived."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" upperBound="-1"
            eType="#//model/instance/PortInstance" containment="true" eOpposite="#//model/instance/PortInstance/componentInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances that belong to this component instance. \todosd{Why are also DiscreteSinglePortInstances of DiscreteMultiPortInstances contained here and not in the DiscreteMultiPortInstance?}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentPart" eType="#//model/component/ComponentPart"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortConnectorInstance" abstract="true"
          eSuperTypes="#//model/connector/ConnectorInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class is the common super class of delegation instances and assemly instances."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorType"
            lowerBound="1" eType="#//model/component/PortConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector type of this connector instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.type.oclAsType(component::PortConnector)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" upperBound="-1"
            eType="#//model/instance/PortInstance" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpointInstances->select(c | c.oclIsTypeOf(PortInstance)).oclAsType(PortInstance)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortInstance" abstract="true" eSuperTypes="#//model/connector/ConnectorEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A port instance is a port of a component at instance level."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portType" lowerBound="1"
            eType="#//model/component/Port" changeable="false" volatile="true" transient="true"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port type of which this port instance is built from."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.type.oclAsType(component::Port)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstance"
            eType="#//model/instance/ComponentInstance" eOpposite="#//model/instance/ComponentInstance/portInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component instance this port instance belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorInstances"
            upperBound="-1" eType="#//model/instance/PortConnectorInstance" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorInstances->select(i | i.oclIsKindOf(PortConnectorInstance)).oclAsType(PortConnectorInstance)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssemblyConnectorInstance" eSuperTypes="#//model/instance/PortConnectorInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an assembly connector at instance level.&#xD;&#xA;&#xD;&#xA;\todosd{Why does the AssemblyInstance has a lower and upper bound for the propagation delay and the Assembly not?}"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="assemblyConnectorType"
            lowerBound="1" eType="#//model/component/AssemblyConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The assembly that this assembly instance is built from."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.type.oclAsType(component::AssemblyConnector)"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DelegationConnectorInstance" eSuperTypes="#//model/instance/PortConnectorInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a delegation connector at instance level."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value=""/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="OneDelegationInstancePerPortInstance" value="not self.source.oclIsUndefined() implies self.source.outgoingConnectorInstances->select(x | x.oclIsKindOf(DelegationInstance))->size() = 1"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="delegationConnectorType"
            lowerBound="1" eType="#//model/component/DelegationConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The delegation type of this delegation instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.type.oclAsType(component::DelegationConnector)"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentInstanceConfiguration"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class encapsules represents a configuration. It contains all component instances and connector instances that belong to a concrete configuration."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstances"
            upperBound="-1" eType="#//model/instance/ComponentInstance" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of component instances of a component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorInstances"
            upperBound="-1" eType="#//model/instance/PortConnectorInstance" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of connector instances of a component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentPortInstances"
            upperBound="-1" eType="#//model/instance/PortInstance" changeable="false"
            volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if (self.eContainer().oclIsKindOf(ComponentInstance)) then&#xA;&#x9;self.eContainer().oclAsType(ComponentInstance).portInstances&#xA;else&#xA;&#x9;OrderedSet {}&#xA;endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances of the containing component instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContinuousPortInstance" eSuperTypes="#//model/instance/PortInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a continuous port at instance level. The port type of a&#xD;&#xA;continuous port instance must be a continuous port."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HybridPortInstance" eSuperTypes="#//model/instance/DiscretePortInstance #//model/instance/ContinuousPortInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a hybrid port at instance level. The port type of a hybrid &#xD;&#xA;port instance must be a hybrid port."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscretePortInstance" abstract="true"
          eSuperTypes="#//model/instance/PortInstance #//model/connector/DiscreteInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a discrete port at instance level. At instance level, we &#xD;&#xA;distinguish between single-port instances and multi-port instances by using&#xD;&#xA;two subclasses of this abstract class."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if portType.oclIsUndefined() or not portType.oclIsKindOf(component::DiscretePort) then&#xD;&#xA;&#x9;OrderedSet { }&#xD;&#xA;else&#xD;&#xA;&#x9;portType.oclAsType(component::DiscretePort).receiverMessageTypes&#xD;&#xA;endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The receiver message interface defines which messages this port instance receives&#xD;&#xA;It is derived from the receiver message interface of its port.&#xD;&#xA;\todosd{ocl: implement derived}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if portType.oclIsUndefined() or not portType.oclIsKindOf(component::DiscretePort) then&#xD;&#xA;&#x9;OrderedSet { }&#xD;&#xA;else&#xD;&#xA;&#x9;portType.oclAsType(component::DiscretePort).senderMessageTypes&#xD;&#xA;endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sender message interface defines which messages this port instance sends.&#xD;&#xA;It is derived from the sender message interface of its port.&#xD;&#xA;\todosd{ocl: implement derived}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageBuffer"
            upperBound="-1" eType="#//model/protocol/MessageBuffer" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.refines.receiverMessageBuffer"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The derived properties of the refined role regarding the receiver message buffers."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="refines" eType="#//model/protocol/Role"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.portType.oclAsType(component::DiscretePort).refines"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role of a coordination pattern that the port type of this port instance refines."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteSinglePortInstance" eSuperTypes="#//model/instance/DiscretePortInstance #//model/connector/DiscreteSingleInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a discrete single port at instance level as well as a sub-port instance&#xD;&#xA;of a multi-port instance. Each single port instance references its behavior instance.&#xD;&#xA;When used as a sub-port instance, the instance references its role behavior instance. "/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteMultiPortInstance" eSuperTypes="#//model/instance/DiscretePortInstance #//model/connector/DiscreteMultiInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a multi-port at instance level. For each multi-port of a&#xD;&#xA;component, there exists exactly one multi-port instance in the respective component &#xD;&#xA;instance at all times. That instance references an instance of the statechart of the&#xD;&#xA;multi-port as well as an instance of the adaptation behavior. The DiscreteMultiPortInstance&#xD;&#xA;also references all sub-port instances of the multi-port instance. The DiscreteMultiPortInstance&#xD;&#xA;has no visual representation in the concrete syntax. It is represented by its sub-roles."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfSubPortInstances"
            upperBound="-1" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"
            derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference just derives the values of &quot;subPortInstances&quot; and specifies a containment. This containment reference is needed by the GMF tooling."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.subInteractionEndpointInstances"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocolInstance" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An instance of a pattern occurence. It specifies the behavior of discrete (single/multi) port instances that are connected with each other."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" lowerBound="1"
            upperBound="-1" eType="#//model/instance/PortInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instance that uses this pattern instance.&#xD;&#xA;&#xD;&#xA;\todosd{I suggest to change this reference so that it references a DiscretePortInstance.}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolOccurrence"
            lowerBound="1" eType="#//model/component/CoordinationProtocolOccurrence">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The PatternOccurence of that instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredComponentInstance" eSuperTypes="#//model/instance/ComponentInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A structured component instance is a component instance that has been derived from a structured component type. A structured component instance specifies an embedded component instance configuration defining its inner structure. "/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedCIC" lowerBound="1"
            eType="#//model/instance/ComponentInstanceConfiguration" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component instances and connector instances that are embedded in this component instance&#xD;&#xA;are contained by the component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AtomicComponentInstance" eSuperTypes="#//model/instance/ComponentInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An atomic component instance is a component instance which has been derived from an atomic component. An atomic component instance has no embedded component instance configuration and executes the behavior specification which has been defined by its type."/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="protocol" nsURI="http://www.fujaba.de/muml/model/protocol/0.3.7"
        nsPrefix="protocol">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="RoleConnector" eSuperTypes="#//model/connector/Connector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a communication channel connecting two roles of a coordination pattern."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="OnlyRolesOfSameCoordinationProtocol"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="OnlyRolesOfSameCoordinationProtocol" value="self.roles->size() = 2 implies self.roles->isUnique(coordinationProtocol)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol"
            lowerBound="1" eType="#//model/protocol/CoordinationProtocol" eOpposite="#//model/protocol/CoordinationProtocol/roleConnector">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination pattern this role connector is part of."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorQualityOfServiceAssumptions"
            lowerBound="1" eType="#//model/protocol/ConnectorQualityOfServiceAssumptions"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A role connector has exactly one reference for defining its quality of service assumptions like message delay and message loss."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roles" lowerBound="2"
            upperBound="2" eType="#//model/protocol/Role" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(e | e.oclIsKindOf(Role)).oclAsType(Role)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocol" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement #//model/constraint/ConstrainableElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A coordination protocol specifies the coordination between a certain number of communication members. The communication members are represented by roles. To specify which roles communicate whith each other they are connected by channels. The communication protocol used by the roles is specified by realtime statecharts. Each role has its own realtime statechart describing the roles communication behavior. Furthermore channels own a realtime statechart which enables specifying properties of certain real communication channels e.g. propagation delay or buffering of messages. Furthermore constraints can be assigned to coordination patterns. Constraints specify certain properties the coordination specified by the pattern has to fullfill."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueRoleNames CoordinationProtocolNamesMustBeUnique"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueRoleNames" value="self.roles->isUnique(name)"/>
          <details key="CoordinationProtocolNamesMustBeUnique" value="CoordinationProtocol.allInstances()->isUnique(name)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roles" lowerBound="1"
            upperBound="2" eType="#//model/protocol/Role" containment="true" eOpposite="#//model/protocol/Role/coordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The roles belonging to this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roleConnector" lowerBound="1"
            eType="#//model/protocol/RoleConnector" containment="true" eOpposite="#//model/protocol/RoleConnector/coordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each coordination pattern has exactly one role connector.&#xD;&#xA;Cardinality is 1 because there exists no useful pattern wir more than two roles. If a useful pattern exists with more than 2 roles, than change cardinality to 1..*"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol"
            eType="#//model/protocol/CoordinationProtocol" volatile="true" transient="true"
            derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference only exists because GMF needs it to visualize the inner ellipse of a Real-Time Coordination Pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Role" eSuperTypes="#//model/connector/DiscreteInteractionEndpoint #//model/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a role of a coordination pattern."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="RoleRequiresBehavior RoleRequiresMessageTypes"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="RoleRequiresBehavior" value="not self.behavior.oclIsUndefined()"/>
          <details key="RoleRequiresMessageTypes" value="not (self.senderMessageTypes->isEmpty() and self.receiverMessageTypes->isEmpty())"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol"
            lowerBound="1" eType="#//model/protocol/CoordinationProtocol" eOpposite="#//model/protocol/CoordinationProtocol/roles">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination pattern this role belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="port" upperBound="-1"
            eType="#//model/component/DiscretePort" eOpposite="#//model/component/DiscretePort/refines">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports this role is assigned to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roleConnector" lowerBound="1"
            eType="#//model/protocol/RoleConnector" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.connectors->isEmpty() then&#xA;&#x9;null&#xA;else&#xA;&#x9;self.connectors->any(c | c.oclIsKindOf(RoleConnector)).oclAsType(RoleConnector)&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiRole" lowerBound="1"
            eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral=""
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the role is a multi role."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if not (self.cardinality.oclIsUndefined()) then&#xD;&#xA;&#x9;(self.cardinality.upperBound.value > 1) or self.cardinality.upperBound.infinity&#xD;&#xA;else&#xD;&#xA;&#x9;false&#xD;&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageBuffer"
            upperBound="-1" eType="#//model/protocol/MessageBuffer" containment="true"
            eOpposite="#//model/protocol/MessageBuffer/role">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A role contains message buffers to store received messages. If this role can only send messages then no message buffer is allowed; otherwise at least one message buffer must be defined. The maximal number of message buffers is limited to the number of message this role may receive."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MessageBuffer" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A message buffer may contains message types. A message buffer has a specified size and is associtated to a role of a coordination pattern. Message types are always stored in FIFO order."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="bufferSize" lowerBound="1"
            eType="#//model/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The size of the message buffer. "/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="messageType" lowerBound="1"
            upperBound="-1" eType="#//model/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message types this message buffer can store."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="role" lowerBound="1"
            eType="#//model/protocol/Role" eOpposite="#//model/protocol/Role/receiverMessageBuffer">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role that contains this message buffer."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorQualityOfServiceAssumptions"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of quality of service assumptions for this connector. A developer defines these properties before modeling the role statecharts, because the statecharts depend on these assumptions. Software layers under the MechatronicUML layer respectively the hardware itself have to ensure that these assumptions are correct."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="minMessageDelay" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The minimal time a message needs from the sender to the receiver using this connector."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="maxMessageDelay" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The maximal time a message needs from the sender to the receiver using this connector."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="messageLossPossible"
            lowerBound="1" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines if messages that are send using this connector may be lost during transport."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="realtimestatechart" nsURI="http://www.fujaba.de/muml/model/realtimestatechart/0.3.8"
        nsPrefix="realtimestatechart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Deadline" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a deadline consisting of an upper and a lower bound."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" eType="#//model/valuetype/TimeValue"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The upper bound of a deadline is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" eType="#//model/valuetype/TimeValue"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The lower bound of a deadline is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AbsoluteDeadline" eSuperTypes="#//model/realtimestatechart/Deadline">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an absolute deadline. It is always associated with a transition of the statechart. The deadline depends on the value of a certain clock."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clock" lowerBound="1"
            eType="#//model/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the references clock of the absolute deadline."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RelativeDeadline" eSuperTypes="#//model/realtimestatechart/Deadline">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a relative deadline. It is always associated with a transition of the statechart. The deadlin is relative to the point in time when the execution of the transition starts."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Clock" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents clocks of a realtime statechart."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" eType="#//model/realtimestatechart/RealtimeStatechart"
            eOpposite="#//model/realtimestatechart/RealtimeStatechart/clocks">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this clock belongs to.&#xA;\todoib{Should be 1..1, but GMF needs 0..1 here!}&#xD;&#xA;\todosd{is this info necessary?}"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Region" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement #//model/realtimestatechart/Prioritizable">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Regions enables hierarchy and parallelism. Each state can have zero, one or more regions."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" lowerBound="1"
            eType="#//model/realtimestatechart/RealtimeStatechart" containment="true"
            eOpposite="#//model/realtimestatechart/RealtimeStatechart/embeddingRegion">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this region embeds."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentState" lowerBound="1"
            eType="#//model/realtimestatechart/State" eOpposite="#//model/realtimestatechart/State/regions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state this region is embedded."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="gmfHistory" lowerBound="1"
            eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if statechart.oclIsUndefined() then&#xA;&#x9;false&#xA;else&#xA;&#x9;statechart.history&#xA;endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This feature exists for GMF. We use it to register a DerivedAttributeAdapter in RegionImpl to be able to get notifications in the CustomRegionEditPart, when the value of &quot;RealtimeStatechart.history&quot; changes."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="State" eSuperTypes="#//model/realtimestatechart/Vertex">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="OneInvariantPerClock NoOutgoingTransitionOfFinalState NoRegionsOfFinalState UniquePrioritiesOfOutgoingTransitions UniquePrioritiesOfRegions UniqueChannelNames UniqueRegionNames BoundOfInvariantGreaterOrEqualZero InvalidClockConstraintOperator"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a composite state of a realtime statechart. Composite states may again contain realtime statecharts hence enabling the creation of hierarchical statecharts. Further more composite states have do, entry and exit actions. Also composite states define which synchronization channels are allowed to be used by embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="OneInvariantPerClock" value="self.invariants->isUnique(clock)"/>
          <details key="NoOutgoingTransitionOfFinalState" value="self.final implies self.outgoingTransitions->isEmpty()"/>
          <details key="NoRegionsOfFinalState" value="self.final implies self.regions->isEmpty()"/>
          <details key="UniquePrioritiesOfOutgoingTransitions" value="self.outgoingTransitions->isUnique(priority) "/>
          <details key="UniquePrioritiesOfRegions" value="self.regions->isUnique(priority)"/>
          <details key="UniqueChannelNames" value="self.channels->isUnique(name)"/>
          <details key="UniqueRegionNames" value="self.regions->isUnique(name)"/>
          <details key="BoundOfInvariantGreaterOrEqualZero" value="self.invariants.bound.value->forAll(value >= 0)"/>
          <details key="InvalidClockConstraintOperator" value="self.invariants->forAll(invariant | Set{core::expressions::common::ComparingOperator::LESS, core::expressions::common::ComparingOperator::LESS_OR_EQUAL }->includes(invariant.operator))"/>
        </eAnnotations>
        <eOperations name="getUniqueRegionPriority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns the next free higher region priority that is closest to the value provided as hint."/>
            <details key="body" value="for (; hasRegionOfPriority(hint); hint++);&#xA;return hint;"/>
          </eAnnotations>
          <eParameters name="hint" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt"/>
        </eOperations>
        <eOperations name="hasRegionOfPriority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns the &lt;code>true&lt;/code>, if this State contains a region of the given priority."/>
            <details key="body" value="for (Region region : getRegions()) {&#xA;&#x9;if (region.getPriority() == priority) {&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;}&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="priority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="regions" upperBound="-1"
            eType="#//model/realtimestatechart/Region" containment="true" eOpposite="#//model/realtimestatechart/Region/parentState">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The regions of this state. Regions are used to model composite states.&#xA;In case of one region, we have an xor superstate, in case of multiple regions, &#xA;we have an AND-superstate."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="doEvent" eType="#//model/realtimestatechart/DoEvent"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The do event. It is executed periodically while the corresponding state is active."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exitEvent" eType="#//model/realtimestatechart/ExitEvent"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The exit action is exectuted once when the corresponding state is left."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="entryEvent" eType="#//model/realtimestatechart/EntryEvent"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The entry action is exectuted once when the corresponding state is entered."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="invariants" upperBound="-1"
            eType="#//model/realtimestatechart/ClockConstraint" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The invariant belonging to this complex state. It describes how long it is allowed to reside in this complex state depending on the values of the clocks."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="initial" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An initial state is the first one to active if the statechart is activated. There is only one initial state allowed at the top hierarchy of a statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="final" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a final state is not allowed to have outgoing transitions."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="urgent" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If a state is active and urgent, no time is allowed to pass until the state is leaved."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="channels" upperBound="-1"
            eType="#//model/realtimestatechart/SynchronizationChannel" containment="true"
            eOpposite="#//model/realtimestatechart/SynchronizationChannel/state">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The synchronization channels provided by this state."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="events" ordered="false"
            upperBound="-1" eType="#//model/realtimestatechart/StateEvent" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="Set{entryEvent,exitEvent,doEvent }->select(x | not x.oclIsUndefined())"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference returns all StateEvents of this state. The StateEvents of&#xD;&#xA;this state are all entry-, do- and exit-Events."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="entryPoints" upperBound="-1"
            eType="#//model/realtimestatechart/EntryPoint" containment="true" eOpposite="#//model/realtimestatechart/EntryPoint/state">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A state references its entry points. They can only exist, if a state embeds one or more statecharts."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="simple" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            unsettable="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- a state is simple if it contains no regions&#xA;regions->isEmpty()&#xA;"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A state is simple if it does not contain a region with an embedded substatechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exitPoints" upperBound="-1"
            eType="#//model/realtimestatechart/ExitPoint" containment="true" eOpposite="#//model/realtimestatechart/ExitPoint/state">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A state references its exit points. They can only exist, if a state embeds one or more statecharts."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" eType="#//model/realtimestatechart/RealtimeStatechart"
            eOpposite="#//model/realtimestatechart/RealtimeStatechart/states">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this state belongs to.&#xA;\todoib{Should be 1..1, but GMF needs 0..1 here!}"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Vertex" abstract="true" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a node in a realtime statechart that is connected with other nodes via transitions."/>
        </eAnnotations>
        <eOperations name="isSuperVertexOf" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="Assert.isLegal(vertex != null);&#xA;&#xA;BreadthFirstSearchAlgorithm bfs = new BreadthFirstSearchAlgorithm();&#xA;return bfs.search(vertex, new ISearchVisitor() {&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean visit(Object object) {&#xA;&#x9;&#x9;return !VertexImpl.this.equals(object);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public List&lt;?> getAdjacentNodes(Object object) {&#xA;&#xA;&#x9;&#x9;List&lt;Object> parentStates = new ArrayList&lt;Object>();&#xA;&#xA;&#x9;&#x9;State state = (State) object;&#xA;&#x9;&#x9;RealtimeStatechart rtsc = state.getStatechart();&#xA;&#x9;&#x9;if (rtsc != null) {&#xA;&#x9;&#x9;&#x9;Region region = rtsc.getEmbeddingRegion();&#xA;&#x9;&#x9;&#x9;if (region != null) {&#xA;&#x9;&#x9;&#x9;&#x9;// List&lt;Region> regions = rtsc.getEmbeddingRegions();&#xA;&#x9;&#x9;&#x9;&#x9;// for (Region region : regions) {&#xA;&#x9;&#x9;&#x9;&#x9;State parentState = region.getParentState();&#xA;&#x9;&#x9;&#x9;&#x9;if (state != null) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parentStates.add(parentState);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;// }&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return parentStates;&#xA;&#x9;}&#xA;&#xA;});"/>
          </eAnnotations>
          <eParameters name="vertex" eType="#//model/realtimestatechart/Vertex"/>
        </eOperations>
        <eOperations name="getUniqueTransitionPriority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns the next free higher transition priority that is closest to the value provided as hint."/>
            <details key="body" value="for (; hasOutgoingTransitionOfPriority(hint); hint++);&#xA;return hint;"/>
          </eAnnotations>
          <eParameters name="hint" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt"/>
        </eOperations>
        <eOperations name="hasOutgoingTransitionOfPriority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns the &lt;code>true&lt;/code>, if this Vertex contains an outgoing transition of the given priority."/>
            <details key="body" value="for (Transition transition : getOutgoingTransitions()) {&#xA;&#x9;if (transition.getPriority() == priority) {&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;}&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="priority" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EInt"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="outgoingTransitions"
            upperBound="-1" eType="#//model/realtimestatechart/Transition" eOpposite="#//model/realtimestatechart/Transition/source">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The outgoing transitions of this vertex"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="incomingTransitions"
            upperBound="-1" eType="#//model/realtimestatechart/Transition" eOpposite="#//model/realtimestatechart/Transition/target">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The incoming transitions of this vertex"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Transition" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement #//model/realtimestatechart/Prioritizable ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LegalTransitionsOnly TriggerMessageEventsMustNotHaveAnOwnedParameterBinding ValidTriggerMessageEvents ValidRaiseMessageEvents ExitPointIncomingTransitionsNoSideEffectsOrDeadlines ExitPointOutgoingTransitionsNoConditions"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A transition connects different vertices. If the vertex is a state a self-transition is also possible."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LegalTransitionsOnly" value="-- State A to State B within the same statechart&#xD;&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(State) and self.source.oclAsType(State).statechart = self.target.oclAsType(State).statechart)&#xD;&#xA;or&#xD;&#xA;-- State A to EntryPoint of B, where A and B are in the same statechart&#xD;&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(State).statechart = self.target.oclAsType(EntryPoint).state.statechart)&#xD;&#xA;or&#xD;&#xA;-- State A1 to ExitPoint of A2, where A2 is the direct parent state of A1&#xD;&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(ExitPoint) and self.source.oclAsType(State).statechart.embeddingRegion.parentState = self.target.oclAsType(ExitPoint).state)&#xD;&#xA;or&#xD;&#xA;-- EntryPoint of A1 to State A2, where A1 is the direct parent state of A2&#xD;&#xA;(self.source.oclIsKindOf(EntryPoint) and self.target.oclIsKindOf(State) and self.source.oclAsType(EntryPoint).state = self.target.oclAsType(State).statechart.embeddingRegion.parentState)&#xD;&#xA;or&#xD;&#xA;-- EntryPoint of A1 to EntryPoint of A2, where A1 is the direct parent state of A2&#xD;&#xA;(self.source.oclIsKindOf(EntryPoint) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(EntryPoint).state = self.target.oclAsType(EntryPoint).state.statechart.embeddingRegion.parentState)&#xD;&#xA;or&#xD;&#xA;-- ExitPoint of A to State B, where A and B are in the same statechart&#xD;&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(State) and self.source.oclAsType(ExitPoint).state.statechart = self.target.oclAsType(State).statechart)&#xD;&#xA;or&#xD;&#xA;-- ExitPoint of A to EntryPoint of B, where A and B are in the same statechart&#xD;&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(ExitPoint).state.statechart = self.target.oclAsType(EntryPoint).state.statechart)&#xD;&#xA;or&#xD;&#xA;-- ExitPoint of A1 to ExitPoint of A2, where A2 is the direct parent state of A1&#xD;&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(ExitPoint) and self.source.oclAsType(ExitPoint).state.statechart.embeddingRegion.parentState = self.target.oclAsType(ExitPoint).state)"/>
          <details key="TriggerMessageEventsMustNotHaveAnOwnedParameterBinding" value="not self.triggerMessageEvent.message.oclIsUndefined() implies&#xA;self.triggerMessageEvent.message.parameterBinding->isEmpty()"/>
          <details key="ValidTriggerMessageEvents" value="not triggerMessageEvent.message.instanceOf.oclIsUndefined() implies receiverMessageTypes->includes(triggerMessageEvent.message.instanceOf)"/>
          <details key="ValidRaiseMessageEvents" value="not raiseMessageEvent.message.instanceOf.oclIsUndefined() implies senderMessageTypes->includes(raiseMessageEvent.message.instanceOf)"/>
          <details key="ExitPointIncomingTransitionsNoSideEffectsOrDeadlines" value="(not self.target.oclIsUndefined() and self.target.oclIsKindOf(realtimestatechart::ExitPoint))&#xD;&#xA;&#x9;implies (&#xD;&#xA;&#x9;&#x9;self.clockResets->isEmpty()&#xD;&#xA;&#x9;&#x9;and self.action.oclIsUndefined()&#xD;&#xA;&#x9;&#x9;and self.raiseMessageEvent.oclIsUndefined()&#xD;&#xA;&#x9;&#x9;and self.synchronization.oclIsUndefined()&#xD;&#xA;&#x9;&#x9;and self.absoluteDeadlines->isEmpty()&#xD;&#xA;&#x9;&#x9;and self.relativeDeadline.oclIsUndefined()&#xD;&#xA;&#x9;)"/>
          <details key="ExitPointOutgoingTransitionsNoConditions" value="(not self.source.oclIsUndefined() and self.source.oclIsKindOf(realtimestatechart::ExitPoint))&#xD;&#xA;&#x9;implies (&#xD;&#xA;&#x9;&#x9;self.triggerMessageEvent.oclIsUndefined()&#xD;&#xA;&#x9;&#x9;and self.clockConstraints->isEmpty()&#xD;&#xA;&#x9;&#x9;and self.guard.oclIsUndefined()&#xD;&#xA;&#x9;)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="synchronization" eType="#//model/realtimestatechart/Synchronization"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The synchronisation which is sent upon activation of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1"
            eType="#//model/realtimestatechart/Vertex" eOpposite="#//model/realtimestatechart/Vertex/incomingTransitions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state which is the target of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1"
            eType="#//model/realtimestatechart/Vertex" eOpposite="#//model/realtimestatechart/Vertex/outgoingTransitions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state which is the source of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" eType="#//model/realtimestatechart/RealtimeStatechart"
            eOpposite="#//model/realtimestatechart/RealtimeStatechart/transitions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this transition belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockResets" upperBound="-1"
            eType="#//model/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock resets of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="triggerMessageEvent"
            eType="#//model/realtimestatechart/AsynchronousMessageEvent" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The trigger event of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let eventSet : Sequence(AsynchronousMessageEvent) = self.events->select(e | e.oclIsKindOf(AsynchronousMessageEvent) and e.kind=EventKind::TRIGGER).oclAsType(AsynchronousMessageEvent) in&#xD;&#xA;if eventSet ->size() = 0 then null else eventSet -> first() endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="raiseMessageEvent"
            eType="#//model/realtimestatechart/AsynchronousMessageEvent" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The event which is raised upon activiation of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let eventSet : Sequence(AsynchronousMessageEvent) = self.events->select(e | e.oclIsKindOf(AsynchronousMessageEvent) and e.kind=EventKind::RAISE).oclAsType(AsynchronousMessageEvent) in&#xD;&#xA;if eventSet ->size() = 0 then null else eventSet -> first() endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockConstraints" upperBound="-1"
            eType="#//model/realtimestatechart/ClockConstraint" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A clock constraint restricts when the transition can be activeted in dependency of the values of the clock."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="absoluteDeadlines"
            upperBound="-1" eType="#//model/realtimestatechart/AbsoluteDeadline" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a transition can has one or more absolute deadlines"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="relativeDeadline" eType="#//model/realtimestatechart/RelativeDeadline"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a transition can have one relative deadline"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="blockable" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Needed for failure propagation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="guard" eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/Expression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The guard of a transition is defined by an expression which should have return type boolean. Comparing clock values is not allowed (use clock constraints instead)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="events" upperBound="-1"
            eType="#//model/realtimestatechart/TransitionEvent" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All events which belong to this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" eType="#//model/realtimestatechart/Action"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The side effect of this transition. A side effect might be a variable assignment as well as a method invocation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="urgent" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType" volatile="true" transient="true"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let b : core::BehavioralElement = statechart.getPortOrRoleStatechart().behavioralElement in&#xA;if b.oclIsUndefined() then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;if b.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;&#x9;b.oclAsType(component::DiscretePort).receiverMessageTypes&#xA;&#x9;else&#xA;&#x9;&#x9;if b.oclIsKindOf(protocol::Role) then&#xA;&#x9;&#x9;&#x9;b.oclAsType(protocol::Role).receiverMessageTypes&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType" volatile="true" transient="true"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let b : core::BehavioralElement = statechart.getPortOrRoleStatechart().behavioralElement in&#xA;if b.oclIsUndefined() then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;if b.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;&#x9;b.oclAsType(component::DiscretePort).senderMessageTypes&#xA;&#x9;else&#xA;&#x9;&#x9;if b.oclIsKindOf(protocol::Role) then&#xA;&#x9;&#x9;&#x9;b.oclAsType(protocol::Role).senderMessageTypes&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClockConstraint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an arbitrary time constraint that can either be used as an invariant constraint of a state or as a transition guard."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="bound" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The bound of a deadline (upper or lower) is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clock" lowerBound="1"
            eType="#//model/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock references in this clock constraint."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operator" lowerBound="1"
            eType="ecore:EEnum ../../org.storydriven.core/model/core.ecore#//expressions/common/ComparingOperator"
            defaultValueLiteral="ComparingOperator.LESS_OR_EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The operator that is used in this clock constraint."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Action" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An action is used as a side effect of a transition as well as within a state. Each transition can&#xD;&#xA;only define one action. A state can define up to three actions (one for state entry, one for state&#xD;&#xA;exit, one while dwelling within the state).&#xD;&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expressions" lowerBound="1"
            upperBound="-1" eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/Expression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An action has a defined expression, which can be expressed in different languages."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AsynchronousMessageEvent" eSuperTypes="#//model/realtimestatechart/TransitionEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An AsynchronousMessageEvent is a TransitionEvent that corresponds to &#xD;&#xA;receiving or sending a message. They are used to model asynchronous &#xD;&#xA;communication between realtime statecharts. A trigger events specifies&#xD;&#xA;that the corresponding message has to be received for the transition to be&#xD;&#xA;enabled, a raised event specifies that the corresponding message will be &#xD;&#xA;sent upon execution of the transition. "/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="message" lowerBound="1"
            eType="#//model/realtimestatechart/Message" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message associated with this event. The message is either requested to be&#xD;&#xA;received (trigger event) or it will be sent (raise event)."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DoEvent" eSuperTypes="#//model/realtimestatechart/StateEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The action of a state that is executed periodically as long as this state is active. The first period starts after the execution of the entry-action."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValidLowerUpperPeriod" value="self.periodLower.value.value >= 1 and self.periodLower.value.value &lt;= self.periodUpper.value.value"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValidLowerUpperPeriod"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" lowerBound="1"
            eType="#//model/realtimestatechart/Action" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each entry or exit action has one or more actions."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="periodLower" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the lower bound of the period"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="periodUpper" lowerBound="1"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the upper bound of the period"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryOrExitEvent" abstract="true"
          eSuperTypes="#//model/realtimestatechart/StateEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an entry or an exit event. The actions associated with this &#xD;&#xA;event will be executed when the state is entered or left respectively."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockResets" upperBound="-1"
            eType="#//model/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock resets of this action"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" eType="#//model/realtimestatechart/Action"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each entry or exit event can have one or more actions."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SynchronizationChannel" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Defines a type of a synchronization channel that can be used to synchronize&#xA;between statecharts contained as substatecharts in the same state.&#xA;Serves as a type for Synchronizations."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1"
            eType="#//model/realtimestatechart/State" eOpposite="#//model/realtimestatechart/State/channels">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state in which this synchronization channel is defined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selectorType" eType="#//model/types/DataType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Synchronization" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Two transitions can synchron fire. One transition is the sender, the other the receiver. This means that both transitions (exactly one sender and one receiver) must be activated and has to fire at the same time. "/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="syncChannel" eType="#//model/realtimestatechart/SynchronizationChannel">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the channel that is used by the synchronization"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1"
            eType="#//model/realtimestatechart/SynchronizationKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides the kind: Is this a send or a reveive synchronization?"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selectorExpression"
            eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/Expression"
            containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Prioritizable" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Enables the priorization of elements."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="priority" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the priority of the element"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RealtimeStatechart" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement #//model/behavior/Behavior">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class is a concrete statechart implementation of a real-time statechart."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueNameOfStates" value="self.states->isUnique(name)"/>
          <details key="NoCycles" value="-- If we are contained within a statechart...&#xA;(not self.embeddingRegion.parentState.statechart.oclIsUndefined())&#xA;&#xA;implies&#xA;&#xA;-- ... then we must not be a super statechart of it.&#xA;(not self.isSuperStatechartOf(self.embeddingRegion.parentState.statechart))"/>
          <details key="OneInitialState" value="self.states->select(s |  s.initial)->size() = 1"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueNameOfStates NoCycles OneInitialState"/>
        </eAnnotations>
        <eOperations name="isSuperStatechartOf" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns realtime statechart which represents the root of the hierarchy tree."/>
            <details key="body" value="// TODO: Replace by OCL's transitive closure?&#xA;&#x9;&#x9;&#xA;Assert.isLegal(statechart != null);&#xA;&#xA;BreadthFirstSearchAlgorithm bfs = new BreadthFirstSearchAlgorithm();&#xA;return bfs.search(statechart, new ISearchVisitor() {&#xA;&#xA;&#x9;@Override&#xA;&#x9;public boolean visit(Object object) {&#xA;&#x9;&#x9;return !RealtimeStatechartImpl.this.equals(object);&#xA;&#x9;}&#xA;&#xA;&#x9;@Override&#xA;&#x9;public List&lt;?> getAdjacentNodes(Object object) {&#xA;&#x9;&#x9;RealtimeStatechart rtsc = (RealtimeStatechart) object;&#xA;&#xA;&#x9;&#x9;List&lt;Object> parentStatecharts = new ArrayList&lt;Object>();&#xA;&#xA;&#x9;&#x9;Region region = rtsc.getEmbeddingRegion();&#xA;&#x9;&#x9;if (region != null) {&#xA;&#x9;&#x9;&#x9;// List&lt;Region> regions = rtsc.getEmbeddingRegions();&#xA;&#x9;&#x9;&#x9;// for (Region region : regions) {&#xA;&#x9;&#x9;&#x9;State state = region.getParentState();&#xA;&#x9;&#x9;&#x9;if (state != null &amp;&amp; state.getStatechart() != null) {&#xA;&#x9;&#x9;&#x9;&#x9;parentStatecharts.add(state.getStatechart());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// }&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return parentStatecharts;&#xA;&#x9;}&#xA;&#xA;});"/>
          </eAnnotations>
          <eParameters name="statechart" lowerBound="1" eType="#//model/realtimestatechart/RealtimeStatechart"/>
        </eOperations>
        <eOperations name="getHighestParentStatechart" lowerBound="1" eType="#//model/realtimestatechart/RealtimeStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns realtime statechart which represents the root of the hierarchy tree."/>
            <details key="body" value="RealtimeStatechart rtsc = this;&#xD;&#xA;while (rtsc.isEmbedded()==true)&#xD;&#xA;{rtsc = rtsc.getEmbeddingRegion().getParentState().getStatechart();} &#xD;&#xA;return rtsc;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getPortOrRoleStatechart" lowerBound="1" eType="#//model/realtimestatechart/RealtimeStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns itself if a Port or a Role is referenced or the next ancestor that references a Port or a Role. If no Port or a Role is found, then itself is returned."/>
            <details key="body" value="// check if this rtsc has a behavioral element&#xD;&#xA;RealtimeStatechart rtsc = this;&#xD;&#xA;if (rtsc.getBehavioralElement()!=null &amp;&amp; ((rtsc.getBehavioralElement() instanceof Port) || (rtsc.getBehavioralElement() instanceof Role))) return rtsc;&#xD;&#xA;&#xD;&#xA;// search for ancestor with behavioral element&#xD;&#xA;while (rtsc.isEmbedded()==true)&#xD;&#xA;{&#xD;&#xA;rtsc = rtsc.getEmbeddingRegion().getParentState().getStatechart();&#xD;&#xA;if (rtsc.getBehavioralElement()!=null &amp;&amp; ((rtsc.getBehavioralElement() instanceof Port) || (rtsc.getBehavioralElement() instanceof Role))) return rtsc;&#xD;&#xA;} &#xD;&#xA;&#xD;&#xA;// no rtsc found with behavioral element&#xD;&#xA;return this;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddingRegion" eType="#//model/realtimestatechart/Region"
            eOpposite="#//model/realtimestatechart/Region/statechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the real-time statechart is embedded into a region of a composite state,&#xD;&#xA;than this reference returns the region of this state. If the real-time statechart&#xD;&#xA;is not embedded, this reference will be undefined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="transitions" upperBound="-1"
            eType="#//model/realtimestatechart/Transition" containment="true" eOpposite="#//model/realtimestatechart/Transition/statechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The transitions of the realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="states" lowerBound="1"
            upperBound="-1" eType="#//model/realtimestatechart/State" containment="true"
            eOpposite="#//model/realtimestatechart/State/statechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The states of this realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clocks" upperBound="-1"
            eType="#//model/realtimestatechart/Clock" containment="true" eOpposite="#//model/realtimestatechart/Clock/statechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clocks of this realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="history" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this attribute is true, it acts as a shallow history on the top hierarchy of this statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="eventQueueSize" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The size of the event queue of this port. It defines the maximum number of events&#xD;&#xA;that may be temporarily buffered by the port."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="flat" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- a statechart is flat if it exclusively contains simple states&#xA;states->forAll(simple)"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute allows to checks whether a statechart is flat or not. In a&#xD;&#xA;flat statechart, none of the contained states contains a regions with an embedded&#xD;&#xA;substatechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="availableClocks" ordered="false"
            upperBound="-1" eType="#//model/realtimestatechart/Clock" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Available clocks are all clocks that were defined in this statechart or in ancestor statecharts."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(if embeddingRegion.oclIsUndefined() then self else embeddingRegion.parentState.statechart endif).clocks->asSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="embedded" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false"
            derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This attribute specifies whether this realtime statechart is embedded into a region or not."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="not self.embeddingRegion.oclIsUndefined()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAvailableVariables"
            upperBound="-1" eType="#//model/behavior/Variable" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(if embeddingRegion.oclIsUndefined() then self else embeddingRegion.parentState.statechart endif).variables->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAvailableOperations"
            upperBound="-1" eType="#//model/behavior/Operation" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(if embeddingRegion.oclIsUndefined() then self else embeddingRegion.parentState.statechart endif).operations ->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="SynchronizationKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A synchronization has two kinds: send and receive."/>
        </eAnnotations>
        <eLiterals name="SEND" literal="SEND">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a send synchronization."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="RECEIVE" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a receive synchronization."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Event" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class represents all kinds of events that may occur in a statechart.&#xD;&#xA;A event can either be a trigger event or a raise event."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//model/realtimestatechart/EventKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides the kind: Is this a raise event or a trigger event?&#xD;&#xA;&#xD;&#xA;A event may either be a trigger event or a raise event. A trigger event triggers &#xD;&#xA;some action within the statechart, a raise event is generated by the statechart &#xD;&#xA;and will be processed by another statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TransitionEvent" abstract="true"
          eSuperTypes="#//model/realtimestatechart/Event">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A TransitionEvent is an event that occurs at a transition of a real-time statechart.&#xD;&#xA;Trigger Events are part of the precondition for activating the transition, raise&#xD;&#xA;events are generated as a result of firing the transition."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StateEvent" abstract="true" eSuperTypes="#//model/realtimestatechart/Event">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A StateEvent is an event that occurs within a state of a real-time statechart.&#xD;&#xA;StateEvents may only be trigger events."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Message" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The messages are exchanged between components in order to communicate&#xD;&#xA;asynchronously. A message is typed over a message type and provides a &#xD;&#xA;binding of all parameters defined by the message type to concrete values."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="instanceOf" lowerBound="1"
            eType="#//model/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Retrieves the message type this message is typed over."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameterBinding" upperBound="-1"
            eType="#//model/behavior/ParameterBinding" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="EventKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An event has two kinds: raise and trigger."/>
        </eAnnotations>
        <eLiterals name="RAISE">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a raise event."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="TRIGGER" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a trigger event."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryEvent" eSuperTypes="#//model/realtimestatechart/EntryOrExitEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an entry event. The action associated with this &#xD;&#xA;event will be executed when the state is entered.&#xA;\paragraph{Note}&#xA;We need this subclass, because GMF forbids using the same semantic&#xA;element for different notational elements within the same container."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExitEvent" eSuperTypes="#//model/realtimestatechart/EntryOrExitEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an exit event. The action associated with this &#xD;&#xA;event will be executed when the state is left.&#xA;\paragraph{Note}&#xA;We need this subclass, because GMF forbids using the same semantic&#xA;element for different notational elements within the same container."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryPoint" eSuperTypes="#//model/realtimestatechart/Vertex">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneIncomingTransition AtLeastOneOutgoingTransition"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An EntryPoint is an intermediate pseudostate which makes it possible to chain transitions between different hierarchy levels. The EntryPoint is assigned to a state. An EntryPoint is used to activate a dedicated inner state for embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneIncomingTransition" value="self.incomingTransitions ->size()>0"/>
          <details key="AtLeastOneOutgoingTransition" value="self.outgoingTransitions->size() > 0"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1"
            eType="#//model/realtimestatechart/State" eOpposite="#//model/realtimestatechart/State/entryPoints">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The StateEntryPoint is assigned to a state."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExitPoint" eSuperTypes="#//model/realtimestatechart/Vertex">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneIncomingTransitionPerRegion OneOutgoingTransition ExitPointsOnlyAtCompositeStates"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An ExitPoint is an intermediate pseudostate which makes it possible to chain transitions between different hierarchy levels. The ExitPoint is assigned to a state. An ExitPoint is used to jointly deactivate dedicated inner states of embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneIncomingTransitionPerRegion" value="-- all regions of the parent state have at least one state that connects to the ExitPoint&#xD;&#xA;self.state.regions->forAll(r | &#xD;&#xA;&#x9;r.statechart.states->exists(s |&#xD;&#xA;&#x9;&#x9;s.outgoingTransitions->exists(t | t.target = self)&#xD;&#xA;&#x9;&#x9;or&#xD;&#xA;&#x9;&#x9;s.exitPoints.outgoingTransitions->exists(t | t.target = self)&#xD;&#xA;&#x9;)&#xD;&#xA;)"/>
          <details key="OneOutgoingTransition" value="self.outgoingTransitions->size() = 1"/>
          <details key="ExitPointsOnlyAtCompositeStates" value="not self.state.simple"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1"
            eType="#//model/realtimestatechart/State" eOpposite="#//model/realtimestatechart/State/exitPoints">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The StateExitPoint is assigned to a state. "/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="msgtype" nsURI="http://www.fujaba.de/muml/model/msgtype/0.3.6"
        nsPrefix="msgtype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package defines the message interfaces. A MessageInterface defines a set&#xD;&#xA;of event signatures using the class MessageType. These message types are used&#xD;&#xA;to type the events within a realtime statechart. "/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="MessageType" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A message type defines the signature of one event. That includes the name&#xD;&#xA;of the event as well as the list of parameters. The message type inherits from&#xD;&#xA;callable because concrete events in a real-time statechart must provide a &#xD;&#xA;parameter mapping for the parameters of the message type as it is defined for&#xD;&#xA;method invocations."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueParameterNames" value="self.parameters->isUnique(name)"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueParameterNames"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
            eType="#//model/behavior/Parameter" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference defines the set of parameters of this message type. A parameter defines a unique name and a DataType."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="repository" lowerBound="1"
            eType="#//model/msgtype/MessageTypeRepository" eOpposite="#//model/msgtype/MessageTypeRepository/messageTypes"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MessageTypeRepository" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MessageTypeRepository is used to declare message types which are then used&#xD;&#xA;in MessageInterfaces."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="messageTypes" ordered="false"
            lowerBound="1" upperBound="-1" eType="#//model/msgtype/MessageType" containment="true"
            eOpposite="#//model/msgtype/MessageType/repository"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="deployment" nsURI="http://www.fujaba.de/muml/model/deployment/0.3.11"
        nsPrefix="deployment">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Deployment" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Deployment exists in the software lifecycle to bridge the gap between what a software developer could know about the execution environment and what the environment's developer could know about the deployable software.\footnote{C. Szyperski, Foreword to Proceedings of Component Deployment, IFIP/ACM Working Conference, Berlin 2002}"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="communicationLinks"
            upperBound="-1" eType="#//model/deployment/CommunicationLink" containment="true"
            eOpposite="#//model/deployment/CommunicationLink/deployment">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Deployment contains CommunicationLinks which are used to connect HardwarePorts."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="hardwareNodes" lowerBound="1"
            upperBound="-1" eType="#//model/deployment/HardwareNode" containment="true"
            eOpposite="#//model/deployment/HardwareNode/deployment">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Deployment contains HardwareNodes which represents hardware resources like computational, communication, sensor, or actor."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstanceConfiguration"
            eType="#//model/instance/ComponentInstanceConfiguration">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The componentInstanceConfiguration which contains the component instances which should be deployed to hardware nodes."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="qualityOfLinkServices"
            eType="#//model/deployment/LinkQualityOfService" containment="true" eOpposite="#//model/deployment/LinkQualityOfService/deployment">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Reference to all contained quality of services."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HardwareNode" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="NoDeploymentOnActorOrSensor" value="(self.hardwareNodeKind &lt;> deployment::HardwareNodeKind::COMPUTATIONAL_RESOURCE) implies self.deployedInstances->isEmpty()"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A run-time computational resource which generally has at least memory and processing capabilities. &#xD;&#xA;Component instances may reside on hardware nodes if they are not a sensor or an actor."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="NoDeploymentOnActorOrSensor"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployment" lowerBound="1"
            eType="#//model/deployment/Deployment" eOpposite="#//model/deployment/Deployment/hardwareNodes">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Deployment which contains the HardwareNode."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="hardwarePorts" upperBound="-1"
            eType="#//model/deployment/HardwarePort" containment="true" eOpposite="#//model/deployment/HardwarePort/hardwareNode">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A HardwareNode contains HardwarePorts to communicate with other HardwarePorts via a CommunicationLink."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployedInstances"
            upperBound="-1" eType="#//model/instance/ComponentInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="ComponentInstances which are deployed to the HardwareNode."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="hardwareNodeKind" eType="#//model/deployment/HardwareNodeKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A HardwareNode is kind of a computational resource, a sensor, an actor, or a communication device like a router."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="HardwareNodeKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Different kinds of HardwareNodes. "/>
        </eAnnotations>
        <eLiterals name="COMPUTATIONAL_RESOURCE"/>
        <eLiterals name="SENSOR" value="2"/>
        <eLiterals name="ACTOR" value="1"/>
        <eLiterals name="COMMUNICATION" value="3"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HardwarePort" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement #//model/connector/ConnectorEndpoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Hardware ports  are used to communicate&#xD;&#xA;with other hardware nodes and with component instances."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="hardwareNode" lowerBound="1"
            eType="#//model/deployment/HardwareNode" eOpposite="#//model/deployment/HardwareNode/hardwarePorts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Hardware nodes are hardware elements on which port instances could be deployed if they are not a sensor or an actor."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployedPortInstance"
            upperBound="-1" eType="#//model/instance/PortInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="PortInstances which are deployed to the HardwarePort."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#//model/deployment/HardwarePortDirectionKind"
            defaultValueLiteral="">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A HardwarePort is of kind in, out, or in/out. &#xD;&#xA;Depending on its kind it can receive, send, or receive and send messages. "/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="communicationLinks"
            upperBound="-1" eType="#//model/deployment/CommunicationLink" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectors->select(c | c.oclIsTypeOf(CommunicationLink)).oclAsType(CommunicationLink)->asOrderedSet()"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="CommunicationLinks which have the HardwarePort as connector endpoints."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CommunicationLink" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement #//model/connector/Connector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A communication link between hardware nodes and a target used for the deployment of connectors between component instances."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SameConfiguration" value="self.deployedAssemblyInstances.componentInstanceConfiguration=self.deployment.componentInstanceConfiguration"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value=""/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployment" lowerBound="1"
            eType="#//model/deployment/Deployment" eOpposite="#//model/deployment/Deployment/communicationLinks">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The deployment to which the link belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="qualityOfService" eType="#//model/deployment/LinkQualityOfService">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The quality of service which the link fullfills. "/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployedAssemblyInstances"
            upperBound="-1" eType="#//model/instance/AssemblyConnectorInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Used for the deployment of connectors between component instances."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="hardwarePorts" upperBound="-1"
            eType="#//model/deployment/HardwarePort" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(c | c.oclIsTypeOf(HardwarePort)).oclAsType(HardwarePort)->asOrderedSet()"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Derives all hardware ports which are endpoints of the communication link."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="HardwarePortDirectionKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A HardwarePort is of kind in, out, or in/out. &#xD;&#xA;Depending on its kind it can receive, send, or receive and send messages. "/>
        </eAnnotations>
        <eLiterals name="IN"/>
        <eLiterals name="OUT" value="1"/>
        <eLiterals name="IN_OUT" value="2"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LinkQualityOfService" eSuperTypes="../../org.storydriven.core/model/core.ecore#//CommentableElement ../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Quality of Service of a communication link. "/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="packetDelayVariation"
            eType="#//model/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Difference in end-to-end one-way delay between selected messages without lost messages."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="latency" eType="#//model/valuetype/TimeValue"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The time from the source port sending a message to the destination port receiving it."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deployment" eType="#//model/deployment/Deployment"
            eOpposite="#//model/deployment/Deployment/qualityOfLinkServices">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The deployment to which the service belongs."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="types" nsURI="http://www.fujaba.de/muml/model/types/0.3.6"
        nsPrefix="types">
      <eClassifiers xsi:type="ecore:EClass" name="ArrayDataType" eSuperTypes="#//model/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This data type represents an array data type and specifies the maximum cardinality of inner data types."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
            eType="#//model/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference points to the definition of the data type."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1"
            eType="#//model/valuetype/NaturalNumber" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveDataType" eSuperTypes="#//model/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This data type represents a primitive data type and refers to the PrimitiveDataType enumeration for specifying the concrete primitive type."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="primitiveType" lowerBound="1"
            eType="#//model/types/PrimitiveTypes" defaultValueLiteral="PrimitiveTypes.VOID">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Refers to the primitive data type as defined by the PrimitiveDataType enumeration. It defines the actual type."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all types that may be used for attributes, parameters, and operations."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="PrimitiveTypes">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Defines all primitive types that may be used in MechatronicUML."/>
        </eAnnotations>
        <eLiterals name="VOID"/>
        <eLiterals name="BOOLEAN" value="1"/>
        <eLiterals name="BYTE" value="2"/>
        <eLiterals name="SHORT" value="3"/>
        <eLiterals name="INT" value="4"/>
        <eLiterals name="LONG" value="5"/>
        <eLiterals name="DOUBLE" value="6"/>
        <eLiterals name="STRING" value="7"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="connector" nsURI="http://www.fujaba.de/muml/model/connector/0.3.15"
        nsPrefix="connector">
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorEndpoint" abstract="true"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectors" upperBound="-1"
            eType="#//model/connector/Connector" eOpposite="#//model/connector/Connector/connectorEndpoints"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Connector" abstract="true" eSuperTypes="../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorEndpoints"
            lowerBound="2" upperBound="2" eType="#//model/connector/ConnectorEndpoint"
            eOpposite="#//model/connector/ConnectorEndpoint/connectors"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorEndpointInstance" abstract="true"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorInstances"
            upperBound="-1" eType="#//model/connector/ConnectorInstance" eOpposite="#//model/connector/ConnectorInstance/connectorEndpointInstances"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
            eType="#//model/connector/ConnectorEndpoint"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorInstance" abstract="true"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1"
            eType="#//model/connector/Connector"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorEndpointInstances"
            lowerBound="2" upperBound="2" eType="#//model/connector/ConnectorEndpointInstance"
            eOpposite="#//model/connector/ConnectorEndpointInstance/connectorInstances"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteInteractionEndpoint" abstract="true"
          eSuperTypes="#//model/connector/ConnectorEndpoint #//model/behavior/BehavioralElement #//model/constraint/ConstrainableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An interaction point for discrete communication via asynchronous messages. This class generalizes concepts of classes DiscretePort and Role."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sender message interface defines which messages this discrete port specification sends."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes"
            upperBound="-1" eType="#//model/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The receiver message interface defines which messages this discrete port specification receives."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="adaptationBehavior"
            eType="#//model/behavior/Behavior">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this port is a multi-port, this reference points to the real-time statechart that&#xD;&#xA;contains the adaptation behavior of the multi-port.  Then, this real-time statechart &#xD;&#xA;is contained in the only state of the real-time statechart we is obtained by the&#xD;&#xA;reference roleAndAdaptationBehavior.&#xD;&#xA;If this port is a single-port, this reference will be undefined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roleAndAdaptationBehavior"
            eType="#//model/behavior/Behavior">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this port is a multi-port, this reference points to the real-time statechart that&#xD;&#xA;contains the adaptation behavior and the sub-port behavior. Thus, this real-time&#xD;&#xA;statechart only contains one state which embeds the real-time statecharts&#xD;&#xA;specifying the adaptation behavior and the sub-port behavior."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1"
            eType="#//model/valuetype/Range" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The cardinality of a port specifies how many instances of a port are allowed to exist at runtime."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteInteractionEndpointInstance"
          abstract="true" eSuperTypes="#//model/connector/ConnectorEndpointInstance"/>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteSingleInteractionEndpointInstance"
          abstract="true" eSuperTypes="#//model/connector/DiscreteInteractionEndpointInstance">
        <eStructuralFeatures xsi:type="ecore:EReference" name="multiInteractionEndpointInstance"
            eType="#//model/connector/DiscreteMultiInteractionEndpointInstance" eOpposite="#//model/connector/DiscreteMultiInteractionEndpointInstance/subInteractionEndpointInstances"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="next" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"
            eOpposite="#//model/connector/DiscreteSingleInteractionEndpointInstance/previous"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="previous" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"
            eOpposite="#//model/connector/DiscreteSingleInteractionEndpointInstance/next"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteMultiInteractionEndpointInstance"
          abstract="true" eSuperTypes="#//model/connector/DiscreteInteractionEndpointInstance">
        <eStructuralFeatures xsi:type="ecore:EReference" name="subInteractionEndpointInstances"
            upperBound="-1" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"
            eOpposite="#//model/connector/DiscreteSingleInteractionEndpointInstance/multiInteractionEndpointInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="These are all sub-interaction endpoint instances of the multi-interaction endpoint instance. The sub-interaction endpoint instances are&#xD;&#xA;represented by DiscreteSingleInteractionEndpointInstances. This reference may only be used if the corresponding &#xD;&#xA;DiscreteInteractionEndpoint has an upper bound greater 1 in its cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="first" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="last" eType="#//model/connector/DiscreteSingleInteractionEndpointInstance"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="valuetype" nsURI="http://www.fujaba.de/muml/model/valuetype/0.3.13"
        nsPrefix="valueType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Range">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a two-dimensional range specification of an arbitrary model object. It consists of a lower and an upper bound."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LowerBoundMustBeLessOrEqualThanUpperBound"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LowerBoundMustBeLessOrEqualThanUpperBound" value="((not self.lowerBound.infinity and not self.upperBound.infinity) implies (self.lowerBound.value &lt;= self.upperBound.value))&#xA;and (self.lowerBound.infinity implies self.upperBound.infinity)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" lowerBound="1"
            eType="#//model/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The lower bound of this cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" lowerBound="1"
            eType="#//model/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The upper bound of this cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TimeValue" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eOperations name="toString" eType="ecore:EDataType platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="// Return value concatenated with unit in lowercase.&#xA;StringBuffer sb = new StringBuffer();&#xA;sb.append(value.toString());&#xA;sb.append(' ');&#xA;sb.append(unit.toString().toLowerCase());&#xA;return sb.toString(); "/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
            eType="#//model/valuetype/NaturalNumber" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="unit" eType="#//model/valuetype/TimeUnit"
            unsettable="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NaturalNumber">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents either a natural number or infinity."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValueGreaterOrEqualZero"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValueGreaterOrEqualZero" value="self.value >= 0"/>
        </eAnnotations>
        <eOperations name="setValue">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Set the value to the value of the given parameter."/>
            <details key="body" value="if (value == null || value.equals(&quot;*&quot;)) {&#xA;&#x9;setInfinity(true);&#xA;&#x9;return;&#xA;}&#xA;&#xA;// Convert to long, if string cannot be parsed, set infinity.&#xA;long longValue;&#xA;try {&#xA;&#x9;longValue = Long.parseLong(value);&#xA;} catch (NumberFormatException e) {&#xA;&#x9;setInfinity(true);&#xA;&#x9;return;&#xA;}&#xA;&#xA;// Call setValue(long) outsite of catch block, so that the NumberFormatException&#xA;// indicating negative numbers is not catched.&#xA;setValue(longValue);"/>
          </eAnnotations>
          <eParameters name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eOperations name="toString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This operation yields the value of this natural number in a string representation."/>
            <details key="body" value="if (isInfinity()) {&#xA;&#x9;return &quot;*&quot;;&#xA;}&#xA;return Long.toString(value);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (o instanceof NaturalNumber) {&#xD;&#xA;&#x9;NaturalNumber naturalNumber = (NaturalNumber) o;&#xD;&#xA;&#x9;// Value of infinity must be equal&#xD;&#xA;&#x9;if (isInfinity() != naturalNumber.isInfinity()) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// If both are not infinite, make sure their value is identical.&#xD;&#xA;&#x9;if (!isInfinity() &amp;&amp; (naturalNumber.getValue() != getValue())) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="o" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"
            defaultValueLiteral="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value of this natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="infinity" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Determins whether this natural number represents infinity."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="TimeUnit" instanceClassName="java.util.concurrent.TimeUnit"/>
    </eSubpackages>
    <eSubpackages name="behavior" nsURI="http://www.fujaba.de/muml/model/behavior/0.3.14"
        nsPrefix="behavior">
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="BehavioralElement" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all elements that have a behavior."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="behavior" eType="#//model/behavior/Behavior"
            eOpposite="#//model/behavior/Behavior/behavioralElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The real-time statechart that defines the behavior of this behavioral element."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Behavior" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all elements that represent a behavior. &#xD;&#xA;Known sub-classes: AbstractRealtimeStatechart"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="behavioralElement"
            eType="#//model/behavior/BehavioralElement" eOpposite="#//model/behavior/BehavioralElement/behavior">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The behavioral element this statechart belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1"
            eType="#//model/behavior/Operation" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A behavior may define a set of Operations as signatures of helper functions. These operations&#xD;&#xA;may be called by the behavior specification and may access the attributes of&#xD;&#xA;the behavior specification. The Operations are contained in the behavior."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="variables" upperBound="-1"
            eType="#//model/behavior/Variable" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A behavior may define a set of Attributes in order to store data. The attributes&#xD;&#xA;may be used by the operations of the behavior and the behavior specification itself.&#xD;&#xA;The attributes are contained in the behavior."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Variable" eSuperTypes="#//model/behavior/TypedNamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Implementation of an Attribute of a behavior which has a certain type."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An operation specifies a behavior that can be called with a list of concrete parameters and may return a return value."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" lowerBound="1"
            eType="#//model/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The type of the return value of this operation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="implementations" upperBound="-1"
            eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/Expression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The implementation for this operation. MechatronicUML supports the annotation of multiple implementations for an operation to support different target languages."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1"
            eType="#//model/behavior/Parameter" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#//model/behavior/TypedNamedElement ../../org.storydriven.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This is a general representation of a Parameter which is by all model elements&#xD;&#xA;that receive parameters. Examples include operations, message types, and synchronization channels.&#xD;&#xA;A parameter defines a data type."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParameterBinding" eSuperTypes="../../org.storydriven.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A parameter binding associates a parameter with a concrete value which is bound to this parameter by an invocation. As an example, an operation defines a set of parameters. A call of this operation needs to provide concrete values for the parameters which are defined by a parameter binding. The value is represented by an expression."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" lowerBound="1"
            eType="#//model/behavior/Parameter">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The parameter to which the value needs to be associated."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1"
            eType="ecore:EClass ../../org.storydriven.core/model/core.ecore#//expressions/Expression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value which is associated with the parameter. The value is defined by an expression."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypedNamedElement" abstract="true"
          eSuperTypes="../../org.storydriven.core/model/core.ecore#//NamedElement">
        <eStructuralFeatures xsi:type="ecore:EReference" name="dataType" eType="#//model/types/DataType"/>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
