[comment encoding = UTF-8 /]
[module PSMQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/hardware/1.0/')]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]

[**
 * @param hardware port
*/]
[query public getName(port : HWPortInstance) : String = 
	getName(port.name) 
/]


[**
 * returns the IdentifierName (C-Macro definition) for a given RefinedStructuredResource (ECU)
 * @param rsri the RefinedStructuredResource
 * @return the IdentifierVarialbeName for the given RSRI
*/]
[query public getIdentifierVariableName (rsri: RefinedStructuredResourceInstance) : String = 
'ECU_'+rsri.getName().toUpperCase()/]

[query public getName(rsri : RefinedStructuredResourceInstance) : String =
	rsri.oclAsType(StructuredResourceInstance).name.getName().toLowerFirst()	
/]


[**
 * computes all messages, that are used in the whole codegen-model (the complete system)
 * @param codegen a codegen-model
 * @return Set of all messages used in the given codegen model
*/]
[query public getAllUsedMessages (codegen: CodGenAllocation) : Set(MessageType) = 
let receiverMessages:Set(MessageType) = codegen.eAllContents(RefinedStructuredResourceInstance).allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(receiverMessageTypes)->asSet() in
let senderMessages:Set(MessageType) = codegen.eAllContents(RefinedStructuredResourceInstance).allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(senderMessageTypes)->asSet() in
receiverMessages->union(senderMessages)->asOrderedSet()
 /]

[**
 * computes all messages, that are used on a specific ECU.
 * this means all messages, which are sent or can be received by a given ECU
 * @param rsri the ECU
 * @return Set of all messages used in the given codegen model
*/]
[query public getAllUsedMessagesForECU (rsri: RefinedStructuredResourceInstance) : Set(MessageType) = 
let receiverMessages:Set(MessageType) = rsri.allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(receiverMessageTypes)->asSet() in
let senderMessages:Set(MessageType) = rsri.allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(senderMessageTypes)->asSet() in
receiverMessages->union(senderMessages)->asOrderedSet()
 /]

[**
 * computes an (ordered) set of all DiscretePortInstances of a given codegen-model (the complete system)
 * @param codegen the codegen-model
 * @return Set of all DiscretePortInstances
*/]
[query public getAllDiscretePortInstances (codegen: CodGenAllocation) : Set(DiscretePortInstance) = 
codegen.eAllContents(ComponentInstance)->collect(portInstances)->asOrderedSet() /]


[**
 * returns the send-function-name for a given network interface
 * this function can be used to send a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the send-function without brackets and parameters
*/]
[query public getSendMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_send'/]

[**
 * returns the receive-function-name for a given network interface
 * this function can be used to receive a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the receive-function without brackets and parameters
*/]
[query public getReceiveMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_receive'/]

[**
 * returns the init-function-name for a given network interface
 * this function can be used to initialize this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the init-function without brackets and parameters
*/]
[query public getInitMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_init'/]
