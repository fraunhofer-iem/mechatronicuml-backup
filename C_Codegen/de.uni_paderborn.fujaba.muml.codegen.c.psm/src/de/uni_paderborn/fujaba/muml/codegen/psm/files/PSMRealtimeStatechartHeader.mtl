[comment encoding = UTF-8 /]
[**
 * The documentation of the module RealtimeStatechartHeader.
 */]
[module PSMRealtimeStatechartHeader('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/') 
extends de::uni_paderborn::fujaba::muml::codegen::c::files::RealtimeStatechartHeader]

[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]


[**
 * Generates the enum for the statechart.
 * 
 * @param statechart
*/]
[template public variables (comp: Component, rtsc: RealtimeStatechart)]
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
/** 
 * @brief This enum represents the States of the Realtime-StateChart: [rtsc.getName()/]
 */
	typedef enum {
				[for (state : State | rtsc.states) separator (',')]
			[getStateNames(state)/]	
		[/for]
	}[getClassName(rtsc, true)/];


	/**
	 * 
	 * @brief Description of the Realtime-StateChart: [rtsc.getName()/]
	 * @details This struct represents the  Realtime-StateChart: [rtsc.getName()/] and its States
	 */
struct [getClassName(rtsc)/] {	
		[comment Member variable for the parent component. /]	
		[comp.getClassName()/] * parentComponent;/**< A pointer to the parent ComponentInstance of Type: [comp.getClassName()/] , which has this Realtime-StateChart as its behavior */			


					[getClassName(rtsc, true)/] [getVariableName(rtsc)/];/**< The current State of the Realtime-StateChart: [rtsc.getName()/] */
		[comment Member variables for the current state of each region. /]	

		[for (region : Region | rtsc.eAllContents(Region))]
			[getClassName(rtsc, true)/] [getVariableName(region.embeddedStatechart)/];/**< Represents the state of region: [region.getName()/] */
		[/for]

		bool_t [rtsc.getExecutionVerifierName()/];/**< Execution Verifier of RTSC: [rtsc.getName()/]. This variable is used to ensure that a RTSC is executed only once per execution cycle */
		[for (region : Region | rtsc.eAllContents(Region))]
			bool_t [region.embeddedStatechart.getExecutionVerifierName()/];/**< Execution Verifier of RTSC: [region.getName()/]. This variable is used to ensure that a RTSC is executed only once per execution cycle */
		[/for]
	
		[comment Member variables for the clocks of each region. /]
		[for (clock : Clock | rtsc.eAllContents(Clock))]
			Clock [getVariableName(clock)/];/**< The Clock: [clock.getName()/] */
		[/for]
	
		[comment Member variables for the variables of each region. /]	
		[for (var : Variable | rtsc.eAllContents(Variable))] 
			[getTypeName(var)/] [getVariableName(var)/];/**< The Realtime-StateChart Variable: [var.getName()/] of Type: [var.dataType.name/] */
		[/for]
	
		[for (port : Port | comp.ports) ? (oclIsKindOf(HybridPort))]
			[let hPort : HybridPort = port.oclAsType(HybridPort)]
				[hPort.dataType.getTypeName()/] [hPort.getVariableName()/];
			[/let]		
		[/for]

[if (rtsc.oclIsKindOf(ParameterizedRealtimeStatechart))]
			[let prtsc : ParameterizedRealtimeStatechart = rtsc.oclAsType(ParameterizedRealtimeStatechart)]
				[for (para : RealtimeStatechartParameter | prtsc.allParameters)]
					[if (para.oclIsKindOf(APICallParameter))]
					[let apiOp : Operation = para.oclAsType(Operation)]
						[apiOp.returnType.getTypeName()/] (*[apiOp.getMethodName()/])([for (p : Parameter | apiOp.parameters) separator (',')][p.dataType.getTypeName()/][/for]); /**< A Function Pointer to the API-Call: [apiOp.getName()/] */
					[/let]
					[/if]
				[/for]
			[/let]
		[/if]

	} ;
[/template]



