[comment encoding = UTF-8 /]
[**
 * The documentation of the module HybridPort.
 */]
[module ContinuousPorts('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]

[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]
[**
 * The documentation of the template generateHybridPortFiles.
 * @param aHybridPort
 */]
[template public generateContinuousPortFiles(CIs : OrderedSet(ComponentInstance), path : String)]
	[generateContinuousPortHeaderFile(CIs, path)/]
	[generateContinuousPortClassFile(CIs, path)/]

[/template]


[template private includes(cic : ComponentInstanceConfiguration)]

#include "../lib/types.h"
[/template]

[template public generateContinuousPortHeaderFile(CIs : OrderedSet(ComponentInstance), path : String)]
[file (path +'continuousComponents/ContImplementations.h',false, 'UTF-8')]


[for (ci: ComponentInstance | CIs) ? (ci.componentType.componentKind = ComponentKind::CONTINUOUS_COMPONENT)]
[for (port : PortInstance | ci.portInstances) ? (oclIsKindOf(ContinuousPortInstance))]
	[let cpi  :ContinuousPortInstance = port.oclAsType(ContinuousPortInstance)]
	[if (cpi.portType.oclAsType(ContinuousPort).inPort)]
	void [cpi.getWriteMethod()/]([cpi.portType.oclAsType(ContinuousPort).dataType.getTypeName()/] value);
	[else]
	[cpi.portType.oclAsType(ContinuousPort).dataType.getTypeName()/] [getReadMethod(cpi)/]();
	[/if]
	[/let]
[/for]

[/for]
[/file]
[/template]

[template public generateContinuousPortClassFile(CIs : OrderedSet(ComponentInstance), path : String)]

[file (path+'continuousComponents/ContImplementations.c',false, 'UTF-8')]
#include "ContImplementations.h"
/** [protected ('user includes **/')]

/**[/protected]**/
[for (ci: ComponentInstance | CIs) ? (ci.componentType.componentKind = ComponentKind::CONTINUOUS_COMPONENT)]
[for (port : PortInstance | ci.portInstances) ? (oclIsKindOf(ContinuousPortInstance))]
	[let cpi  :ContinuousPortInstance = port.oclAsType(ContinuousPortInstance)]
	[if (cpi.portType.oclAsType(ContinuousPort).inPort)]
	void [cpi.getWriteMethod()/]([cpi.portType.oclAsType(ContinuousPort).dataType.getTypeName()/] value){
	/** [protected (cpi.getWriteMethod()+' **/')] 

	/**[/protected]**/

}
	[else]
	[cpi.portType.oclAsType(ContinuousPort).dataType.getTypeName()/] [getReadMethod(cpi)/](){
	/** [protected (cpi.getReadMethod()+' **/')]

	/**[/protected]**/
	
	//default return
	return [cpi.portType.oclAsType(ContinuousPort).dataType.getDefaultValue()/];
}
	[/if]
	[/let]
[/for]

[/for]
[/file]
[/template]