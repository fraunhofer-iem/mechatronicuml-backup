[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module middlewareQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/hardware/1.0/')]

[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::actionlanguage::expression]


[query public getIdentifierVariableName (pi: DiscretePortInstance) : String = 
'PORT_'+pi.componentInstance.getName().toUpperCase()+pi.componentInstance.componentType.getName().toUpperCase()+pi.getName().toUpperCase()/]

[query public getIdentifierVariableName (msgT: MessageType) : String = 
'MESSAGE_'+msgT.getName().toUpperCase()/]

[query public getStructName(msgType : MessageType) : String = 
	msgType.getName() + msgType.repository.getName() +'Message'
/]

[**
 * This query returns the Protobuf-Embedded-C specific Unmarshallaing-function name for a given
 * message type. This function is not defined by the middleware, but by the protobuf-files, 
 * which are generated during the code generation process.
 * It returns only the name for the function, you have to add brackets and parameters
 * 
 * @param msgT a message type
 * @return the protobuf unmarshalling function
*/]
[query public getUnmarshallingMethodName (msgT: MessageType) : String = 
msgT.getVariableName()+'_read_delimited_from'/]

[**
 * This query returns the Protobuf-Embedded-C specific marshallaing-function name for a given
 * message type. This function is not defined by the middleware, but by the protobuf-files, 
 * which are generated during the code generation process.
 * It returns only the name for the function, you have to add brackets and parameters
 * 
 * @param msgT a message type
 * @return the protobuf marshalling function
*/]
[query public getMarshallingMethodName (msgT: MessageType) : String = 
msgT.getVariableName()+'_write_delimited_to'/]


[query public getMethodName(op : Operation) : String =
	op.getName()	
/]

[**
 * returns the send-function-name for a given network interface
 * this function can be used to send a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the send-function without brackets and parameters
*/]
[query public getSendMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_send'/]

[**
 * returns the receive-function-name for a given network interface
 * this function can be used to receive a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the receive-function without brackets and parameters
*/]
[query public getReceiveMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_receive'/]

[**
 * returns the init-function-name for a given network interface
 * this function can be used to initialize this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the init-function without brackets and parameters
*/]
[query public getInitMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_init'/]
