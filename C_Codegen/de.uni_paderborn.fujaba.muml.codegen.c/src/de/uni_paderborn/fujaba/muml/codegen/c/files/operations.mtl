[comment encoding = UTF-8 /]
[**
 * The documentation of the module operations.
 */]
[module operations('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0')]

[import de::uni_paderborn::fujaba::muml::codegen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::queries::modelQueries]
[import de::uni_paderborn::fujaba::muml::codegen::c::actionlanguage::operation_queries]
[import de::uni_paderborn::fujaba::muml::codegen::c::actionlanguage::expression]
[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationFiles(CIs : OrderedSet(ComponentInstance), path : String, useSubDir: Boolean)]
[let atomics : Sequence(AtomicComponent) = (CIs.eAllContents(AtomicComponentInstance).componentType)->select(c | c.componentKind = ComponentKind::SOFTWARE_COMPONENT)]
[let allOperations : Set(Operation) = atomics.behavior.oclAsType(RealtimeStatechart).eAllContents(Operation)->asSet()]
	[generateOperationHeader(allOperations, path, useSubDir)/]
	[generateOperationClass(allOperations, path, useSubDir)/]
[/let]
[/let]

[/template]


[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationHeader(allOperations : Set(Operation), path : String, useSubDir: Boolean)]

[file (path+getFileName4Operations(true, useSubDir), false, 'UTF-8')]
#ifndef OPERATIONS_H_
#define OPERATIONS_H_
#ifdef __cplusplus
  extern "C" {
#endif

	#include "[if (useSubDir)]../types/[/if]standardTypes.h"
	#include "[if (useSubDir)]../types/[/if]customTypes.h"
[for (operation : Operation | allOperations)]
/**
 * @brief Implementation stub of operation [operation.name/]
 * @details This function shall contain the implementation of the operation [operation.name/]. Up to now, there is no generated implementation. It has to be written by the developer.
 *
 * [for (p: Parameter | operation.parameters)]@param [p.getName()/] [/for]
 */
[operation.returnType.getTypeName()/] [operation.getName()/]([for (p: Parameter | operation.parameters) separator (', ')][p.dataType.getTypeName()/] [p.getName()/][/for]);
[/for]
#ifdef __cplusplus
  }
#endif
#endif /*OPERATIONS_H_ */
[/file]
[/template]

[**
 * The documentation of the template generateOperationFile.
 * @param anAbsoluteDeadline
 */]
[template public generateOperationClass(allOperations : Set(Operation), path : String, useSubDir: Boolean)]

[file (path+getFileName4Operations(false, useSubDir), false, 'UTF-8')]
#include "operations.h"
/** [protected ('user includes **/')] 

/**[/protected]**/
[for (operation : Operation | allOperations)]

[operation.returnType.getTypeName()/] [operation.getName()/]([for (p: Parameter | operation.parameters) separator (', ')][p.dataType.getTypeName()/] [p.getName()/][/for]){

[if (operation.implementations->at(1).oclIsUndefined())]
/** [protected (operation.getName()+' **/')] 
//add your implementation here
	[if not (operation.returnType.name = 'VOID' or operation.returnType.name = 'void')]
		//default return value
	[operation.returnType.name/]
		return [getDefaultReturn(operation)/];
	[/if]
/**[/protected]**/
[else]
	[operation.returnType.getTypeName()/] ret;
	[generateExpression(operation.implementations->at(1),'')/]
	return [operation.getOperationOutputVariableName()/];
[/if]

}


[/for]
[/file]
[/template]

