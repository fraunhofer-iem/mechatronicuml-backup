[comment encoding = UTF-8 /]
[**
 * This is the main module of the transformation.
 * It contains the templates, which call subtemplates to generate code for a specific target
 * platform. It also calls the middleware templates.
 * 
 * The templates of this module will be integrated into the new structure for C-based code generators
 * in the MechatronicUML Tool Suite.
 */]
[module main('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/swplatform/0.4.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/')]


[import de::uni_paderborn::fujaba::muml::model::gen::c::platform::commandLine::main]
[import de::uni_paderborn::fujaba::muml::model::gen::c::platform::commandLine::make]
[import de::uni_paderborn::fujaba::muml::model::gen::c::platform::nxtOSEK::main]
[import de::uni_paderborn::fujaba::muml::model::gen::c::platform::nxtOSEK::make]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::OIL]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::RealtimeStatechart]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::RealtimeStatechartHeader]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::modelQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::middlewareQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::componentHeader]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::component]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::Message]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::operations]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::apiCalls]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::CIC]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::CICHeader]
[import de::uni_paderborn::fujaba::muml::model::gen::c::middleware::GlobalIdentifier]
[import de::uni_paderborn::fujaba::muml::model::gen::c::middleware::Core]
[import de::uni_paderborn::fujaba::muml::model::gen::c::middleware::InternalLogic]
[import de::uni_paderborn::fujaba::muml::model::gen::c::middleware::NetworkInterfaces]

[**
 * Generates a main file. This file contains code to create, initialize
 * and execute a given MUML model for standard C99 command line tools.
 * @param codgen the created codegen model
 */]
[template public generateANSIC(codgen : CodGenAllocation)]
[comment @main/]
		[comment generate source-code for every ECU /]
[for (rsri : RefinedStructuredResourceInstance | codgen.hpic.eAllContents(RefinedStructuredResourceInstance))]
[comment create files for every component type/]
[generateOSFiles(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment create files for every component type/]
[generateTypeFiles(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment craeate files for RTSCs/]
[generateRTSCFiles(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment create Operation files/]
[generateOperationFiles(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment create APICall files/]
[generateAPICallFiles(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment create message file/]
[generateProtobufMessageFile(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]

[comment create header for using protobuf/]
[generateProtobufNewHeader(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/')/]


[comment create CIC configuration file/]
[generateCICHeader(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/') /]
[generateCICClass(rsri,rsri.oclAsType(StructuredResourceInstance).name+'/') /]

[comment create middleware impl files/]
[generateMiddleware(rsri, rsri.oclAsType(StructuredResourceInstance).name+'/', codgen)/]
[/for]

[/template]





[**
 * In this templates, the templates for the target specific code are called.
 * After merging this generator into the MechatronicUML Tool Suite, this template will not be necessary 
 * anymore and can be deleted.
 */]
[template public generateOSFiles(rsri : RefinedStructuredResourceInstance, path: String)]
[comment]
possbile values for 'targetPlatform' are: 'C' or 'nxtOSEK'
[/comment]
[let targetPlatform : String = 'nxtOSEK']


[if (targetPlatform = 'nxtOSEK')]
	[generateNXTOSEKMain(rsri, path)/]
	[generateMakeFileForNXTOSEK(rsri, path)/]
	[generateOILFile(rsri, path)/]
[elseif (targetPlatform = 'C99')]
	[generateMakeFileForC(rsri, path)/]
	[generateCMain(rsri,path)/]
[else]
	not defined
[/if]
[generateOSDefinitionFile(targetPlatform, path)/]
[/let]
[/template]


[**
 * Creates a header and an implementation file for every component (type), used on the ECU
 * @param modelElementCategory
 */]
[template public generateTypeFiles(rsri : RefinedStructuredResourceInstance, path:String)]
[for (component : Component | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType)->asSet())]
	[generate_ComponentHeader(component, path)/]
	[generate_ComponentClass(component, path)/]
[/for]
[/template]


[**
 * Creates a header and an implementation file for every realtime statechart, which is the behavior of
 * an atomic component of the model
 * @param modelElementCategory
 */]
[template public generateRTSCFiles(rsri : RefinedStructuredResourceInstance, path:String) ]
[for (comp: AtomicComponent | (rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance).componentType.oclAsType(AtomicComponent))->asSet())]
	[generate_RTSCHeader(comp, comp.behavior.oclAsType(RealtimeStatechart), path)/]
	[generate_RTSC(comp, comp.behavior.oclAsType(RealtimeStatechart), path)/]
[/for]
[/template]

[**
 * Generates a header and a implementation file for Operations.
 * All operations of all RTSCs of one ECU are generated to the same file.
 * @param rsri the home ECU
 * @param path the current path for generating files
 */]
[template public generateOperationFiles(rsri : RefinedStructuredResourceInstance, path:String)]

[let atomics : Sequence(AtomicComponentInstance) = rsri.eAllContents(AtomicComponentInstance)]
[let allOperations : Set(Operation) = ((atomics.componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).eAllContents(Operation)->asSet()) - (atomics.componentType.oclAsType(AtomicComponent).behavior.oclAsType(RealtimeStatechart).eAllContents(APICall)->asSet()))]

[generateOperationHeader(allOperations->asSequence(), path)/]
[generateOperationClass(allOperations->asSequence(), path)/]
[/let]
[/let]
[/template]

[**
 * Generates all middleware files for the MechatronicUML specific middleware for a specific ECU
 * @param rsri the home ECU
 * @param path the current path for generating files
 * @param cgm the corresponding codegen model (e.g. neede for routing)
 */]
[template public generateMiddleware(rsri : RefinedStructuredResourceInstance, path:String, cgm : CodGenAllocation)]
	[generateMiddlewareCoreFiles(rsri, path)/]
	[generateMiddlewareILFiles(rsri, path, cgm)/]
	[generateNetworkInterfaces(rsri, path)/]
	[generateGlobalIdentifierFiles(cgm, path)/]
[/template]

[**
 * Generates all API-Calls for a specific ECU.
 * Similar to operations.
 * @param rsri the home ECU
 * @param path the current path for generating files
 */]
[template public generateAPICallFiles(rsri : RefinedStructuredResourceInstance, path:String)]
[generateApiImplementationHeader(rsri, path)/]
[generateApiImplementationClass(rsri, path)/]
[/template]

[**
 * Creates a file, which contains the used operating system.
 * defines a C-Macro for the operating system, which can be used in other implementations files,
 * if OS specific code has to be generated.
 * @param os String, which describes the name of the used operating system
 */]
[template public generateOSDefinitionFile(os : String, path:String)]
[file (path+'OS.h', false, 'UTF-8')]
		#define [os.getOSMacroIdentifier()/]
	[/file]
[/template]

