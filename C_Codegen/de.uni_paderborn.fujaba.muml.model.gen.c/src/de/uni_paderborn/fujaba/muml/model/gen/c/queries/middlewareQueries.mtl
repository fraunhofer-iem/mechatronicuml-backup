[comment encoding = UTF-8 /]
[**
 * This query modul contains helper queries for the middleware.
 * This contains String-Queries and model-Queries. 
 * 
 * After merging this generator into the codegen of the MechatronicUML Tool Suite,
 * these queries should be merged into the String and Model-Queries.
 */]
[module middlewareQueries('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/swplatform/0.4.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/')]

[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::actionlanguage::expression]

[**
 * returns true, if the given apiCall is an initialize-call for the sensor
 * @param apiCall a API-Call
*/]
[query public isInitFunction(apiCall : APICallParameterBinding) : Boolean =
(apiCall.getMethodName().substring(apiCall.getMethodName().toString().size()-6).toLowerFirst() = 'initApi')
/]

[**
 * returns the IdentifierName (C-Macro definition) for a given DiscretePortInstance
 * @param pi a DiscretePortInstance
 * @return the IdentifierVarialbeName for the given DiscretePortInstance
*/]
[query public getIdentifierVariableName (pi: DiscretePortInstance) : String = 
'PORT_'+pi.componentInstance.getName().toUpperCase()+pi.componentInstance.componentType.getName().toUpperCase()+pi.getName().toUpperCase()/]

[**
 * returns the IdentifierName (C-Macro definition) for a given RefinedStructuredResource (ECU)
 * @param rsri the RefinedStructuredResource
 * @return the IdentifierVarialbeName for the given RSRI
*/]
[query public getIdentifierVariableName (rsri: RefinedStructuredResourceInstance) : String = 
'ECU_'+rsri.getName().toUpperCase()/]

[**
 * returns the IdentifierName (C-Macro definition) for a given MessageType
 * @param msgT the MessageType
 * @return the IdentifierVarialbeName for the given MessageType
*/]
[query public getIdentifierVariableName (msgT: MessageType) : String = 
'MESSAGE_'+msgT.getVariableName().toUpperCase()/]

[**
 * returns the C-type name for a given MessageType
 * @param msgT the message type
 * @return C-type for a the given message type
*/]
[query public getTypeName (msgT: MessageType) : String = 
msgT.getVariableName()+'_Message'/]

[**
 * returns the name of the configure-function for a given RefinedStructuredResourceInstance (ECU)
 * e.g. configureMyECUNameCIC . After using this template, you have to complete the signature of the function
 * by providing brackets and a semicolon. This functions expects no parameters.
 * @param rsri the RefinedStructuredResource
 * @return the name of the configure-function for the given RefinedStructuredResourceInstance (ECU)
*/]
[query public getConfigureMethodName (rsri: RefinedStructuredResourceInstance) : String = 
'configure'+rsri.getName().toUpperFirst()+'CIC'/]

[**
 * returns the name of the initialize-function for a given RefinedStructuredResourceInstance (ECU)
 * e.g. initializeMyECUNameCIC . After using this template, you have to complete the signature of the function
 * by providing brackets and a semicolon. This functions expects no parameters.
 * @param rsri the RefinedStructuredResource
 * @return the name of the initialize-function for the given RefinedStructuredResourceInstance (ECU)
*/]
[query public getInitializeMethodName (rsri: RefinedStructuredResourceInstance) : String = 
'initialize'+rsri.getName().toUpperFirst()+'CIC'/]

[**
 * This query returns the Protobuf-Embedded-C specific Unmarshallaing-function name for a given
 * message type. This function is not defined by the middleware, but by the protobuf-files, 
 * which are generated during the code generation process.
 * It returns only the name for the function, you have to add brackets and parameters
 * 
 * @param msgT a message type
 * @return the protobuf unmarshalling function
*/]
[query public getUnmarshallingMethodName (msgT: MessageType) : String = 
msgT.getVariableName()+'_read_delimited_from'/]

[**
 * This query returns the Protobuf-Embedded-C specific marshallaing-function name for a given
 * message type. This function is not defined by the middleware, but by the protobuf-files, 
 * which are generated during the code generation process.
 * It returns only the name for the function, you have to add brackets and parameters
 * 
 * @param msgT a message type
 * @return the protobuf marshalling function
*/]
[query public getMarshallingMethodName (msgT: MessageType) : String = 
msgT.getVariableName()+'_write_delimited_to'/]

[**
 * returns the send-function-name for a given network interface
 * this function can be used to send a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the send-function without brackets and parameters
*/]
[query public getSendMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_send'/]

[**
 * returns the receive-function-name for a given network interface
 * this function can be used to receive a message via this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the receive-function without brackets and parameters
*/]
[query public getReceiveMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_receive'/]

[**
 * returns the init-function-name for a given network interface
 * this function can be used to initialize this network interface.
 * after calling this template, you have to add brackets and parameters to complete the signature for
 * this function
 * @param hwp the network interface
 * @return the name of the init-function without brackets and parameters
*/]
[query public getInitMethodName (hwp: HWPort) : String = 
'networkInterface_'+hwp.name.getName().toUpperFirst()+'_init'/]

[**
 * computes all messages, that are used in the whole codegen-model (the complete system)
 * @param codegen a codegen-model
 * @return Set of all messages used in the given codegen model
*/]
[query public getAllUsedMessages (codegen: CodGenAllocation) : Set(MessageType) = 
let receiverMessages:Set(MessageType) = codegen.eAllContents(RefinedStructuredResourceInstance).allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(receiverMessageTypes)->asSet() in
let senderMessages:Set(MessageType) = codegen.eAllContents(RefinedStructuredResourceInstance).allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(senderMessageTypes)->asSet() in
receiverMessages->union(senderMessages)->asOrderedSet()
 /]

[**
 * computes all messages, that are used on a specific ECU.
 * this means all messages, which are sent or can be received by a given ECU
 * @param rsri the ECU
 * @return Set of all messages used in the given codegen model
*/]
[query public getAllUsedMessagesForECU (rsri: RefinedStructuredResourceInstance) : Set(MessageType) = 
let receiverMessages:Set(MessageType) = rsri.allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(receiverMessageTypes)->asSet() in
let senderMessages:Set(MessageType) = rsri.allocatedAtomicComponentInstances.portInstances.oclAsType(DiscretePortInstance)->collect(senderMessageTypes)->asSet() in
receiverMessages->union(senderMessages)->asOrderedSet()
 /]

[**
 * computes an (ordered) set of all DiscretePortInstances of a given codegen-model (the complete system)
 * @param codegen the codegen-model
 * @return Set of all DiscretePortInstances
*/]
[query public getAllDiscretePortInstances (codegen: CodGenAllocation) : Set(DiscretePortInstance) = 
codegen.eAllContents(ComponentInstance)->collect(portInstances)->asOrderedSet() /]