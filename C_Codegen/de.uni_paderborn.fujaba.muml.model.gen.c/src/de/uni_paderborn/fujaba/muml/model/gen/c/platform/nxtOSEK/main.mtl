

[comment encoding = UTF-8 /]
[**
 * module contains all templates to generate a main.c for nxtOSEK
 */]
[module main('http://www.fujaba.de/muml/connector/0.4.0', 'http://www.fujaba.de/muml/behavior/0.4.0',
				'http://www.storydriven.org/core/0.3.1',
				'http://www.fujaba.de/muml/actionlanguage/0.4.0',
				'http://www.fujaba.de/muml/msgtype/0.4.0',
				'http://www.fujaba.de/muml/types/0.4.0',
				'http://www.fujaba.de/modelinstance/0.4.0',
				'http://www.fujaba.de/muml/component/0.4.0',
				'http://www.fujaba.de/muml/instance/0.4.0',
				'http://www.fujaba.de/muml/realtimestatechart/0.4.0',
				'http://www.fujaba.de/muml/hardware/1.0/',
				'http://www.fujaba.de/muml/psm/codegen/0.1.0',
				'http://www.fujaba.de/muml/swplatform/0.4.0/',
				'http://www.fujaba.de/muml/psm/0.4.0/')]


[import de::uni_paderborn::fujaba::muml::model::gen::c::platform::nxtOSEK::make]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::OIL]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::RealtimeStatechart]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::RealtimeStatechartHeader]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::stringQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::modelQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::queries::middlewareQueries]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::componentHeader]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::component]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::Message]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::operations]
[import de::uni_paderborn::fujaba::muml::model::gen::c::files::CIC]

[**
 * Generates a main file. This file contains code to create, initialize
 * and execute a given MUML model on nxtOSEK.
 * @param aModelElementCategory
 */]
[template public generateNXTOSEKMain(rsri : RefinedStructuredResourceInstance, path: String)]
[comment create 'main.c'/]
[file(path+'main.c',false,'UTF-8')]
/** \mainpage Documentation of the generated Code for ECU: [rsri.getName()/]
 * 	The generated Code is documented for Doxygen @link http://www.doxygen.org @endlink.
 * 	Thus, a useful Documentation can be generated via Doxygen in html, latex,...!
 *
 *
 * \tableofcontents
 *
*/
[includes(rsri)/]


//declaring the middleware
Middleware *mw;


[comment declaration of tasks for OSEK/]
//declare used OSEK tasks and counter
DeclareTask(Task_Main);
DeclareTask(Task_initModel);
DeclareTask(Task_MsgExchange);
[comment generates OSEK task declarations/]
[for (ci : AtomicComponentInstance | rsri.allocatedAtomicComponentInstances)]
DeclareTask([getTaskName(ci)/]);
[/for]




[comment OSEK methods/]
/* nxtOSEK hook to be invoked from an ISR in category 2 */
void user_1ms_isr_type2(void){ /* do nothing */ }

/* LEJOS OSEK hooks */
void ecrobot_device_initialize()
{
	[comment initialize all network interfaces/]
//initialize all network interfaces
[for(ni: HWPortInstance | rsri.oclAsType(StructuredResourceInstance).hwports.oclAsType(HWPortInstance)->select(p|p.isNetworkInterface))]
[ni.getInitMethodName()/]();
[/for]

//initialize sensors and actors
[for (ci : AtomicComponentInstance | rsri.allocatedAtomicComponentInstances)]
	[for (apiCall : APICallParameterBinding | ci.eAllContents(APICallParameterBinding)) ? (isInitFunction(apiCall))]
	[apiCall.getMethodName()/]();
	[/for]
[/for]
}
void ecrobot_device_terminate()
{
	[comment TODO/]
}
TASK(Task_initModel){
	mw = Middleware_create();
	[getConfigureMethodName(rsri)/]();
	//initialize model
	[getInitializeMethodName(rsri)/]();
//initialize all network interfaces
NetworkInterface_init(mw->intern, NetworkInterface_intern_init, NetworkInterface_intern_send, NetworkInterface_intern_receive);
[for(ni: HWPortInstance | rsri.oclAsType(StructuredResourceInstance).hwports.oclAsType(HWPortInstance)->select(p|p.isNetworkInterface))]
	NetworkInterface_init(mw->[ni.getName()/],[ni.getInitMethodName()/], [ni.getSendMethodName()/], [ni.getReceiveMethodName()/]);
[/for]
ChainTask(Task_Main);
}


TASK(Task_Main){

	//Activate a task per component instance
	[for (ci : AtomicComponentInstance | rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance))]
		ActivateTask([ci.getTaskName()/]);
	[/for]
	ActivateTask(Task_MsgExchange);


TerminateTask();
}

[for (ci : AtomicComponentInstance | rsri.allocatedAtomicComponentInstances.oclAsType(AtomicComponentInstance))]
TASK([ci.getTaskName()/]){
	[ci.componentType.getProcessMethodName()/](mw->[ci.getVariableName()/]);
	TerminateTask();
}	
[/for]

TASK(Task_MsgExchange){
	    MW_NIsendMessages();
		MW_NIreceiveMessages();
        MW_deliverReceivedMessages();
ChainTask(Task_Main);
}
[/file]
[/template]


[template private generateTask(ci : AtomicComponentInstance)]

[/template]



[template private includes(rsri : RefinedStructuredResourceInstance)]
//general includes
#include <stdio.h>
#include <stdlib.h>
//nxtOSEK includes
#include "kernel.h"
#include "kernel_id.h"
#include "ecrobot_interface.h"
#include "Configuration.h"
#include "lib/NetworkInterface.h"
#include "Middleware/NetworkInterfaceImplementation.h"
#include "Middleware/MiddlewareCore.h"
[/template]