/*
 * generated by Xtext 2.11.0
 */
package de.fraunhofer.iem.formatting2

import com.google.inject.Inject
import de.fraunhofer.iem.projectPlanning.Assignment
import de.fraunhofer.iem.projectPlanning.Capability
import de.fraunhofer.iem.projectPlanning.Employee
import de.fraunhofer.iem.projectPlanning.Project
import de.fraunhofer.iem.projectPlanning.ProjectPlan
import de.fraunhofer.iem.projectPlanning.Rating
import de.fraunhofer.iem.services.ProjectPlanningGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class ProjectPlanningFormatter extends AbstractFormatter2 {
	
	@Inject extension ProjectPlanningGrammarAccess

	def dispatch void format(ProjectPlan projectPlan, extension IFormattableDocument document) {
		for (Capability capability : projectPlan.getCapabilities()) {
			capability.format;
		}
		for (Employee employee : projectPlan.getEmployees()) {
			employee.format;
		}
		for (Project project : projectPlan.getProjects()) {
			project.format;
		}
		for (Rating rating : projectPlan.getRatings()) {
			rating.format;
		}
		for (Assignment assignment : projectPlan.getAssignments()) {
			assignment.format;
		}
		projectPlan.regionFor.keyword("capabilities:").append[newLine]
		projectPlan.regionFor.keyword("employees:").append[newLine]
		projectPlan.regionFor.keyword("projects:").append[newLine]
	
	}

	
		def dispatch void format(Assignment assignment, extension IFormattableDocument document) {
		assignment.regionFor.keyword(";").append[newLine]
	}
	
	
		def dispatch void format(Project project, extension IFormattableDocument document) {
		project.interior[indent]
		project.regionFor.keyword(":").append[newLine]
		project.regionFor.keyword(";").append[newLine]
		project.regionFor.keyword("requiresResources:").prepend[newLine]
		project.regionFor.keyword("requiresCapabilities:").prepend[newLine]
	}
	
		def dispatch void format(Employee employee, extension IFormattableDocument document) {
		for (Rating rating : employee.getRatings()) {
			rating.format;
		}
		employee.interior[indent]
		employee.regionFor.keyword(":").append[newLine]
		employee.regionFor.keyword(";").append[newLine]
		employee.regionFor.keyword("ratesCapabilities:").prepend[newLine]
		employee.regionFor.keyword("hasCapabilities:").prepend[newLine]
		employee.regionFor.keyword("hasResources:").prepend[newLine]
	
	}

	def dispatch void format(Rating rating, extension IFormattableDocument document) {
		rating.regionFor.keyword(";").append[newLine]
	}
	
	def dispatch void format(Capability capability, extension IFormattableDocument document) {
	}
	
	// TODO: implement for 
}
