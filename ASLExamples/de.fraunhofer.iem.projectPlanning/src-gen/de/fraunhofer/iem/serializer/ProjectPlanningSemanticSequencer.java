/*
 * generated by Xtext 2.11.0
 */
package de.fraunhofer.iem.serializer;

import com.google.inject.Inject;
import de.fraunhofer.iem.projectPlanning.Assignment;
import de.fraunhofer.iem.projectPlanning.Capability;
import de.fraunhofer.iem.projectPlanning.Employee;
import de.fraunhofer.iem.projectPlanning.Project;
import de.fraunhofer.iem.projectPlanning.ProjectPlan;
import de.fraunhofer.iem.projectPlanning.ProjectPlanningPackage;
import de.fraunhofer.iem.projectPlanning.Rating;
import de.fraunhofer.iem.services.ProjectPlanningGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ProjectPlanningSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProjectPlanningGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjectPlanningPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectPlanningPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case ProjectPlanningPackage.CAPABILITY:
				sequence_Capability(context, (Capability) semanticObject); 
				return; 
			case ProjectPlanningPackage.EMPLOYEE:
				sequence_Employee(context, (Employee) semanticObject); 
				return; 
			case ProjectPlanningPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case ProjectPlanningPackage.PROJECT_PLAN:
				sequence_ProjectPlan(context, (ProjectPlan) semanticObject); 
				return; 
			case ProjectPlanningPackage.RATING:
				sequence_Rating(context, (Rating) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (project=[Project|ID] employee=[Employee|ID])
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectPlanningPackage.Literals.ASSIGNMENT__PROJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectPlanningPackage.Literals.ASSIGNMENT__PROJECT));
			if (transientValues.isValueTransient(semanticObject, ProjectPlanningPackage.Literals.ASSIGNMENT__EMPLOYEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectPlanningPackage.Literals.ASSIGNMENT__EMPLOYEE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getProjectProjectIDTerminalRuleCall_0_0_1(), semanticObject.eGet(ProjectPlanningPackage.Literals.ASSIGNMENT__PROJECT, false));
		feeder.accept(grammarAccess.getAssignmentAccess().getEmployeeEmployeeIDTerminalRuleCall_4_0_1(), semanticObject.eGet(ProjectPlanningPackage.Literals.ASSIGNMENT__EMPLOYEE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Capability returns Capability
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Capability(ISerializationContext context, Capability semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectPlanningPackage.Literals.CAPABILITY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectPlanningPackage.Literals.CAPABILITY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCapabilityAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Employee returns Employee
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         hasResource=INT 
	 *         hasCapabilities+=[Capability|ID]* 
	 *         hasCapabilities+=[Capability|ID]* 
	 *         ratings+=Rating* 
	 *         ratings+=Rating*
	 *     )
	 */
	protected void sequence_Employee(ISerializationContext context, Employee semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProjectPlan returns ProjectPlan
	 *
	 * Constraint:
	 *     (
	 *         capabilities+=Capability* 
	 *         capabilities+=Capability* 
	 *         employees+=Employee* 
	 *         employees+=Employee* 
	 *         projects+=Project* 
	 *         projects+=Project* 
	 *         ratings+=Rating* 
	 *         assignments+=Assignment*
	 *     )
	 */
	protected void sequence_ProjectPlan(ISerializationContext context, ProjectPlan semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (name=ID requiresResources=INT requiresCapabilities+=[Capability|ID]* requiresCapabilities+=[Capability|ID]*)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rating returns Rating
	 *
	 * Constraint:
	 *     (capability=[Capability|ID] rating=INT)
	 */
	protected void sequence_Rating(ISerializationContext context, Rating semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectPlanningPackage.Literals.RATING__CAPABILITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectPlanningPackage.Literals.RATING__CAPABILITY));
			if (transientValues.isValueTransient(semanticObject, ProjectPlanningPackage.Literals.RATING__RATING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectPlanningPackage.Literals.RATING__RATING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRatingAccess().getCapabilityCapabilityIDTerminalRuleCall_0_0_1(), semanticObject.eGet(ProjectPlanningPackage.Literals.RATING__CAPABILITY, false));
		feeder.accept(grammarAccess.getRatingAccess().getRatingINTTerminalRuleCall_2_0(), semanticObject.getRating());
		feeder.finish();
	}
	
	
}
