/*
 * generated by Xtext 2.10.0
 */
package de.fraunhofer.iem.serializer;

import com.google.inject.Inject;
import de.fraunhofer.iem.services.ProjectPlanningGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ProjectPlanningSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ProjectPlanningGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Employee_CommaKeyword_3_2_0_p;
	protected AbstractElementAlias match_Employee_CommaKeyword_4_2_0_p;
	protected AbstractElementAlias match_Employee_HasCapabilitiesKeyword_3_0_q;
	protected AbstractElementAlias match_Employee_RatesCapabilitiesKeyword_4_0_q;
	protected AbstractElementAlias match_ProjectPlan_CommaKeyword_0_2_0_p;
	protected AbstractElementAlias match_ProjectPlan_CommaKeyword_1_2_0_p;
	protected AbstractElementAlias match_ProjectPlan_CommaKeyword_2_2_0_p;
	protected AbstractElementAlias match_Project_CommaKeyword_3_2_0_p;
	protected AbstractElementAlias match_Project_RequiresCapabilitiesKeyword_3_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ProjectPlanningGrammarAccess) access;
		match_Employee_CommaKeyword_3_2_0_p = new TokenAlias(true, false, grammarAccess.getEmployeeAccess().getCommaKeyword_3_2_0());
		match_Employee_CommaKeyword_4_2_0_p = new TokenAlias(true, false, grammarAccess.getEmployeeAccess().getCommaKeyword_4_2_0());
		match_Employee_HasCapabilitiesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getEmployeeAccess().getHasCapabilitiesKeyword_3_0());
		match_Employee_RatesCapabilitiesKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getEmployeeAccess().getRatesCapabilitiesKeyword_4_0());
		match_ProjectPlan_CommaKeyword_0_2_0_p = new TokenAlias(true, false, grammarAccess.getProjectPlanAccess().getCommaKeyword_0_2_0());
		match_ProjectPlan_CommaKeyword_1_2_0_p = new TokenAlias(true, false, grammarAccess.getProjectPlanAccess().getCommaKeyword_1_2_0());
		match_ProjectPlan_CommaKeyword_2_2_0_p = new TokenAlias(true, false, grammarAccess.getProjectPlanAccess().getCommaKeyword_2_2_0());
		match_Project_CommaKeyword_3_2_0_p = new TokenAlias(true, false, grammarAccess.getProjectAccess().getCommaKeyword_3_2_0());
		match_Project_RequiresCapabilitiesKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getProjectAccess().getRequiresCapabilitiesKeyword_3_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Employee_CommaKeyword_3_2_0_p.equals(syntax))
				emit_Employee_CommaKeyword_3_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Employee_CommaKeyword_4_2_0_p.equals(syntax))
				emit_Employee_CommaKeyword_4_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Employee_HasCapabilitiesKeyword_3_0_q.equals(syntax))
				emit_Employee_HasCapabilitiesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Employee_RatesCapabilitiesKeyword_4_0_q.equals(syntax))
				emit_Employee_RatesCapabilitiesKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProjectPlan_CommaKeyword_0_2_0_p.equals(syntax))
				emit_ProjectPlan_CommaKeyword_0_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProjectPlan_CommaKeyword_1_2_0_p.equals(syntax))
				emit_ProjectPlan_CommaKeyword_1_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProjectPlan_CommaKeyword_2_2_0_p.equals(syntax))
				emit_ProjectPlan_CommaKeyword_2_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Project_CommaKeyword_3_2_0_p.equals(syntax))
				emit_Project_CommaKeyword_3_2_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Project_RequiresCapabilitiesKeyword_3_0_q.equals(syntax))
				emit_Project_RequiresCapabilitiesKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     hasCapabilities+=[Capability|ID] (ambiguity) hasCapabilities+=[Capability|ID]
	 *     hasResource=INT 'hasCapabilities:' (ambiguity) hasCapabilities+=[Capability|ID]
	 */
	protected void emit_Employee_CommaKeyword_3_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     hasCapabilities+=[Capability|ID] 'ratesCapabilities:' (ambiguity) ratings+=Rating
	 *     hasResource=INT 'hasCapabilities:'? 'ratesCapabilities:' (ambiguity) ratings+=Rating
	 *     ratings+=Rating (ambiguity) ratings+=Rating
	 */
	protected void emit_Employee_CommaKeyword_4_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'hasCapabilities:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     hasResource=INT (ambiguity) 'ratesCapabilities:' ','+ ratings+=Rating
	 *     hasResource=INT (ambiguity) 'ratesCapabilities:' ratings+=Rating
	 *     hasResource=INT (ambiguity) 'ratesCapabilities:'? ';' (rule end)
	 */
	protected void emit_Employee_HasCapabilitiesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'ratesCapabilities:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     hasCapabilities+=[Capability|ID] (ambiguity) ';' (rule end)
	 *     hasResource=INT 'hasCapabilities:'? (ambiguity) ';' (rule end)
	 */
	protected void emit_Employee_RatesCapabilitiesKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'capabilities:' (ambiguity) capabilities+=Capability
	 *     capabilities+=Capability (ambiguity) capabilities+=Capability
	 */
	protected void emit_ProjectPlan_CommaKeyword_0_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'capabilities:' ';' 'employees:' (ambiguity) employees+=Employee
	 *     capabilities+=Capability ';' 'employees:' (ambiguity) employees+=Employee
	 *     employees+=Employee (ambiguity) employees+=Employee
	 */
	protected void emit_ProjectPlan_CommaKeyword_1_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'capabilities:' ';' 'employees:' 'projects:' (ambiguity) projects+=Project
	 *     capabilities+=Capability ';' 'employees:' 'projects:' (ambiguity) projects+=Project
	 *     employees+=Employee 'projects:' (ambiguity) projects+=Project
	 *     projects+=Project (ambiguity) projects+=Project
	 */
	protected void emit_ProjectPlan_CommaKeyword_2_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','+
	 *
	 * This ambiguous syntax occurs at:
	 *     requiresCapabilities+=[Capability|ID] (ambiguity) requiresCapabilities+=[Capability|ID]
	 *     requiresResources=INT 'requiresCapabilities:' (ambiguity) requiresCapabilities+=[Capability|ID]
	 */
	protected void emit_Project_CommaKeyword_3_2_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'requiresCapabilities:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     requiresResources=INT (ambiguity) ';' (rule end)
	 */
	protected void emit_Project_RequiresCapabilitiesKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
