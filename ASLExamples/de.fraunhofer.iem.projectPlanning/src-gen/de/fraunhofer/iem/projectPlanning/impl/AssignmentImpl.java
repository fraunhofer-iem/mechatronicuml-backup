/**
 * generated by Xtext 2.11.0
 */
package de.fraunhofer.iem.projectPlanning.impl;

import de.fraunhofer.iem.projectPlanning.Assignment;
import de.fraunhofer.iem.projectPlanning.Employee;
import de.fraunhofer.iem.projectPlanning.Project;
import de.fraunhofer.iem.projectPlanning.ProjectPlanningPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Assignment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.iem.projectPlanning.impl.AssignmentImpl#getProject <em>Project</em>}</li>
 *   <li>{@link de.fraunhofer.iem.projectPlanning.impl.AssignmentImpl#getEmployee <em>Employee</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AssignmentImpl extends MinimalEObjectImpl.Container implements Assignment
{
  /**
   * The cached value of the '{@link #getProject() <em>Project</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProject()
   * @generated
   * @ordered
   */
  protected Project project;

  /**
   * The cached value of the '{@link #getEmployee() <em>Employee</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEmployee()
   * @generated
   * @ordered
   */
  protected Employee employee;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssignmentImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProjectPlanningPackage.Literals.ASSIGNMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project getProject()
  {
    if (project != null && project.eIsProxy())
    {
      InternalEObject oldProject = (InternalEObject)project;
      project = (Project)eResolveProxy(oldProject);
      if (project != oldProject)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProjectPlanningPackage.ASSIGNMENT__PROJECT, oldProject, project));
      }
    }
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project basicGetProject()
  {
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProject(Project newProject)
  {
    Project oldProject = project;
    project = newProject;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectPlanningPackage.ASSIGNMENT__PROJECT, oldProject, project));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Employee getEmployee()
  {
    if (employee != null && employee.eIsProxy())
    {
      InternalEObject oldEmployee = (InternalEObject)employee;
      employee = (Employee)eResolveProxy(oldEmployee);
      if (employee != oldEmployee)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE, oldEmployee, employee));
      }
    }
    return employee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Employee basicGetEmployee()
  {
    return employee;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEmployee(Employee newEmployee)
  {
    Employee oldEmployee = employee;
    employee = newEmployee;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE, oldEmployee, employee));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.ASSIGNMENT__PROJECT:
        if (resolve) return getProject();
        return basicGetProject();
      case ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE:
        if (resolve) return getEmployee();
        return basicGetEmployee();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.ASSIGNMENT__PROJECT:
        setProject((Project)newValue);
        return;
      case ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE:
        setEmployee((Employee)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.ASSIGNMENT__PROJECT:
        setProject((Project)null);
        return;
      case ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE:
        setEmployee((Employee)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.ASSIGNMENT__PROJECT:
        return project != null;
      case ProjectPlanningPackage.ASSIGNMENT__EMPLOYEE:
        return employee != null;
    }
    return super.eIsSet(featureID);
  }

} //AssignmentImpl
