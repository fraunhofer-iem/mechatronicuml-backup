/**
 * generated by Xtext 2.10.0
 */
package de.fraunhofer.iem.projectPlanning.impl;

import de.fraunhofer.iem.projectPlanning.Capability;
import de.fraunhofer.iem.projectPlanning.Project;
import de.fraunhofer.iem.projectPlanning.ProjectPlanningPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Project</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.fraunhofer.iem.projectPlanning.impl.ProjectImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.fraunhofer.iem.projectPlanning.impl.ProjectImpl#getRequiresResources <em>Requires Resources</em>}</li>
 *   <li>{@link de.fraunhofer.iem.projectPlanning.impl.ProjectImpl#getRequiresCapabilities <em>Requires Capabilities</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjectImpl extends MinimalEObjectImpl.Container implements Project
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRequiresResources() <em>Requires Resources</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiresResources()
   * @generated
   * @ordered
   */
  protected static final int REQUIRES_RESOURCES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRequiresResources() <em>Requires Resources</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiresResources()
   * @generated
   * @ordered
   */
  protected int requiresResources = REQUIRES_RESOURCES_EDEFAULT;

  /**
   * The cached value of the '{@link #getRequiresCapabilities() <em>Requires Capabilities</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRequiresCapabilities()
   * @generated
   * @ordered
   */
  protected EList<Capability> requiresCapabilities;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ProjectPlanningPackage.Literals.PROJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectPlanningPackage.PROJECT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getRequiresResources()
  {
    return requiresResources;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRequiresResources(int newRequiresResources)
  {
    int oldRequiresResources = requiresResources;
    requiresResources = newRequiresResources;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ProjectPlanningPackage.PROJECT__REQUIRES_RESOURCES, oldRequiresResources, requiresResources));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Capability> getRequiresCapabilities()
  {
    if (requiresCapabilities == null)
    {
      requiresCapabilities = new EObjectResolvingEList<Capability>(Capability.class, this, ProjectPlanningPackage.PROJECT__REQUIRES_CAPABILITIES);
    }
    return requiresCapabilities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.PROJECT__NAME:
        return getName();
      case ProjectPlanningPackage.PROJECT__REQUIRES_RESOURCES:
        return getRequiresResources();
      case ProjectPlanningPackage.PROJECT__REQUIRES_CAPABILITIES:
        return getRequiresCapabilities();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.PROJECT__NAME:
        setName((String)newValue);
        return;
      case ProjectPlanningPackage.PROJECT__REQUIRES_RESOURCES:
        setRequiresResources((Integer)newValue);
        return;
      case ProjectPlanningPackage.PROJECT__REQUIRES_CAPABILITIES:
        getRequiresCapabilities().clear();
        getRequiresCapabilities().addAll((Collection<? extends Capability>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.PROJECT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ProjectPlanningPackage.PROJECT__REQUIRES_RESOURCES:
        setRequiresResources(REQUIRES_RESOURCES_EDEFAULT);
        return;
      case ProjectPlanningPackage.PROJECT__REQUIRES_CAPABILITIES:
        getRequiresCapabilities().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ProjectPlanningPackage.PROJECT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ProjectPlanningPackage.PROJECT__REQUIRES_RESOURCES:
        return requiresResources != REQUIRES_RESOURCES_EDEFAULT;
      case ProjectPlanningPackage.PROJECT__REQUIRES_CAPABILITIES:
        return requiresCapabilities != null && !requiresCapabilities.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", requiresResources: ");
    result.append(requiresResources);
    result.append(')');
    return result.toString();
  }

} //ProjectImpl
