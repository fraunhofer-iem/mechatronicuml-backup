/**
 * generated by Xtext 2.11.0
 */
package de.fraunhofer.iem.formatting2;

import com.google.inject.Inject;
import de.fraunhofer.iem.seminarOrga.Assignment;
import de.fraunhofer.iem.seminarOrga.Preference;
import de.fraunhofer.iem.seminarOrga.Rating;
import de.fraunhofer.iem.seminarOrga.Seminar;
import de.fraunhofer.iem.seminarOrga.Student;
import de.fraunhofer.iem.seminarOrga.Supervise;
import de.fraunhofer.iem.seminarOrga.Supervisor;
import de.fraunhofer.iem.seminarOrga.Topic;
import de.fraunhofer.iem.services.SeminarOrgaGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class SeminarOrgaFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SeminarOrgaGrammarAccess _seminarOrgaGrammarAccess;
  
  protected void _format(final Seminar seminar, @Extension final IFormattableDocument document) {
    EList<Supervisor> _supervisors = seminar.getSupervisors();
    for (final Supervisor supervisor : _supervisors) {
      document.<Supervisor>format(supervisor);
    }
    EList<Student> _students = seminar.getStudents();
    for (final Student student : _students) {
      document.<Student>format(student);
    }
    EList<Topic> _topics = seminar.getTopics();
    for (final Topic topic : _topics) {
      document.<Topic>format(topic);
    }
    EList<Preference> _preferences = seminar.getPreferences();
    for (final Preference preference : _preferences) {
      document.<Preference>format(preference);
    }
    EList<Rating> _ratings = seminar.getRatings();
    for (final Rating rating : _ratings) {
      document.<Rating>format(rating);
    }
    EList<Supervise> _supervises = seminar.getSupervises();
    for (final Supervise supervise : _supervises) {
      document.<Supervise>format(supervise);
    }
    EList<Assignment> _assignments = seminar.getAssignments();
    for (final Assignment assignment : _assignments) {
      document.<Assignment>format(assignment);
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(seminar).keyword(";"), _function);
  }
  
  protected void _format(final Assignment assignment, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(assignment).keyword(";"), _function);
  }
  
  protected void _format(final Supervise supervise, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(supervise).keyword(";"), _function);
  }
  
  protected void _format(final Topic topic, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(topic).keyword(";"), _function);
  }
  
  protected void _format(final Rating rating, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(rating).keyword(";"), _function);
  }
  
  protected void _format(final Student student, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(student).keyword(";"), _function);
  }
  
  protected void _format(final Preference preference, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(preference).keyword(";"), _function);
  }
  
  public void format(final Object assignment, final IFormattableDocument document) {
    if (assignment instanceof XtextResource) {
      _format((XtextResource)assignment, document);
      return;
    } else if (assignment instanceof Assignment) {
      _format((Assignment)assignment, document);
      return;
    } else if (assignment instanceof Preference) {
      _format((Preference)assignment, document);
      return;
    } else if (assignment instanceof Rating) {
      _format((Rating)assignment, document);
      return;
    } else if (assignment instanceof Seminar) {
      _format((Seminar)assignment, document);
      return;
    } else if (assignment instanceof Student) {
      _format((Student)assignment, document);
      return;
    } else if (assignment instanceof Supervise) {
      _format((Supervise)assignment, document);
      return;
    } else if (assignment instanceof Topic) {
      _format((Topic)assignment, document);
      return;
    } else if (assignment instanceof EObject) {
      _format((EObject)assignment, document);
      return;
    } else if (assignment == null) {
      _format((Void)null, document);
      return;
    } else if (assignment != null) {
      _format(assignment, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(assignment, document).toString());
    }
  }
}
