/*
 * generated by Xtext 2.11.0
 */
grammar InternalSeminar;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.fraunhofer.iem.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fraunhofer.iem.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fraunhofer.iem.services.SeminarGrammarAccess;

}

@parser::members {

 	private SeminarGrammarAccess grammarAccess;

    public InternalSeminarParser(TokenStream input, SeminarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Seminar";
   	}

   	@Override
   	protected SeminarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSeminar
entryRuleSeminar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSeminarRule()); }
	iv_ruleSeminar=ruleSeminar
	{ $current=$iv_ruleSeminar.current; }
	EOF;

// Rule Seminar
ruleSeminar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='supervisors:'
			{
				newLeafNode(otherlv_0, grammarAccess.getSeminarAccess().getSupervisorsKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSeminarAccess().getSupervisorsSupervisorParserRuleCall_0_1_0());
					}
					lv_supervisors_1_0=ruleSupervisor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSeminarRule());
						}
						add(
							$current,
							"supervisors",
							lv_supervisors_1_0,
							"de.fraunhofer.iem.Seminar.Supervisor");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getSeminarAccess().getCommaKeyword_0_2_0());
					}
				)+
				(
					(
						{
							newCompositeNode(grammarAccess.getSeminarAccess().getSupervisorsSupervisorParserRuleCall_0_2_1_0());
						}
						lv_supervisors_3_0=ruleSupervisor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSeminarRule());
							}
							add(
								$current,
								"supervisors",
								lv_supervisors_3_0,
								"de.fraunhofer.iem.Seminar.Supervisor");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getSeminarAccess().getSemicolonKeyword_0_3());
			}
		)*
		(
			otherlv_5='students:'
			{
				newLeafNode(otherlv_5, grammarAccess.getSeminarAccess().getStudentsKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSeminarAccess().getStudentsStudentParserRuleCall_1_1_0());
					}
					lv_students_6_0=ruleStudent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSeminarRule());
						}
						add(
							$current,
							"students",
							lv_students_6_0,
							"de.fraunhofer.iem.Seminar.Student");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					otherlv_7=','
					{
						newLeafNode(otherlv_7, grammarAccess.getSeminarAccess().getCommaKeyword_1_2_0());
					}
				)+
				(
					(
						{
							newCompositeNode(grammarAccess.getSeminarAccess().getStudentsStudentParserRuleCall_1_2_1_0());
						}
						lv_students_8_0=ruleStudent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSeminarRule());
							}
							add(
								$current,
								"students",
								lv_students_8_0,
								"de.fraunhofer.iem.Seminar.Student");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getSeminarAccess().getSemicolonKeyword_1_3());
			}
		)*
		(
			otherlv_10='topics:'
			{
				newLeafNode(otherlv_10, grammarAccess.getSeminarAccess().getTopicsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSeminarAccess().getTopicsTopicParserRuleCall_2_1_0());
					}
					lv_topics_11_0=ruleTopic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSeminarRule());
						}
						add(
							$current,
							"topics",
							lv_topics_11_0,
							"de.fraunhofer.iem.Seminar.Topic");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					otherlv_12=','
					{
						newLeafNode(otherlv_12, grammarAccess.getSeminarAccess().getCommaKeyword_2_2_0());
					}
				)+
				(
					(
						{
							newCompositeNode(grammarAccess.getSeminarAccess().getTopicsTopicParserRuleCall_2_2_1_0());
						}
						lv_topics_13_0=ruleTopic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSeminarRule());
							}
							add(
								$current,
								"topics",
								lv_topics_13_0,
								"de.fraunhofer.iem.Seminar.Topic");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_14=';'
			{
				newLeafNode(otherlv_14, grammarAccess.getSeminarAccess().getSemicolonKeyword_2_3());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSeminarAccess().getPreferencesPreferenceParserRuleCall_3_0());
				}
				lv_preferences_15_0=rulePreference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeminarRule());
					}
					add(
						$current,
						"preferences",
						lv_preferences_15_0,
						"de.fraunhofer.iem.Seminar.Preference");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSeminarAccess().getSupervisesSuperviseParserRuleCall_4_0());
				}
				lv_supervises_16_0=ruleSupervise
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeminarRule());
					}
					add(
						$current,
						"supervises",
						lv_supervises_16_0,
						"de.fraunhofer.iem.Seminar.Supervise");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSeminarAccess().getAssignmentsAssignmentParserRuleCall_5_0());
				}
				lv_assignments_17_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSeminarRule());
					}
					add(
						$current,
						"assignments",
						lv_assignments_17_0,
						"de.fraunhofer.iem.Seminar.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSupervisor
entryRuleSupervisor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSupervisorRule()); }
	iv_ruleSupervisor=ruleSupervisor
	{ $current=$iv_ruleSupervisor.current; }
	EOF;

// Rule Supervisor
ruleSupervisor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSupervisorAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSupervisorRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStudent
entryRuleStudent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStudentRule()); }
	iv_ruleStudent=ruleStudent
	{ $current=$iv_ruleStudent.current; }
	EOF;

// Rule Student
ruleStudent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStudentAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStudentRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTopic
entryRuleTopic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopicRule()); }
	iv_ruleTopic=ruleTopic
	{ $current=$iv_ruleTopic.current; }
	EOF;

// Rule Topic
ruleTopic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTopicAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTopicRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulePreference
entryRulePreference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreferenceRule()); }
	iv_rulePreference=rulePreference
	{ $current=$iv_rulePreference.current; }
	EOF;

// Rule Preference
rulePreference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPreferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPreferenceAccess().getStudentStudentCrossReference_0_0());
				}
			)
		)
		otherlv_1='prefers'
		{
			newLeafNode(otherlv_1, grammarAccess.getPreferenceAccess().getPrefersKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPreferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPreferenceAccess().getTopicTopicCrossReference_2_0());
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getPreferenceAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleSupervise
entryRuleSupervise returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuperviseRule()); }
	iv_ruleSupervise=ruleSupervise
	{ $current=$iv_ruleSupervise.current; }
	EOF;

// Rule Supervise
ruleSupervise returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuperviseRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSuperviseAccess().getSupervisorSupervisorCrossReference_0_0());
				}
			)
		)
		otherlv_1='supervises'
		{
			newLeafNode(otherlv_1, grammarAccess.getSuperviseAccess().getSupervisesKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuperviseRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSuperviseAccess().getTopicTopicCrossReference_2_0());
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getSuperviseAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getStudentStudentCrossReference_0_0());
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getIsKeyword_1());
		}
		otherlv_2='assigned'
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getAssignedKeyword_2());
		}
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getAssignmentAccess().getToKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getTopicTopicCrossReference_4_0());
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getAssignmentAccess().getSemicolonKeyword_5());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
