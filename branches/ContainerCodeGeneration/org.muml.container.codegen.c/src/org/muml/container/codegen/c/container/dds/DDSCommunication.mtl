[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given Container.
 */]
[module DDSCommunication('http://www.muml.org/pim/connector/1.0.0',
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0',
				'http://www.opendds.org/modeling/schemas/DCPS/1.0',
				'http://www.opendds.org/modeling/schemas/Core/1.0',
				'http://www.opendds.org/modeling/schemas/Application/1.0',
				'http://www.opendds.org/modeling/schemas/Topics/1.0')/]


[import org::muml::codegen::componenttype::c::queries::ContainerQueries/]


[import org::muml::container::codegen::c::queries::containerStringQueries/]
[import org::muml::codegen::componenttype::c::queries::stringQueries/]
[import org::muml::codegen::componenttype::c::queries::modelQueries/]

[query public nameOfDDSStruct(msg:MessageType) : String =
'DDS_'+getName(msg)+'_'+getName(msg.repository)
/]

[query public nameOfDDSStruct(port : DirectedTypedPort) : String = 
'DDS_'+port.component.name.toUpper()+'_'+port.name.toUpper() /]



[template public generateDeclarationsForSending_DDS(dummy:OclAny)]
	DDS_Publisher* publisher;
	DDS_DataWriter* writer;
[/template]

[template public generateDeclarationsForReceiving_DDS(dummy:OclAny)]
	DDS_Subscriber* subscriber;
	DDS_DataReader* reader;
	struct DDS_SampleInfo sample_info;
	DDS_ReturnCode_t retcode;
[/template]

[comment Methods for DiscretePorts and their Messages/]

[comment fixme, currently we find the dataWriter based on the name of the struct to which a MUML-Message is Mapped, which is fixed in the RTI CodeGeneration and QVTo Transformation /]
[comment FIXME: here we DO NOT take the writers Name as Input, but the name of the DDS Struct
 Since the RTI-Codegen Generates the Writers based on the name of the DataType/]
[comment alternative is that, the QVTo transformation ensures correct names and then that name is taken/]
[template public generateSwitchCaseForSending_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), msg:MessageType)]
	[let writer : DataWriter =portInstanceConfig.publisher.writers->select(w:DataWriter|w.topic.datatype.name.equalsIgnoreCase(msg.nameOfDDSStruct()))->any(true) ]
		case PORT_HANDLE_TYPE_DDS:
			// Find correct dataWriter
			publisher = ((DDSHandle *) port->handle->concreteHandle)->publisher;
			writer = DDS_Publisher_lookup_datawriter(publisher, "[writer.topic.name/]");

			[writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter* concrete_writer = [writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter_narrow(writer);
			//create DDS_Instance to write
			[writer.topic.oclAsType(topics::Topic).datatype.name/] *instance = [writer.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_create_data_ex(DDS_BOOLEAN_TRUE);
			[comment FIXME: make message transformation /]
			//make message transformation
			[generateMessageTransformationSending_DDS(msg)/]
			//write the actual data
			[writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter_write(concrete_writer, instance, &DDS_HANDLE_NIL);
			//delete DDS instance
			[writer.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_delete_data_ex(instance,DDS_BOOLEAN_TRUE);
		break;
	[/let]
[/template]


[comment fixme, currently we find the dataReader based on the name of the struct to which a MUML-Message is Mapped, which is fixed in the RTI CodeGeneration and QVTo Transformation /]
[template public generateSwitchCaseForReceiving_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), msg:MessageType)]
		[let reader : DataReader =portInstanceConfig.subscriber.readers->select(r:DataReader|r.topic.oclAsType(Topic).datatype.name.equalsIgnoreCase(msg.nameOfDDSStruct()))->any(true) ]
		case PORT_HANDLE_TYPE_DDS:
			//find correct dataReader
			//transform DDS Message to MUML Message
			subscriber = ((DDSHandle *) port->handle->concreteHandle)->subscriber;
			reader = DDS_Subscriber_lookup_datareader(subscriber, "[reader.topic.name/]");
			[reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader* concrete_reader = [reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader_narrow(reader);
			//create DDS_Instance to read
			[reader.topic.oclAsType(topics::Topic).datatype.name/] *instance = [reader.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_create_data_ex(DDS_BOOLEAN_TRUE);
			retcode = [reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader_take_next_sample(concrete_reader, instance,
					&sample_info);
			if (retcode == DDS_RETCODE_NO_DATA) {
				return false;
			}
			[comment FIXME: make message transformation /]
			//make message transformation
			[generateMessageTransformationReceiving_DDS(msg)/]
			[comment FIXME: after message trasnformation delte Message FooTypeSupport_delete_data_ex(data,DDS_BOOLEAN_TRUE); /]
			[reader.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_delete_data_ex(instance,DDS_BOOLEAN_TRUE);
			return true;
		break;
	[/let]
[/template]

[template public generateSwitchCaseForMessageExists_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), msg:MessageType)]
		[let reader : DataReader =portInstanceConfig.subscriber.readers->select(r:DataReader|r.topic.oclAsType(Topic).datatype.name.equalsIgnoreCase(msg.nameOfDDSStruct()))->any(true) ]
		case PORT_HANDLE_TYPE_DDS:
			//find correct dataReader
			//transform DDS Message to MUML Message
			subscriber = ((DDSHandle *) port->handle->concreteHandle)->subscriber;
			reader = DDS_Subscriber_lookup_datareader(subscriber, "[reader.topic.name/]");
		//	[msg.nameOfDDSStruct()/]DataReader* concrete_reader = [msg.nameOfDDSStruct()/]DataReader_narrow(reader);
			int availableSamples = 0;
			struct DDS_DataReaderCacheStatus myStatus = DDS_DataReaderCacheStatus_INITIALIZER; 
			retcode = DDS_DataReader_get_datareader_cache_status(reader, &myStatus); 
			if(retcode != DDS_RETCODE_OK)
				return false;
			availableSamples = myStatus.sample_count;
			DDS_DataReaderCacheStatus_finalize(&myStatus);   
			if(availableSamples>0)
				return true;
			else
				return false;
		break;
	[/let]
[/template]

[template public generateMessageTransformationSending_DDS(msg:MessageType)]
	[if (msg.parameters->size()=0)]
		instance->dummy = msg->dummy;
	[/if]
	[for (para : Parameter | msg.parameters)]
		instance->[para.name/] = msg->[para.name/];
	[/for]
[/template]

[template public generateMessageTransformationReceiving_DDS(msg:MessageType)]
	[if (msg.parameters->size()=0)]
		msg->dummy = instance->dummy;
	[/if]
	[for (para : Parameter | msg.parameters)]
		msg->[para.name/] = instance->[para.name/];
	[/for]
[/template]



[comment Methods for DirectedTypedPorts /]

[template public generateSwitchCaseForSending_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), port:DirectedTypedPort)]
	[comment Publisher for DirectedTypedPorts have always by construction only one writer/]
	[let writer : DataWriter =portInstanceConfig.publisher.writers->any(true) ]
		case PORT_HANDLE_TYPE_DDS:
			// Find correct dataWriter
			publisher = ((DDSHandle *) port->handle->concreteHandle)->publisher;
			writer = DDS_Publisher_lookup_datawriter(publisher, "[writer.topic.name/]");
			[writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter* concrete_writer = [writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter_narrow(writer);
			//create DDS_Instance to write
			[writer.topic.oclAsType(topics::Topic).datatype.name/] *instance = [writer.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_create_data_ex(DDS_BOOLEAN_TRUE);
			[comment FIXME: make message transformation /]
			//make message transformation
			instance->value = *msg;
			//write the actual data
			[writer.topic.oclAsType(topics::Topic).datatype.name/]DataWriter_write(concrete_writer, instance, &DDS_HANDLE_NIL);
			//delete DDS instance
			[writer.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_delete_data_ex(instance,DDS_BOOLEAN_TRUE);

		break;
	[/let]
[/template]



[template public generateSwitchCaseForReceiving_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), port:DirectedTypedPort)]
			[comment Subscriber for DirectedTypedPorts have always by construction only one reader/]
			[let reader : DataReader =portInstanceConfig.subscriber.readers->any(true) ]
			case PORT_HANDLE_TYPE_DDS:
			//find correct dataReader
			subscriber = ((DDSHandle *) port->handle->concreteHandle)->subscriber;
			reader = DDS_Subscriber_lookup_datareader(subscriber, "[reader.topic.name/]");
			[reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader* concrete_reader = [reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader_narrow(reader);
			//create DDS_Instance to read
			[reader.topic.oclAsType(topics::Topic).datatype.name/] *instance = [reader.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_create_data_ex(DDS_BOOLEAN_TRUE);
			retcode = [reader.topic.oclAsType(topics::Topic).datatype.name/]DataReader_take_next_sample(concrete_reader, instance,
					&sample_info);
			if (retcode == DDS_RETCODE_NO_DATA) {
				return false;
			}
			[comment FIXME: make message transformation /]
			//make message transformation
			*msg = instance->value;
			[reader.topic.oclAsType(topics::Topic).datatype.name/]TypeSupport_delete_data_ex(instance,DDS_BOOLEAN_TRUE);
															
			[comment FIXME: after message trasnformation delte Message FooTypeSupport_delete_data_ex(data,DDS_BOOLEAN_TRUE); /]
			[comment FIXME: or create DDS Data on Stack and then  FooTypeSupport_initialize_data_ex(data, DDS_BOOLEAN) /]
			return true;
		break;
	[/let]
[/template]

[template public generateSwitchCaseForMessageExists_DDS(portInstanceConfig:Collection(PortInstanceConfiguration_DDS), port:DirectedTypedPort)]
			[comment Subscriber for DirectedTypedPorts have always by construction only one reader/]
			[let reader : DataReader =portInstanceConfig.subscriber.readers->any(true) ]
			case PORT_HANDLE_TYPE_DDS:
			//find correct dataReader
			subscriber = ((DDSHandle *) port->handle->concreteHandle)->subscriber;
			reader = DDS_Subscriber_lookup_datareader(subscriber, "[reader.topic.name/]");
		//	[port.nameOfDDSStruct()/]DataReader* concrete_reader = [port.nameOfDDSStruct()/]DataReader_narrow(reader);
			int availableSamples = 0;
			struct DDS_DataReaderCacheStatus myStatus = DDS_DataReaderCacheStatus_INITIALIZER; 
			retcode = DDS_DataReader_get_datareader_cache_status(reader, &myStatus); 
			if(retcode != DDS_RETCODE_OK)
				return false;
			availableSamples = myStatus.sample_count;
			DDS_DataReaderCacheStatus_finalize(&myStatus);   
			if(availableSamples>0)
				return true;
			else
				return false;
		break;
	[/let]
[/template]

