brakeByWireAllocationSpecification {
	
	include 'platform:/plugin/de.uni_paderborn.fujaba.muml.allocation.language.xtext/operations/OCLContext.ocl'
	
	constraint requiredHardwareResourceInstance allowedECUs {
		descriptors (first, second);
		ocl
			self.getAllSWInstances()->collect(ci |
				-- pass false in order to reduce the number of ilp constraints
				self.allowedECUNames(ci.name, false)->collect(ecu |
					self.allocateToECU(ci, ecu)
				)
			)->asSet()
		;
	}
	
	constraint requiredHardwareResourceInstance communicatingComponents {
		descriptors (c1, e1), (c2, e2);
		ocl
			self.allocateCommunicatingComponentsToConnectedECUs()
		;
	}
	
	constraint requiredHardwareResourceInstance calliperToBrakeECU {
		descriptors (first, second);
		ocl
			-- C1 = Calliper
			self.allocateEmbeddedToPlatformInstance('C1', 'Brake.0')
		;
	}
	
	constraint sameLocation colocateBrakePedalComponents {
		descriptors (first, second);
		ocl
			-- C2 = BrakePedal
			self.colocateSCIAndEmbeddedParts('C2')
		;
	}
	
	context oclcontext::OCLContext
		-- TODO: move into OCLContext.ocl operations file
		def: colocateSCIAndEmbeddedParts(componentName : String) : Set(Tuple(first : instance::ComponentInstance, second : instance::ComponentInstance)) =
			let ci : instance::ComponentInstance = self.getSWInstance(componentName)
			in
			ci->asSet()->product(ci.getAllEmbeddedInstances()->reject(c | c = ci))
			
		def: allowedECUNames(componentName : String) : Set(String) =
			-- calliper component instances
			if componentName = 'sc1' then
				-- temperatureSensor
				Set{'R1.0.1'}
			else if componentName = 'sc2' then
				-- calliper position sensor
				Set{'R2.0.1'}
			else if componentName = 'sc3' then
				-- parking brake actuator
				Set{'R3.0.1'}
			else if componentName = 'sc5' then
				-- calliper clamp actuator
				Set{'R5.0.1'}
			-- brake pedal component instances
			else if componentName = 'sc11' then
				-- pedal position sensor
				Set{'11.0.1'}
			else if componentName = 'sc12' then
				-- brake force sensor
				Set{'12.0.1'}
			else if componentName = 'sc13' then
				-- brake feedback actuator
				Set{'13.0.1'}
			-- wheel component instances
			else if componentName = 'sc7' then
				Set{'R7.0.1'} -- (brake platform)
			-- other sensors (not part of a structured ci)
			else if componentName = 'sc9' then
				Set{'9.0.1'}
			else
				Set{}
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			endif
			
		def: allowedECUNames(componentName : String, allIfNoRestriction : Boolean) : Set(String) =
			let ecuNames : Set(String) = self.allowedECUNames(componentName)
			in
			if ecuNames->isEmpty() and allIfNoRestriction then
				self.getAllHWInstances()->collect(name)
			else
				ecuNames
			endif
			
		-- just for testing	
		def: getAllowedECUs(componentName : String, allIfNoRestriction : Boolean) : Set(hwresourceinstance::ResourceInstance) =
			let ecuNames : Set(String) = self.allowedECUNames(componentName, allIfNoRestriction)
			in
			if ecuNames->isEmpty() and allIfNoRestriction then
				self.getAllHWInstances()
			else
				ecuNames->collect(ecu | self.getECU(ecu))
			endif
			->collect(ecu | ecu.resolveToStructuredResourceInstances())->asSet()
	
	-- playground		
	--constraint sameLocation test {
	--	descriptors (foo, bar);
	--	ocl
			--self.getECU('R1.0.1').getConnectedECUs()->select(oclIsKindOf(hwresourceinstance::StructuredResourceInstance))->asSet()
			--self.getAllSWInstances()->select(not name.oclIsUndefined())
	--		self.componentInstanceConfiguration.getCommunicatingComponents()
	--		
	--	;
	--}
	
	--constraint differentLocation foo {
	--	descriptors (first, second);
	--	ocl
	--		Set{
	--			Tuple{first = self.getSWInstance('sc1'), second = self.getSWInstance('C5')}
	--		}
	--	;
	--}
	
	
	-- reduce the number of constraints a bit
	--constraint requiredHardwareResourceInstance communicatingComponents {
	--	descriptors (c1, e1), (c2, e2);
	--	ocl
	--		let allAllowedECUs : Set(Tuple(c : instance::ComponentInstance, r : Set(hwresourceinstance::ResourceInstance)))
	--		=
	--		self.getAllSWInstances()->collectNested(ci |
	--			Tuple{c = ci, r = self.getAllowedECUs(ci.name, true)}
	--		)
	--		in
	--		self.allocateCommunicatingComponentsToConnectedECUs()
	--			->select(t |
	--				allAllowedECUs->any(t2 | t2.c = t.c1).r->includes(t.e1)
	--				and
	--				allAllowedECUs->any(t2 | t2.c = t.c2).r->includes(t.e2)
	--				--self.getAllowedECUs(t.c2.name, true)->includes(t.e2)
	--			)
	--	;
	--}
}