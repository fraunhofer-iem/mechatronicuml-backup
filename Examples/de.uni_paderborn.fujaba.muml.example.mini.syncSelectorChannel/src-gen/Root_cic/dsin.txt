#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       1                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(261,100)
_dummy
_derdummy
a1.behavior.var1
a1.behavior.var2
a1.behavior.init.nIn
a1.behavior.init.nOut
a1.behavior.init.nSuspend
a1.behavior.init.nResume
a1.behavior.init.nEntry
a1.behavior.init.nExit
a1.behavior.init.initialStep
a1.behavior.init.use_inPort
a1.behavior.init.use_outPort
a1.behavior.init.use_suspend
a1.behavior.init.use_activePort
a1.behavior.init.active
a1.behavior.init.nExit2
a1.behavior.init.nMinBranches
a1.behavior.init.node.suspend
a1.behavior.init.node.resume
a1.behavior.init.newActive
a1.behavior.init.finished
a1.behavior.init.inport_fire
a1.behavior.init.outport_fire
a1.behavior.init.suspend_fire
a1.behavior.init.resume_fire
a1.behavior.init.entry_fire
a1.behavior.init.startTransition
a1.behavior.init.checkOneDelayedTransitionPerLoopIn
a1.behavior.init.firstActive
a1.behavior.init.entryIndices[1]
a1.behavior.init.entryIndices[2]
a1.behavior.init.entry_restart[1]
a1.behavior.init.entry_restart[2]
a1.behavior.init.local_entry[1].fire
a1.behavior.init.local_entry[1].node.suspend
a1.behavior.init.local_entry[1].node.resume
a1.behavior.init.local_entry[1].checkUnaryConnection
a1.behavior.init.local_entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.local_entry[2].fire
a1.behavior.init.local_entry[2].node.suspend
a1.behavior.init.local_entry[2].node.resume
a1.behavior.init.local_entry[2].checkUnaryConnection
a1.behavior.init.local_entry[2].checkOneDelayedTransitionPerLoop
a1.behavior.init.oldActive
a1.behavior.init.entry[1].node.resume
a1.behavior.init.entry[1].checkUnaryConnection
a1.behavior.init.entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.entry[2].node.resume
a1.behavior.init.entry[2].checkUnaryConnection
a1.behavior.init.entry[2].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.nIn
a1.behavior.init.region_1_Region_1.nOut
a1.behavior.init.region_1_Region_1.nSuspend
a1.behavior.init.region_1_Region_1.nResume
a1.behavior.init.region_1_Region_1.nEntry
a1.behavior.init.region_1_Region_1.nExit
a1.behavior.init.region_1_Region_1.initialStep
a1.behavior.init.region_1_Region_1.use_inPort
a1.behavior.init.region_1_Region_1.use_outPort
a1.behavior.init.region_1_Region_1.use_suspend
a1.behavior.init.region_1_Region_1.use_activePort
a1.behavior.init.region_1_Region_1.active
a1.behavior.init.region_1_Region_1.nExit2
a1.behavior.init.region_1_Region_1.nMinBranches
a1.behavior.init.region_1_Region_1.node.resume
a1.behavior.init.region_1_Region_1.newActive
a1.behavior.init.region_1_Region_1.finished
a1.behavior.init.region_1_Region_1.inport_fire
a1.behavior.init.region_1_Region_1.outport_fire
a1.behavior.init.region_1_Region_1.suspend_fire
a1.behavior.init.region_1_Region_1.resume_fire
a1.behavior.init.region_1_Region_1.entry_fire
a1.behavior.init.region_1_Region_1.startTransition
a1.behavior.init.region_1_Region_1.checkOneDelayedTransitionPerLoopIn
a1.behavior.init.region_1_Region_1.firstActive
a1.behavior.init.region_1_Region_1.entryIndices[1]
a1.behavior.init.region_1_Region_1.entry_restart[1]
a1.behavior.init.region_1_Region_1.local_inPort[1].node.resume
a1.behavior.init.region_1_Region_1.local_inPort[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.local_inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.local_entry[1].node.suspend
a1.behavior.init.region_1_Region_1.local_entry[1].node.resume
a1.behavior.init.region_1_Region_1.local_entry[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.local_entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.oldActive
a1.behavior.init.region_1_Region_1.inPort[1].node.resume
a1.behavior.init.region_1_Region_1.inPort[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.entry[1].node.resume
a1.behavior.init.region_1_Region_1.entry[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.S1.nIn
a1.behavior.init.region_1_Region_1.S1.nOut
a1.behavior.init.region_1_Region_1.S1.initialStep
a1.behavior.init.region_1_Region_1.S1.use_activePort
a1.behavior.init.region_1_Region_1.S1.inPort[1].node.resume
a1.behavior.init.region_1_Region_1.S1.inPort[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.S1.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.S1.outPort[1].available
a1.behavior.init.region_1_Region_1.S1.outPort[1].node.resume
a1.behavior.init.region_1_Region_1.S1.outPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.S1.active
a1.behavior.init.region_1_Region_1.S1.wasActive
a1.behavior.init.region_1_Region_1.S1.wasActiveTime
a1.behavior.init.region_1_Region_1.S1.newActive
a1.behavior.init.region_1_Region_1.S1.oldActive
a1.behavior.init.region_1_Region_1.S1.node.resume
a1.behavior.init.region_1_Region_1.S1.inport_fire
a1.behavior.init.region_1_Region_1.S1.outport_fire
a1.behavior.init.region_1_Region_1.Sent.nIn
a1.behavior.init.region_1_Region_1.Sent.nOut
a1.behavior.init.region_1_Region_1.Sent.initialStep
a1.behavior.init.region_1_Region_1.Sent.use_activePort
a1.behavior.init.region_1_Region_1.Sent.inPort[1].node.resume
a1.behavior.init.region_1_Region_1.Sent.inPort[1].checkUnaryConnection
a1.behavior.init.region_1_Region_1.Sent.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.Sent.active
a1.behavior.init.region_1_Region_1.Sent.wasActive
a1.behavior.init.region_1_Region_1.Sent.wasActiveTime
a1.behavior.init.region_1_Region_1.Sent.newActive
a1.behavior.init.region_1_Region_1.Sent.oldActive
a1.behavior.init.region_1_Region_1.Sent.node.resume
a1.behavior.init.region_1_Region_1.Sent.inport_fire
a1.behavior.init.region_1_Region_1.Sent.outport_fire
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_conditionPort
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.condition
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_after
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.afterTime
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_firePort
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_syncSend
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_syncReceive
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.selectorExpression
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_messageReceive
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.loopCheck
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfSyncSend
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfSyncReceive
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageReceive
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageIntegers
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageBooleans
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageReals
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.inPort.node.resume
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.inPort.checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.node.resume
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.checkUnaryConnection
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.checkOneDelayedTransitionPerLoop
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.fire
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.preFire
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.hasFired
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.hasFiredTime
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.minimumAfterTime
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.t_start
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localCondition
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.messageFire
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_ready_s
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_s
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_ready_r
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_r
a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].selector_expression_r
a1.behavior.init.region_2_Region_2.nIn
a1.behavior.init.region_2_Region_2.nOut
a1.behavior.init.region_2_Region_2.nSuspend
a1.behavior.init.region_2_Region_2.nResume
a1.behavior.init.region_2_Region_2.nEntry
a1.behavior.init.region_2_Region_2.nExit
a1.behavior.init.region_2_Region_2.initialStep
a1.behavior.init.region_2_Region_2.use_inPort
a1.behavior.init.region_2_Region_2.use_outPort
a1.behavior.init.region_2_Region_2.use_suspend
a1.behavior.init.region_2_Region_2.use_activePort
a1.behavior.init.region_2_Region_2.active
a1.behavior.init.region_2_Region_2.nExit2
a1.behavior.init.region_2_Region_2.nMinBranches
a1.behavior.init.region_2_Region_2.node.resume
a1.behavior.init.region_2_Region_2.newActive
a1.behavior.init.region_2_Region_2.finished
a1.behavior.init.region_2_Region_2.inport_fire
a1.behavior.init.region_2_Region_2.outport_fire
a1.behavior.init.region_2_Region_2.suspend_fire
a1.behavior.init.region_2_Region_2.resume_fire
a1.behavior.init.region_2_Region_2.entry_fire
a1.behavior.init.region_2_Region_2.startTransition
a1.behavior.init.region_2_Region_2.checkOneDelayedTransitionPerLoopIn
a1.behavior.init.region_2_Region_2.firstActive
a1.behavior.init.region_2_Region_2.entryIndices[1]
a1.behavior.init.region_2_Region_2.entry_restart[1]
a1.behavior.init.region_2_Region_2.local_inPort[1].node.resume
a1.behavior.init.region_2_Region_2.local_inPort[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.local_inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.local_entry[1].node.suspend
a1.behavior.init.region_2_Region_2.local_entry[1].node.resume
a1.behavior.init.region_2_Region_2.local_entry[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.local_entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.oldActive
a1.behavior.init.region_2_Region_2.inPort[1].node.resume
a1.behavior.init.region_2_Region_2.inPort[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.entry[1].node.resume
a1.behavior.init.region_2_Region_2.entry[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.entry[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.Received.nIn
a1.behavior.init.region_2_Region_2.Received.nOut
a1.behavior.init.region_2_Region_2.Received.initialStep
a1.behavior.init.region_2_Region_2.Received.use_activePort
a1.behavior.init.region_2_Region_2.Received.inPort[1].node.resume
a1.behavior.init.region_2_Region_2.Received.inPort[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.Received.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.Received.active
a1.behavior.init.region_2_Region_2.Received.wasActive
a1.behavior.init.region_2_Region_2.Received.wasActiveTime
a1.behavior.init.region_2_Region_2.Received.newActive
a1.behavior.init.region_2_Region_2.Received.oldActive
a1.behavior.init.region_2_Region_2.Received.node.resume
a1.behavior.init.region_2_Region_2.Received.inport_fire
a1.behavior.init.region_2_Region_2.Received.outport_fire
a1.behavior.init.region_2_Region_2.S2.nIn
a1.behavior.init.region_2_Region_2.S2.nOut
a1.behavior.init.region_2_Region_2.S2.initialStep
a1.behavior.init.region_2_Region_2.S2.use_activePort
a1.behavior.init.region_2_Region_2.S2.inPort[1].node.resume
a1.behavior.init.region_2_Region_2.S2.inPort[1].checkUnaryConnection
a1.behavior.init.region_2_Region_2.S2.inPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.S2.outPort[1].available
a1.behavior.init.region_2_Region_2.S2.outPort[1].node.resume
a1.behavior.init.region_2_Region_2.S2.outPort[1].checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.S2.active
a1.behavior.init.region_2_Region_2.S2.wasActive
a1.behavior.init.region_2_Region_2.S2.wasActiveTime
a1.behavior.init.region_2_Region_2.S2.newActive
a1.behavior.init.region_2_Region_2.S2.oldActive
a1.behavior.init.region_2_Region_2.S2.node.resume
a1.behavior.init.region_2_Region_2.S2.inport_fire
a1.behavior.init.region_2_Region_2.S2.outport_fire
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_conditionPort
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.condition
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_after
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.afterTime
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_firePort
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_syncSend
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_syncReceive
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_messageReceive
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.loopCheck
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfSyncSend
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfSyncReceive
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageReceive
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageIntegers
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageBooleans
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageReals
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.inPort.node.resume
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.inPort.checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.node.resume
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.checkUnaryConnection
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.checkOneDelayedTransitionPerLoop
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.fire
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.preFire
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.hasFired
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.hasFiredTime
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.minimumAfterTime
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.t_start
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.localCondition
a1.behavior.init.region_2_Region_2.transition_S2_1_Received.messageFire

double initialValue(261,6)
 -1       1                  0       0                  2     0   # _dummy
  0       0                  0       0                  3     0   # _derdummy
  0       2                  0       0                  6   330   # a1.behavior.var1
  0       2                  0       0                  6   330   # a1.behavior.var2
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nIn
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nOut
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nSuspend
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nResume
  0       2                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nEntry
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.nExit
  0       1                  0       0                  6   769   # a1.behavior.init.initialStep
  0       1                  0       0                  6   769   # a1.behavior.init.use_inPort
  0       0                  0       0                  6   769   # a1.behavior.init.use_outPort
  0       1                  0       0                  6   769   # a1.behavior.init.use_suspend
  0       0                  0       0                  6   769   # a1.behavior.init.use_activePort
  0       1                  0       0                  6   329   # a1.behavior.init.active
  0       0                  0       0                  6  1282   # a1.behavior.init.nExit2
  0       0                  0       0                  6  1282   # a1.behavior.init.nMinBranches
  0       0                  0       0                  6  1281   # a1.behavior.init.node.suspend
  0       0                  0       0                  6  1281   # a1.behavior.init.node.resume
  0       1                  0       0                  6  1353   # a1.behavior.init.newActive
  0       0                  0       0                  6  1353   # a1.behavior.init.finished
  0       0                  0       0                  6  1353   # a1.behavior.init.inport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.outport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.suspend_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.resume_fire
  0       0                  0       0                  6  1353   # a1.behavior.init.entry_fire
  0       1                  0       0                  6  1353   # a1.behavior.init.startTransition
  0       1                  0       0                  6  1281   # a1.behavior.init.checkOneDelayedTransitionPerLoopIn
  0       0                  0       0                  6  1354   # a1.behavior.init.firstActive
  0       2                  0       0                  6  1282   # a1.behavior.init.entryIndices[1]
  0       1                  0       0                  6  1282   # a1.behavior.init.entryIndices[2]
  0       1                  0       0                  6  1281   # a1.behavior.init.entry_restart[1]
  0       1                  0       0                  6  1281   # a1.behavior.init.entry_restart[2]
  0       0                  0       0                  6   837   # a1.behavior.init.local_entry[1].fire
  0       0                  0       0                  6   833   # a1.behavior.init.local_entry[1].node.suspend
  0       0                  0       0                  6   769   # a1.behavior.init.local_entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.local_entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.local_entry[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   837   # a1.behavior.init.local_entry[2].fire
  0       0                  0       0                  6   833   # a1.behavior.init.local_entry[2].node.suspend
  0       0                  0       0                  6   769   # a1.behavior.init.local_entry[2].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.local_entry[2].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.local_entry[2].checkOneDelayedTransitionPerLoop
  0       1                  0       0                  6  1353   # a1.behavior.init.oldActive
  0       0                  0       0                  6   769   # a1.behavior.init.entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.entry[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   769   # a1.behavior.init.entry[2].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.entry[2].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.entry[2].checkOneDelayedTransitionPerLoop
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nIn
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nOut
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nSuspend
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nResume
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nEntry
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.nExit
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.initialStep
  0       1                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.use_inPort
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.use_outPort
  0       1                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.use_suspend
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.use_activePort
  0       0                  0       0                  6   329   # a1.behavior.init.region_1_Region_1.active
  0       0                  0       0                  6  1282   # a1.behavior.init.region_1_Region_1.nExit2
  0       0                  0       0                  6  1282   # a1.behavior.init.region_1_Region_1.nMinBranches
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.node.resume
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.newActive
  0       1                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.finished
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.inport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.outport_fire
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.suspend_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.resume_fire
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.entry_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.startTransition
  0       1                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.checkOneDelayedTransitionPerLoopIn
  0       0                  0       0                  6  1282   # a1.behavior.init.region_1_Region_1.firstActive
  0       1                  0       0                  6  1282   # a1.behavior.init.region_1_Region_1.entryIndices[1]
  0       1                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.entry_restart[1]
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.local_inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.local_inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.local_inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   833   # a1.behavior.init.region_1_Region_1.local_entry[1].node.suspend
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.local_entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.local_entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.local_entry[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.oldActive
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.entry[1].checkOneDelayedTransitionPerLoop
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.S1.nIn
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.S1.nOut
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.S1.initialStep
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.S1.use_activePort
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.S1.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.S1.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.S1.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   837   # a1.behavior.init.region_1_Region_1.S1.outPort[1].available
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.S1.outPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.S1.outPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.S1.active
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.S1.wasActive
  0       0                  0       0                  6  1352   # a1.behavior.init.region_1_Region_1.S1.wasActiveTime
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.S1.newActive
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.S1.oldActive
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.S1.node.resume
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.S1.inport_fire
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.S1.outport_fire
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.Sent.nIn
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.Sent.nOut
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.Sent.initialStep
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.Sent.use_activePort
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.Sent.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.Sent.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.Sent.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.Sent.active
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.Sent.wasActive
  0       0                  0       0                  6  1352   # a1.behavior.init.region_1_Region_1.Sent.wasActiveTime
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.Sent.newActive
  0       0                  0       0                  6  1353   # a1.behavior.init.region_1_Region_1.Sent.oldActive
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.Sent.node.resume
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.Sent.inport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.Sent.outport_fire
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_conditionPort
  0       1                  0       0                  6   257   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.condition
  0       1                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_after
 -1 9.9999999999999995E-007  0       0                  1   280   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.afterTime
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_firePort
  0       1                  0       0                  6   257   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_syncSend
  0       0                  0       0                  6   257   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_syncReceive
  0       0                  0       0                  6   322   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.selectorExpression
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.use_messageReceive
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.loopCheck
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfSyncSend
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfSyncReceive
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageReceive
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageIntegers
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageBooleans
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.numberOfMessageReals
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.inPort.node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.inPort.checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   769   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.outPort.checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   329   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.fire
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.preFire
  0       0                  0       0                  6   321   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.hasFired
  0       0                  0       0                  6  1352   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.hasFiredTime
  0 1.0000000000000000E-013  0       0                  6  1280   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.minimumAfterTime
  0       0                  0       0                  6  1344   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.t_start
  0       1                  0       0                  6  1281   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localCondition
  0       0                  0       0                  6  1345   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.messageFire
  0       0                  0       0                  6  1349   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_ready_s
  0       0                  0       0                  6  1349   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_s
  0       0                  0       0                  6  1349   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_ready_r
  0       0                  0       0                  6  1349   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].fire_r
  0       0                  0       0                  6  1350   # a1.behavior.init.region_1_Region_1.transition_S1_1_Sent.localSender[1].selector_expression_r
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nIn
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nOut
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nSuspend
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nResume
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nEntry
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.nExit
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.initialStep
  0       1                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.use_inPort
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.use_outPort
  0       1                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.use_suspend
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.use_activePort
  0       0                  0       0                  6   329   # a1.behavior.init.region_2_Region_2.active
  0       0                  0       0                  6  1282   # a1.behavior.init.region_2_Region_2.nExit2
  0       0                  0       0                  6  1282   # a1.behavior.init.region_2_Region_2.nMinBranches
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.node.resume
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.newActive
  0       1                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.finished
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.inport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.outport_fire
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.suspend_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.resume_fire
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.entry_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.startTransition
  0       1                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.checkOneDelayedTransitionPerLoopIn
  0       0                  0       0                  6  1282   # a1.behavior.init.region_2_Region_2.firstActive
  0       1                  0       0                  6  1282   # a1.behavior.init.region_2_Region_2.entryIndices[1]
  0       1                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.entry_restart[1]
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.local_inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.local_inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.local_inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   833   # a1.behavior.init.region_2_Region_2.local_entry[1].node.suspend
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.local_entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.local_entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.local_entry[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.oldActive
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.entry[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.entry[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.entry[1].checkOneDelayedTransitionPerLoop
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.Received.nIn
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.Received.nOut
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.Received.initialStep
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.Received.use_activePort
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.Received.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.Received.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.Received.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.Received.active
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.Received.wasActive
  0       0                  0       0                  6  1352   # a1.behavior.init.region_2_Region_2.Received.wasActiveTime
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.Received.newActive
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.Received.oldActive
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.Received.node.resume
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.Received.inport_fire
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.Received.outport_fire
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.S2.nIn
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.S2.nOut
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.S2.initialStep
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.S2.use_activePort
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.S2.inPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.S2.inPort[1].checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.S2.inPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   837   # a1.behavior.init.region_2_Region_2.S2.outPort[1].available
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.S2.outPort[1].node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.S2.outPort[1].checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.S2.active
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.S2.wasActive
  0       0                  0       0                  6  1352   # a1.behavior.init.region_2_Region_2.S2.wasActiveTime
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.S2.newActive
  0       0                  0       0                  6  1353   # a1.behavior.init.region_2_Region_2.S2.oldActive
  0       0                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.S2.node.resume
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.S2.inport_fire
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.S2.outport_fire
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_conditionPort
  0       1                  0       0                  6   257   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.condition
  0       1                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_after
 -1 9.9999999999999995E-007  0       0                  1   280   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.afterTime
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_firePort
  0       0                  0       0                  6   257   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_syncSend
  0       1                  0       0                  6   257   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_syncReceive
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.use_messageReceive
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.loopCheck
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfSyncSend
  0       1                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfSyncReceive
  0       0                  0 1.0000000000000000E+100  6   770   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageReceive
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageIntegers
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageBooleans
 -1       0                  0 1.0000000000000000E+100  1   282   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.numberOfMessageReals
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.inPort.node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.inPort.checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   769   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.node.resume
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.checkUnaryConnection
  0       1                  0       0                  6   773   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.outPort.checkOneDelayedTransitionPerLoop
  0       0                  0       0                  6   329   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.fire
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.preFire
  0       0                  0       0                  6   321   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.hasFired
  0       0                  0       0                  6  1352   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.hasFiredTime
  0 1.0000000000000000E-013  0       0                  6  1280   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.minimumAfterTime
  0       0                  0       0                  6  1344   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.t_start
  0       1                  0       0                  6  1281   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.localCondition
  0       0                  0       0                  6  1345   # a1.behavior.init.region_2_Region_2.transition_S2_1_Received.messageFire


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(261,167)
dummy
derdummy
[:#(type=Integer)]
[:#(type=Integer)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
Number of suspend ports [:#(type=Integer)]
Number of resume ports [:#(type=Integer)]
Number of entry branches [:#(type=Integer)]
Number of exit branches [:#(type=Integer)]
=true, if initial step (start state machine at entry ports of Parallel) [:#(type=Boolean)]
=true, if inPort enabled [:#(type=Boolean)]
=true, if outPort enabled [:#(type=Boolean)]
=true, if suspend and resume ports enabled [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true if composite/parallel step is active, otherwise it is not active [:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Integer)]
= true, if the composite step is terminated via a suspend port [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Value of active in the next iteration [:#(type=Boolean)]
[:#(type=Boolean)]
One of the inports fires [:#(type=Boolean)]
One of the outports fires [:#(type=Boolean)]
One of the suspend ports fires [:#(type=Boolean)]
One of the resume ports fires [:#(type=Boolean)]
One of the entry ports fires [:#(type=Boolean)]
Initialize entry port for autonomous step [:#(type=Boolean)]
[:#(type=Boolean)]
= 1, if step becomes the first time active, for future activations, its value is 2. Is used to correctly initialize if nIn=0 and nResume>0 [:#(type=Integer)]
exit[i] belongs to entry[rootIndices[i]] [:#(type=Integer)]
exit[i] belongs to entry[rootIndices[i]] [:#(type=Integer)]
elements corresponding to the entry array deciding whether or not they should be restarted upon resume when finished (information is collected from  [:#(type=Boolean)]
elements corresponding to the entry array deciding whether or not they should be restarted upon resume when finished (information is collected from  [:#(type=Boolean)]
true, if transition fires and step connected to the transition output becomes active [:#(type=Boolean)]
= true, if the composite step is terminated via a suspend port [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
true, if transition fires and step connected to the transition output becomes active [:#(type=Boolean)]
= true, if the composite step is terminated via a suspend port [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
Number of suspend ports [:#(type=Integer)]
Number of resume ports [:#(type=Integer)]
Number of entry branches [:#(type=Integer)]
Number of exit branches [:#(type=Integer)]
=true, if initial step (start state machine at entry ports of Parallel) [:#(type=Boolean)]
=true, if inPort enabled [:#(type=Boolean)]
=true, if outPort enabled [:#(type=Boolean)]
=true, if suspend and resume ports enabled [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true if composite/parallel step is active, otherwise it is not active [:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Integer)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Value of active in the next iteration [:#(type=Boolean)]
[:#(type=Boolean)]
One of the inports fires [:#(type=Boolean)]
One of the outports fires [:#(type=Boolean)]
One of the suspend ports fires [:#(type=Boolean)]
One of the resume ports fires [:#(type=Boolean)]
One of the entry ports fires [:#(type=Boolean)]
Initialize entry port for autonomous step [:#(type=Boolean)]
[:#(type=Boolean)]
= 1, if step becomes the first time active, for future activations, its value is 2. Is used to correctly initialize if nIn=0 and nResume>0 [:#(type=Integer)]
exit[i] belongs to entry[rootIndices[i]] [:#(type=Integer)]
elements corresponding to the entry array deciding whether or not they should be restarted upon resume when finished (information is collected from  [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is terminated via a suspend port [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
=true, if initial step (graph starts at this step) [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if step is active and firing is possible [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true if step is active, otherwise the step is not active [:#(type=Boolean)]
true for 0.3 seconds if state gets activated [:#(type=Boolean)]
last time when state was activated [s]
Value of active in the next iteration [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
=true, if initial step (graph starts at this step) [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true if step is active, otherwise the step is not active [:#(type=Boolean)]
true for 0.3 seconds if state gets activated [:#(type=Boolean)]
last time when state was activated [s]
Value of active in the next iteration [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
= true, if conditionPort enabled [:#(type=Boolean)]
Fire condition (time varying Boolean expression) [:#(type=Boolean)]
= true, if after construct should be enabled. [:#(type=Boolean)]
Wait time before transition can fire after the source state has been enabled. [s]
= true, if firePort enabled [:#(type=Boolean)]
= true, if using synchronization of kind SEND [:#(type=Boolean)]
= true, if using synchronization of kind SEND [:#(type=Boolean)]
a selector expression [:#(type=Integer)]
= true, if using asynchron messages of kind TRIGGER [:#(type=Boolean)]
= true, if one after transition per loop required [:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Integer)]
size of the Integer parameter array of a received message [:#(type=Integer)]
size of the Boolean parameter array of a received message [:#(type=Integer)]
size of the Real parameter array of a received message [:#(type=Integer)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if transition fires [:#(type=Boolean)]
= true, if transition could fire [:#(type=Boolean)]
true for 0.3 seconds if transition fires [:#(type=Boolean)]
last time when state was activated [s]
[s]
Time instant at which the transition would fire, if afterTime would be zero [s]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Integer)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
Number of suspend ports [:#(type=Integer)]
Number of resume ports [:#(type=Integer)]
Number of entry branches [:#(type=Integer)]
Number of exit branches [:#(type=Integer)]
=true, if initial step (start state machine at entry ports of Parallel) [:#(type=Boolean)]
=true, if inPort enabled [:#(type=Boolean)]
=true, if outPort enabled [:#(type=Boolean)]
=true, if suspend and resume ports enabled [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true if composite/parallel step is active, otherwise it is not active [:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Integer)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Value of active in the next iteration [:#(type=Boolean)]
[:#(type=Boolean)]
One of the inports fires [:#(type=Boolean)]
One of the outports fires [:#(type=Boolean)]
One of the suspend ports fires [:#(type=Boolean)]
One of the resume ports fires [:#(type=Boolean)]
One of the entry ports fires [:#(type=Boolean)]
Initialize entry port for autonomous step [:#(type=Boolean)]
[:#(type=Boolean)]
= 1, if step becomes the first time active, for future activations, its value is 2. Is used to correctly initialize if nIn=0 and nResume>0 [:#(type=Integer)]
exit[i] belongs to entry[rootIndices[i]] [:#(type=Integer)]
elements corresponding to the entry array deciding whether or not they should be restarted upon resume when finished (information is collected from  [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is terminated via a suspend port [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
=true, if initial step (graph starts at this step) [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true if step is active, otherwise the step is not active [:#(type=Boolean)]
true for 0.3 seconds if state gets activated [:#(type=Boolean)]
last time when state was activated [s]
Value of active in the next iteration [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
Number of input connections [:#(type=Integer)]
Number of output connections [:#(type=Integer)]
=true, if initial step (graph starts at this step) [:#(type=Boolean)]
=true, if activePort enabled [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if step is active and firing is possible [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true if step is active, otherwise the step is not active [:#(type=Boolean)]
true for 0.3 seconds if state gets activated [:#(type=Boolean)]
last time when state was activated [s]
Value of active in the next iteration [:#(type=Boolean)]
Value of active when CompositeStep was aborted [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
[:#(type=Boolean)]
[:#(type=Boolean)]
= true, if conditionPort enabled [:#(type=Boolean)]
Fire condition (time varying Boolean expression) [:#(type=Boolean)]
= true, if after construct should be enabled. [:#(type=Boolean)]
Wait time before transition can fire after the source state has been enabled. [s]
= true, if firePort enabled [:#(type=Boolean)]
= true, if using synchronization of kind SEND [:#(type=Boolean)]
= true, if using synchronization of kind SEND [:#(type=Boolean)]
= true, if using asynchron messages of kind TRIGGER [:#(type=Boolean)]
= true, if one after transition per loop required [:#(type=Boolean)]
[:#(type=Integer)]
[:#(type=Integer)]
[:#(type=Integer)]
size of the Integer parameter array of a received message [:#(type=Integer)]
size of the Boolean parameter array of a received message [:#(type=Integer)]
size of the Real parameter array of a received message [:#(type=Integer)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if the composite step is entered via a resume port [:#(type=Boolean)]
Is used to guarantee that only 1:1 connections are possible [:#(type=Boolean)]
Is used to check that every connection loop has at least one delayed transition [:#(type=Boolean)]
= true, if transition fires [:#(type=Boolean)]
= true, if transition could fire [:#(type=Boolean)]
true for 0.3 seconds if transition fires [:#(type=Boolean)]
last time when state was activated [s]
[s]
Time instant at which the transition would fire, if afterTime would be zero [s]
[:#(type=Boolean)]
[:#(type=Boolean)]

