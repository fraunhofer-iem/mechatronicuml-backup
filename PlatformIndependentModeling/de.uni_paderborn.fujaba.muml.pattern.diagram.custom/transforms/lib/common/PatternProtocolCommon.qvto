library PatternProtocolCommon;
import ModelcopyLibrary;
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype MumlPackage uses muml('http://www.fujaba.de/muml/0.4.0');
modeltype ComponentPackage uses muml::component('http://www.fujaba.de/muml/0.4.0');
modeltype ProtocolPackage uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype RTSCPackage uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype ConnectorPackage uses muml::connector('http://www.fujaba.de/muml/0.4.0');
modeltype TypesPackage uses muml::types("http://www.fujaba.de/muml/0.4.0");
modeltype ValuetypePackage uses muml::valuetype("http://www.fujaba.de/muml/0.4.0");
modeltype MessageTypePackage uses muml::msgtype("http://www.fujaba.de/muml/0.4.0");
modeltype BehaviorPackage uses muml::behavior("http://www.fujaba.de/muml/0.4.0");
modeltype ModelInstancePackage uses modelinstance("http://www.fujaba.de/modelinstance/0.4.0");
modeltype PatternPackage uses muml::pattern('http://www.fujaba.de/muml/0.4.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';

query getRealtimeStatechartCategory(theRootNode : RootNode) : ModelElementCategory {
	return theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.realtimestatechart.category') -> any(true);
}
query getProtocolCategory(theRootNode : RootNode) : ModelElementCategory {
	return theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.protocol.category') -> any(true);
}
query getPatternCategory(theRootNode : RootNode) : ModelElementCategory {
	return theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.pattern.category') -> any(true);
}

query getMsgTypeCategory(theRootNode : RootNode) : ModelElementCategory {
	return theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.messagetype.category') -> any(true);
}

query getTypesCategory(theRootNode : RootNode) : ModelElementCategory {
	return theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.types.category') -> any(true);
}


mapping Role :: transform() : EObject {
	init {
		result := self.map create();
	}
	
	var resultingRole : Role := result.oclAsType(Role);
	resultingRole.behavior := self.behavior.map transform().oclAsType(Behavior);
	resultingRole.senderMessageTypes := self.senderMessageTypes.map transform().oclAsType(MessageType);
	resultingRole.receiverMessageTypes := self.receiverMessageTypes.map transform().oclAsType(MessageType);
	resultingRole.coordinatorBehavior := self.coordinatorBehavior.map transform().oclAsType(Behavior);
	resultingRole.subroleBehavior := self.subroleBehavior.map transform().oclAsType(Behavior);
	resultingRole.receiverMessageBuffer := self.receiverMessageBuffer.map transform().oclAsType(MessageBuffer);
	resultingRole.cardinality := self.cardinality.map transform().oclAsType(Cardinality);

	var element := self.oclAsType(EObject);
	element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
		setValues(result, f, getValues(element, f));
	};
}

mapping RoleConnector :: transform() : EObject {
	init {
		result := self.map create();
	}
	
	var resultingConnector : RoleConnector := result.oclAsType(RoleConnector);
	resultingConnector.connectorEndpoints := self.connectorEndpoints.map transform().oclAsType(ConnectorEndpoint);
	resultingConnector.connectorQualityOfServiceAssumptions := self.connectorQualityOfServiceAssumptions.map transform().oclAsType(ConnectorQualityOfServiceAssumptions);
	
	var element := self.oclAsType(EObject);
	element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
		setValues(result, f, getValues(element, f));
	};
}


