library PatternProtocolSameRootTransformationLibrary;
import ModelcopyLibrary;

modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype MumlPackage uses muml('http://www.fujaba.de/muml/0.4.0');
modeltype ComponentPackage uses muml::component('http://www.fujaba.de/muml/0.4.0');
modeltype ProtocolPackage uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype RTSCPackage uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype ConnectorPackage uses muml::connector('http://www.fujaba.de/muml/0.4.0');
modeltype TypesPackage uses muml::types("http://www.fujaba.de/muml/0.4.0");
modeltype ValuetypePackage uses muml::valuetype("http://www.fujaba.de/muml/0.4.0");
modeltype MessageTypePackage uses muml::msgtype("http://www.fujaba.de/muml/0.4.0");
modeltype BehaviorPackage uses muml::behavior("http://www.fujaba.de/muml/0.4.0");
modeltype ModelInstancePackage uses modelinstance("http://www.fujaba.de/modelinstance/0.4.0");
modeltype PatternPackage uses muml::pattern('http://www.fujaba.de/muml/0.4.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';

mapping DiscreteInteractionEndpoint :: transform() : EObject {
	init {
		result := self.map create();
	}
	var element := self.oclAsType(EObject);
	element.eClass().eAllReferences->select(f | f.isValidFeature())->forEach(f) {
		setValues(result, f, getValues(element, f).map transform());
	};
	element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
		setValues(result, f, getValues(element, f));
	}
}

mapping ParameterBinding :: transform() : EObject {
	
	init {
		result := self.map create();
		
		var resultingBinding := result.oclAsType(ParameterBinding);
		resultingBinding.parameter := self.parameter.map transform().oclAsType(Parameter);
		resultingBinding.value := self.value.map transform().oclAsType(core::expressions::Expression);
		resultingBinding.annotation := self.annotation.map transform().oclAsType(EAnnotation);
		resultingBinding.extension := self.extension.map transform().oclAsType(core::Extension);		
	}
}

mapping DataType :: transform() : EObject {
	init{
		if(not self.oclIsKindOf(DiscreteInteractionEndpoint) and not self.oclIsKindOf(Component) and not self.oclIsKindOf(ComponentPart)){
			result :=  self;	
		}
		else {
			if(self.oclIsKindOf(muml::protocol::Role)) {
				result := self.oclAsType(muml::protocol::Role).map transform();
			}
			else if(self.oclIsKindOf(muml::connector::DiscreteInteractionEndpoint)) {
				result := self.oclAsType(muml::connector::DiscreteInteractionEndpoint).map transform();
			}
			else if(self.oclIsKindOf(muml::component::Component)){
				result := self.oclAsType(muml::component::Component).map transform();
			}
			else if(self.oclIsKindOf(muml::component::ComponentPart)){
				result := self.oclAsType(muml::component::ComponentPart).map transform();
			}
			else assert fatal (false) with log ("Error: transformation for DataType not yet created");
		}		
	}
}



