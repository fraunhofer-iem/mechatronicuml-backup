import transforms.lib.common.PatternProtocolCommon;
import transforms.lib.patternToprotocol.PatternToProtocolCommon;
import de.uni_paderborn.fujaba.muml.types._library.TypesBlackbox;

modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype MumlPackage uses muml('http://www.fujaba.de/muml/0.4.0');
modeltype ComponentPackage uses muml::component('http://www.fujaba.de/muml/0.4.0');
modeltype ProtocolPackage uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype RTSCPackage uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype ConnectorPackage uses muml::connector('http://www.fujaba.de/muml/0.4.0');
modeltype TypesPackage uses muml::types("http://www.fujaba.de/muml/0.4.0");
modeltype ValuetypePackage uses muml::valuetype("http://www.fujaba.de/muml/0.4.0");
modeltype MessageTypePackage uses muml::msgtype("http://www.fujaba.de/muml/0.4.0");
modeltype BehaviorPackage uses muml::behavior("http://www.fujaba.de/muml/0.4.0");
modeltype ModelInstancePackage uses modelinstance("http://www.fujaba.de/modelinstance/0.4.0");
modeltype PatternPackage uses muml::pattern('http://www.fujaba.de/muml/0.4.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';


// @author sthiele2
transformation TransformPatternToProtocolNewModel(in input : ModelInstancePackage, out output : ModelInstancePackage);

property rootOfNewModel: RootNode;

main()
{ 
	var debug : Boolean := true;
	// get the input parameters. There is exactly one root and exactly one coordination pattern	
	theRootNode := input.rootObjects()[RootNode] -> any(true);	
	var thePattern : CoordinationPattern;
	
	if( not debug){
		// not debug:	
		thePattern := input.rootObjects()[CoordinationPattern] -> any(true);
		bindings := input.rootObjects()[ParameterBinding];			
	}
	else {
		// Debug:
		var patternCategory : ModelElementCategory := getPatternCategory(theRootNode); 
		thePattern := patternCategory.modelElements->at(1).oclAsType(CoordinationPattern);
		bindings := thePattern.legalConfigurations->at(1).parameterBindings;
		
	};

	
	// check whether the input is correct: 
	assert fatal (thePattern != null) with log ("CoordinationPattern is null!" + thePattern.name);
	assert fatal (theRootNode != null) with log ("RootNode is null!");  
    assert fatal (if(thePattern.patternParameters->size() > 0) then (bindings != null and bindings->size() = thePattern.patternParameters->size()) else true endif) with log ("Parameter Bindings are null!");
    assert fatal (if( bindings->size() >0) then bindings->size() = thePattern.patternParameters->size()  else true endif);

	
	rootOfNewModel := new RootNode();
	
	theRootNode.categories->forEach(cat) {
	 if(cat.key.oclAsType(String).matches('de.uni_paderborn.fujaba.muml.types.category') or cat.key.oclAsType(String).matches('de.uni_paderborn.fujaba.muml.messagetype.category') ) {
	 	rootOfNewModel.categories += cat.map transform().oclAsType(ModelElementCategory);
	 	}
	 	else {
	 		var category : ModelElementCategory := cat.map create().oclAsType(ModelElementCategory);
	 		category.name := cat.name;
	 		category.key := cat.key;
	 		rootOfNewModel.categories += category;
	 	};
	 	
	 };	
	 
    // start transformation
	var protocol : CoordinationProtocol := thePattern.map CoordinationPattern2CoordinationProtocol();
	var protocolCategory : ModelElementCategory := getProtocolCategory(rootOfNewModel);
	protocolCategory.modelElements += protocol;
	protocol.verificationConstraintRepositories += thePattern.verificationConstraintRepositories.map transform().oclAsType( muml::constraint::VerificationConstraintRepository);  
}


mapping muml::pattern::CoordinationPattern :: CoordinationPattern2CoordinationProtocol() : muml::protocol::CoordinationProtocol @output
{	
	result.name := self.name + "_intermediate";
	result.comment := self.comment;
	result.annotation := self.annotation.map transform().oclAsType(EAnnotation);		
	

	self.roles->forEach(role)
	{
		// the role was already mapped in RoleConnector2RoleConnector
		var newRole : Role := role.map transform().oclAsType(Role);
		//newRole.behavior := role.behavior.oclAsType(RealtimeStatechart).map RealtimeStatechart2RealtimeStatechart();
		//set behavorial element?? --> should be already considered when setting behavior of the role!
		
		newRole.coordinationProtocol := result;
		
		var rtscCategory : ModelElementCategory := getRealtimeStatechartCategory(rootOfNewModel);
		rtscCategory.modelElements += newRole.behavior.oclAsType(RealtimeStatechart);
		
		result.roles+= newRole;
	};
	result._roleConnector := self.roleConnector.map transform().oclAsType(RoleConnector);
	

	
} 

mapping muml::behavior::Parameter:: Parameter2Variable(rtsc : RealtimeStatechart) : muml::behavior::Variable
{
	_constant := true;
	_name := self.name;
	_dataType:= self.dataType.oclAsType(muml::types::DataType).map transform().oclAsType(muml::types::DataType);
	_comment := self.comment;
}

mapping RealtimeStatechart::create():EObject{
	init{
		result:=new RealtimeStatechart().oclAsType(EObject);
		}
	}
	
mapping MessageTypeRepository::create():EObject{
init{
	result:=new MessageTypeRepository().oclAsType(EObject);
	}
}


mapping PrimitiveDataType::transform(): EObject {
	init{
		if(self.eContainer().oclIsKindOf(ModelElementCategory)){
			result := self.map create().oclAsType(PrimitiveDataType);
		}	
		else {
			result := self;
		}
	}		
}




