import MUML2MUML;

modeltype mtctl uses mtctl('http://www.uni_paderborn.de/fujaba/muml/verification/uppaal/Mtctl');
modeltype MumlPackage uses muml('http://www.fujaba.de/muml/0.4.0');
modeltype ComponentPackage uses muml::component('http://www.fujaba.de/muml/0.4.0');
modeltype ProtocolPackage uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype RTSCPackage uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype ConnectorPackage uses muml::connector('http://www.fujaba.de/muml/0.4.0');
modeltype TypesPackage uses muml::types("http://www.fujaba.de/muml/0.4.0");
modeltype ValuetypePackage uses muml::valuetype("http://www.fujaba.de/muml/0.4.0");
modeltype MessageTypePackage uses muml::msgtype("http://www.fujaba.de/muml/0.4.0");
modeltype BehaviorPackage uses muml::behavior("http://www.fujaba.de/muml/0.4.0");
modeltype ModelInstancePackage uses modelinstance("http://www.fujaba.de/modelinstance/0.4.0");
modeltype PatternPackage uses muml::pattern('http://www.fujaba.de/muml/0.4.0');
modeltype ActionLanguage uses actionlanguage('http://www.fujaba.de/muml/actionlanguage/0.4.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype ExpressionPackage uses core::expressions("http://www.storydriven.org/core/0.3.1");
// @author sthiele2

transformation TransformPatternToProtocolStep2(inout input : ModelInstancePackage);


main()
{ 
	
	var theRootNode : RootNode := input.rootObjects()[RootNode] -> any(true);		
	var theProtocol : CoordinationProtocol := input.rootObjects()[CoordinationProtocol] -> any(true);
	var thePattern : CoordinationPattern := input.rootObjects()[CoordinationPattern] -> any(true);
	assert fatal (thePattern != null) with log ("CoordinationPattern is null!" + thePattern.name);
	
	assert fatal (theRootNode != null) with log ("RootNode is null!");
	
	thePattern.verificationConstraintRepositories->forEach(rep)
	{
		var propRep : PropertyRepository = rep.oclAsType(PropertyRepository);
		theProtocol.verificationConstraintRepositories += propRep.map PropertyRepository2PropertyRepository();
	};
	
  
}



