library PatternProtocolSameRootTransformationLibrary;
import org.muml.ImplicitCopy;

modeltype common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype PimPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype ProtocolPackage uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype RTSCPackage uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype TypesPackage uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype MessageTypePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype BehaviorPackage uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype ModelInstancePackage uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype PatternPackage uses pim::pattern('http://www.muml.org/pim/1.0.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';

abstract mapping DiscreteInteractionEndpoint :: transform() : DiscreteInteractionEndpoint inherits Element::transform;

mapping ParameterBinding :: transform() : ParameterBinding {
	
	parameter := self.parameter.map transform().oclAsType(Parameter);
	value := self.value.map transform().oclAsType(core::expressions::Expression);
	extensions := self.extensions.map transform().oclAsType(core::Extension);		
}

mapping DataType :: transform() : DataType disjuncts DataType::DefaultDataType2DataType, DataType::DataType2Self;

mapping DataType :: DataType2Self() : DataType
when {not self.oclIsKindOf(DiscreteInteractionEndpoint) and not self.oclIsKindOf(Component) and not self.oclIsKindOf(ComponentPart)} {
	init {
		result := self;
	}
}

abstract mapping DataType :: DefaultDataType2DataType() : DataType inherits Element::transform
when {self.oclIsKindOf(DiscreteInteractionEndpoint) or self.oclIsKindOf(Component) or self.oclIsKindOf(ComponentPart)};
