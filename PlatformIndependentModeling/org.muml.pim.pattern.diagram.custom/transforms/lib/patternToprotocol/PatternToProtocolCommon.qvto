library PatternToProtocolCommon;
import ImplicitCopy;
	

modeltype common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype PimPackage uses pim('http://www.muml.org/pim/1.0.0');
modeltype ComponentPackage uses pim::component('http://www.muml.org/pim/1.0.0');
modeltype ProtocolPackage uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype RTSCPackage uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype ConnectorPackage uses pim::connector('http://www.muml.org/pim/1.0.0');
modeltype TypesPackage uses pim::types('http://www.muml.org/pim/1.0.0');
modeltype ValuetypePackage uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype MessageTypePackage uses pim::msgtype('http://www.muml.org/pim/1.0.0');
modeltype BehaviorPackage uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype core uses core('http://www.muml.org/core/1.0.0');
modeltype ModelInstancePackage uses core::modelinstance('http://www.muml.org/core/1.0.0');
modeltype PatternPackage uses pim::pattern('http://www.muml.org/pim/1.0.0');
modeltype Ecore uses ecore('http://www.eclipse.org/emf/2002/Ecore');
modeltype actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';

property bindings : Set(ParameterBinding);
property theRootNode : RootNode;


mapping pim::behavior::Parameter:: Parameter2Variable(rtsc : RealtimeStatechart) : pim::behavior::Variable
{
	_constant := true;
	_name := self.name;
	_dataType:= self.dataType;
	_comment := self.comment;
}

mapping actionlanguage::TypedNamedElementExpression :: transform() : EObject {
	
	init {
		
		
		if(self.typedNamedElement.oclIsKindOf(Parameter)) {
			var refParameter : Parameter := self.typedNamedElement.oclAsType(Parameter);
			var rtsc : RealtimeStatechart := getHighestParentStatechart(self);
			var myExp : core::expressions::Expression =  getBoundExpressionToGivenParameter(refParameter);
			assert fatal (myExp != null) with log ("There is no parameter binding for the parameter"+ refParameter.name);
			if(rtsc = null or rtsc.oclIsInvalid()){
				// in case the rtsc is invalid means that the TypedNamedElementExpression referencing the Parameter is not contained in a rtsc but in a ConnectorQualityOfServiceAssumptions
				// therefore, just replace the TypedNamedElementExpression by the bounded expression defined in the ParameterBinding
				result:= myExp.copyParameterExpression().oclAsType(EObject)
			}
			else {
				
			result := self.map create();	
			var resultingExpression : TypedNamedElementExpression := result.oclAsType(TypedNamedElementExpression);		
			var boundedExpression : core::expressions::Expression =  getBoundExpressionToGivenParameter(refParameter);
			assert fatal (boundedExpression != null) with log ("There is no parameter binding for the parameter"+ refParameter.name);
			var mappedVariable : Variable :=refParameter.map Parameter2Variable(rtsc);
			var mappedrtsc: RealtimeStatechart := rtsc.resolveone(RealtimeStatechart);
			if(not mappedrtsc.variables->includes(mappedVariable)){
				mappedrtsc.variables+=mappedVariable;
				mappedVariable.initializeExpression := boundedExpression.copyParameterExpression();
			};
			resultingExpression.typedNamedElement := mappedVariable;
			};
		}
		else {
			result := self.map create();
			
		
			var resultingExpression : TypedNamedElementExpression := result.oclAsType(TypedNamedElementExpression);
			resultingExpression._extensions := self._extensions.map transform().oclAsType(core::Extension);
			resultingExpression.typedNamedElement := self.typedNamedElement.map transform().oclAsType(TypedNamedElement);
			
			var element := self.oclAsType(EObject);
			element.eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, getValues(element, f));
			};
		};	
	}	
}

query getHighestParentStatechart(in expr : TypedNamedElementExpression) : RealtimeStatechart
{
	var root : EObject := expr.oclAsType(EObject);
	while((not root.oclIsKindOf(ConnectorQualityOfServiceAssumptions) and not root.oclIsKindOf(RealtimeStatechart)))
	{
		root := root.eContainer();		
		assert fatal (not root.oclIsInvalid()) with log ("The parameter "+ expr.typedNamedElement.name + " is not contained in a RealtimeStatechart or a ConnectorQualityOfServiceAssumptions!");
	
	};
	if(root.oclIsKindOf(ConnectorQualityOfServiceAssumptions))
	{
		return null;
	}else
	{
		return root.oclAsType(RealtimeStatechart).getHighestParentStatechart()
	}
	endif;		
}	
	
query getBoundExpressionToGivenParameter(in parameter : Parameter) : core::expressions::Expression {	
	if (bindings->one(p : ParameterBinding | p.parameter=parameter))
	{
		log ("parameter binding found for parameter: "+ parameter.name);
		return bindings->any(p : ParameterBinding | p.parameter=parameter).value;
	} endif;
	return null;
}		

helper core::expressions::Expression :: copyParameterExpression() : core::expressions::Expression {
	if(self.oclIsKindOf(core::expressions::common::LiteralExpression)) {
		return self.clone().oclAsType(core::expressions::common::LiteralExpression);
	}
	else
		assert fatal (false) with log ("ParameterBinding may only define a LiteralExpression!");
}
