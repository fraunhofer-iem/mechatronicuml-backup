<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore">
  <ecore:EPackage name="pim" nsURI="http://www.muml.org/pim/1.0.0" nsPrefix="pim">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel"/>
    <eAnnotations source="http://www.eclipse.org/OCL/Import">
      <details key="common" value="../../org.muml.core/model/core.ecore#//expressions/common"/>
      <details key="core" value="../../org.muml.core/model/core.ecore#/"/>
      <details key="ecore" value="http://www.eclipse.org/emf/2002/Ecore"/>
      <details key="expressions_0" value="../../org.muml.core/model/core.ecore#//expressions"/>
    </eAnnotations>
    <eClassifiers xsi:type="ecore:EClass" name="Test"/>
    <eSubpackages name="constraint" nsURI="http://www.muml.org/pim/constraint/1.0.0" nsPrefix="constraint">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package provides abstract super classes for modeling different kinds of constraints that may be attached to verifiable elements of the MechatronicUML meta-model."/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="VerificationConstraintRepository" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Represents a repository for verifiable constraints the element has to fulfill. A verifiable constraint may be an TCTL expression. Thus, the constraint may be the input for a model checker."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VerifiableElement" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Represents an element that may be verified by formal verification, e.g., model checking. Therefore, this class provides a repository to store verification constraints."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="verificationConstraintRepositories" upperBound="-1" eType="#/0/constraint/VerificationConstraintRepository"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The referenced repository that contains verifiable constraints for this element."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="instance" nsURI="http://www.muml.org/pim/instance/1.0.0" nsPrefix="instance">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package instance contains all classes for building configurations of component instances.&#xA;&#xA;Component instances are built from component types and connected by connectors. The resulting structure is a component instance configuration."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentInstance" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a component instance. It is an instantiation of a component."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AllPortsAreInitialized"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AllPortsAreInitialized" value="-- All Ports with a lowerBound>0 must be initialized&#xA;let discretePorts : Set(component::Port) = if (self.componentType.oclIsUndefined()) then OrderedSet {} else self.componentType.ports->select(port|port.oclIsKindOf(connector::DiscreteInteractionEndpoint)).oclAsType(component::Port)->asOrderedSet() endif in&#xA;let nonDiscretePorts : Set(component::Port) = if (self.componentType.oclIsUndefined()) then OrderedSet {} else self.componentType.ports->select(port| port.oclIsKindOf(component::DirectedTypedPort)) endif in&#xA;let portsWhichShallBeInitialized : Set(component::Port) = nonDiscretePorts -> select(port | not(port.oclAsType(component::DirectedTypedPort).optional))->union(discretePorts->select(discretePort| discretePort.oclAsType(connector::DiscreteInteractionEndpoint).cardinality.lowerBound.value > 0 or discretePort.oclAsType(connector::DiscreteInteractionEndpoint).cardinality.lowerBound.infinity)) in&#xA;portsWhichShallBeInitialized -> forAll(port | self.portInstances -> exists(portInstance | portInstance.type = port))&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentType" lowerBound="1" eType="#/0/component/Component">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="(&#xA;if self.parentCIC.parentStructuredComponentInstance.oclIsUndefined() then&#xA;&#x9;component::Component::allInstances()&#xA;else&#xA;&#x9;self.parentCIC.parentStructuredComponentInstance.componentType.oclAsType(component::StructuredComponent).embeddedComponentParts.componentType&#xA;endif&#xA;)->select(x | (self.oclIsKindOf(AtomicComponentInstance) and x.oclIsKindOf(component::AtomicComponent)) or (self.oclIsKindOf(StructuredComponentInstance) and x.oclIsKindOf(component::StructuredComponent)))"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component type of which this instance is derived."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" upperBound="-1" eType="#/0/instance/PortInstance" containment="true"
            eOpposite="#/0/instance/PortInstance/componentInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances that belong to this component instance. \todosd{Why are also DiscreteSinglePortInstances of DiscreteMultiPortInstances contained here and not in the DiscreteMultiPortInstance?}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentPart" eType="#/0/component/ComponentPart">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="self.parentCIC.parentStructuredComponentInstance.componentType.oclAsType(component::StructuredComponent).embeddedComponentParts"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the component instance is contained in a structured component instance,&#xA;then the corresponding structure component has has component part that&#xA;was used to include the component type of this instance. Then, this reference&#xA;points to this component part. We can use this reference for deciding how&#xA;many instances of a particular part exist in a structured component instance&#xA;such that we can enforce the cardinalities of the component part during run-time."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentCIC" lowerBound="1" eType="#/0/instance/ComponentInstanceConfiguration"
            eOpposite="#/0/instance/ComponentInstanceConfiguration/componentInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component instance configuration that contains this component instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="topLevel" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A component instance is considered to be a top-level component instance if it is not embedded in a structured component instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.parentCIC.parentStructuredComponentInstance.oclIsUndefined()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="runnables" upperBound="-1" eType="#/0/runnable/Runnable" eOpposite="#/0/runnable/Runnable/componentInstance"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="labels" upperBound="-1" eType="#/0/runnable/Label" eOpposite="#/0/runnable/Label/componentInstance"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortConnectorInstance" abstract="true" eSuperTypes="#/0/connector/ConnectorInstance">
        <eAnnotations source="http://www.muml.org/emf/OCLFilter">
          <details key="filter" value="let types : Set(connector::ConnectorEndpoint) = self.portInstances->collect(pi | if (pi.portPart.oclIsUndefined()) then pi.type else pi.portPart endif).oclAsType(connector::ConnectorEndpoint)->asSet()&#xA;in types.connectors->select(c | c.connectorEndpoints->asSet() = types)->asSet()"/>
          <details key="feature" value="type"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class is the common super class of delegation instances and assemly instances."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValidPortConnectorInstance"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValidPortConnectorInstance" value="-- The connected PortInstances do not correspond to the selected PortConnectorType&#xA;let directPortTypes : Set(component::Port) = if(not self.type.oclIsUndefined()) then self.type.connectorEndpoints->select(endPoint|endPoint.oclIsKindOf(component::Port)).oclAsType(component::Port)->asOrderedSet() else OrderedSet{} endif in&#xA;let portTypesFromPortParts : Set(component::Port) = if(not self.type.oclIsUndefined()) then self.type.connectorEndpoints->select(endPoint | endPoint.oclIsKindOf(component::PortPart)).oclAsType(component::PortPart)->collect(portType)->asOrderedSet() else OrderedSet{} endif  in&#xA;let allPortTypes : Set(component::Port) = directPortTypes->union(portTypesFromPortParts)->asOrderedSet() in&#xA;if (self.type.oclIsUndefined() or self.connectorEndpointInstances->isEmpty()) then &#xA;&#x9;true&#xA;else&#xA;&#x9;allPortTypes->symmetricDifference(self.connectorEndpointInstances.type.oclAsType(component::Port)->asSet())->isEmpty()&#xA;endif&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorType" eType="#/0/component/PortConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector type of this connector instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.type.oclAsType(component::PortConnector)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" lowerBound="2" upperBound="2" eType="#/0/instance/PortInstance"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances connected by this connector instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpointInstances->select(c | c.oclIsKindOf(PortInstance)).oclAsType(PortInstance)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortInstance" abstract="true" eSuperTypes="#/0/connector/ConnectorEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A port instance is a port of a component at instance level."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PortInstanceMustReferencePortType PortInstanceMustDelegateToEmbeddedCIC"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PortInstanceMustReferencePortType" value="-- The type of a port instance must be a port type&#xA;if (not self.type->oclIsUndefined()) then&#xA;self.type.oclIsKindOf(component::Port)&#xA;else&#xA;false&#xA;endif"/>
          <details key="PortInstanceMustDelegateToEmbeddedCIC" value="-- PortInstance at Structured Component must delegate to embedded CIC&#xA;(componentInstance.oclIsKindOf(StructuredComponentInstance) and not self.oclIsKindOf(connector::DiscreteMultiInteractionEndpointInstance) and ( self.oclIsKindOf(HybridPortInstance) or self.oclIsKindOf(DiscretePortInstance) or self.oclIsKindOf(ContinuousPortInstance))) &#xA;implies not portConnectorInstances->select(ci | ci.oclIsKindOf(DelegationConnectorInstance) and &#xA;&#x9;componentInstance.oclAsType(StructuredComponentInstance).embeddedCIC.componentInstances->includes(ci.oclAsType(DelegationConnectorInstance).portInstances->any(pi | pi &lt;> self).componentInstance)&#xA;)->isEmpty()&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portType" lowerBound="1" eType="#/0/component/Port" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port type of which this port instance is built from."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if (self.type.oclIsKindOf(component::Port))&#xA;then&#xA;self.type.oclAsType(component::Port)&#xA;else&#xA;null&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstance" eType="#/0/instance/ComponentInstance" eOpposite="#/0/instance/ComponentInstance/portInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component instance this port instance belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorInstances" upperBound="-1" eType="#/0/instance/PortConnectorInstance"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port connector instances attached to this port instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorInstances->select(i | i.oclIsKindOf(PortConnectorInstance)).oclAsType(PortConnectorInstance)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portPart" eType="#/0/component/PortPart" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the enclosing component instance corresponds to a component part of a structured component, refers to the port part that corresponds to this port instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="componentInstance.componentPart.portParts->any(portPart | portPart.portType = self.type)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="runnable" upperBound="-1" eType="#/0/runnable/Runnable" eOpposite="#/0/runnable/Runnable/portInstance"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssemblyConnectorInstance" eSuperTypes="#/0/instance/PortConnectorInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an assembly connector at instance level."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AssemblyConnectorInstanceNeedsTypeIfNotTopLevel NoQoSAssumptionsIfNotDiscretePortConnector"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AssemblyConnectorInstanceNeedsTypeIfNotTopLevel" value="-- Assembly Connector Instance needs type, if not top-level&#xA;portInstances.componentInstance->exists(not parentCIC.parentStructuredComponentInstance.oclIsUndefined()) implies not assemblyConnectorType.oclIsUndefined()&#xA;"/>
          <details key="NoQoSAssumptionsIfNotDiscretePortConnector" value="-- An assembly instance connector may only have QoS assumptions if it connects two discrete port instances&#xA;(not connectorQualityOfServiceAssumptions.oclIsUndefined()) &#xA;implies &#xA;(portInstances->forAll(portInstance | not portInstance.oclIsUndefined() and portInstance.oclIsKindOf(instance::DiscretePortInstance)))"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="assemblyConnectorType" eType="#/0/component/AssemblyConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The assembly that this assembly instance is built from."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if  type.oclIsKindOf(component::AssemblyConnector) then&#xA;&#x9;type.oclAsType(component::AssemblyConnector)&#xA;else&#xA;&#x9;null&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorQualityOfServiceAssumptions" eType="#/0/protocol/ConnectorQualityOfServiceAssumptions"
            containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DelegationConnectorInstance" eSuperTypes="#/0/instance/PortConnectorInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a delegation connector at instance level."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="DelegateToEmbeddedCIC"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="DelegateToEmbeddedCIC" value="-- Delegation Connector Instance must delegate to embedded Component Instance Configuration&#xA;self.portInstances->exists(a, b | b.componentInstance.parentCIC.parentStructuredComponentInstance = a.componentInstance)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="delegationConnectorType" lowerBound="1" eType="#/0/component/DelegationConnector"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The delegation type of this delegation instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if  type.oclIsKindOf(component::DelegationConnector) then&#xA;&#x9;type.oclAsType(component::DelegationConnector)&#xA;else&#xA;&#x9;null&#xA;endif&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentInstanceConfiguration" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement #/0/constraint/VerifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class encapsules represents a configuration. It contains all component instances and connector instances that belong to a concrete configuration."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueComponentInstanceNames"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueComponentInstanceNames" value="--  Component instances of a component instance configuration must have unique names on top level.&#xA;self.componentInstances->isUnique(name)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstances" upperBound="-1" eType="#/0/instance/ComponentInstance"
            containment="true" eOpposite="#/0/instance/ComponentInstance/parentCIC">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of component instances of a component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectorInstances" upperBound="-1" eType="#/0/instance/PortConnectorInstance"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of connector instances of a component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentPortInstances" upperBound="-1" eType="#/0/instance/PortInstance"
            changeable="false" volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances of the containing component instance."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.parentStructuredComponentInstance.oclIsUndefined()&#xA;then OrderedSet {}&#xA;else self.parentStructuredComponentInstance.portInstances&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentStructuredComponentInstance" eType="#/0/instance/StructuredComponentInstance"
            eOpposite="#/0/instance/StructuredComponentInstance/embeddedCIC">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A structured component instance embeds a component instance configuration&#xA;that defines its inner structure. For such component instance configuration,&#xA;this reference points to the containing structured component instance. If this&#xA;component instance configuration is not contained in a structured component&#xA;instance, this reference is null."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolInstances" upperBound="-1" eType="#/0/instance/CoordinationProtocolInstance"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of coordination protocol instances of a component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContinuousPortInstance" eSuperTypes="#/0/instance/PortInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a continuous port at instance level. The port type of a&#xA;continuous port instance must be a continuous port."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PortTypeIsKindOfContinuousPort"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PortTypeIsKindOfContinuousPort" value="-- The port type of a ContinuousPortInstance has to be of kind ContinuousPort&#xA;(not self.portType.oclIsUndefined()) implies self.portType.oclIsKindOf(component::ContinuousPort)&#xA;"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HybridPortInstance" eSuperTypes="#/0/instance/PortInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a hybrid port at instance level. The port type of a hybrid&#xA;port instance must be a hybrid port."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PortTypeIsKindOfHybridPort"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PortTypeIsKindOfHybridPort" value="-- The port type of a HybridPortInstance has to be of kind HybridPort&#xA;(not self.portType.oclIsUndefined()) implies self.portType.oclIsKindOf(component::HybridPort)&#xA;"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscretePortInstance" abstract="true" eSuperTypes="#/0/instance/PortInstance #/0/connector/DiscreteInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a discrete port at instance level. At instance level, we&#xA;distinguish between single-port instances and multi-port instances by using&#xA;two subclasses of this abstract class."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PortTypeIsKindOfDiscretePort"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PortTypeIsKindOfDiscretePort" value="-- The port type of a DiscretePortInstance has to be of kind DiscretePort&#xA;(not self.portType.oclIsUndefined()) implies self.portType.oclIsKindOf(component::DiscretePort)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The receiver message interface defines which messages this port instance receives&#xA;It is derived from the receiver message interface of its port."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if portType.oclIsUndefined() or not portType.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;portType.oclAsType(component::DiscretePort).receiverMessageTypes&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sender message interface defines which messages this port instance sends.&#xA;It is derived from the sender message interface of its port."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if portType.oclIsUndefined() or not portType.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;portType.oclAsType(component::DiscretePort).senderMessageTypes&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageBuffer" upperBound="-1" eType="#/0/connector/MessageBuffer"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The derived properties of the refined role regarding the receiver message buffers."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if (not self.portType.oclIsUndefined()) and self.portType.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;self.portType.oclAsType(component::DiscretePort).receiverMessageBuffer&#xA;else&#xA;&#x9;OrderedSet { }&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="refinedRole" eType="#/0/protocol/Role" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role of a coordination protocol that the port type of this port instance refines."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if not self.portType.oclIsUndefined() and self.portType.oclIsKindOf(component::DiscretePort) then&#xA;&#x9;self.portType.oclAsType(component::DiscretePort).refinedRole&#xA;else&#xA;&#x9;null&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteSinglePortInstance" eSuperTypes="#/0/instance/DiscretePortInstance #/0/connector/DiscreteSingleInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a discrete single port at instance level as well as a sub-port instance&#xA;of a multi-port instance. Each single port instance references its behavior instance.&#xA;When used as a sub-port instance, the instance references its role behavior instance."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PortInstanceNotMultipleAssemblyConnectorInstances PortInstanceNotMultipleDelegationConnectorInstances PortInstanceNeedsDelegationToParentOrAssembly"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PortInstanceNotMultipleAssemblyConnectorInstances" value="-- PortInstance must have not have mulltiple Assembly Connector Instances assigned.&#xA;portConnectorInstances->select(&#xA;&#x9;ci | ci.oclIsKindOf(AssemblyConnectorInstance)&#xA;)->size() &lt;= 1"/>
          <details key="PortInstanceNotMultipleDelegationConnectorInstances" value="-- PortInstance must have not have multiple Delegation Connector Instances per directiond assigned.&#xA;let delegationInstances : Set(instance::DelegationConnectorInstance) = portConnectorInstances->select(oclIsKindOf(instance::DelegationConnectorInstance)).oclAsType(instance::DelegationConnectorInstance)->asSet() in&#xA;let incoming : Set(instance::DelegationConnectorInstance) = delegationInstances->select(di | di.portInstances->forAll(pi |pi = self or pi.componentInstance->closure(p | if p.oclIsKindOf(instance::StructuredComponentInstance) then p.oclAsType(instance::StructuredComponentInstance).embeddedCIC.componentInstances else OrderedSet { p } endif)->includes(self.componentInstance))) in&#xA;let outgoing : Set(instance::DelegationConnectorInstance) = delegationInstances->select(di | di.portInstances->forAll(pi |pi = self or self.componentInstance->closure(p | if p.oclIsKindOf(instance::StructuredComponentInstance) then p.oclAsType(instance::StructuredComponentInstance).embeddedCIC.componentInstances else OrderedSet { p } endif)->includes(pi.componentInstance))) in&#xA;incoming->size() &lt;= 1 and outgoing->size() &lt;= 1"/>
          <details key="PortInstanceNeedsDelegationToParentOrAssembly" value="-- PortInstance needs a Delegation Connector Instance to the parent component's port or an Assembly Connector Instance to a port within this CIC.&#xA;&#xA;if(self.componentInstance.oclIsInvalid() or self.componentInstance = null) then true else (not self.componentInstance.topLevel) implies (&#xA;not portConnectorInstances->select(&#xA;&#x9;ci | ci.oclIsKindOf(DelegationConnectorInstance)&#xA;&#x9;and ci.oclAsType(DelegationConnectorInstance).portInstances->any(pi | pi &lt;> self).componentInstance.oclIsKindOf(StructuredComponentInstance)&#xA;&#x9;and ci.oclAsType(DelegationConnectorInstance).portInstances->any(pi | pi &lt;> self).componentInstance.oclAsType(StructuredComponentInstance).embeddedCIC.componentInstances->includes(componentInstance)&#xA;)->isEmpty() or&#xA;not portConnectorInstances->select(&#xA;&#x9;ci | ci.oclIsKindOf(AssemblyConnectorInstance)&#xA;)->isEmpty()&#xA;)&#xA;endif&#xA;"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteMultiPortInstance" eSuperTypes="#/0/instance/DiscretePortInstance #/0/connector/DiscreteMultiInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a multi-port at instance level. For each multi-port of a&#xA;component, there exists exactly one multi-port instance in the respective component&#xA;instance at all times. That instance references an instance of the statechart of the&#xA;multi-port as well as an instance of the adaptation behavior. The DiscreteMultiPortInstance&#xA;also references all sub-port instances of the multi-port instance. The DiscreteMultiPortInstance&#xA;has no visual representation in the concrete syntax. It is represented by its sub-roles."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfSubPortInstances" upperBound="-1" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance"
            derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference just derives the values of &quot;subPortInstances&quot; and specifies a containment. This containment reference is needed by the GMF tooling."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.subInteractionEndpointInstances"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocolInstance" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An instance of a coordination protocol. It may also reference a specific coordination protocol part. It specifies the behavior of discrete (single/multi) port instances that are connected with each other."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstances" lowerBound="1" upperBound="-1" eType="#/0/instance/PortInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port instances that use this coordination protocol instance.&#xA;&#xA;\todosd{I suggest to change this reference so that it references a DiscretePortInstance.}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolPart" eType="#/0/component/CoordinationProtocolPart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The optional CoordinationProtocolPart of that instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol" lowerBound="1" eType="#/0/protocol/CoordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The type of this instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredComponentInstance" eSuperTypes="#/0/instance/ComponentInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A structured component instance is a component instance that has been derived from a structured component type. A structured component instance specifies an embedded component instance configuration defining its inner structure."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="NumberOfembeddedComponentInstancesCorrespondsToLowerBound NumberOfembeddedComponentInstancesCorrespondsToUpperBound"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="NumberOfembeddedComponentInstancesCorrespondsToLowerBound" value=" -- Not all ComponentParts with a lowerBound > 0 are initialized&#xA;let componentParts : Set(component::ComponentPart) = if (not self.componentType.oclIsUndefined() and self.componentType.oclIsKindOf(component::StructuredComponent)) then self.componentType.oclAsType(component::StructuredComponent).embeddedComponentParts else OrderedSet{} endif in&#xA; let componentInstances : Set(ComponentInstance) = if (not self.embeddedCIC.oclIsUndefined())  then self.embeddedCIC.componentInstances else OrderedSet{} endif in&#xA;componentParts->forAll(part| if (not part.cardinality.lowerBound.infinity) then componentInstances->select(ci | ci.componentPart = part)->size()>=part.cardinality.lowerBound.value else true endif)&#xA;"/>
          <details key="NumberOfembeddedComponentInstancesCorrespondsToUpperBound" value=" -- The number of initialized ComponentInstances does not corresponds to the specified upperBound&#xA;let componentParts : Set(component::ComponentPart) = if (not self.componentType.oclIsUndefined() and self.componentType.oclIsKindOf(component::StructuredComponent)) then self.componentType.oclAsType(component::StructuredComponent).embeddedComponentParts else OrderedSet{} endif in&#xA;let componentInstances : Set(ComponentInstance) = if (not self.embeddedCIC.oclIsUndefined())  then self.embeddedCIC.componentInstances else OrderedSet{} endif in&#xA;componentParts->forAll(part| if (not part.cardinality.upperBound.infinity) then componentInstances->select(ci | ci.componentPart = part)->size()&lt;=part.cardinality.upperBound.value else true endif)&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedCIC" lowerBound="1" eType="#/0/instance/ComponentInstanceConfiguration"
            containment="true" eOpposite="#/0/instance/ComponentInstanceConfiguration/parentStructuredComponentInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component instances and connector instances that are embedded in this component instance&#xA;are contained by the component instance configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AtomicComponentInstance" eSuperTypes="#/0/instance/ComponentInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An atomic component instance is a component instance which has been derived from an atomic component. An atomic component instance has no embedded component instance configuration and executes the behavior specification which has been defined by its type."/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="protocol" nsURI="http://www.muml.org/pim/protocol/1.0.0" nsPrefix="protocol">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package provides modeling support for coordination protocols including roles, role connectors, and quality of service assumptions."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractCoordinationSpecification" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement #/0/constraint/VerifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract base class for coordination protocols."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueRoleNames RoleMessageTypesMustBeCompatible"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueRoleNames" value="-- Names of roles must be unique&#xA;self.roles->isUnique(name)"/>
          <details key="RoleMessageTypesMustBeCompatible" value="-- Every Role must have the senderMessageTypes of all other Roles set as receiverMessageTypes&#xA;self.roles->forAll(role1 : Role, role2 : Role |&#xA;   role1 &lt;> role2&#xA;   implies&#xA;   role1.senderMessageTypes->asSet() = role2.receiverMessageTypes->asSet()&#xA;)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roles" lowerBound="2" upperBound="2" eType="#/0/protocol/Role" containment="true"
            eOpposite="#/0/protocol/Role/coordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The roles belonging to this coordination protocol."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roleConnector" lowerBound="1" eType="#/0/protocol/RoleConnector" containment="true"
            eOpposite="#/0/protocol/RoleConnector/coordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each coordination protocol has exactly one role connector.&#xA;Cardinality is 1 because there exists no useful protocol with more than two roles. If a useful protocol exists with more than 2 roles, then change cardinality to 1..*"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfAbstractCoordinationSpecification" eType="#/0/protocol/AbstractCoordinationSpecification"
            changeable="false" volatile="true" transient="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference only exists because GMF needs it to visualize the inner hexagon of a Real-Time Coordination Protocol."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfMessageBuffers" upperBound="-1" eType="#/0/connector/MessageBuffer"
            changeable="false" volatile="true" transient="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference only exists because GMF needs it to display the MessageBuffer within the coordination protocol rectangle."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="roles->collect(receiverMessageBuffer)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfConnectorQualityOfServiceAssumptions" eType="#/0/protocol/ConnectorQualityOfServiceAssumptions"
            changeable="false" volatile="true" transient="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference only exists because GMF needs it to display the ConnectorQualityOfServiceAssumption within the coordination protocol rectangle."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.roleConnector.connectorQualityOfServiceAssumptions.oclIsInvalid() then&#xA;&#x9;null&#xA;else&#xA;&#x9;self.roleConnector.connectorQualityOfServiceAssumptions&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="adaptedFromPattern" upperBound="-1" eType="#/0/pattern/AbstractCoordinationPattern">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="pattern::CoordinationPattern::allInstances()->select(p| not (p = self))"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this coordination specification is adapted from one or more Real-Time Coordination Pattern, then these patterns are listed here."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocol" eSuperTypes="#/0/protocol/AbstractCoordinationSpecification">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A coordination protocol specifies the coordination between a certain number of communication members. The communication members are represented by roles. To specify which roles communicate whith each other they are connected by channels. The communication protocol used by the roles is specified by realtime statecharts. Each role has its own realtime statechart describing the roles communication behavior. Furthermore channels own a realtime statechart which enables specifying properties of certain real communication channels e.g. propagation delay or buffering of messages. Furthermore constraints can be assigned to coordination protocols. Constraints specify certain properties the coordination specified by the protocol has to fullfill."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="CoordinationProtocolNamesMustBeUnique"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="CoordinationProtocolNamesMustBeUnique" value="-- Coordination Protocols must have unique names&#xA;CoordinationProtocol.allInstances()->isUnique(name)"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Role" eSuperTypes="#/0/connector/DiscreteInteractionEndpoint #/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a role of a coordination protocol."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="RoleRequiresBehavior RoleRequiresMessageTypes MultiRoleRequiresSubroleBehaviorAndCoordinatorBehavior"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This class represents a role of a coordination protocol."/>
          </eAnnotations>
          <details key="RoleRequiresBehavior" value="-- Role requires behavior&#xA;not self.behavior.oclIsUndefined()"/>
          <details key="RoleRequiresMessageTypes" value="-- Role requires message types to be set&#xA;self.senderMessageTypes->notEmpty() or self.receiverMessageTypes->notEmpty()"/>
          <details key="MultiRoleRequiresSubroleBehaviorAndCoordinatorBehavior" value="-- A multiport requires that either all messages in the RTSCs use one-to-many communication schemata or that the references coordinatorBehavior and subroleBehavior are set.&#xA;(not self.behavior.oclAsType(realtimestatechart::RealtimeStatechart).usesOneToManyCommunicationSchemata implies self.multiRole = not self.coordinatorBehavior.oclIsUndefined())&#xA;and self.coordinatorBehavior.oclIsUndefined() = self.subroleBehavior.oclIsUndefined()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol" lowerBound="1" eType="#/0/protocol/AbstractCoordinationSpecification"
            eOpposite="#/0/protocol/AbstractCoordinationSpecification/roles">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination protocol this role belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roleConnector" lowerBound="1" eType="#/0/protocol/RoleConnector" changeable="false"
            volatile="true" transient="true" derived="true" eOpposite="#/0/protocol/RoleConnector/roles">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role connector that connects this role with another role."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectors->any(c | c.oclIsKindOf(RoleConnector)).oclAsType(RoleConnector)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiRole" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the role is a multi role."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.multi"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RoleConnector" eSuperTypes="#/0/connector/Connector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a communication channel for asynchronous messages connecting two roles of a coordination protocol."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="OnlyRolesOfSameCoordinationProtocol"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="OnlyRolesOfSameCoordinationProtocol" value="-- Role connector must not connect roles at different coordination protocols&#xA;if self.coordinationProtocol.roles->oclIsUndefined() then &#xA;true&#xA;else&#xA;self.coordinationProtocol.roles = self.roles&#xA;endif"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol" lowerBound="1" eType="#/0/protocol/AbstractCoordinationSpecification"
            eOpposite="#/0/protocol/AbstractCoordinationSpecification/roleConnector">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination protocol this role connector is part of."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorQualityOfServiceAssumptions" lowerBound="1" eType="#/0/protocol/ConnectorQualityOfServiceAssumptions"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A role connector has exactly one reference for defining its quality of service assumptions like message delay and message loss."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="roles" lowerBound="2" upperBound="2" eType="#/0/protocol/Role" changeable="false"
            volatile="true" transient="true" derived="true" eOpposite="#/0/protocol/Role/roleConnector">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The two roles that are connected."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(e | e.oclIsKindOf(Role)).oclAsType(Role)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorQualityOfServiceAssumptions" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The list of quality of service assumptions for this connector. A developer defines these properties before modeling the role statecharts, because the statecharts depend on these assumptions. Software layers under the MechatronicUML layer respectively the hardware itself have to ensure that these assumptions are correct."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PreserveMessageOrderIsTrueWhenConnectorIsReliable"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This class represents a role of a coordination protocol."/>
          </eAnnotations>
          <details key="PreserveMessageOrderIsTrueWhenConnectorIsReliable" value="-- Attribute preserveMessageOrder must be true if the connector is reliable (i.e., if no message may be lost).&#xA;not self.messageLossPossible implies self.preserveMessageOrder"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="maxMessageDelay" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The maximal time a message needs from the sender to the receiver using this connector."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="messageLossPossible" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines whether messages that are sent using this connector may be lost during transport."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="preserveMessageOrder" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines whether the message order is preserved. This is achieved by dropping overtaken messages. The message order is always preserved if the connector is reliable."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="realtimestatechart" nsURI="http://www.muml.org/pim/realtimestatechart/1.0.0" nsPrefix="realtimestatechart">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package provides modeling support for Real-Time Statecharts as a combination of UML state machines and timed automata."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Deadline" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a deadline consisting of an upper and a lower bound."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The upper bound of a deadline is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The lower bound of a deadline is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AbsoluteDeadline" eSuperTypes="#/0/realtimestatechart/Deadline">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an absolute deadline. It is always associated with a transition of the statechart. The deadline depends on the value of a certain clock."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clock" lowerBound="1" eType="#/0/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the references clock of the absolute deadline."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RelativeDeadline" eSuperTypes="#/0/realtimestatechart/Deadline">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a relative deadline. It is always associated with a transition of the statechart. The deadlin is relative to the point in time when the execution of the transition starts."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Clock" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents clocks of a realtime statechart."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" eType="#/0/realtimestatechart/RealtimeStatechart" eOpposite="#/0/realtimestatechart/RealtimeStatechart/clocks">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this clock belongs to.&#xA;\todoib{Should be 1..1, but GMF needs 0..1 here!}&#xA;\todosd{is this info necessary?}"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Region" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement #/0/realtimestatechart/PrioritizedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Regions enables hierarchy and parallelism. Each state can have zero, one or more regions."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedStatechart" lowerBound="1" eType="#/0/realtimestatechart/RealtimeStatechart"
            containment="true" eOpposite="#/0/realtimestatechart/RealtimeStatechart/parentRegion">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this region embeds."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentState" lowerBound="1" eType="#/0/realtimestatechart/State" eOpposite="#/0/realtimestatechart/State/embeddedRegions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state this region is embedded."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The name of a region is derived by its conaining Real-Time Statechart"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if not self.embeddedStatechart.oclIsUndefined() then&#xA;&#x9;self.embeddedStatechart.oclAsType(realtimestatechart::RealtimeStatechart).name&#xA;else&#xA;&#x9;null&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="State" eSuperTypes="#/0/realtimestatechart/Vertex">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a composite state of a realtime statechart. Composite states may again contain realtime statecharts hence enabling the creation of hierarchical statecharts. Further more composite states have do, entry and exit actions. Also composite states define which synchronization channels are allowed to be used by embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="NoOutgoingTransitionOfFinalState NoRegionsOfFinalState UniquePrioritiesOfOutgoingTransitions UniquePrioritiesOfRegions UniqueChannelNames UniqueRegionNames InvalidClockConstraintOperator UniqueStateConnectionPointNames EntryEventAtInitialState"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="NoOutgoingTransitionOfFinalState" value="-- Final states must not have outgoing transitions&#xA;self.final implies self.outgoingTransitions->isEmpty()"/>
          <details key="NoRegionsOfFinalState" value="-- Final states must not have regions&#xA;self.final implies self.embeddedRegions->isEmpty()"/>
          <details key="UniquePrioritiesOfOutgoingTransitions" value="-- Outgoing transitions must have a unique priority&#xA;self.outgoingTransitions->isUnique(priority) "/>
          <details key="UniquePrioritiesOfRegions" value="-- Regions must have a unique priority&#xA;self.embeddedRegions->isUnique(priority)"/>
          <details key="UniqueChannelNames" value="-- Synchronization channels must have a unique name&#xA;self.channels->isUnique(name)"/>
          <details key="UniqueRegionNames" value="-- Regions must have a unique name&#xA;self.embeddedRegions->isUnique(name)"/>
          <details key="InvalidClockConstraintOperator" value="-- Clock Constraints must only use operators LESS and LESS_OR_EQUAL&#xA;self.invariants->forAll(invariant | Set{core::expressions::common::ComparingOperator::LESS, core::expressions::common::ComparingOperator::LESS_OR_EQUAL }->includes(invariant.operator))"/>
          <details key="UniqueStateConnectionPointNames" value="-- State Connection Points of a composite state must have unique names.&#xA;self.connectionPoints->isUnique(name)"/>
          <details key="EntryEventAtInitialState" value="-- @warning&#xA;-- Attention: An initial state only executes its entry event if it is activated via a firing transition. Consequently, if the RTSC starts, its initial states do not execute their entry events (their entry actions and their clock resets). Noteworthy, this only affects initial states that have no parent states and initial states where all their parents are initial states.&#xA;let allParentStates : Set(State) = self -> closure(if parentStatechart.parentRegion.oclIsUndefined() then self else parentStatechart.parentRegion.parentState endif) in&#xA;not (self.initial and allParentStates->forAll(x | x.initial) and not self.entryEvent.oclIsUndefined())"/>
        </eAnnotations>
        <eOperations name="getUniqueRegionPriority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="int nextHighestPriority=hint;&#xD;&#xA;for (; hasRegionOfPriority(nextHighestPriority); nextHighestPriority++);&#xD;&#xA;return nextHighestPriority;"/>
            <details key="documentation" value="Returns the next free higher region priority that is closest to the value provided as hint."/>
          </eAnnotations>
          <eParameters name="hint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The integer value that represents a hint for the priority to be computed."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="hasRegionOfPriority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="for (Region region : getEmbeddedRegions()) {&#xD;&#xA;&#x9;if (region.getPriority() == priority) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return false;"/>
            <details key="documentation" value="Returns true, if this state contains a region of the given priority."/>
          </eAnnotations>
          <eParameters name="priority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The priority value to be checked."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedRegions" upperBound="-1" eType="#/0/realtimestatechart/Region"
            containment="true" eOpposite="#/0/realtimestatechart/Region/parentState">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The regions of this state. Regions are used to model composite states.&#xA;In case of one region, we have an xor superstate, in case of multiple regions,&#xA;we have an AND-superstate."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="doEvent" eType="#/0/realtimestatechart/DoEvent" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The do event. It is executed periodically while the corresponding state is active."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="exitEvent" eType="#/0/realtimestatechart/ExitEvent" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The exit action is exectuted once when the corresponding state is left."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="entryEvent" eType="#/0/realtimestatechart/EntryEvent" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The entry action is exectuted once when the corresponding state is entered."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="invariants" upperBound="-1" eType="#/0/realtimestatechart/ClockConstraint"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The invariant belonging to this complex state. It describes how long it is allowed to reside in this complex state depending on the values of the clocks."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="initial" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An initial state is the first one to active if the statechart is activated. There is only one initial state allowed at the top hierarchy of a statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="final" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a final state is not allowed to have outgoing transitions."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="urgent" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If a state is active and urgent, no time is allowed to pass until the state is leaved."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="channels" upperBound="-1" eType="#/0/realtimestatechart/SynchronizationChannel"
            containment="true" eOpposite="#/0/realtimestatechart/SynchronizationChannel/state">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The synchronization channels provided by this state."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="events" ordered="false" upperBound="-1" eType="#/0/realtimestatechart/StateEvent"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived reference returns all StateEvents of this state. The StateEvents of&#xA;this state are all entry-, do- and exit-Events."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="Set{entryEvent,exitEvent,doEvent }->select(x | not x.oclIsUndefined())"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectionPoints" upperBound="-1" eType="#/0/realtimestatechart/StateConnectionPoint"
            containment="true" eOpposite="#/0/realtimestatechart/StateConnectionPoint/state">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A state references its connection points. They can only exist, if a state embeds one or more statecharts."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="simple" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="true" unsettable="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A state is simple if it does not contain a region with an embedded substatechart."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- a state is simple if it contains no regions&#xA;embeddedRegions->isEmpty()&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentStatechart" eType="#/0/realtimestatechart/RealtimeStatechart" eOpposite="#/0/realtimestatechart/RealtimeStatechart/states">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart this state belongs to.&#xA;\todoib{Should be 1..1, but GMF needs 0..1 here!}"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAvailableChannels" upperBound="-1" eType="#/0/realtimestatechart/SynchronizationChannel"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All synchronization channels accessible within this state."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(if parentStatechart.parentRegion.oclIsUndefined() then self else parentStatechart.parentRegion.parentState endif).channels ->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Vertex" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a node in a realtime statechart that is connected with other nodes via transitions."/>
        </eAnnotations>
        <eOperations name="isSuperVertexOf" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Returns if this vertex is a super vertex of another vertex."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="body" value="vertex.allSuperVertices->includes(self)"/>
          </eAnnotations>
          <eParameters name="vertex" eType="#/0/realtimestatechart/Vertex">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The vertex to be checked as a sub-vertex."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="getUniqueTransitionPriority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="int nextHighestTransitionPriority = hint;&#xD;&#xA;for (; hasOutgoingTransitionOfPriority(nextHighestTransitionPriority); nextHighestTransitionPriority++);&#xD;&#xA;return nextHighestTransitionPriority;"/>
            <details key="documentation" value="Returns the next free higher transition priority that is closest to the value provided as hint.&#xD;&#xA;\todosd{Rename hint to an understandable name.}"/>
          </eAnnotations>
          <eParameters name="hint" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The integer value that represents a hint for the priority to be computed."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="hasOutgoingTransitionOfPriority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="for (Transition transition : getOutgoingTransitions()) {&#xD;&#xA;&#x9;if (transition.getPriority() == priority) {&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;return false;"/>
            <details key="documentation" value="Returns &lt;code>true&lt;/code>, if this Vertex contains an outgoing transition of the given priority."/>
          </eAnnotations>
          <eParameters name="priority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The priority value to be checked for."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="outgoingTransitions" upperBound="-1" eType="#/0/realtimestatechart/Transition"
            eOpposite="#/0/realtimestatechart/Transition/source">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The outgoing transitions of this vertex"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="incomingTransitions" upperBound="-1" eType="#/0/realtimestatechart/Transition"
            eOpposite="#/0/realtimestatechart/Transition/target">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The incoming transitions of this vertex"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allSuperVertices" upperBound="-1" eType="#/0/realtimestatechart/Vertex"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All super vertices of this vertex."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.oclIsKindOf(State)&#xA;then self.oclAsType(State)->closure(s | if s.parentStatechart.embedded then s.parentStatechart.parentRegion.parentState else null endif)->asOrderedSet()&#xA;else&#xA;   if self.oclIsKindOf(StateConnectionPoint)&#xA;   then let state : State = self.oclAsType(StateConnectionPoint).state in state->union(state->closure(s | if s.parentStatechart.embedded then s.parentStatechart.parentRegion.parentState else null endif))->asOrderedSet()&#xA;   else OrderedSet{ }&#xA;   endif&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Transition" eSuperTypes="#/0/realtimestatechart/PrioritizedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A transition connects different vertices. If the vertex is a state a self-transition is also possible."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LegalTransitionsOnly TriggerMessageEventsMustNotHaveAnOwnedParameterBinding ValidTriggerMessageEvents ValidRaiseMessageEvents StateConnectionPointIncomingTransitionsNoSideEffectsOrDeadlines StateConnectionPointOutgoingTransitionsNoConditions StateConnectionPointOutgoingTransitionsMustBeUrgent NoCombinationOfRelativeAndAbsoluteDeadlines NoCombinationOfReceivedSynchronizationAndTriggerMessage TransitionMustBeContainedByCorrectStatechart OutgoingTransitionOfUrgentStateMustBeUrgent UsingAOneToManySchemaAtOneTransitionImpliesUsingSchemaAtAllTransitions NotMoreThanOneTriggerAndOneRaiseMessageEvent"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LegalTransitionsOnly" value="-- Inter-level transitions are invalid&#xA;&#xA;if (self.source.oclIsUndefined() or self.target.oclIsUndefined()) then&#xA;true&#xA;else&#xA;-- State A1 to ExitPoint of A2, where A2 is the direct parent state of A1&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(ExitPoint) and self.target.oclAsType(ExitPoint).state.embeddedRegions.embeddedStatechart.states->includes(self.source.oclAsType(State)))&#x9;&#xA;or&#xA;-- EntryPoint of A1 to State A2, where A1 is the direct parent state of A2&#xA;(self.source.oclIsKindOf(EntryPoint) and self.target.oclIsKindOf(State) and self.source.oclAsType(EntryPoint).state.embeddedRegions.embeddedStatechart.states->includes(self.target.oclAsType(State)))&#x9;&#xA;or&#xA;-- EntryPoint of A1 to EntryPoint of A2, where A1 is the direct parent state of A2&#xA;(self.source.oclIsKindOf(EntryPoint) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(EntryPoint).state.embeddedRegions.embeddedStatechart.states->includes(self.target.oclAsType(EntryPoint).state))&#xA;or&#xA;-- ExitPoint of A1 to ExitPoint of A2, where A2 is the direct parent state of A1&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(ExitPoint) and self.target.oclAsType(ExitPoint).state.embeddedRegions.embeddedStatechart.states->includes(self.source.oclAsType(ExitPoint).state))&#xA;&#xA;or &#xA;-- State A to State B within the same statechart&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(State) and self.source.oclAsType(State).parentStatechart = self.target.oclAsType(State).parentStatechart)&#xA;or&#xA;-- State A to EntryPoint of B, where A and B are in the same statechart&#xA;(self.source.oclIsKindOf(State) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(State).parentStatechart = self.target.oclAsType(EntryPoint).state.parentStatechart)&#xA;or&#xA;-- ExitPoint of A to EntryPoint of B, where A and B are in the same statechart&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(EntryPoint) and self.source.oclAsType(ExitPoint).state.parentStatechart = self.target.oclAsType(EntryPoint).state.parentStatechart)&#xA;or&#xA;-- ExitPoint of A to State B, where A and B are in the same statechart&#xA;(self.source.oclIsKindOf(ExitPoint) and self.target.oclIsKindOf(State) and self.source.oclAsType(ExitPoint).state.parentStatechart = self.target.oclAsType(State).parentStatechart)&#xA;endif"/>
          <details key="TriggerMessageEventsMustNotHaveAnOwnedParameterBinding" value="-- Trigger Message Event must be parameterless (no parameter binding allowed)&#xA;not self.triggerMessageEvent.message.oclIsUndefined() implies&#xA;self.triggerMessageEvent.message.parameterBinding->isEmpty()"/>
          <details key="ValidTriggerMessageEvents" value="-- Trigger message type must be added to receiver message types&#xA;not triggerMessageEvent.message.instanceOf.oclIsUndefined() implies receiverMessageTypes->includes(triggerMessageEvent.message.instanceOf)"/>
          <details key="ValidRaiseMessageEvents" value="-- Raise message type must be added to sender message types&#xA;not raiseMessageEvent.message.instanceOf.oclIsUndefined() implies senderMessageTypes->includes(raiseMessageEvent.message.instanceOf)"/>
          <details key="StateConnectionPointIncomingTransitionsNoSideEffectsOrDeadlines" value="-- Transitions to state connection points must not define side effects or deadlines&#xA;(not self.target.oclIsUndefined() and self.target.oclIsKindOf(realtimestatechart::StateConnectionPoint))&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.clockResets->isEmpty()&#xA;&#x9;&#x9;and self.action.oclIsUndefined()&#xA;&#x9;&#x9;and self.raiseMessageEvent.oclIsUndefined()&#xA;&#x9;&#x9;and self.absoluteDeadlines->isEmpty()&#xA;&#x9;&#x9;and self.relativeDeadline.oclIsUndefined()&#xA;&#x9;)"/>
          <details key="StateConnectionPointOutgoingTransitionsNoConditions" value="-- Transitions from state connection points must not have conditions&#xA;(not self.source.oclIsUndefined() and self.source.oclIsKindOf(realtimestatechart::StateConnectionPoint))&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.triggerMessageEvent.oclIsUndefined()&#xA;&#x9;&#x9;and self.clockConstraints->isEmpty()&#xA;&#x9;&#x9;and self.guard.oclIsUndefined()&#xA;&#x9;&#x9;and self.synchronization.oclIsUndefined()&#xA;&#x9;)"/>
          <details key="StateConnectionPointOutgoingTransitionsMustBeUrgent" value="-- Transitions from state connection points must be urgent&#xA;(not self.source.oclIsUndefined() and self.source.oclIsKindOf(realtimestatechart::StateConnectionPoint))&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.urgent&#xA;&#x9;)"/>
          <details key="NoCombinationOfRelativeAndAbsoluteDeadlines" value="-- Defining both relative and absolute deadlines is forbidden&#xA;(not self.relativeDeadline.oclIsUndefined()) implies (self.absoluteDeadlines->isEmpty())"/>
          <details key="NoCombinationOfReceivedSynchronizationAndTriggerMessage" value="-- A transition must not specify a received synchronization and a trigger message at the same time&#xA;((not self.synchronization.oclIsUndefined()) and (self.synchronization.kind = SynchronizationKind::RECEIVE))&#xA;implies&#xA;self.triggerMessageEvent.oclIsUndefined()"/>
          <details key="TransitionMustBeContainedByCorrectStatechart" value="-- A transition must be contained by its logical parent statechart&#xA;(not self.statechart.oclIsUndefined()) implies (self.statechart.transitions->includes(self))"/>
          <details key="OutgoingTransitionOfUrgentStateMustBeUrgent" value="-- An outgoing transition of an urgent state must be urgent itself&#xA;(self.source.oclIsKindOf(State) and self.source.oclAsType(State).urgent) implies self.urgent"/>
          <details key="UsingAOneToManySchemaAtOneTransitionImpliesUsingSchemaAtAllTransitions" value="-- If a one-to-many communication schema is used at a transition, the behavioral element must be a multi role or multi port and all other messages of the RTSC must use a one-to-many communication schema  as well. Moreover, the RTSC may not define explicit coordinator and subrole regions.&#xA;let result : Boolean = (&#xA;let selfStatechart : RealtimeStatechart = self.statechart in &#xA;let allChildrenOfRoleOrPortStatechart : Set(RealtimeStatechart) =if selfStatechart.oclIsUndefined() then Set{} else selfStatechart.getPortOrRoleStatechart() -> closure(states.embeddedRegions.embeddedStatechart) endif in &#xA;let allTransitions : OrderedSet(Transition) =  allChildrenOfRoleOrPortStatechart->asOrderedSet()->append(selfStatechart.getPortOrRoleStatechart()).transitions->asOrderedSet() in &#xA;&#xA;(selfStatechart.usesOneToManyCommunicationSchemata and not (selfStatechart.getPortOrRoleStatechart() = null)) implies ( &#xA;allTransitions->forAll(t : Transition |  (not(t.raiseMessageEvent = null) implies not (t.raiseMessageEvent.oneToManyCommunicationSchema = null)) and ( not(t.triggerMessageEvent = null) implies not (t.triggerMessageEvent.oneToManyCommunicationSchema = null)))&#xA;)&#xA;) in not result.oclIsUndefined() and result&#xA;"/>
          <details key="NotMoreThanOneTriggerAndOneRaiseMessageEvent" value="-- There may only be at most one Raise MessageEvent and at most one Trigger MessageEvent&#xA;self.events->select(event|event.oclIsKindOf(realtimestatechart::AsynchronousMessageEvent) and event.oclAsType(realtimestatechart::AsynchronousMessageEvent).kind = realtimestatechart::EventKind::RAISE) -> size() &lt;2&#xA;and self.events->select(event|event.oclIsKindOf(realtimestatechart::AsynchronousMessageEvent) and event.oclAsType(realtimestatechart::AsynchronousMessageEvent).kind = realtimestatechart::EventKind::TRIGGER) -> size() &lt;2"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="synchronization" eType="#/0/realtimestatechart/Synchronization" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The synchronisation which is sent upon activation of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" lowerBound="1" eType="#/0/realtimestatechart/Vertex" eOpposite="#/0/realtimestatechart/Vertex/incomingTransitions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state which is the target of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" lowerBound="1" eType="#/0/realtimestatechart/Vertex" eOpposite="#/0/realtimestatechart/Vertex/outgoingTransitions">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state which is the source of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="statechart" lowerBound="1" eType="#/0/realtimestatechart/RealtimeStatechart"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The realtime statechart that this transition locically belongs to."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if(self.source.oclIsKindOf(State))&#xA;then self.source.oclAsType(State).parentStatechart&#xA;else&#xA;   if(self.target.oclIsKindOf(State))&#xA;   then self.target.oclAsType(State).parentStatechart&#xA;   else&#xA;      if(self.source.oclIsKindOf(ExitPoint))&#xA;      then self.source.oclAsType(ExitPoint).state.parentStatechart&#xA;      else&#xA;         if(self.target.oclIsKindOf(EntryPoint))&#xA;&#x9;  then self.target.oclAsType(EntryPoint).state.parentStatechart&#xA;&#x9;  else null -- this transition is illegal according to our syntactic constraints, no enclosing statechart can be assigned&#xA;&#x9;  endif&#xA;      endif&#xA;   endif&#xA;endif&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockResets" upperBound="-1" eType="#/0/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock resets of this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="triggerMessageEvent" eType="#/0/realtimestatechart/AsynchronousMessageEvent"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The trigger event of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let eventSet : Sequence(AsynchronousMessageEvent) = self.events->select(e | e.oclIsKindOf(AsynchronousMessageEvent) and e.kind=EventKind::TRIGGER).oclAsType(AsynchronousMessageEvent) in&#xA;if eventSet ->size() = 0 then null else eventSet -> first() endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="raiseMessageEvent" eType="#/0/realtimestatechart/AsynchronousMessageEvent"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The event which is raised upon activiation of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="let eventSet : Sequence(AsynchronousMessageEvent) = self.events->select(e | e.oclIsKindOf(AsynchronousMessageEvent) and e.kind=EventKind::RAISE).oclAsType(AsynchronousMessageEvent) in&#xA;if eventSet ->size() = 0 then null else eventSet -> first() endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockConstraints" upperBound="-1" eType="#/0/realtimestatechart/ClockConstraint"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A clock constraint restricts when the transition can be activeted in dependency of the values of the clock."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="absoluteDeadlines" upperBound="-1" eType="#/0/realtimestatechart/AbsoluteDeadline"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a transition can has one or more absolute deadlines"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="relativeDeadline" eType="#/0/realtimestatechart/RelativeDeadline" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="a transition can have one relative deadline"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="blockable" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Needed for failure propagation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="guard" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The guard of a transition is defined by an expression which should have return type boolean. Comparing clock values is not allowed (use clock constraints instead)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="events" upperBound="-1" eType="#/0/realtimestatechart/TransitionEvent"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All events which belong to this transition."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" eType="#/0/realtimestatechart/Action" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The side effect of this transition. A side effect might be a variable assignment as well as a method invocation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="urgent" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Indicates whether this transition fires immediately when it is enabled."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All message types accessible by the trigger message event of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if statechart.oclIsUndefined() then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;if statechart.getPortOrRoleStatechart().oclIsUndefined() then&#xA;&#x9;&#x9;OrderedSet { }&#xA;&#x9;else &#xA;&#x9;&#x9;let b : behavior::BehavioralElement = statechart.getPortOrRoleStatechart().behavioralElement in&#xA;&#x9;&#x9;if b.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if b.oclIsKindOf(connector::DiscreteInteractionEndpoint) then&#xA;&#x9;&#x9;&#x9;&#x9;b.oclAsType(connector::DiscreteInteractionEndpoint).receiverMessageTypes&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All message types accessible by the raise message event of this transition."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if statechart.oclIsUndefined() then&#xA;&#x9;OrderedSet { }&#xA;else&#xA;&#x9;if statechart.getPortOrRoleStatechart().oclIsUndefined() then&#xA;&#x9;&#x9;OrderedSet { }&#xA;&#x9;else&#xA;&#x9;&#x9;let b : behavior::BehavioralElement = statechart.getPortOrRoleStatechart().behavioralElement in&#xA;&#x9;&#x9;if b.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if b.oclIsKindOf(connector::DiscreteInteractionEndpoint) then&#xA;&#x9;&#x9;&#x9;&#x9;b.oclAsType(connector::DiscreteInteractionEndpoint).senderMessageTypes&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;OrderedSet { }&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClockConstraint" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an arbitrary time constraint that can either be used as an invariant constraint of a state or as a transition guard."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="bound" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The bound of a deadline (upper or lower) is a natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clock" lowerBound="1" eType="#/0/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock references in this clock constraint."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="operator" lowerBound="1" eType="ecore:EEnum ../../org.muml.core/model/core.ecore#//expressions/common/ComparingOperator"
            defaultValueLiteral="LESS_OR_EQUAL">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The operator that is used in this clock constraint."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Action" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An action is used as a side effect of a transition as well as within a state. Each transition can&#xA;only define one action. A state can define up to three actions (one for state entry, one for state&#xA;exit, one while dwelling within the state).&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="expressions" lowerBound="1" upperBound="-1" eType="#/1/expressions/Expression"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An action has a defined expression, which can be expressed in different languages."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AsynchronousMessageEvent" eSuperTypes="#/0/realtimestatechart/TransitionEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An AsynchronousMessageEvent is a TransitionEvent that corresponds to&#xA;receiving or sending a message. They are used to model asynchronous&#xA;communication between realtime statecharts. A trigger events specifies&#xA;that the corresponding message has to be received for the transition to be&#xA;enabled, a raised event specifies that the corresponding message will be&#xA;sent upon execution of the transition."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="RaiseMessageEventImpliesParameterBinding RaiseMessageEventImpliesSendingCommunicationSchema TriggerMessageEventImpliesReceivingCommunicationSchema"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="RaiseMessageEventImpliesParameterBinding" value="-- A raise message event must bind a value to every parameter&#xA;let messageType : msgtype::MessageType = self.message.instanceOf in&#xA;(self.kind=EventKind::RAISE and not self.message.oclIsUndefined()) implies ( not messageType.oclIsUndefined() implies (messageType.parameters->asBag() = message.parameterBinding.parameter->asBag()))&#xA;"/>
          <details key="RaiseMessageEventImpliesSendingCommunicationSchema" value="-- When using One-To-Many Communication Schemata, a RaiseMessageEvent may only use sending One-To-Many Communication Schemata.&#xA;if (self.oneToManyCommunicationSchema->isEmpty()) then &#xA;&#x9;true &#xA;else&#xA;&#x9;self.kind =EventKind::RAISE implies (self.oneToManyCommunicationSchema.oclIsKindOf(one_to_n_schemata::SendingOneToManyCommunicationSchema))&#xA;endif"/>
          <details key="TriggerMessageEventImpliesReceivingCommunicationSchema" value="-- When using One-To-Many Communication Schemata, a TiggerMessageEvent may only use receiving One-To-Many Communication Schemata.&#xA;if (self.oneToManyCommunicationSchema->isEmpty()) then &#xA;&#x9;true &#xA;else&#xA;&#x9;self.kind =EventKind::TRIGGER implies (self.oneToManyCommunicationSchema.oclIsKindOf(one_to_n_schemata::ReceivingOneToManyCommunicationSchema))&#xA;endif"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="message" lowerBound="1" eType="#/0/realtimestatechart/Message" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message associated with this event. The message is either requested to be&#xA;received (trigger event) or it will be sent (raise event)."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="oneToManyCommunicationSchema" eType="#/0/realtimestatechart/one_to_n_schemata/OneToManyCommunicationSchema"
            containment="true" eOpposite="#/0/realtimestatechart/one_to_n_schemata/OneToManyCommunicationSchema/asynchronousMessageEvent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An asynchronous message event must have a one-to-many communication schema if the statechart defines the behavior of a multi role."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DoEvent" eSuperTypes="#/0/realtimestatechart/StateEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The action of a state that is executed periodically as long as this state is active. The first period starts after the execution of the entry-action."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" lowerBound="1" eType="#/0/realtimestatechart/Action" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each entry or exit action has one or more actions."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="period" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the lower bound of the period"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryOrExitEvent" abstract="true" eSuperTypes="#/0/realtimestatechart/StateEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an entry or an exit event. The actions associated with this&#xA;event will be executed when the state is entered or left respectively."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clockResets" upperBound="-1" eType="#/0/realtimestatechart/Clock">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clock resets of this action"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" eType="#/0/realtimestatechart/Action" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Each entry or exit event can have one or more actions."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SynchronizationChannel" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Defines a type of a synchronization channel that can be used to synchronize&#xA;between statecharts contained as substatecharts in the same state.&#xA;Serves as a type for Synchronizations."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValidSelectorType"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValidSelectorType" value="-- The selector type must be of and Integer type or of type role iff this RTSC is a multi-role RTSC, or of type port iff this RTSC is a multi-port RTSC &#xA;let parentRtsc : realtimestatechart::RealtimeStatechart = self.state.parentStatechart in&#xA;&#xA;let behavElement : behavior::BehavioralElement = if (parentRtsc->isEmpty()) then null else parentRtsc.behavioralElement endif in&#xA;&#xA;let selectorTypeIsValidPrimitiveType : Boolean = if (not self.selectorType.oclIsUndefined()) then &#xA;self.selectorType.oclIsKindOf(types::PrimitiveDataType) &#xA;and (self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::BOOLEAN &#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::INT8 &#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::INT16 &#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::INT32&#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::INT64&#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::UINT8 &#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::UINT16 &#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::UINT32&#xA;&#x9;or self.selectorType.oclAsType(types::PrimitiveDataType).primitiveType=types::PrimitiveTypes::UINT64&#xA;)&#xA;else true endif in &#xA;&#xA;if self.selectorType.oclIsUndefined() then&#xA;&#x9;true&#xA;else &#xA;&#x9;if behavElement.oclIsUndefined() then &#xA;&#x9;&#x9;selectorTypeIsValidPrimitiveType&#xA;&#x9;else &#xA;&#x9;selectorTypeIsValidPrimitiveType &#xA;&#x9;&#x9;or (if behavElement.oclIsKindOf(connector::DiscreteInteractionEndpoint) then behavElement.oclAsType(connector::DiscreteInteractionEndpoint).multi and self.selectorType.oclIsKindOf(connector::DiscreteInteractionEndpoint) else false endif)&#xA;&#x9;endif &#xA;endif&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1" eType="#/0/realtimestatechart/State" eOpposite="#/0/realtimestatechart/State/channels">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The state in which this synchronization channel is defined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selectorType" eType="#/0/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A data type that provides possible values for the selection of a particular counterpart when synchronizing over this channel."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Synchronization" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Two transitions can synchron fire. One transition is the sender, the other the receiver. This means that both transitions (exactly one sender and one receiver) must be activated and has to fire at the same time."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="SelectorExpressionNecessary SelectorExpressionForbidden"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SelectorExpressionNecessary" value="-- Selected SynchronizationChannel requires this Synchronization to specify a selector expression.&#xA;not syncChannel.selectorType.oclIsUndefined() implies not selectorExpression.oclIsUndefined()"/>
          <details key="SelectorExpressionForbidden" value="-- Using selector expression requires to define a data type for the channel. &#xA;not syncChannel.oclIsUndefined() implies (syncChannel.selectorType.oclIsUndefined() implies selectorExpression.oclIsUndefined())"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="syncChannel" eType="#/0/realtimestatechart/SynchronizationChannel">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="the channel that is used by the synchronization"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#/0/realtimestatechart/SynchronizationKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides the kind: Is this a send or a reveive synchronization?"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selectorExpression" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An expression that evaluates to a value which is used to select a particular counterpart for the synchronization."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrioritizedElement" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Enables the priorization of elements. The minimum priority is 1."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PriorityGreaterOrEqualOne"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PriorityGreaterOrEqualOne" value="-- Priority must be >= 1&#xA;self.priority >= 1"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="priority" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The integer value that represents the priority."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RealtimeStatechart" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement #/0/behavior/Behavior">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A real-time statechart (RTSC) defines a state-based behavior for a behavioral element. An RTSC may contain states and transitions. Furthermore, RTSCs may be hierarchical. It can define variables, clocks, and operations."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueNameOfStates NoCycles OneInitialState CommunicationSchemaOnlyUsedInMultiRoleOrMultiPort OnlyDefineSchemataBeforeDisassembling ComponentBehaviorStatechartMustBeWellFormed MultiDiscreteInteractionEndpointBehaviorStatechartMustBeWellFormed NoMessageSendInCoordinatorRegion HybridPortNamesAndVariableNamesMustDiffer"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueNameOfStates" value="-- State names must be unique.&#xA;self.states->isUnique(name)"/>
          <details key="NoCycles" value="-- An RTSC may not be the parent of the RTSC that it contains, i.e., cycles are not allowed.&#xA;(not self.parentRegion.parentState.parentStatechart.oclIsUndefined())&#xA;implies&#xA;(not self.isSuperStatechartOf(self.parentRegion.parentState.parentStatechart))"/>
          <details key="OneInitialState" value="-- An RTSC requires an initial state.&#xA;self.states->select(s |  s.initial)->size() = 1"/>
          <details key="CommunicationSchemaOnlyUsedInMultiRoleOrMultiPort" value="-- An RTSC may only use one-to-many communication schema if its behavioral element is a multi role or multi port.&#xA;(not (self.getPortOrRoleStatechart().behavioralElement.oclIsUndefined()) and  self.getPortOrRoleStatechart().behavioralElement.oclIsKindOf(component::AtomicComponent))&#xA;or&#xA;(&#xA;self.usesOneToManyCommunicationSchemata implies (&#xA;not (self.getPortOrRoleStatechart().behavioralElement.oclIsUndefined()) and  self.getPortOrRoleStatechart().behavioralElement.oclIsKindOf(connector::DiscreteInteractionEndpoint)&#xA;and self.getPortOrRoleStatechart().behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).multi)&#xA;)"/>
          <details key="OnlyDefineSchemataBeforeDisassembling" value="-- One-to-many communication schemata may only be used if the RTSC of the multi role or multi port does not distinguish between coordinator and subrole RTSC.&#xA;self.usesOneToManyCommunicationSchemata implies self.getPortOrRoleStatechart().behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).subroleBehavior.oclIsUndefined() and  self.getPortOrRoleStatechart().behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).coordinatorBehavior.oclIsUndefined() "/>
          <details key="ComponentBehaviorStatechartMustBeWellFormed" value="-- The component behavior RTSC must contain at the top-level exactly one state and no transitions.&#xA;&#xA;let behavioralElement : behavior::BehavioralElement = self.behavioralElement in &#xA;(not behavioralElement.oclIsUndefined() and behavioralElement.oclIsKindOf(component::Component)) implies ( self.states->size() = 1 and self.transitions->size() = 0)"/>
          <details key="MultiDiscreteInteractionEndpointBehaviorStatechartMustBeWellFormed" value="-- If a multi port or multi role RTSC does not use one-to-many communication schemata, then it must contain exactly one state and no transitions on top-level. Furthermore, the top level state defines exactly two regions: one region defines the DiscreteInteractionEndpoint.coordinatorBehavior, the other one defines the DiscreteInteractionEndpoint.subRoleBehavior.&#xA;let behavioralElement : behavior::BehavioralElement = self.behavioralElement in &#xA;(not behavioralElement.oclIsUndefined() and behavioralElement.oclIsKindOf(connector::DiscreteInteractionEndpoint) and behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).multi and not self.usesOneToManyCommunicationSchemata) implies ( self.states->size() = 1 &#xA;and self.transitions->size() = 0 and self.states->at(1).embeddedRegions->size() = 2 and &#xA;self.states->at(1).embeddedRegions.embeddedStatechart->includes(behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).subroleBehavior) and self.states->at(1).embeddedRegions.embeddedStatechart->includes(behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).coordinatorBehavior) &#xA;)&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;"/>
          <details key="NoMessageSendInCoordinatorRegion" value="-- It is not allowed to specify AsynchronousMessageEvents in the coordinator region.&#xA;if(self.getPortOrRoleStatechart().behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).coordinatorBehavior.oclIsInvalid())&#xA;then true else &#xA;(self.getPortOrRoleStatechart().behavioralElement.oclAsType(connector::DiscreteInteractionEndpoint).coordinatorBehavior = self )implies (&#xA;let allChildrenStatecharts: Set(realtimestatechart::RealtimeStatechart) = self->closure(t|t.oclAsType(realtimestatechart::RealtimeStatechart).states.embeddedRegions.embeddedStatechart) in &#xA;let allTransitions : Bag(realtimestatechart::Transition) = allChildrenStatecharts.transitions->union(self.transitions) in&#xA;allTransitions->select(t| not t.triggerMessageEvent.oclIsUndefined() or not t.raiseMessageEvent.oclIsUndefined())->isEmpty()&#xA;)&#xA;endif"/>
          <details key="HybridPortNamesAndVariableNamesMustDiffer" value="-- The names of hybrid ports and variable names of the RTSC must differ.&#xA;let com:component::AtomicComponent = if(self.getHighestParentStatechart().behavioralElement.oclIsKindOf(component::AtomicComponent)) &#xA;then self.getHighestParentStatechart().behavioralElement.oclAsType(component::AtomicComponent) else null endif&#xA; in  let allSubRoleSpecificVariables:Set(behavior::Variable) = self -> closure(if parentRegion.oclIsUndefined() then self else parentRegion.parentState.parentStatechart endif).subRoleSpecificVariables->asSet() in&#xA; not com.oclIsUndefined() implies  com.ports->select(port|port.oclIsKindOf(component::HybridPort)).name->forAll(portName| self.allAvailableVariables.name->excludes(portName) and allSubRoleSpecificVariables.name->excludes(portName))&#xA;"/>
        </eAnnotations>
        <eOperations name="isSuperStatechartOf" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="// TODO: Replace by OCL's transitive closure?&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;Assert.isLegal(statechart != null);&#xD;&#xA;&#xD;&#xA;BreadthFirstSearchAlgorithm bfs = new BreadthFirstSearchAlgorithm();&#xD;&#xA;return bfs.search(statechart, new ISearchVisitor() {&#xD;&#xA;&#xD;&#xA;&#x9;@Override&#xD;&#xA;&#x9;public boolean visit(Object object) {&#xD;&#xA;&#x9;&#x9;return !RealtimeStatechartImpl.this.equals(object);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;@Override&#xD;&#xA;&#x9;public List&lt;?> getAdjacentNodes(Object object) {&#xD;&#xA;&#x9;&#x9;RealtimeStatechart rtsc = (RealtimeStatechart) object;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;List&lt;Object> parentStatecharts = new ArrayList&lt;Object>();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Region region = rtsc.getParentRegion();&#xD;&#xA;&#x9;&#x9;if (region != null) {&#xD;&#xA;&#x9;&#x9;&#x9;// List&lt;Region> regions = rtsc.getParentRegions();&#xD;&#xA;&#x9;&#x9;&#x9;// for (Region region : regions) {&#xD;&#xA;&#x9;&#x9;&#x9;State state = region.getParentState();&#xD;&#xA;&#x9;&#x9;&#x9;if (state != null &amp;&amp; state.getParentStatechart() != null) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parentStatecharts.add(state.getParentStatechart());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;// }&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;return parentStatecharts;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;});"/>
            <details key="documentation" value="Returns whether this statechart is a super-statechart of the given Real-Time Statechart."/>
          </eAnnotations>
          <eParameters name="statechart" lowerBound="1" eType="#/0/realtimestatechart/RealtimeStatechart">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The statechart to be checked for being a sub-statechart."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="getHighestParentStatechart" lowerBound="1" eType="#/0/realtimestatechart/RealtimeStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="RealtimeStatechart rtsc = this;&#xD;&#xA;while (rtsc.isEmbedded()==true)&#xD;&#xA;{rtsc = rtsc.getParentRegion().getParentState().getParentStatechart();} &#xD;&#xA;return rtsc;"/>
            <details key="documentation" value="Returns realtime statechart which represents the root of the hierarchy tree."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getPortOrRoleStatechart" lowerBound="1" eType="#/0/realtimestatechart/RealtimeStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="// check if this rtsc has a behavioral element&#xD;&#xA;RealtimeStatechart rtsc = this;&#xD;&#xA;if (rtsc.getBehavioralElement()!=null &amp;&amp; ((rtsc.getBehavioralElement() instanceof Port) || (rtsc.getBehavioralElement() instanceof Role))) return rtsc;&#xD;&#xA;&#xD;&#xA;// search for ancestor with behavioral element&#xD;&#xA;while (rtsc.isEmbedded()==true)&#xD;&#xA;{&#xD;&#xA;rtsc = rtsc.getParentRegion().getParentState().getParentStatechart();&#xD;&#xA;if (rtsc.getBehavioralElement()!=null &amp;&amp; ((rtsc.getBehavioralElement() instanceof Port) || (rtsc.getBehavioralElement() instanceof Role))) return rtsc;&#xD;&#xA;} &#xD;&#xA;&#xD;&#xA;// no rtsc found with behavioral element&#xD;&#xA;return this;"/>
            <details key="documentation" value="Returns itself if a Port or a Role is referenced or the next ancestor that references a Port or a Role. If no Port or a Role is found, then itself is returned."/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentRegion" eType="#/0/realtimestatechart/Region" eOpposite="#/0/realtimestatechart/Region/embeddedStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the real-time statechart is embedded into a region of a composite state,&#xA;than this reference returns the region of this state. If the real-time statechart&#xA;is not embedded, this reference will be undefined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="transitions" upperBound="-1" eType="#/0/realtimestatechart/Transition"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The transitions of the realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="states" lowerBound="1" upperBound="-1" eType="#/0/realtimestatechart/State"
            containment="true" eOpposite="#/0/realtimestatechart/State/parentStatechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The states of this realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clocks" upperBound="-1" eType="#/0/realtimestatechart/Clock" containment="true"
            eOpposite="#/0/realtimestatechart/Clock/statechart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The clocks of this realtime statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="flat" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute allows to checks whether a statechart is flat or not. In a&#xA;flat statechart, none of the contained states contains a regions with an embedded&#xA;substatechart."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- a statechart is flat if it exclusively contains simple states&#xA;states->forAll(simple)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="availableClocks" ordered="false" upperBound="-1" eType="#/0/realtimestatechart/Clock"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Available clocks are all clocks that were defined in this statechart or in ancestor statecharts."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(&#xA;&#x9;if parentRegion.oclIsUndefined() then &#xA;&#x9;&#x9;self &#xA;&#x9;else &#xA;&#x9;&#x9;parentRegion.parentState.parentStatechart &#xA;&#x9;endif&#xA;).clocks->asSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="embedded" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This attribute specifies whether this realtime statechart is embedded into a region or not."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="not self.parentRegion.oclIsUndefined()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAvailableVariables" upperBound="-1" eType="#/0/behavior/Variable" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All variables accessible within this statechart."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self -> closure(if parentRegion.oclIsUndefined() then self else parentRegion.parentState.parentStatechart endif).variables->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAvailableOperations" upperBound="-1" eType="#/0/behavior/Operation"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="All operations accessible within this statechart."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- consider operations defined by self and by all parent RTSCs and include operations of all used OperationRepositories (either by self or by parent)&#xA;let allParentRTSCs : Set(RealtimeStatechart) = self -> closure(if parentRegion.oclIsUndefined() then self else parentRegion.parentState.parentStatechart endif) in&#xA;allParentRTSCs.operations ->union(allParentRTSCs.usedOperationRepositories.operations) ->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="usedOperationRepositories" upperBound="-1" eType="#/0/behavior/OperationRepository">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A Real-time Statechart may use an arbitrary number of OperationRepositories. Then, the Real-Time Statechart may access all of the operations that are contained in the OperationRepository, i.e., it may invoke them whereever an Operation may be invoked."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="usesOneToManyCommunicationSchemata" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute allows to easily check whether a oneToManyCommunicationSchema is used or not."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="-- a RTSC uses OneToManyCommunicationSchemata if itself uses a oneToManyCommunicationSchema or one of the its children statecharts&#xA;let allRTSCs : Set(RealtimeStatechart) = self->closure(states.oclAsType(State).embeddedRegions.embeddedStatechart)->including(self) in &#xA;allRTSCs.transitions->exists(t : Transition | (not t.triggerMessageEvent.oneToManyCommunicationSchema.oclIsInvalid() and &#xA;&#x9;not (t.triggerMessageEvent.oneToManyCommunicationSchema = null)&#xA;) or (not t.raiseMessageEvent.oneToManyCommunicationSchema.oclIsInvalid() and not (t.raiseMessageEvent.oneToManyCommunicationSchema = null)))&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="subRoleSpecificVariables" upperBound="-1" eType="#/0/behavior/Variable"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of variables that is available within each subrole instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="subRoleSpecificClocks" upperBound="-1" eType="#/0/realtimestatechart/Clock"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of clocks that is available within each subrole instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="subRoleSpecificOperations" upperBound="-1" eType="#/0/behavior/Operation"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The set of operations that is available within each subrole instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="SynchronizationKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A synchronization has two possible kinds: send and receive."/>
        </eAnnotations>
        <eLiterals name="SEND" literal="SEND">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a send synchronization."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="RECEIVE" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a receive synchronization."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Event" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class represents all kinds of events that may occur in a statechart.&#xA;A event can either be a trigger event or a raise event."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" eType="#/0/realtimestatechart/EventKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides the kind: Is this a raise event or a trigger event?&#xA;&#xA;A event may either be a trigger event or a raise event. A trigger event triggers&#xA;some action within the statechart, a raise event is generated by the statechart&#xA;and will be processed by another statechart."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TransitionEvent" abstract="true" eSuperTypes="#/0/realtimestatechart/Event">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A TransitionEvent is an event that occurs at a transition of a real-time statechart.&#xA;Trigger Events are part of the precondition for activating the transition, raise&#xA;events are generated as a result of firing the transition."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StateEvent" abstract="true" eSuperTypes="#/0/realtimestatechart/Event">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A StateEvent is an event that occurs within a state of a real-time statechart.&#xA;StateEvents may only be trigger events."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Message" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The messages are exchanged between components in order to communicate&#xA;asynchronously. A message is typed over a message type and provides a&#xA;binding of all parameters defined by the message type to concrete values."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="instanceOf" lowerBound="1" eType="#/0/msgtype/MessageType">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="msgtype::MessageType::allInstances()->select(x |&#xD;&#xA;if( self.oclAsType(ecore::EObject).eContainer().oclIsTypeOf(realtimestatechart::AsynchronousMessageEvent)  and self.oclAsType(ecore::EObject).eContainer().eContainer().oclIsTypeOf(realtimestatechart::Transition)) then &#xD;&#xA;&#x9;let messageEvent : realtimestatechart::AsynchronousMessageEvent = self.oclAsType(ecore::EObject).eContainer().oclAsType(realtimestatechart::AsynchronousMessageEvent)  in &#xD;&#xA;&#x9;let transition : realtimestatechart::Transition = messageEvent.oclAsType(ecore::EObject).eContainer().oclAsType(realtimestatechart::Transition) in &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if(messageEvent.kind = realtimestatechart::EventKind::TRIGGER) then&#xD;&#xA;&#x9;&#x9;transition.receiverMessageTypes->includes(x)&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;transition.senderMessageTypes->includes(x)&#xD;&#xA;&#x9;endif&#xD;&#xA;else&#xD;&#xA;&#x9;true&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;)"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Retrieves the message type this message is typed over."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameterBinding" upperBound="-1" eType="#/0/behavior/ParameterBinding"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The collection of parameter bindings for this message. All parameters of the message type must be bound exactly once."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="EventKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An event has two kinds: raise and trigger."/>
        </eAnnotations>
        <eLiterals name="RAISE">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a raise event."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="TRIGGER" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represents a trigger event."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryEvent" eSuperTypes="#/0/realtimestatechart/EntryOrExitEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an entry event. The action associated with this&#xA;event will be executed when the state is entered.&#xA;&#xA;&#xA;% We need this subclass, because GMF forbids using the same semantic&#xA;element for different notational elements within the same container."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExitEvent" eSuperTypes="#/0/realtimestatechart/EntryOrExitEvent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an exit event. The action associated with this&#xA;event will be executed when the state is left.&#xA;\paragraph{Note}&#xA;We need this subclass, because GMF forbids using the same semantic&#xA;element for different notational elements within the same container."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StateConnectionPoint" abstract="true" eSuperTypes="#/0/realtimestatechart/Vertex">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A ConnectionPoint is a pseudostate which makes it possible to chain transitions between different hierarchy levels. The ConnectionPoint is assigned to a state."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ConnectionPointsOnlyAtCompositeStates"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ConnectionPointsOnlyAtCompositeStates" value="-- State connection points are only allowed at composite (non-simple) states&#xA;not self.state.oclIsUndefined() implies not self.state.simple"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="state" lowerBound="1" eType="#/0/realtimestatechart/State" eOpposite="#/0/realtimestatechart/State/connectionPoints">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The StateEntryPoint is assigned to a state."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EntryPoint" eSuperTypes="#/0/realtimestatechart/StateConnectionPoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An EntryPoint is an intermediate pseudostate which makes it possible to chain transitions between different hierarchy levels. The EntryPoint is assigned to a state. An EntryPoint is used to activate a dedicated inner state for embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneIncomingTransition OneOutgoingTransitionPerRegion"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneIncomingTransition" value="-- Entry point needs at least one incoming transition&#xA;self.incomingTransitions ->notEmpty()"/>
          <details key="OneOutgoingTransitionPerRegion" value="-- all regions of the parent state must have exactly one vertex that the EntryPoint connects to&#xA;(not self.state.oclIsUndefined()) implies self.state.embeddedRegions->forAll(r |&#xA;&#x9;self.outgoingTransitions->one(t |&#xA;&#x9;&#x9;(t.target.oclIsKindOf(State) and t.target.oclAsType(State).parentStatechart.parentRegion = r)&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;(t.target.oclIsKindOf(EntryPoint) and t.target.oclAsType(EntryPoint).state.parentStatechart.parentRegion = r)&#xA;&#x9;)&#xA;)"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExitPoint" eSuperTypes="#/0/realtimestatechart/StateConnectionPoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An ExitPoint is an intermediate pseudostate which makes it possible to chain transitions between different hierarchy levels. The ExitPoint is assigned to a state. An ExitPoint is used to jointly deactivate dedicated inner states of embedded statecharts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneIncomingTransitionPerRegion OneOutgoingTransition AtMostOneConnectingRegionWithSynchronizations AtMostOneConnectingRegionWithTriggerMessageEvents"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneIncomingTransitionPerRegion" value="-- all regions of the parent state must have at least one vertex that connects to the ExitPoint&#xA;(not self.state.oclIsUndefined()) implies self.state.embeddedRegions->forAll(r |&#xA;&#x9;self.incomingTransitions->exists(t |&#xA;&#x9;&#x9;(t.source.oclIsKindOf(State) and t.source.oclAsType(State).parentStatechart.parentRegion = r)&#xA;&#x9;&#x9;or&#xA;&#x9;&#x9;(t.source.oclIsKindOf(ExitPoint) and t.source.oclAsType(ExitPoint).state.parentStatechart.parentRegion = r)&#xA;&#x9;)&#xA;)"/>
          <details key="OneOutgoingTransition" value="-- Exit point must have exactly one outgoing transition&#xA;self.outgoingTransitions->size() = 1"/>
          <details key="AtMostOneConnectingRegionWithSynchronizations" value="-- There must be at most one region with synchronizing transitions that connect (directly or indirectly) to the exit point&#xA;&#xA;let exitTransitions : Collection(Transition) = &#xA;&#xA;self.incomingTransitions->union(&#xA;   self.incomingTransitions->closure(t | &#xA;&#x9;if t.source.oclIsKindOf(ExitPoint)&#xA;&#x9;then t.source.incomingTransitions&#xA;&#x9;else Sequence{}&#xA;&#x9;endif&#xA;   )&#xA;)&#xA;&#xA;in exitTransitions->forAll(t1 : Transition, t2: Transition | (t1 &lt;> t2 and (not t1.synchronization.oclIsUndefined()) and (not t2.synchronization.oclIsUndefined())) implies (t1.statechart = t2.statechart))"/>
          <details key="AtMostOneConnectingRegionWithTriggerMessageEvents" value="-- There must be at most one region with transitions that have a trigger message event and connect (directly or indirectly) to the exit point&#xA;&#xA;let exitTransitions : Collection(Transition) = &#xA;&#xA;self.incomingTransitions->union(&#xA;   self.incomingTransitions->closure(t | &#xA;&#x9;if t.source.oclIsKindOf(ExitPoint)&#xA;&#x9;then t.source.incomingTransitions&#xA;&#x9;else Sequence{}&#xA;&#x9;endif&#xA;   )&#xA;)&#xA;&#xA;in exitTransitions->forAll(t1 : Transition, t2: Transition | (t1 &lt;> t2 and (not t1.triggerMessageEvent.oclIsUndefined()) and (not t2.triggerMessageEvent.oclIsUndefined())) implies (t1.statechart = t2.statechart))"/>
        </eAnnotations>
      </eClassifiers>
      <eSubpackages name="one_to_n_schemata" nsURI="http://www.muml.org/pim/one_to_n_schemata/1.0.0" nsPrefix="one_to_n_schemata">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This package provides communication schemata a message of a multi role Real-Time Statechart (or multi port RTSC) may contain.&#xA;They allow for designing dependencies between multiple one-to-one coordinations."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
          <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
          <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        </eAnnotations>
        <eClassifiers xsi:type="ecore:EClass" name="OneToManyCommunicationSchema" abstract="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An abstract class all communication schemata inherit from (at least indirectly)."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="condition" eType="#/1/expressions/Expression" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="A subrole only sends or receives a message if it satisfies this condition."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="asynchronousMessageEvent" lowerBound="1" eType="#/0/realtimestatechart/AsynchronousMessageEvent"
              eOpposite="#/0/realtimestatechart/AsynchronousMessageEvent/oneToManyCommunicationSchema">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The asynchronous message event that contains the communication schema."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="action" eType="#/0/realtimestatechart/Action" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The action a subrole performs when sending or receiving a message with communication schema."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="retryAfter" eType="#/0/valuetype/TimeValue" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If the transition uses a communication schemata with the condition attribute, then it may happen that no subrole may send or receive a message. Before the RTSC may retry to execute the communication schemata, it has to wait a specific time. This time is encoded within the attribute retryAfter."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Multicast" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/SendingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The communication schema allows for sending a message to all coordination partners."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Unicast" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/SendingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Using this communication schema, only one subrole is allowed to send a message."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
            <details key="constraints" value="UnicastRequiresConditionAndRetryAfterAttribute"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="UnicastRequiresConditionAndRetryAfterAttribute" value="-- When you use the communication schemata unicast, then you have to define the attributes condition and retryAfter.&#xA;not self.condition.oclIsUndefined() and not self.retryAfter.oclIsUndefined()"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="Iterate" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/SendingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The communication schema iterate allows for an iterative sending of a message."/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="terminationCondition" eType="#/1/expressions/Expression" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The condition under which the iteration terminates."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="delay" eType="#/0/valuetype/TimeValue" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The delay between two iterations."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EAttribute" name="startFromFirst" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
              defaultValueLiteral="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="If true, the iteration starts from the first subrole, otherwise it starts from the last subrole."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="LoadBalancing" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/SendingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The communication schema allows for assigning a task to one coordination partner that is currently not working on a task assigned using the same message."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
            <details key="constraints" value="ResponseMessageOrWcetOfCommunicationSchemaLoadbalancingMustBeSet LoadbalancingEitherHasResponseMessageOrWcet ResponseActionCanOnlyBeSetIfResponseMessageIsUsed"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="ResponseMessageOrWcetOfCommunicationSchemaLoadbalancingMustBeSet" value="-- LoadBalancing must define the responseMessage or the maxWorkingTime&#xA;not self.responseMessage.oclIsUndefined() or not self.maxWorkingTime.oclIsUndefined()"/>
            <details key="LoadbalancingEitherHasResponseMessageOrWcet" value="-- responseMessage and maxWorkingTime exclude each other&#xA;if not self.responseMessage.oclIsUndefined() and not self.maxWorkingTime.oclIsUndefined() then&#xA;&#x9;false&#xA;else&#xA;&#x9;true&#xA;endif"/>
            <details key="ResponseActionCanOnlyBeSetIfResponseMessageIsUsed" value="-- if onResponseAction is set, the responseMessage must be set, too.&#xA;(not onResponseAction.oclIsUndefined()) implies (not responseMessage.oclIsUndefined())"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="responseMessage" eType="#/0/msgtype/MessageType">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The response message must be a trigger message. By receiving the message, a subrole is allowed to assign a new task to the corresponding coordination partner."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="maxWorkingTime" eType="#/0/valuetype/TimeValue" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="After this maximum working time, a coordination partner that got a task assigned is ready to accept a new task."/>
            </eAnnotations>
          </eStructuralFeatures>
          <eStructuralFeatures xsi:type="ecore:EReference" name="onResponseAction" eType="#/0/realtimestatechart/Action" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Defines which action should be executed on response."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SingleReceive" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/ReceivingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This communication schema enables to receive a single message by one subrole."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
            <details key="constraints" value="SingleReceiveRequiresRetryAfterAttribute"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="SingleReceiveRequiresRetryAfterAttribute" value="-- When you use the communication schemata singlereceive, then you have to define the attribute retryAfter.&#xA;not self.retryAfter.oclIsUndefined()"/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="MultiReceive" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/ReceivingOneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The communication schema MultiReceive allows for receiving a message by each subrole."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
            <details key="constraints" value="ConditionAttributeRequiresRetryAfterAttribute"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="ConditionAttributeRequiresRetryAfterAttribute" value="-- If and only if you define the attribute condition for this communication schemata, then you also have to state the attribute retryAfter.&#xA;(not self.condition.oclIsUndefined() implies not self.retryAfter.oclIsUndefined()) and (self.condition.oclIsUndefined() implies self.retryAfter.oclIsUndefined())"/>
          </eAnnotations>
          <eStructuralFeatures xsi:type="ecore:EReference" name="failureAction" eType="#/0/realtimestatechart/Action" containment="true">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="Defines which action should be executed if the multireceive fails."/>
            </eAnnotations>
          </eStructuralFeatures>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="ReceivingOneToManyCommunicationSchema" abstract="true" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/OneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An abstract class that all communication schemata have to inherit from if they shall receive messages."/>
          </eAnnotations>
        </eClassifiers>
        <eClassifiers xsi:type="ecore:EClass" name="SendingOneToManyCommunicationSchema" abstract="true" eSuperTypes="#/0/realtimestatechart/one_to_n_schemata/OneToManyCommunicationSchema">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="An abstract class that all communication schemata have to inherit from if they shall send messages."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
            <details key="constraints" value="ConditionAttributeRequiresRetryAfterAttribute"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="ConditionAttributeRequiresRetryAfterAttribute" value="-- If and only if you define the attribute condition for this communication schemata, then you also have to state the attribute retryAfter.&#xA;(not self.condition.oclIsUndefined() implies not self.retryAfter.oclIsUndefined()) and (self.condition.oclIsUndefined() implies self.retryAfter.oclIsUndefined())"/>
          </eAnnotations>
        </eClassifiers>
      </eSubpackages>
    </eSubpackages>
    <eSubpackages name="msgtype" nsURI="http://www.muml.org/pim/msgtype/1.0.0" nsPrefix="msgtype">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package defines the message types that can be send and received via discrete interaction&#xA;endpoints. Then, the real-time statecharts of the discrete interaction endpoints use the message&#xA;types to type their asynchronous messages at their transitions. Message types may be grouped&#xA;in message type repositories."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="MessageType" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A message type defines the signature of one event. That includes the name&#xA;of the event as well as the ordered list of parameters. In addition, a message&#xA;type is contained in a message type repository."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniqueParameterNames repositoryMustBeSet"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniqueParameterNames" value="-- Parameter names must be unique&#xA;self.parameters->isUnique(name)"/>
          <details key="repositoryMustBeSet" value="-- A MessageType must be contained in a MessageTypeRepository.&#xA;not self.repository.oclIsUndefined()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="#/0/behavior/Parameter" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference defines the set of parameters of this message type. A parameter defines a unique name and a DataType."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="repository" eType="#/0/msgtype/MessageTypeRepository" eOpposite="#/0/msgtype/MessageTypeRepository/messageTypes">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message type repository that contains this message type. The lower bound is set to 0, but it has to be 1. This is due to the containment reference MessageBuffer.gmfMessageTypes."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MessageTypeRepository" eSuperTypes="../../org.muml.core/model/core.ecore#//Repository">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A MessageTypeRepository contains a set of message types which are then used&#xA;by discrete interaction endpoints and their behavior specifications. Message type&#xA;repositories enable to group message types logically, but have no semantics for&#xA;the MechatronicUML model."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="AtLeastOneMessageType"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="AtLeastOneMessageType" value="-- A MessageTypeRepository must contain at least one MessageType.&#xA;self.messageTypes->notEmpty()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="messageTypes" ordered="false" upperBound="-1" eType="#/0/msgtype/MessageType"
            containment="true" eOpposite="#/0/msgtype/MessageType/repository">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message types that are contained in this message type repository.&#xA;The lower bound should semantically be 1, but is 0 because of the containment reference CoordinationProtocol.gmfMessageTypes"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="types" nsURI="http://www.muml.org/pim/types/1.0.0" nsPrefix="types">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package provides modeling support for data types."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ArrayDataType" eSuperTypes="#/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This data type represents an array data type and specifies the maximum cardinality of inner data types."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#/0/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference points to the definition of the data type."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1" eType="#/0/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The cardinality that induces the index for this array data type."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveDataType" eSuperTypes="#/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This data type represents a primitive data type and refers to the PrimitiveDataType enumeration for specifying the concrete primitive type."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="primitiveType" lowerBound="1" eType="#/0/types/PrimitiveTypes" defaultValueLiteral="VOID">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Refers to the primitive data type as defined by the PrimitiveDataType enumeration. It defines the actual type."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataType" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all types that may be used for attributes, parameters, and operations."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="PrimitiveTypes">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Defines all primitive types that may be used in MechatronicUML."/>
        </eAnnotations>
        <eLiterals name="VOID"/>
        <eLiterals name="BOOLEAN" value="1"/>
        <eLiterals name="INT8" value="2"/>
        <eLiterals name="INT16" value="3"/>
        <eLiterals name="INT32" value="4"/>
        <eLiterals name="INT64" value="5"/>
        <eLiterals name="DOUBLE" value="6"/>
        <eLiterals name="UINT8" value="7"/>
        <eLiterals name="UINT16" value="8"/>
        <eLiterals name="UINT32" value="9"/>
        <eLiterals name="UINT64" value="10"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RangedPrimitiveDataType" eSuperTypes="#/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A data type comprising a range of values from another primitive data type."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="rangedType" lowerBound="1" eType="#/0/types/PrimitiveDataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The primitive data type that provides a superset of possible values."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="range" lowerBound="1" eType="#/0/valuetype/Range" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The range of values provided by this data type."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructureDataType" eSuperTypes="#/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A StructType is a complex data type which is comparable to a struct in C. It specifies a set of attributes but provides neither multi-valued references nor inheritance."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="attributes" upperBound="-1" eType="#/0/types/Attribute" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The attributes of this StructureDataType."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Attribute" eSuperTypes="#/0/behavior/TypedNamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An attribute is a field of a StructType. An attribute specifies a name and a data type. Eligable data types are primitive data types, array data types, and structure data types."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValidAttributeDataType"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValidAttributeDataType" value="-- An attribute may only use a Primtive Data Type, a Ranged Primitive Data Type, an Array Data Type, or a Structure Data Type&#xA;self.dataType.oclIsTypeOf(PrimitiveDataType) or self.dataType.oclIsTypeOf(RangedPrimitiveDataType) or self.dataType.oclIsTypeOf(ArrayDataType) or self.dataType.oclIsTypeOf(StructureDataType)&#xA;"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="connector" nsURI="http://www.muml.org/pim/connector/1.0.0" nsPrefix="connector">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package defines a set of abstract classes that form the basis for all connectors&#xA;that we use in our meta-model. They define the connectors, different types of&#xA;endpoints that are connected by connectors, and their instances."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorEndpoint" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An endpoint that may be connected to other endpoints via connectors."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectors" upperBound="-1" eType="#/0/connector/Connector" eOpposite="#/0/connector/Connector/connectorEndpoints">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connectors attached to this endpoint."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Connector" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A connector connects up to two connector endpoints. In case of a self-connector, there is only one endpoint."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorEndpoints" lowerBound="1" upperBound="2" eType="#/0/connector/ConnectorEndpoint"
            eOpposite="#/0/connector/ConnectorEndpoint/connectors">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The endpoints connected by this connector."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="selfConnector" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Indicates a self-connector, i.e., whether this connector connects one and the same endpoint to itself."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->size() = 1&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorEndpointInstance" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An instance of a particular connector endpoint."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorInstances" upperBound="-1" eType="#/0/connector/ConnectorInstance"
            eOpposite="#/0/connector/ConnectorInstance/connectorEndpointInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector instances attached to this endpoint instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" lowerBound="1" eType="#/0/connector/ConnectorEndpoint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector endpoint that represents the type of this instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConnectorInstance" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An instance of a particular connector."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" eType="#/0/connector/Connector">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector that represents the type of this connector instance. May be undefined in case of a top level connector instance, which does not refer to a particular connector inside a structured component."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectorEndpointInstances" lowerBound="2" upperBound="2" eType="#/0/connector/ConnectorEndpointInstance"
            eOpposite="#/0/connector/ConnectorEndpointInstance/connectorInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connector endpoint instances connected by this connector instance."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteInteractionEndpoint" abstract="true" eSuperTypes="#/0/connector/ConnectorEndpoint #/0/behavior/BehavioralElement ../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An interaction point for discrete communication via asynchronous messages. This class generalizes concepts of classes DiscretePort and Role."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ReceivingInteractionEndpointRequiresMessageBuffer ReceiverMessageTypeMustBeAssignedToExactlyOneBuffer SetEitherSubRoleAndCoordinatorBehaviorOrNone"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ReceivingInteractionEndpointRequiresMessageBuffer" value="-- All receiver message types must be assigned to one receiver message buffer.&#xA;self.receiverMessageTypes->notEmpty() &#xA;implies &#xA;self.receiverMessageBuffer->notEmpty()"/>
          <details key="ReceiverMessageTypeMustBeAssignedToExactlyOneBuffer" value="-- Each receiver message type should be assigned to exactly one buffer.&#xA;self.receiverMessageTypes->forAll(type | self.receiverMessageBuffer->one(messageType->includes(type)))"/>
          <details key="SetEitherSubRoleAndCoordinatorBehaviorOrNone" value="-- Set either the subroleBehavior and the coordinatorBehavior or none of them.&#xA;(not self.coordinatorBehavior.oclIsUndefined() and not  self.subroleBehavior.oclIsUndefined()) xor (self.coordinatorBehavior.oclIsUndefined() and self.subroleBehavior.oclIsUndefined())"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="senderMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sender message interface defines which messages this discrete port specification sends."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageTypes" upperBound="-1" eType="#/0/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The receiver message interface defines which messages this discrete port specification receives."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinatorBehavior" eType="#/0/behavior/Behavior">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="if(self.behavior.oclIsTypeOf(realtimestatechart::RealtimeStatechart)) then self.behavior.oclAsType(realtimestatechart::RealtimeStatechart)->closure(rtsc| rtsc.states->select(s: realtimestatechart::State|  not s.simple).embeddedRegions.embeddedStatechart ) else behavior::Behavior.allInstances() endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this port is a multi-port, this reference points to the real-time statechart that&#xA;contains the adaptation behavior of the multi-port.  Then, this real-time statechart&#xA;is contained in the only state of the real-time statechart obtained by the&#xA;behavior reference.&#xA;If this port is a single-port, this reference will be undefined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="subroleBehavior" eType="#/0/behavior/Behavior">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="if(self.behavior.oclIsTypeOf(realtimestatechart::RealtimeStatechart)) then self.behavior.oclAsType(realtimestatechart::RealtimeStatechart)->closure(rtsc| rtsc.states->select(s: realtimestatechart::State|  not s.simple).embeddedRegions.embeddedStatechart ) else behavior::Behavior.allInstances() endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this port is a multi-port, this reference points to the real-time statechart that&#xA;contains the subrole behavior of the multi-port.  Then, this real-time statechart&#xA;is contained in the only state of the real-time statechart obtained by the&#xA;behavior reference.&#xA;If this port is a single-port, this reference will be undefined."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1" eType="#/0/valuetype/Cardinality" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The cardinality of a port specifies how many instances of a port are allowed to exist at runtime."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="receiverMessageBuffer" upperBound="-1" eType="#/0/connector/MessageBuffer"
            containment="true" eOpposite="#/0/connector/MessageBuffer/discreteInteractionEndpoint">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A role contains message buffers to store received messages. If this role can only send messages then no message buffer is allowed; otherwise at least one message buffer must be defined. The maximal number of message buffers is limited to the number of message this role may receive."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multi" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete interaction endpoint has a maximum cardinality greater than one ."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if not (self.cardinality.oclIsUndefined()) then&#xA;&#x9;(self.cardinality.upperBound.value > 1) or self.cardinality.upperBound.infinity&#xA;else&#xA;&#x9;false&#xA;endif&#xA;&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteInteractionEndpointInstance" abstract="true" eSuperTypes="#/0/connector/ConnectorEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An instance of a discrete interaction endpoint."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteSingleInteractionEndpointInstance" abstract="true" eSuperTypes="#/0/connector/DiscreteInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A single instance of a discrete interaction endpoint."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="StandaloneSingleEndpointInstanceRequiresSingleEndpointType"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="StandaloneSingleEndpointInstanceRequiresSingleEndpointType" value="-- For a DiscreteSingleInteractionEndpointInstance the type has to be a single DiscreteInteractionEndpoint, too.&#xA;(not self.type.oclIsUndefined() and self.multiInteractionEndpointInstance.oclIsUndefined() and self.type.oclIsKindOf(connector::DiscreteInteractionEndpoint)) implies (not self.type.oclAsType(connector::DiscreteInteractionEndpoint).multi)&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="multiInteractionEndpointInstance" eType="#/0/connector/DiscreteMultiInteractionEndpointInstance"
            eOpposite="#/0/connector/DiscreteMultiInteractionEndpointInstance/subInteractionEndpointInstances">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this is an instance of a multi discrete interaction endpoint, refers to the corresponding multi instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="next" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance" eOpposite="#/0/connector/DiscreteSingleInteractionEndpointInstance/previous">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this is an instance of a multi discrete interaction endpoint, refers to the next single instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="previous" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance"
            eOpposite="#/0/connector/DiscreteSingleInteractionEndpointInstance/next">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this is an instance of a multi discrete interaction endpoint, refers to the previous single instance."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="first" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this DiscreteInteractionEndpointInstance is used as a subInteractionEndpointInstance of a DiscreteMultiInteractionEndpointInstance,&#xA;then this derived reference allows to resolve the first subInteractionEndpointInstance directly."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.multiInteractionEndpointInstance.oclIsUndefined() then null else self.multiInteractionEndpointInstance.first endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="last" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If this DiscreteInteractionEndpointInstance is used as a subInteractionEndpointInstance of a DiscreteMultiInteractionEndpointInstance,&#xA;then this derived reference allows to resolve the last subInteractionEndpointInstance directly."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if self.multiInteractionEndpointInstance.oclIsUndefined() then null else self.multiInteractionEndpointInstance.last endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscreteMultiInteractionEndpointInstance" abstract="true" eSuperTypes="#/0/connector/DiscreteInteractionEndpointInstance">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A discrete interaction endpoint instance that comprises multiple single sub-instances."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="TypeIsMultiDiscreteInteractionEndpoint NumberOfsubEndpointsCorrespondsToLowerBound NumberOfsubEndpointsCorrespondsToUpperBound"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="TypeIsMultiDiscreteInteractionEndpoint" value="-- For a DiscreteMultiInteractionEndpointInstance the type has to be a multi DiscreteInteractionEndpoint, too.&#xA;(not self.type.oclIsUndefined() and self.type.oclIsKindOf(connector::DiscreteInteractionEndpoint)) implies (self.type.oclAsType(connector::DiscreteInteractionEndpoint).multi)&#xA;"/>
          <details key="NumberOfsubEndpointsCorrespondsToLowerBound" value="-- The number of subInteractionEndpointInstances is too low with respect to the cardinality&#xA;let discreteEndpoint : connector::DiscreteInteractionEndpoint= if (self.type.oclIsUndefined() or (not self.type.oclIsKindOf(connector::DiscreteInteractionEndpoint))) then null else self.type.oclAsType(connector::DiscreteInteractionEndpoint) endif in&#xA;let lowerBoundOfsubInteractionEndpointInstance : Integer = if ( discreteEndpoint.oclIsUndefined() or discreteEndpoint.cardinality.lowerBound.infinity) then -1 else discreteEndpoint.cardinality.lowerBound.value endif in&#xA;if (lowerBoundOfsubInteractionEndpointInstance &lt;>-1) then self.subInteractionEndpointInstances->size()>=lowerBoundOfsubInteractionEndpointInstance else true endif&#xA;"/>
          <details key="NumberOfsubEndpointsCorrespondsToUpperBound" value="-- The number of subInteractionEndpointInstances is too high with respect to the cardinality&#xA;let discreteEndpoint : connector::DiscreteInteractionEndpoint= if (self.type.oclIsUndefined() or (not self.type.oclIsKindOf(connector::DiscreteInteractionEndpoint))) then null else self.type.oclAsType(connector::DiscreteInteractionEndpoint) endif in&#xA;let upperBoundOfsubInteractionEndpointInstance : Integer = if ( discreteEndpoint.oclIsUndefined() or discreteEndpoint.cardinality.upperBound.infinity) then -1 else discreteEndpoint.cardinality.upperBound.value endif in&#xA;if (upperBoundOfsubInteractionEndpointInstance &lt;>-1) then self.subInteractionEndpointInstances->size()&lt;=upperBoundOfsubInteractionEndpointInstance else true endif&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="subInteractionEndpointInstances" upperBound="-1" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance"
            eOpposite="#/0/connector/DiscreteSingleInteractionEndpointInstance/multiInteractionEndpointInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="These are all sub-interaction endpoint instances of the multi-interaction endpoint instance. The sub-interaction endpoint instances are&#xA;represented by DiscreteSingleInteractionEndpointInstances. This reference may only be used if the corresponding&#xA;DiscreteInteractionEndpoint has an upper bound greater 1 in its cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="first" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Refers to the first single instance of the corresponding multi discrete interaction endpoint."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="last" eType="#/0/connector/DiscreteSingleInteractionEndpointInstance">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Refers to the last single instance of the corresponding multi discrete interaction endpoint."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MessageBuffer" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A message buffer may contains message types. A message buffer has a specified size and is associtated to a role of a coordination protocol. Message types are always stored in FIFO order."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="DiscreteInteractionEndpointMustBeSet"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="DiscreteInteractionEndpointMustBeSet" value="-- A MessageBuffer must  refer to a DiscreteInteractionEndpoint.&#xA;not self.discreteInteractionEndpoint.oclIsInvalid()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="bufferSize" lowerBound="1" eType="#/0/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The size of the message buffer."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="messageType" lowerBound="1" upperBound="-1" eType="#/0/msgtype/MessageType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message types this message buffer can store."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="discreteInteractionEndpoint" eType="#/0/connector/DiscreteInteractionEndpoint"
            eOpposite="#/0/connector/DiscreteInteractionEndpoint/receiverMessageBuffer">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role that contains this message buffer. The lower bound is 0, but semantically has to be 1. This is due to the derived containment feature CoordinationProtocol.gmfMessageBuffers."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="bufferOverflowAvoidanceStrategy" lowerBound="1" eType="#/0/connector/BufferOverflowAvoidanceStrategy"
            defaultValueLiteral="discard incoming message">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines the strategy to avoid a buffer overflow."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="gmfMessageTypes" lowerBound="1" upperBound="-1" eType="#/0/msgtype/MessageType"
            volatile="true" transient="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The message types this message buffer can store."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.messageType"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="BufferOverflowAvoidanceStrategy">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The kinds of strategies to avoid a buffer overflow of a message buffer."/>
        </eAnnotations>
        <eLiterals name="DISCARD_INCOMING_MESSAGE" literal="discard incoming message">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the incoming message buffer is full and a new message arrives, then discard the incoming message."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="DISCARD_OLDEST_MESSAGE_IN_BUFFER" value="1" literal="discard oldest message in buffer">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the incoming message buffer is full and a new message arrives, then discard the oldest message in the buffer."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="NEVER_HAPPENS" value="2" literal="never happens"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="valuetype" nsURI="http://www.muml.org/pim/valuetype/1.0.0" nsPrefix="valueType">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The classes in this package define different types of values that are used in the&#xA;MechatronicUML meta-model."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Cardinality">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a two-dimensional range specification of an arbitrary&#xA;model object. It consists of a lower and an upper bound where both need to&#xA;be greater or equal to zero. Intuitively, the upper bound must be greater or&#xA;equal to the lower bound."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LowerBoundMustBeLessOrEqualThanUpperBound"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LowerBoundMustBeLessOrEqualThanUpperBound" value="-- lower bound of cardinality must be less or equal than upper bound&#xA;(not self.lowerBound.oclIsUndefined() and not self.upperBound.oclIsUndefined()) implies&#xA;(&#xA;&#x9;((not self.lowerBound.infinity and not self.upperBound.infinity) implies (self.lowerBound.value &lt;= self.upperBound.value))&#xA;&#x9;and (self.lowerBound.infinity implies self.upperBound.infinity)&#xA;)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="lowerBound" lowerBound="1" eType="#/0/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The lower bound of this cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="upperBound" lowerBound="1" eType="#/0/valuetype/NaturalNumber" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The upper bound of this cardinality."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TimeValue" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A time value defines a value concerning time and an optional time unit. The value is an expression and can therefore consist of various elements like variables, operators and literals."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LiteralExpressionMustBeANaturalNumber NestedTimeValuesMustDefineEqualTimeUnits"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LiteralExpressionMustBeANaturalNumber" value="-- If a TimeValue has as value a LiteralExpression, it must be a natural number.&#xA;-- 1. Check if the LiteralExpression can be cast to an Integer&#xA;-- 2. Check if this Integer is greater or equal to zero.&#xA;&#xA;(&#xA;not self.value.oclIsUndefined()&#xA;and &#xA;self.value.oclIsKindOf(core::expressions::common::LiteralExpression)&#xA;)&#xA;implies&#xA;(&#xA;not self.value.oclAsType(core::expressions::common::LiteralExpression).value.toInteger().oclIsUndefined()&#xA;and &#xA;self.value.oclAsType(core::expressions::common::LiteralExpression).value.toInteger()>=0&#xA;)&#xA;"/>
          <details key="NestedTimeValuesMustDefineEqualTimeUnits" value="-- Nested TimeValues must use equal time units&#xA;self.oclAsType(ecore::EObject).eContents()->closure(element| element.oclAsType(ecore::EObject).eContents()->union(element.oclAsType(ecore::EObject).eCrossReferences()->asSet()))->forAll(element| element.oclIsTypeOf(valuetype::TimeValue) implies element.oclAsType(valuetype::TimeValue).unit = self.unit)"/>
        </eAnnotations>
        <eOperations name="toString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="// Return value concatenated with abbreviated unit.&#xD;&#xA;StringBuffer sb = new StringBuffer();&#xD;&#xA;if (value == null) {&#xD;&#xA;&#x9;sb.append(&quot;null&quot;);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if (value instanceof LiteralExpression) {&#xD;&#xA;&#x9;&#x9;sb.append(((LiteralExpression) value).getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;sb.append(value.eClass().getName());&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;if (unit != null) {&#xD;&#xA;&#x9;sb.append(' ');&#xD;&#xA;&#x9;sb.append(TimeValueImpl.getUnitRepresentation(unit));&#xD;&#xA;}&#xD;&#xA;return sb.toString();"/>
            <details key="documentation" value="Redefinition of the Java toString method.This operation combines the defined value and the defined unit to one string."/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value concerning time must be an expression. Defining the value is mandatory."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="unit" eType="#/0/valuetype/TimeUnit" defaultValueLiteral="MILLISECONDS"
            unsettable="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The time unit of a time value. Defining the value is optional."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="NaturalNumber">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents either a natural number or infinity."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ValueGreaterOrEqualZero"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ValueGreaterOrEqualZero" value="-- Natural number must not be negative&#xA;self.value >= 0"/>
        </eAnnotations>
        <eOperations name="setValue">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (value == null || value.equals(&quot;*&quot;)) {&#xA;&#x9;setInfinity(true);&#xA;&#x9;return;&#xA;}&#xA;&#xA;// Convert to long, if string cannot be parsed, set infinity.&#xA;long longValue;&#xA;try {&#xA;&#x9;longValue = Long.parseLong(value);&#xA;} catch (NumberFormatException e) {&#xA;&#x9;setInfinity(true);&#xA;&#x9;return;&#xA;}&#xA;&#xA;// Call setValue(long) outsite of catch block, so that the NumberFormatException&#xA;// indicating negative numbers is not catched.&#xA;setValue(longValue);"/>
            <details key="documentation" value="Set the value to the value of the given parameter."/>
          </eAnnotations>
          <eParameters name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The new value to be set."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="toString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (isInfinity()) {&#xA;&#x9;return &quot;*&quot;;&#xA;}&#xA;return Long.toString(value);"/>
            <details key="documentation" value="This operation yields the value of this natural number in a string representation."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="if (o instanceof NaturalNumber) {&#xD;&#xA;&#x9;NaturalNumber naturalNumber = (NaturalNumber) o;&#xD;&#xA;&#x9;// Value of infinity must be equal&#xD;&#xA;&#x9;if (isInfinity() != naturalNumber.isInfinity()) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;// If both are not infinite, make sure their value is identical.&#xD;&#xA;&#x9;if (!isInfinity() &amp;&amp; (naturalNumber.getValue() != getValue())) {&#xD;&#xA;&#x9;&#x9;return false;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return true;&#xD;&#xA;}&#xD;&#xA;return false;"/>
            <details key="documentation" value="Indicates whether this natural number equals the given object."/>
          </eAnnotations>
          <eParameters name="o" eType="ecore:EClass http://www.eclipse.org/emf/2002/Ecore#//EObject">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The object to be checked for equivalence."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="lessOrEqual" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Indicates whether this natural number if less or equal to the given natural number."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="body" value="if self.infinity&#xA;then n.infinity&#xA;else self.value &lt;= n.value&#xA;endif"/>
          </eAnnotations>
          <eParameters name="n" lowerBound="1" eType="#/0/valuetype/NaturalNumber">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The given natural number."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eOperations name="greaterOrEqual" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Indicates whether this natural number if greater or equal to the given natural number."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="body" value="n.lessOrEqual(self)"/>
          </eAnnotations>
          <eParameters name="n" lowerBound="1" eType="#/0/valuetype/NaturalNumber">
            <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
              <details key="documentation" value="The given natural number."/>
            </eAnnotations>
          </eParameters>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"
            defaultValueLiteral="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The value of this natural number."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="infinity" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Determins whether this natural number represents infinity."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EDataType" name="TimeUnit" instanceClassName="java.util.concurrent.TimeUnit">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A data type for time units."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Range">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a two-dimensional range specification of an arbitrary&#xA;model object. It consists of a lower and an upper bound. Intuitively, the upper&#xA;bound must be greater or equal to the lower bound."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="LowerBoundMustBeLessOrEqualThanUpperBound"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="LowerBoundMustBeLessOrEqualThanUpperBound" value="-- lower bound of range must be less or equal than upper bound&#xA;self.lowerBound &lt;= self.upperBound"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="lowerBound" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"
            defaultValueLiteral="0">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines the lower bound of the range."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="upperBound" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//ELong"
            defaultValueLiteral="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines the upper bound of the range."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="behavior" nsURI="http://www.muml.org/pim/behavior/1.0.0" nsPrefix="behavior">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package contains classes that are needed to define behavioral aspects within the design."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Behavior" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all elements that represent a behavior.&#xA;Known sub-classes: RealtimeStatechart"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="behavioralElement" eType="#/0/behavior/BehavioralElement" eOpposite="#/0/behavior/BehavioralElement/behavior">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The behavioral element this statechart belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1" eType="#/0/behavior/Operation" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A behavior may define a set of operations as signatures of helper functions. These operations&#xA;may be called by the behavior specification and may access the variables of&#xA;the behavior specification. The operations are contained in the behavior."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="variables" upperBound="-1" eType="#/0/behavior/Variable" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A behavior may define a set of variables in order to store data. The variables&#xA;may be accessed by various elements, e.g., operations and the behavior specification itself.&#xA;The variables are contained in the behavior."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="BehavioralElement" abstract="true">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all elements that have a behavior."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="behavior" eType="#/0/behavior/Behavior" eOpposite="#/0/behavior/Behavior/behavioralElement">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The behavior of this behavioral element."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Operation" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An operation specifies a behavior that can be called with a list of concrete parameters and may return a return value."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="implementations" upperBound="-1" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The implementation for this operation. MechatronicUML supports the annotation of multiple implementations for an operation to support different target languages."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameters" upperBound="-1" eType="#/0/behavior/Parameter" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ordered parameters of the operation. They define the values that need to be&#xA;passed upon calling the operation."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="returnType" lowerBound="1" eType="#/0/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The type of the return value of this operation."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Parameter" eSuperTypes="#/0/behavior/TypedNamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This is a general representation of a Parameter which is by all model elements&#xA;that receive parameters. Examples include operations, message types, and synchronization channels.&#xA;A parameter defines a data type."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParameterBinding" eSuperTypes="../../org.muml.core/model/core.ecore#//ExtendableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A parameter binding associates a parameter with a concrete value which is bound to this parameter by an invocation. As an example, an operation defines a set of parameters. A call of this operation needs to provide concrete values for the parameters which are defined by a parameter binding. The value is represented by an expression."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" lowerBound="1" eType="#/0/behavior/Parameter">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="if(self.eContainer().oclIsTypeOf(realtimestatechart::Message)) then self.eContainer().oclAsType(realtimestatechart::Message).instanceOf.parameters else (&#xD;&#xA;if(self.eContainer().oclIsTypeOf(pattern::VerifiedConfiguration)) then self.eContainer().oclAsType(pattern::VerifiedConfiguration).coordinationPattern.patternParameters else behavior::Parameter.allInstances() endif)endif"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The mandatory parameter to which the value needs to be associated."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="value" lowerBound="1" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The mandatory value which is associated with the parameter. The value is defined by an expression."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TypedNamedElement" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Abstract super class for all elements that have a name and a type."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="dataType" lowerBound="1" eType="#/0/types/DataType">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The data type of this element."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Variable" eSuperTypes="#/0/behavior/TypedNamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Implementation of a variable of a behavior which has a certain type. A variable has a type, a name, and is commentable."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ConstantMustBeInitialized"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ConstantMustBeInitialized" value="-- if a variable is a constant, then it must be initalized&#xA;(self.constant=true) implies (not self.initializeExpression.oclIsUndefined())"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="constant" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="It must be defined if a the variable is constant or not."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initializeExpression" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A variable may have a value when it is initialized. The value is defined by an expression."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OperationRepository" eSuperTypes="../../org.muml.core/model/core.ecore#//Repository">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An OperationRepository groups a set of reusable Operations. Operations are not required to have an implementation."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="operations" upperBound="-1" eType="#/0/behavior/Operation" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The operations of this repository."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="component" nsURI="http://www.muml.org/pim/component/1.0.0" nsPrefix="component">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package components contains all classes for modeling atomic and structured components.&#xA;Components are defined on the type level and may be instantiated in a component instance configuration."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Component" abstract="true" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement #/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class is the super class of all classes representing a concrete component type such as a structured, atomic or a continuous component.&#xA;&#xA;Component types are implemented as a variation of the composite design pattern. Concerning the composite pattern this class represents the role &quot;component&quot;."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="UniquePortNames UniqueComponentNames"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="UniquePortNames" value="-- Port names must be unique&#xA;self.ports->isUnique(name)"/>
          <details key="UniqueComponentNames" value="-- The component's name must be unique.&#xA;Component.allInstances()->select(c|c&lt;>self)->collect(name)->excludes(self.name)&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="componentKind" lowerBound="1" eType="#/0/component/ComponentKind" defaultValueLiteral="software component">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="if(self.oclIsKindOf(component::AtomicComponent)) &#xD;&#xA;&#x9; then OrderedSet {ComponentKind::CONTINUOUS_COMPONENT, ComponentKind::SOFTWARE_COMPONENT } &#xD;&#xA;else &#xD;&#xA;&#x9;OrderedSet {ComponentKind::CONTINUOUS_COMPONENT, ComponentKind::HYBRID_COMPONENT, ComponentKind::SOFTWARE_COMPONENT} endif&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This attribute specifies the kind of the component. A component may be either&#xA;discrete software component, a continuous component, a hybrid component&#xA;or a hardware component."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="ports" upperBound="-1" eType="#/0/component/Port" containment="true" eOpposite="#/0/component/Port/component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports of a component represent the interaction points between the component and its environment."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Port" abstract="true" eSuperTypes="#/0/connector/ConnectorEndpoint #/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Ports represent the interaction points between a component and the components environment."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="component" eType="#/0/component/Component" eOpposite="#/0/component/Component/ports">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component, this port belongs to. Theoretically the bounds&#xA;should be 1..1, but that would prevent the possibility for&#xA;ComponentPart.portsDerived to be a containment reference&#xA;(see ComponentPart.portsDerived)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portConnectors" upperBound="-1" eType="#/0/component/PortConnector" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Derived reference that returns all connectors that are attached to the Port that&#xA;are of type PortConnector."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectors->select(c | c.oclIsKindOf(PortConnector)).oclAsType(PortConnector)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ContinuousPort" eSuperTypes="#/0/component/DirectedTypedPort">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a concrete port specification which provides the&#xA;continuous functionality of a port. A continuous port emits a signal value.&#xA;A signal value has a data type and it has concrete values at all points in time."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DiscretePort" eSuperTypes="#/0/component/Port #/0/connector/DiscreteInteractionEndpoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a concrete port specification which provides the discrete functionality of a port."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="DiscretePortRequiresMessageTypes DiscretePortRequiresBehavior DiscretePortAtStructuredComponentHasNoBehavior DiscretePortShouldRefineRole DiscretePortAndRoleSameMessageTypes DiscretePortCardinalityMustComplyWithRefinedRoleCardinality MultiPortOfAtomicComponentRequiresSubroleBehaviorAndCoordinatorBehavior"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="DiscretePortRequiresMessageTypes" value="-- Discrete Port must define sender or receiver message types&#xA;self.senderMessageTypes->notEmpty() or self.receiverMessageTypes->notEmpty()"/>
          <details key="DiscretePortRequiresBehavior" value="-- A discrete port of an atomic component must have a Behavior Specification&#xA;(not self.component.oclIsUndefined() and self.component.oclIsKindOf(component::AtomicComponent))&#xA;&#x9;implies not self.behavior.oclIsUndefined()"/>
          <details key="DiscretePortAtStructuredComponentHasNoBehavior" value="-- Discrete Port at Structured Component must not have behavior&#xA;(not self.component.oclIsUndefined() and self.component.oclIsKindOf(component::StructuredComponent))&#xA;&#x9;implies self.behavior.oclIsUndefined()"/>
          <details key="DiscretePortShouldRefineRole" value="-- @warning&#xA;-- Discrete Port should refine a role&#xA;self.oclIsKindOf(component::DiscretePort) implies not self.refinedRole.oclIsUndefined()"/>
          <details key="DiscretePortAndRoleSameMessageTypes" value="-- Discrete Port must have the same message types as its refined role&#xA;not self.refinedRole.oclIsUndefined() implies&#xA;&#x9;(self.senderMessageTypes->asSet() = self.refinedRole.senderMessageTypes->asSet() &#xA;&#x9; and&#xA;&#x9; self.receiverMessageTypes->asSet() = self.refinedRole.receiverMessageTypes->asSet() &#xA;&#x9;)"/>
          <details key="DiscretePortCardinalityMustComplyWithRefinedRoleCardinality" value="-- Cardinality of discrete port and its refined role must match&#xA;((not self.cardinality.oclIsUndefined()) and (not self.refinedRole.oclIsUndefined())) &#xA;implies &#xA;((not self.multi) or self.cardinality.lowerBound.greaterOrEqual(self.refinedRole.cardinality.lowerBound) and self.cardinality.upperBound.lessOrEqual(self.refinedRole.cardinality.upperBound))"/>
          <details key="MultiPortOfAtomicComponentRequiresSubroleBehaviorAndCoordinatorBehavior" value="-- A multiport requires that either all messages in the RTSCs use one-to-many communication schemata or that the references coordinatorBehavior and subroleBehavior are set.&#xA;(not self.behavior.oclAsType(realtimestatechart::RealtimeStatechart).usesOneToManyCommunicationSchemata implies (self.multiPort and self.component.oclIsKindOf(AtomicComponent)) = not self.coordinatorBehavior.oclIsUndefined())&#xA;and self.coordinatorBehavior.oclIsUndefined() = self.subroleBehavior.oclIsUndefined()"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="refinedRole" eType="#/0/protocol/Role">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role of a coordination protocol that this port refines."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteInPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an IN port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() >= 1 and self.senderMessageTypes ->size() = 0"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteOutPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() = 0 and self.senderMessageTypes ->size() >= 1"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isDiscreteInOutPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the discrete port is an IN OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.receiverMessageTypes ->size() >= 1 and self.senderMessageTypes ->size() >= 1"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is a multi port."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.multi"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol" eType="#/0/protocol/CoordinationProtocol" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Derives the coordinationProtocol of the refined port."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if refinedRole.oclIsUndefined() or not refinedRole.coordinationProtocol.oclIsKindOf(protocol::CoordinationProtocol) then&#xA;&#x9;null&#xA;else&#xA;&#x9;refinedRole.coordinationProtocol.oclAsType(protocol::CoordinationProtocol)&#xA;endif&#xA;&#xA;&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ComponentPart" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement #/0/types/DataType">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a component part. Component parts are used to specify&#xA;the inner structure of a structured component. A component part represents&#xA;another component that is embedded in a  structured&#xA;component. It is specified on the model level and is&#xA;always typed over a component (either structured or atomic)."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="CardinalityLowerBoundSet TypeNotEqualToParent CardinalityUpperBoundSet"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="CardinalityLowerBoundSet" value="-- Lower bound of cardinality must be set&#xA;if self.cardinality.lowerBound.oclIsUndefined() then&#xA;false&#xA;else&#xA;self.cardinality.lowerBound->notEmpty()&#xA;endif"/>
          <details key="TypeNotEqualToParent" value="-- Component Part must have the same type as its parent structured component&#xA;self.componentType &lt;> self.parentComponent"/>
          <details key="CardinalityUpperBoundSet" value="-- Upper bound of cardinality must be set&#xA;if self.cardinality.upperBound.oclIsUndefined() then&#xA;false&#xA;else&#xA;self.cardinality.upperBound->notEmpty()&#xA;endif"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentType" lowerBound="1" eType="#/0/component/Component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component type typing this component part."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentComponent" lowerBound="1" eType="#/0/component/StructuredComponent"
            eOpposite="#/0/component/StructuredComponent/embeddedComponentParts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The structured component type containing this component part."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="cardinality" lowerBound="1" eType="#/0/valuetype/Cardinality" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The cardinality of a ComponentPart specifies how many instances of a ComponentPart are allowed to exist at runtime."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portParts" upperBound="-1" eType="#/0/component/PortPart" unsettable="true"
            containment="true" eOpposite="#/0/component/PortPart/componentPart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The ports of this part."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="multiPart" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" unsettable="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the part is a multi part.&#xA;It is only used to simplify OCL constraints."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if (not self.cardinality.oclIsUndefined() and not self.cardinality.upperBound.oclIsUndefined()) then&#xA;self.cardinality.upperBound.value > 1 or self.cardinality.upperBound.infinity&#xA;else false&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StaticStructuredComponent" eSuperTypes="#/0/component/StructuredComponent #/0/component/StaticComponent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A static structured component is a structured component whose internal structure consisting of component part, ports, delegation, and assemblies cannot be changed during run-time."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="StaticStructuredComponentMustNotHaveWrongDiscreteInteractionEndpoints"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="StaticStructuredComponentMustNotHaveWrongDiscreteInteractionEndpoints" value="-- Static Structured Component must not have Discrete Interaction Endpoints other than Discrete Ports&#xA;ports->forAll(p | p.oclIsKindOf(connector::DiscreteInteractionEndpoint) implies p.oclIsKindOf(DiscretePort))"/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AtomicComponent" abstract="true" eSuperTypes="#/0/component/Component #/0/behavior/BehavioralElement #/0/constraint/VerifiableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an atomic component. Atomic components must not be further sub-divided into component parts. In contrast to structured components atomic components own a behavior in form of a realtime statechart.&#xA;&#xA;The different component types are implemented as a variation of the composite design pattern. Concerning the composite pattern this class represents the role &quot;leaf&quot;."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="SoftwareComponentRequiresBehavior ValidComponentType SoftwareComponentValidPorts ContinuousComponentValidPorts"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SoftwareComponentRequiresBehavior" value="-- Software component must have a behavior&#xA;self.componentKind = component::ComponentKind::SOFTWARE_COMPONENT implies (not self.behavior.oclIsUndefined())"/>
          <details key="ValidComponentType" value="-- Atomic component must be of type SOFTWARE or CONTINUOUS.&#xA;self.componentKind = component::ComponentKind::SOFTWARE_COMPONENT&#xA;or self.componentKind = component::ComponentKind::CONTINUOUS_COMPONENT"/>
          <details key="SoftwareComponentValidPorts" value="-- Software component must only have hybrid ports or discrete ports&#xA;self.componentKind = component::ComponentKind::SOFTWARE_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsKindOf(connector::DiscreteInteractionEndpoint) or p.oclIsKindOf(component::HybridPort))&#xA;&#x9;)"/>
          <details key="ContinuousComponentValidPorts" value="-- Continuous Component must only have continuous ports.&#xA;self.componentKind = component::ComponentKind::CONTINUOUS_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsKindOf(component::ContinuousPort))&#xA;&#x9;)"/>
        </eAnnotations>
        <eOperations name="toString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return &quot;Atomic_Component_&quot; + getName();"/>
            <details key="documentation" value="Redefinition of the Java toString method."/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AssemblyConnector" eSuperTypes="#/0/component/PortConnector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents an assembly connector. Assembly connectors connect the port parts of two component parts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="SelfAssemblyOnlyForMultiPortsOrMultiParts AssemblySameStructuredComponent AssemblyBetweenDirectedTypedPortsRequiresSameDataType AssemblyBetweenDiscretePortsOrDirectedTypedPorts ValidPortDirections AssemblyBetweenDiscretePortsRequiresSameCoordinationProtocol AssemblyBetweenDiscretePortsRequiresDifferentRoles AssemblyBetweenDiscretePortsCompatibleMessageTypes"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SelfAssemblyOnlyForMultiPortsOrMultiParts" value="--  Self assembly only allowed for multi ports and multi component-parts&#xA;selfConnector implies&#xA;let portPart : PortPart = portParts->first() in&#xA;portPart.portType.oclIsKindOf(component::DiscretePort) and (portPart.portType.oclAsType(component::DiscretePort).multi or portPart.componentPart.multiPart)&#xA;"/>
          <details key="AssemblySameStructuredComponent" value="-- Assembly must connect port parts within same structured component.&#xA;portParts.componentPart.parentComponent->forAll(a, b | a = b)&#xA;"/>
          <details key="AssemblyBetweenDirectedTypedPortsRequiresSameDataType" value="-- Assembly between DirectedTypedPorts requires same Data Type&#xA;let directedTypedPorts : Sequence(component::DirectedTypedPort) = portParts.portType->select(oclIsKindOf(component::DirectedTypedPort)).oclAsType(component::DirectedTypedPort) in&#xA;directedTypedPorts->forAll(p1,p2 | p1.dataType = p2.dataType)&#xA;"/>
          <details key="AssemblyBetweenDiscretePortsOrDirectedTypedPorts" value="-- Assembly may only connect exclusively Discrete Ports or exclusively Directed Typed Ports&#xA;(portParts.portType->forAll(oclIsKindOf(component::DiscretePort)) or portParts.portType->forAll(oclIsKindOf(component::DirectedTypedPort)))&#xA;"/>
          <details key="ValidPortDirections" value="-- Assembly may only connect Directed Typed Ports with different Port Direction Kinds&#xA;portParts.portType->select(oclIsKindOf(component::DirectedTypedPort)).oclAsType(component::DirectedTypedPort)->isUnique(kind)&#xA;"/>
          <details key="AssemblyBetweenDiscretePortsRequiresSameCoordinationProtocol" value="-- Assembly may only connect ports refining roles of the same coordination protocol&#xA;portParts.refinedRole->reject(oclIsUndefined())->forAll(r1,r2 | r1.coordinationProtocol = r2.coordinationProtocol)&#xA;"/>
          <details key="AssemblyBetweenDiscretePortsRequiresDifferentRoles" value="-- Assembly may only connect ports refining different roles&#xA;portParts.refinedRole->reject(oclIsUndefined())->isUnique(r | r)&#xA;"/>
          <details key="AssemblyBetweenDiscretePortsCompatibleMessageTypes" value="-- Assembly may only connect discrete ports with compatible message types (a.senderMessageTypes = b.receiverMessageTypes)&#xA;portParts.portType->select(oclIsKindOf(component::DiscretePort)).oclAsType(component::DiscretePort)->&#xA;forAll(p1, p2 | p1 &lt;> p2 implies p1.senderMessageTypes->asSet() = p2.receiverMessageTypes->asSet())&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolPart" eType="#/0/component/CoordinationProtocolPart"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination protocol part that this assembly uses."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.portParts->first().coordinationProtocolPart"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portParts" lowerBound="1" upperBound="2" eType="#/0/component/PortPart"
            changeable="false" volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port parts that the assembly connects. In case of a self-assembly, this will include only one port part."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(c | c.oclIsKindOf(PortPart)).oclAsType(PortPart)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DelegationConnector" eSuperTypes="#/0/component/PortConnector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a delegation connector. A delegation connector&#xA;connects a port of a structured component type and a port part of&#xA;component part the structured component contains.&#xA;The delegation has no behavior. In a running system, the port of the structured&#xA;component and the port of the component part will be the same object like&#xA;interfaces of classes where interface and class are the same object at runtime."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="DelegationBetweenDirectedTypedPortsRequiresSameDataType DelegationBetweenDiscretePortsOrDirectedTypedPorts DelegationBetweenDiscretePortsEqualMessageTypes ValidPortDirections DelegationBetweenDiscretePortsRequiresSameRoles DiscreteMultiPortDelegationRequiresMultiPortOrSinglePortAndMultiPart DelegateToEmbeddedPort DelegationOnlyBetweenSameDiscreteInteractionEndpoints"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="DelegationBetweenDirectedTypedPortsRequiresSameDataType" value="-- Delegation between DirectedTypedPorts requires same Data Type&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined() and portPart.portType.oclIsKindOf(component::DirectedTypedPort) and port.oclIsKindOf(component::DirectedTypedPort))&#xA;implies &#xA;portPart.portType.oclAsType(component::DirectedTypedPort).dataType = port.oclAsType(component::DirectedTypedPort).dataType&#xA;"/>
          <details key="DelegationBetweenDiscretePortsOrDirectedTypedPorts" value="-- Delegation may only connect exclusively Discrete Ports or exclusively Directed Typed Ports&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined())&#xA;implies &#xA;let ports : OrderedSet(Port) = OrderedSet { portPart.portType, port } in&#xA;(ports->forAll(oclIsKindOf(connector::DiscreteInteractionEndpoint)) or ports->forAll(oclIsKindOf(component::DirectedTypedPort)))&#xA;"/>
          <details key="DelegationBetweenDiscretePortsEqualMessageTypes" value="-- Delegation may only connect discrete ports with equal message types&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined())&#xA;implies &#xA;let ports : OrderedSet(Port) = OrderedSet { portPart.portType, port } in&#xA;ports->select(oclIsKindOf(component::DiscretePort)).oclAsType(component::DiscretePort)->forAll(p1, p2 | p1.senderMessageTypes->asSet() = p2.senderMessageTypes->asSet() and p1.receiverMessageTypes->asSet() = p2.receiverMessageTypes->asSet())&#xA;"/>
          <details key="ValidPortDirections" value="-- Delegation may only connect Directed Typed Ports with different Port Direction Kinds&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined())&#xA;implies &#xA;let ports : OrderedSet (Port) = OrderedSet { portPart.portType, port } in ports->select(oclIsKindOf(component::DirectedTypedPort)).oclAsType(component::DirectedTypedPort)->forAll(p1, p2 | p1.kind = p2.kind)&#xA;"/>
          <details key="DelegationBetweenDiscretePortsRequiresSameRoles" value="-- Delegation may only connect ports refining same roles&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined() and self.port.oclIsKindOf(DiscretePort)) &#xA;implies &#xA;self.port.oclAsType(DiscretePort).refinedRole = self.portPart.refinedRole&#xA;"/>
          <details key="DiscreteMultiPortDelegationRequiresMultiPortOrSinglePortAndMultiPart" value="-- Delegation starting at Multi Port must connect to a multi port or single port at multi part&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined() and self.port.oclIsKindOf(DiscretePort) and self.port.oclAsType(DiscretePort).multi)&#xA;implies&#xA;((self.portPart.portType.oclIsKindOf(DiscretePort) and self.portPart.portType.oclAsType(DiscretePort).multi) or self.portPart.componentPart.multiPart)&#xA;"/>
          <details key="DelegateToEmbeddedPort" value="-- Delegation must delegate to a Port at an embedded Component Part.&#xA;if portPart.oclIsUndefined() or portPart.componentPart.oclIsUndefined() or port.oclIsUndefined() then&#xA;&#x9;true&#xA;else&#xA;&#x9;portPart.componentPart.parentComponent = port.component&#xA;endif&#xA;"/>
          <details key="DelegationOnlyBetweenSameDiscreteInteractionEndpoints" value="-- Delegations may only connect Ports of the same kind&#xA;(not portPart.portType.oclIsUndefined() and not port.oclIsUndefined())&#xA;implies (&#xA;&#x9;(port.oclIsKindOf(connector::DiscreteInteractionEndpoint))&#xA;&#x9;implies&#xA;&#x9;(port.oclAsType(ecore::EObject).eClass() = portPart.portType.oclAsType(ecore::EObject).eClass())&#xA;)&#xA;"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portPart" lowerBound="1" eType="#/0/component/PortPart" changeable="false"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port part that this delegation delegates to."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(c | c.oclIsKindOf(PortPart)).oclAsType(PortPart) -> any(true)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="port" lowerBound="1" eType="#/0/component/Port" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The delegating port for this delegation."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.connectorEndpoints->select(c | c.oclIsKindOf(Port)).oclAsType(Port) -> any(true)"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortConnector" abstract="true" eSuperTypes="#/0/connector/Connector">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This abstract class is the common super class of delegations and assemblies between two ports."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parentComponent" lowerBound="1" eType="#/0/component/StructuredComponent"
            eOpposite="#/0/component/StructuredComponent/connectors">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The structured component this connector belongs to."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="ComponentKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="The entries of the enumeration represent different kinds of components. These&#xA;are discrete software components, continous components containing controller&#xA;code, and hybrid components that is a discrete software component which may have&#xA;continuous input signals."/>
        </eAnnotations>
        <eLiterals name="SOFTWARE_COMPONENT" literal="software component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A component of this kind represent discrete software components. A discrete software component has a behavior specification which is given by means of a real-time statechart."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="CONTINUOUS_COMPONENT" value="1" literal="continuous component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A continuous component represents a continuous controller. Such components do not carry a behavior specification in MechatronicUML. Instead, we assume that the behavior of such components is modeled by using a control engineering tool like Matlab/Simulink, Dymola/Modelica or CamelView. In MechatronicUML, only the interface of these components is modeled. The interface is given by their ports."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="HYBRID_COMPONENT" value="2" literal="hybrid component">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A hybrid component bridges the gap between discrete software components and continuous control components. A hybrid component may be considered as a discrete software component which has special ports for reading and writing continuous signals from and to continuous components, e.g., for setting a new reference value to a controller."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="HybridPort" eSuperTypes="#/0/component/DirectedTypedPort">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a hybrid port which acts as a bridge between continuous&#xA;controllers and discrete software. A hybrid port emits or receives a signal value&#xA;which has a data type and a concrete value at all points in time. Then, the&#xA;hybrid port discretizes the signal value in given time intervals and provides the&#xA;value as variable to its Real-Time Statechart. The hybrid port does not define message&#xA;interfaces."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="samplingInterval" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The sampling interval defines the time between two updates of the continuous signal which is received or send by this hybrid port. If the port is an IN-port, the sampling interval defines how often the continuous signal is read and stored internally. If the hybrid port in an OUT-port, the sampling interval defines how often a new value is send via this port."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="PortDirectionKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Decides the direction of a continous port."/>
        </eAnnotations>
        <eLiterals name="IN">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represent an IN-Port of a continous port."/>
          </eAnnotations>
        </eLiterals>
        <eLiterals name="OUT" value="1">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Represent an OUT-Port of a continous port."/>
          </eAnnotations>
        </eLiterals>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredComponent" abstract="true" eSuperTypes="#/0/component/Component">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a structured component which is capable of including arbitraryly many component parts."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="StructuredComponentAllowsNoHybridPorts ValidComponentType NoCyclicComponentPartHierarchy DiscreteStructuredComponentValidParts HybridStructuredComponentValidPorts ComponentPartsHaveUniqueName SoftwareComponentNoContinuousPorts"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="StructuredComponentAllowsNoHybridPorts" value="-- A structured component allows no hybrid ports.&#xA;self.ports->forAll(port | not port.oclIsKindOf(component::HybridPort))"/>
          <details key="ValidComponentType" value="-- Structured components must be either software or hybrid components&#xA;self.componentKind = component::ComponentKind::SOFTWARE_COMPONENT&#xA;or self.componentKind = component::ComponentKind::HYBRID_COMPONENT"/>
          <details key="NoCyclicComponentPartHierarchy" value="-- Hierarchy of embedded component parts must not include myself&#xA;if self.allStructuredComponents->oclIsUndefined() then&#xA;false&#xA;else&#xA;not self.allStructuredComponents->includes(self)&#xA;endif"/>
          <details key="DiscreteStructuredComponentValidParts" value="-- Structured software component must only have software component parts &#xA;if (not self.allAtomicComponents->oclIsUndefined()) then&#xA;self.componentKind = component::ComponentKind::SOFTWARE_COMPONENT&#xA;implies&#xA;&#x9;-- collect all atomic components from parent parts and union them&#xA;&#x9;-- with own atomic components&#xA;&#x9;self.allAtomicComponents->union(&#xA;&#x9;&#x9;self.embeddedComponentParts->select(&#xA;&#x9;&#x9;&#x9;componentType.oclIsKindOf(component::AtomicComponent)&#xA;&#x9;&#x9;)->collect(componentType.oclAsType(component::AtomicComponent))->asOrderedSet()&#xA;&#x9;)->forAll(componentKind = component::ComponentKind::SOFTWARE_COMPONENT)&#xA;else&#xA;true&#xA;endif"/>
          <details key="HybridStructuredComponentValidPorts" value="-- Structured hybrid component must only have discrete or continuous ports&#xA;self.componentKind = component::ComponentKind::HYBRID_COMPONENT&#xA;&#x9;implies (&#xA;&#x9;&#x9;self.ports->forAll(p | p.oclIsKindOf(connector::DiscreteInteractionEndpoint) or p.oclIsKindOf(component::ContinuousPort))&#xA;&#x9;)"/>
          <details key="ComponentPartsHaveUniqueName" value="-- Names of embedded component parts must be unique&#xA;self.embeddedComponentParts -> isUnique(name)"/>
          <details key="SoftwareComponentNoContinuousPorts" value="-- Software component must not have continuous ports&#xA;self.componentKind = ComponentKind::SOFTWARE_COMPONENT implies self.ports->forAll(p | not p.oclIsKindOf(ContinuousPort))"/>
        </eAnnotations>
        <eOperations name="toString" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="body" value="return &quot;Structured_Component_&quot; + getName();"/>
            <details key="documentation" value="Redefinition of the Java toString method."/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="embeddedComponentParts" lowerBound="1" upperBound="-1" eType="#/0/component/ComponentPart"
            containment="true" eOpposite="#/0/component/ComponentPart/parentComponent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component parts this structured component contains."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="connectors" upperBound="-1" eType="#/0/component/PortConnector" containment="true"
            eOpposite="#/0/component/PortConnector/parentComponent">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The connectors this structured component contains. These can either be delegations or assemblies."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allStructuredComponents" upperBound="-1" eType="#/0/component/StructuredComponent"
            changeable="false" volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Transitive closure of all StructuredComponents which are used (specified&#xA;as a componentType for a ComponentPart) in the component hierarchy."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self->closure(&#xA;&#x9;embeddedComponentParts->select(&#xA;&#x9;&#x9;componentType.oclIsKindOf(StructuredComponent)&#xA;&#x9;).componentType.oclAsType(StructuredComponent)&#xA;)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="allAtomicComponents" upperBound="-1" eType="#/0/component/AtomicComponent"
            changeable="false" volatile="true" transient="true" unsettable="true" derived="true" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Transitive closure of all AtomicComponents which are used (specified&#xA;as a componentType for a ComponentPart) in the component hierarchy.&#xA;Note: AtomicComponents from directly embeddedParts are NOT included"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.allStructuredComponents->collect(&#xA;&#x9;embeddedComponentParts->select(&#xA;&#x9;&#x9;componentType.oclIsKindOf(component::AtomicComponent)&#xA;&#x9;)->collect(componentType.oclAsType(component::AtomicComponent))&#xA;)->asOrderedSet()"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolParts" upperBound="-1" eType="#/0/component/CoordinationProtocolPart"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This reference is needed by GMF to visualize the CoordinationProtocols within the StructuredComponent."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationProtocolPart" eSuperTypes="../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A coordination protocol (pattern) can occur within a structured component. It defines the communication behavior of an assembly connection that connects discrete ports with each other."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="OnlyDiscretePortParts"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="OnlyDiscretePortParts" value="-- Coordination Protocol Part must only have discrete Port Parts&#xA;not self.portParts->oclIsUndefined()&#xA;implies&#xA;self.portParts->forAll(p : PortPart | p.portType.oclIsKindOf(DiscretePort))"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocol" lowerBound="1" eType="#/0/protocol/CoordinationProtocol">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The coordination protocol (pattern) of this CoordinationProtocolPart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portParts" lowerBound="2" upperBound="-1" eType="#/0/component/PortPart"
            eOpposite="#/0/component/PortPart/coordinationProtocolPart">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The discrete port parts that take part in this protocol part."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DirectedTypedPort" abstract="true" eSuperTypes="#/0/component/Port #/0/behavior/TypedNamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Directed typed port is the common super class of continuous and hybrid ports.&#xA;A directed typed port has a direction (either IN or OUT) and specifies a data type.&#xA;At present, we only support primitive and array data types, where the array elements&#xA;need to have a primitive type."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="kind" lowerBound="1" eType="#/0/component/PortDirectionKind">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Defines the direction of this directed typed port."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="optional" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Decides if this port is optional. An optional port does not need to be instantiated&#xA;in all instances of the containing component."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="outPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is an OUT port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.kind = component::PortDirectionKind::OUT"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="inPort" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            changeable="false" volatile="true" transient="true" defaultValueLiteral="false" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="This derived attribute indicates if the port is an IN port"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="self.kind = component::PortDirectionKind::IN"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="initializeExpression" eType="#/1/expressions/Expression" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="A initialize expression specifies the initial value that is emitted by the port after&#xA;it has been instantiated. Thus, we only provide initialize expressions for out-port."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PortPart" eSuperTypes="#/0/connector/ConnectorEndpoint">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="PortParts are contained in ComponentParts. They represent a&#xA;port of a component in the part structure inside a structured component.&#xA;PortParts are the endpoints for AssemblyConnectors and DelegationConnectors."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portType" lowerBound="1" eType="#/0/component/Port">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The port of the component that is represented by this PortPart."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentPart" lowerBound="1" eType="#/0/component/ComponentPart" eOpposite="#/0/component/ComponentPart/portParts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The component part that contains this PortPart. The port reference by the&#xA;portType reference needs to be contained in the component that is referenced&#xA;by this reference."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationProtocolPart" eType="#/0/component/CoordinationProtocolPart"
            eOpposite="#/0/component/CoordinationProtocolPart/portParts">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="If the port type refines a role, this part refers to the enclosing coordination protocol."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="refinedRole" eType="#/0/protocol/Role" changeable="false" volatile="true"
            transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The role of a coordination protocol that this partial instance of a port refines."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if (self.portType.oclIsKindOf(DiscretePort)) then&#xA;self.portType.oclAsType(DiscretePort).refinedRole&#xA;else&#xA;null&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
            volatile="true" transient="true" derived="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The name of the port type."/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
            <details key="derivation" value="if portType.name.oclIsUndefined() then&#xA;&#x9;null&#xA;else&#xA;&#x9;portType.name&#xA;endif"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StaticAtomicComponent" eSuperTypes="#/0/component/AtomicComponent #/0/component/StaticComponent">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A static atomic component is an atomic component whose internal structure&#xA;consisting of its set of ports cannot be changed during run-time."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StaticComponent" abstract="true" eSuperTypes="#/0/component/Component">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A static component is a component whose internal structure cannot be changed during run-time."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="SoftwareComponentOnlyDiscreteOrHybridPorts"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="SoftwareComponentOnlyDiscreteOrHybridPorts" value="-- Static software components must only have discrete ports and hybrid ports.&#xA;self.componentKind = ComponentKind::SOFTWARE_COMPONENT implies self.ports->reject(p | p.oclIsKindOf(DiscretePort) or p.oclIsKindOf(HybridPort))->isEmpty()"/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="pattern" nsURI="http://www.muml.org/pim/pattern/1.0.0" nsPrefix="pattern">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="This package defines all modeling elements in order to define Real-Time Coordination Patterns."/>
      </eAnnotations>
      <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
        <details key="invocationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="settingDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
        <details key="validationDelegates" value="http://www.eclipse.org/emf/2002/Ecore/OCL"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="AbstractCoordinationPattern" abstract="true" eSuperTypes="#/0/protocol/AbstractCoordinationSpecification">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="An abstract class that contains all referencs and attributes of a Real-Time Coordination Pattern."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="PatternWithParametersNeedsVerifiedConfiguration UniquePatternNames"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="PatternWithParametersNeedsVerifiedConfiguration" value="-- @warning&#xA;--When a CoordinationPattern defines Parameters, it is advised to define a verified configuration for these Parameters&#xA;self.patternParameters->size() > 0 implies self.verifiedConfigurations->size() > 0"/>
          <details key="UniquePatternNames" value="-- A name of a CoordinationPattern must be unique.&#xA;AbstractCoordinationPattern.allInstances()->isUnique(name)"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="verifiedConfigurations" upperBound="-1" eType="#/0/pattern/VerifiedConfiguration"
            containment="true" eOpposite="#/0/pattern/VerifiedConfiguration/coordinationPattern">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The verified configurations of this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="patternParameters" upperBound="-1" eType="#/0/behavior/Parameter" containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The parameters that this pattern defines."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DescriptionAspects">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A Real-Time Coordination Pattern contains a set a descriptions aspects."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="overview" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the overview of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="context" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the context of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="problem" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the problem of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="solution" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the solution of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="structure" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the structure of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="behavior" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the behavior of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="examples" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the examples of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="consequences" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the consequences of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="combineability" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the combineability of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="variants" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the variants of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="alsoKnownAs" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the alternatives of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="verification_properties" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the verification properties of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="searchTerms" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the alternatives of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="alternatives" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="Describes the alternatives of the pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="VerifiedConfiguration" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement ../../org.muml.core/model/core.ecore#//CommentableElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A Real-Time Coordination Pattern may define one or more verified configurations. It has a name and may be commented. In particular, it defines a concrete value for each parameter of the pattern."/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore">
          <details key="constraints" value="ensureBindingForAllPatternParameters"/>
        </eAnnotations>
        <eAnnotations source="http://www.eclipse.org/emf/2002/Ecore/OCL">
          <details key="ensureBindingForAllPatternParameters" value="-- A VerifiedConfiguration must bind every CoordinaionPattern parameter&#xA;self.coordinationPattern.oclAsSet()->select(object|object &lt;> null).patternParameters->forAll(parameter| self.parameterBindings.parameter->includes(parameter))"/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameterBindings" upperBound="-1" eType="#/0/behavior/ParameterBinding"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The parameter bindings of this verified configuration."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="coordinationPattern" lowerBound="1" eType="#/0/pattern/AbstractCoordinationPattern"
            eOpposite="#/0/pattern/AbstractCoordinationPattern/verifiedConfigurations">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The reverse reference to coordination pattern is required because it is easier for developing the dialogs and wizards. However, deriving it by finding out the parent is also a valid solution."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationPatternVariant" eSuperTypes="#/0/pattern/AbstractCoordinationPattern">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="This class represents a variant of a Real-Time Coordination Pattern."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="originalPattern" lowerBound="1" eType="#/0/pattern/CoordinationPattern"
            eOpposite="#/0/pattern/CoordinationPattern/patternVariants">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The original pattern of this variant."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CoordinationPattern" eSuperTypes="#/0/pattern/AbstractCoordinationPattern">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A Real-Time Coordination Pattern defines a formal design pattern for a Real-Time Coordination Pattern."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="combineablePatterns" upperBound="-1" eType="#/0/pattern/CoordinationPattern">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="pattern::CoordinationPattern::allInstances()->select(p| not (p = self))"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The combineable patterns of this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="alternativePatterns" upperBound="-1" eType="#/0/pattern/CoordinationPattern">
          <eAnnotations source="http://www.muml.org/emf/OCLFilter">
            <details key="filter" value="pattern::CoordinationPattern::allInstances()->select(p| not (p = self))"/>
          </eAnnotations>
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The alternative patterns of this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="descriptionAspects" lowerBound="1" eType="#/0/pattern/DescriptionAspects"
            containment="true">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The description aspects of this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="patternVariants" upperBound="-1" eType="#/0/pattern/CoordinationPatternVariant"
            eOpposite="#/0/pattern/CoordinationPatternVariant/originalPattern">
          <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
            <details key="documentation" value="The variants of this pattern."/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="runnable" nsURI="http://www.muml.org/pim/runnable/1.0.0" nsPrefix="runnable">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The package runnable contains all classes for modeling Runnables, Labels and LabelAccesses.&#xA;&#xA;These are used for deriving a sheduling for time-triggered systems, e.g., in case of multi-core target platforms and for the transformation to APP4MC"/>
      </eAnnotations>
      <eClassifiers xsi:type="ecore:EClass" name="Runnable" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="A Runnable represents executable (i.e., schedulable) code in a time-triggered system.&#xA;&#xA;For example, this is used when deriving a scheduling for a multi-core target platform."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstance" lowerBound="1" eType="#/0/instance/ComponentInstance"
            eOpposite="#/0/instance/ComponentInstance/runnables"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="portInstance" upperBound="-1" eType="#/0/instance/PortInstance" eOpposite="#/0/instance/PortInstance/runnable"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="period" lowerBound="1" eType="#/0/valuetype/TimeValue" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="labelAccesses" upperBound="-1" eType="#/0/runnable/LabelAccess" eOpposite="#/0/runnable/LabelAccess/accessingRunnable"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="deadline" eType="#/0/valuetype/TimeValue" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Label" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Models a Label, i.e., variable that is beeing read or written during execution.&#xA;&#xA;A label (e.g., variable, RTSC state) can be either read or written during execution. This information is important when deriving a multi-core scheduling in order to respect dependencies between Runnables and to avoid access conflicts."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentInstance" lowerBound="1" eType="#/0/instance/ComponentInstance"
            eOpposite="#/0/instance/ComponentInstance/labels"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="componentStatechart" eType="#/0/realtimestatechart/RealtimeStatechart"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="isConstant" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LabelAccess" eSuperTypes="../../org.muml.core/model/core.ecore#//NamedElement">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Models a LabelAccess, i.e., reading or writing a certain variable or RTSC state.&#xA;&#xA;A label (e.g., variable, RTSC state) can be either read or written during execution. This information is important when deriving a multi-core scheduling in order to respect dependencies between Runnables and to avoid access conflicts."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="accessKind" lowerBound="1" eType="#/0/runnable/LabelAccessKind"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="accessLabel" lowerBound="1" eType="#/0/runnable/Label"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="accessingRunnable" lowerBound="1" eType="#/0/runnable/Runnable" eOpposite="#/0/runnable/Runnable/labelAccesses"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EEnum" name="LabelAccessKind">
        <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
          <details key="documentation" value="Different kinds of LabelAccesses.&#xA;&#xA;A label (e.g., variable, RTSC state) can be either read or written during execution. This information is important when deriving a multi-core scheduling in order to respect dependencies between Runnables and to avoid access conflicts."/>
        </eAnnotations>
        <eLiterals name="READACCESS" literal="READACCESS"/>
        <eLiterals name="WRITEACCESS" value="1" literal="WRITEACCESS"/>
      </eClassifiers>
    </eSubpackages>
  </ecore:EPackage>
  <ecore:EPackage name="core" nsURI="http://www.muml.org/core/1.0.0" nsPrefix="core">
    <eSubpackages name="expressions" nsURI="http://www.muml.org/core/expressions/1.0.0" nsPrefix="expressions">
      <eClassifiers xsi:type="ecore:EClass" name="Expression"/>
    </eSubpackages>
  </ecore:EPackage>
</xmi:XMI>
