import SchemaSpecificMUML2MUML;
library AllSchemataMappings;
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype rtsc uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';
modeltype valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven uses 'http://www.storydriven.org/core/0.3.1';
modeltype modelinstance uses modelinstance('http://www.fujaba.de/modelinstance/0.4.0');
modeltype schemata uses muml::realtimestatechart::one_to_n_schemata('http://www.fujaba.de/muml/0.4.0');
modeltype types uses muml::types('http://www.fujaba.de/muml/0.4.0');


property unicastDLCName : String = "DLC_unicast";
property multicastDLCName : String = "DLC_multicast";
property singleReceiveDLCName : String = "DLC_singleReceive";
property multiReceiveDLCName : String = "DLC_multiReceive";


property multicastSubRoleSpecificVariableName : String = "sendMulticast";
property clockIndex : Integer =0;

mapping Transition::Transition2SubroleSpecificBooleanVaribale(varName : String): Variable
{
	result.name := varName;
	result.initializeExpression := new LiteralExpression();
	result.initializeExpression.oclAsType(LiteralExpression).value := "false";
	result.dataType := getBooleanPrimitiveDataType(self.statechart.getHighestParentStatechart().eContainer().eContainer().oclAsType(RootNode));
}

query getBooleanPrimitiveDataType(theRootNode : RootNode) : muml::types::PrimitiveDataType {
	var types2 : ModelElementCategory := theRootNode.categories -> select(c : ModelElementCategory | c.key = 'de.uni_paderborn.fujaba.muml.types.category') -> any(true);
	var data : PrimitiveDataType := types2.oclAsType(ModelElementCategory).modelElements
	->select(element | element.oclIsTypeOf(muml::types::PrimitiveDataType) and (element.oclAsType(muml::types::PrimitiveDataType).primitiveType = PrimitiveTypes::BOOLEAN))
	->any(true).oclAsType(muml::types::PrimitiveDataType);
	return data;
	}

//property dict : Dict(muml::realtimestatechart::Transition, Integer);
//helper getDLC_ClockIndexForTransition(transition: muml::realtimestatechart::Transition) : Integer
//{
	//dict->hasKey(transition);
	//dict->get(transition);
	//dict->put(transition,1);
	//if(dict->hasKey(transition))
	
//}

// @author: sthiele2 -- creates an intermediate state in the subrole region
mapping  Transition :: Schema2SubroleIntermediateState(context:OclAny, region:OclAny, stateID : Integer,toplevel : Boolean) : State {
	
		name := self.source.name + "_Intermediate_"+ stateID.toString()+ "_" + self.target.name  ;
				
		parentStatechart := self.statechart.map RTSC2SubroleRTSC(context, region, toplevel);			
					
	}


property usedClockNames : Dict(String,Integer);
//@author: sthiele2 -- creates a clock for in order to disassamble a deadline at a schema-specifying-transition
mapping Transition :: TransitionDeadline2CoordinatorDeadlineClock(clockName : String) : Clock
{	
	var nameSuffix : String := "";
	if(usedClockNames->hasKey(clockName))
	{
		var nr : Integer := usedClockNames->get(clockName);
		usedClockNames->put(clockName,nr+1);
		nameSuffix := (nr+1).toString();
	}
	else
	{
		nameSuffix :=  1.toString();
		usedChannelNames->put(clockName,1);	
	};
	clockIndex := clockIndex+1;
	result.name := clockName +"_".concat(nameSuffix);
}	

//@author: sthiele2 -- creates a clock constraint in order to disassamble a deadline at a schema-specifying-transition
mapping  Transition :: RelativeDeadline2ClockConstraint(context:OclAny, region: OclAny, mapLowerBound : Boolean, operator :ComparingOperator, clockName : String) : ClockConstraint
{
		var timeValue : TimeValue;
		if(mapLowerBound)
		{
			result.bound := self.relativeDeadline.lowerBound.map TimeValue2TimeValue(context,region);
		}
		else
		{
			result.bound := self.relativeDeadline.upperBound.map TimeValue2TimeValue(context,region);
		}endif;
		result.operator := operator;
		result.clock := self.map TransitionDeadline2CoordinatorDeadlineClock(clockName);
}

mapping Transition :: Transition2ClockConstraint(context : OclAny, clockName : String, _timeValue : TimeValue, compareOperator : ComparingOperator): ClockConstraint{
	result.bound := _timeValue;
	result.clock := self.map TransitionDeadline2CoordinatorDeadlineClock(clockName);
	result.operator:= compareOperator;
}


mapping Transition :: Schema2PositionKindSelector(context : OclAny, region : OclAny, identifier : EObject, _kind : PositionSelectorKind, _successor : PositionSelectorKind) : PositionSelector{
	
		kind := _kind;
		
		successor := self.map Schema2PositionKindSelector(context,region,identifier,_successor);
}

mapping Transition :: Schema2PositionKindSelector(context : OclAny, region : OclAny, identifier : EObject, _kind : PositionSelectorKind) : PositionSelector{
	
		kind := _kind;
}
	
	--Transfer Schemata Guards, Clock Constraints, CLock Resets
	
mapping Transition :: TransferSchemataLogicalExpression( context:EObject, position:PositionSelectorKind, compOperator : ComparingOperator) : ComparisonExpression {
				
		rightExpression := self.map TransferSchemataEndpointReference(result, position);
		
		leftExpression := self.map TransferSchemataEndpointReference(result, PositionSelectorKind::SELF);
				
		operator := compOperator;
				
	}
	


	

	
mapping Transition :: TransferSchemataTimeValue(context:OclAny, region:OclAny, val:Expression, timeUnit:TimeUnit) : TimeValue {

		value := val;
		
		unit := timeUnit;
		
	}
	
----------------------------------------------------XXXXXXXXXXXXXXXX--MAPPINGS FOR ALL TRANSFER SCHEMATA--XXXXXXXXXXXXXXXXXX--------------------------------------------
	
--Transfer Schemata State
mapping Transition :: RegionState(context:OclAny, region:OclAny, StateName:String, ini:Boolean) : State {
		
		name := StateName;
		
		initial := ini;
		
	}
	
--Transfer Schemata Guard
mapping Transition :: TransferSchemaConditionAndPossibleGuard(context1:OclAny, context2:OclAny, region:OclAny, varName:String, notOp:Boolean, transMapping: Integer) : LogicalExpression {
		
		if(notOp){
			leftExpression := self.map TransferSchemaNotCondition(context2, region, transMapping);
		}else{
			if(not self.raiseMessageEvent.oclIsUndefined()){
				leftExpression := self.raiseMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(context2);
			}else{
				leftExpression := self.triggerMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(context2);
			}endif;
			
		}endif;
		
		rightExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName, transMapping);
		
		operator := LogicOperator::AND;
	
	}
	
mapping Transition :: TransferSchemaNotVarAndVarGuard(context:OclAny, region:OclAny, varName1:String, varName2:String, notOp:Boolean, transMapping: Integer) : LogicalExpression {
		
		if(notOp){
			leftExpression := self.map TransferSchemaGuard(context, region, varName1, notOp, transMapping);
		}else{
			leftExpression := self.map TransferSchemata2TypedNamedElementExpr(context, varName1, transMapping);
		}endif;
		
		rightExpression := self.map TransferSchemata2TypedNamedElementExpr(context, varName2, transMapping);
		
		operator := LogicOperator::AND;
	
	}
	
mapping Transition :: TransferSchemaGuardAndPossibleGuard(context1:OclAny, context2:OclAny, region:OclAny, varName:String, transMapping: Integer) : LogicalExpression {
		
		leftExpression := self.guard.map Expression2Expression(context2);
		
		rightExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName, transMapping);
		
		operator := LogicOperator::AND;
	
	}
	
mapping Transition :: TransferSchemaGuardAndNotPossibleGuard(context1:OclAny, context2:OclAny, region:OclAny, varName:String, transMapping: Integer) : LogicalExpression {
		
		leftExpression := self.guard.map Expression2Expression(context2);
		
		rightExpression := self.map TransferSchemaGuard(context1, region, varName, true, transMapping);
		
		operator := LogicOperator::AND;
	
	}
	
mapping Transition :: TransferSchemaSingleSendAndPossibleGuard(context1:OclAny, context2:OclAny, region:OclAny, varName1:String, varName2:String, notOp:Boolean, transMapping: Integer) : LogicalExpression {
		
		if(notOp){
			leftExpression := self.map TransferSchemaGuard(context1, region, varName1, true, transMapping);
		}else{
			leftExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName1, transMapping);
		}endif;
		
		rightExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName2, transMapping);
		
		operator := LogicOperator::AND;
}

mapping Transition :: TransferSchemaErrorOrNotPossibleGuard(context1:OclAny, region:OclAny, varName1:String, varName2:String, notOp:Boolean, transMapping: Integer) : LogicalExpression {
		
		if(notOp){
			rightExpression := self.map TransferSchemaGuard(context1, region, varName2, true, transMapping);
		}else{
			rightExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName2, transMapping);
		}endif;
		
		leftExpression := self.map TransferSchemata2TypedNamedElementExpr(context1, varName1, transMapping);
		
		operator := LogicOperator::OR;
}

mapping Transition :: TransferSchemaThreeVariablesGuard(context1:OclAny, context2:OclAny, region:OclAny, varName1:String, varName2:String, notOp:Boolean, transMapping: Integer) : LogicalExpression {
		
		rightExpression := self.map TransferSchemaSingleSendAndPossibleGuard(context1, context2, region, varName1, varName2, true, transMapping);
		
		leftExpression := self.guard.map Expression2Expression(context2);
		
		operator := LogicOperator::AND;
}
	
mapping Transition :: TransferSchemaNotCondition(context:OclAny, region:OclAny, transMapping: Integer) : UnaryExpression {

		if(not self.raiseMessageEvent.oclIsUndefined()){
			enclosedExpression := self.raiseMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(context);
		}else{
			enclosedExpression := self.triggerMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(context);
		}endif;	

		operator := UnaryOperator::NOT;
	
	}
	
mapping Transition :: TransferSchemaGuard(context:OclAny, region:OclAny, varName:String, op:Boolean, transMapping: Integer) : UnaryExpression {

		enclosedExpression := self.map TransferSchemata2TypedNamedElementExpr(context, varName, transMapping);
		
		if(op){
			operator := UnaryOperator::NOT;
		}endif
	
	}
	
mapping Transition :: TransferSchemata2TypedNamedElementExpr(context:OclAny, varName:String, transMapping: Integer) : TypedNamedElementExpression {
			
		typedNamedElement := context.oclAsType(RealtimeStatechart).map TransferSchemata2Variable(context, varName);
		
					
	}
	
// @author: sthiele2
mapping Transition :: Schema2CoordinatorIntermediateState(context:OclAny, region: OclAny, intermediateStateNumber : Integer, clockName : String,toplevel : Boolean) : State
{
	// creates an intermediate state in the coordinator region
	if(not self.relativeDeadline.oclIsUndefined())
	{
		invariants += self.map RelativeDeadline2ClockConstraint(intermediateStateNumber,region, false, ComparingOperator::LESS_OR_EQUAL, clockName);
	}endif;
	result.parentStatechart := self.statechart.map RTSC2CoordinatorRTSC(context, region,toplevel);	
	result.name := self.source.name + "_Intermediate_"+ intermediateStateNumber.toString()+ "_" + self.target.name ;
}
	
mapping RealtimeStatechart :: TransferSchemata2Variable(context:OclAny, varName:String) : Variable {
		name := varName;
		constant := false;
		dataType := context.oclAsType(RealtimeStatechart).eContainer().oclAsType(ModelElementCategory).container().oclAsType(RootNode).categories->select(c|c.key.equalsIgnoreCase("de.uni_paderborn.fujaba.muml.types.category")).modelElements->at(2).oclAsType(DataType);
		
	};
	

	
--Transfer Schemata Action

mapping Transition :: TransferSchemata2Action(context:OclAny, actionName:String, varName:String, assignValue:String, transMapping:Integer) : Action {
	
		name := actionName;
		
		result.expressions += self.map TransferSchemata2Block(context, varName, assignValue, transMapping);
		
	}
	
mapping Transition :: TransferSchemata2Block(context:OclAny, varName:String, assignValue:String, transMapping:Integer) : Block {
		
		result.expressions += self.map TransferSchemata2Assignment(context, varName, assignValue, transMapping);
		
	}
	
mapping Transition :: TransferSchemata2TwoActions(context:OclAny, actionName:String, varName1:String, varName2:String, assignValue:String, transMapping:Integer) : Action {
	
		name := actionName;
		
		result.expressions += self.map TransferSchemata2TwoActionsBlock(context, varName1, varName2, assignValue, transMapping);
		
	}
	
mapping Transition :: TransferSchemata2TwoActionsBlock(context:OclAny, varName1:String, varName2:String, assignValue:String, transMapping:Integer) : Block {
		
		result.expressions += self.map TransferSchemata2Assignment(context, varName1, assignValue, 20+transMapping);
		result.expressions += self.map TransferSchemata2Assignment(context, varName2, assignValue, 21+transMapping);
		
	}
	
mapping Transition :: TransferSchemata2TwoActionsTransAct(context:OclAny, actionName:String, varName:String, assignValue:String, transMapping:Integer) : Action {
	
		name := actionName + ', ' + self.action.name;
		
		result.expressions += self.map TransferSchemata2TwoActionsTransActBlock(context, varName, assignValue, transMapping);
		
	}
	
mapping Transition :: TransferSchemata2TwoActionsTransActBlock(context:OclAny, varName1:String, assignValue:String, transMapping:Integer) : Block {
		
		result.expressions += self.map TransferSchemata2Assignment(context, varName1, assignValue, 20+transMapping);
		
		if(self.action.expressions->first().oclIsTypeOf(Block)){
			result.expressions += self.action.expressions.oclAsType(Block).expressions.map Expression2Expression(context);
		}else{
			result.expressions += self.action.expressions.map Expression2Expression(context);
		}endif;
			
	}
	
mapping Transition :: TransferSchemata2Assignment(context:OclAny, varName:String, assignValue:String, transMapping:Integer) : Assignment {
		
		lhs_typedNamedElementExpression := self.map TransferSchemata2TypedNamedElementExpr(context, varName, transMapping);
		
		assignOperator := AssignOperator::ASSIGN;
		
		rhs_assignExpression := self.map TransferSchemata2Literal(context, assignValue, transMapping);
		
	}
	
mapping Transition :: TransferSchemata2Literal(context:OclAny, assignValue:String, transMapping:Integer) : LiteralExpression {
		
		value := assignValue;		
		
	}

--Transfer Schemata Synchronization



mapping Transition :: TransferSchemata2Synchronization(context:OclAny, region:OclAny, syncKind:SynchronizationKind, selectorExp: String, channel:String, selector: Boolean, transMapping: Integer) : Synchronization {
		
		kind := syncKind;
		
		syncChannel := context.oclAsType(RealtimeStatechart).map TransferSchemataChannel(context, channel, selector,self);
		
		if(selectorExp.equalsIgnoreCase('self')){
			selectorExpression := self.map Schema2PositionKindSelector(context,region, result, PositionSelectorKind::SELF);
		}else{
			if(selectorExp.equalsIgnoreCase('first')){
				selectorExpression := self.map Schema2PositionKindSelector(context,region, result, PositionSelectorKind::FIRST);
			}else{
				if(selectorExp.equalsIgnoreCase('self.next')){
					selectorExpression := self.map Schema2PositionKindSelector(context,region, result, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
				}else{
					if(selectorExp.equalsIgnoreCase('self.prev')){
						selectorExpression := self.map Schema2PositionKindSelector(context,region, result, PositionSelectorKind::SELF, PositionSelectorKind::PREV);
					}else{
						if(selectorExp.equalsIgnoreCase('curRole')){
						
					}endif
					}endif;
				}endif;
			}endif;
		}endif;
	
	};	

	//dict->hasKey(transition);
	//dict->get(transition);
	//dict->put(transition,1);
	//if(dict->hasKey(transition))
	// dict-> 
property usedChannelNames : Dict(String,Integer); // stores how often a channel with a certain name exists. Used for enumerating the channel names in case of multiple occurences of the same schema
mapping RealtimeStatechart :: TransferSchemataChannel(context:OclAny, channelName: String, selector: Boolean, schemaTransition : Transition ) : SynchronizationChannel {
		
		if(usedChannelNames->hasKey(channelName))
		{
			var nr : Integer := usedChannelNames->get(channelName);
			usedChannelNames->put(channelName,nr +1);
			name := channelName + (nr+1).toString();
			
		}
		else
		{
			name := channelName + 1.toString();
			usedChannelNames->put(channelName,1);	
		};		
		state := context.oclAsType(RealtimeStatechart).map Rtsc2InitialState();
		
		if(selector){
			selectorType := context.oclAsType(RealtimeStatechart).behavioralElement.oclAsType(Role);
		}endif;		
						
	}


mapping Vertex :: Vertex2VertexCoordinator(context:OclAny, region:OclAny) : Vertex
		disjuncts State::States2StatesCoordinator, StateConnectionPoint::StateConnectionPoint2StateConnectionPointCoordinator;
		
mapping Vertex :: Vertex2VertexSubrole(context:OclAny, region:OclAny) : Vertex
		disjuncts State::States2StatesSubrole, StateConnectionPoint::StateConnectionPoint2StateConnectionPointSubrole;


mapping RealtimeStatechart :: Rtsc2InitialState() : State {
		
		name := "Main";
		
		initial := true;
		
		embeddedRegions += self->map State2CoordinatorRegion(self,0);
		
		embeddedRegions += self.map State2SubroleRegion(self,1);
					
	}


mapping RealtimeStatechart :: State2CoordinatorRegion(context:OclAny, region:OclAny) : Region {
		
		priority := 2;
		
		//parentState := context.oclAsType(State);
		

		embeddedStatechart := self.map RTSC2CoordinatorRTSC(context, region,true);
		

					
	}
	
mapping RealtimeStatechart :: State2SubroleRegion(context:OclAny, region:OclAny) : Region {
		
		priority := 1;
		
	//	parentState := context.oclAsType(State);
		
		embeddedStatechart := self.map RTSC2SubroleRTSC(context, region,true);
					
	}	
	
mapping RealtimeStatechart :: RTSC2SubroleRTSC(context:OclAny, region:OclAny, highlevel: Boolean) : RealtimeStatechart {
	

		assert fatal (false) with log ("Do not go here!");	

}	

mapping State :: States2StatesCoordinator(context:OclAny, region:OclAny) : State{
	
	assert fatal (false) with log ("Do not go here!");
	}
mapping RealtimeStatechart :: RTSC2CoordinatorRTSC(context:OclAny, region:OclAny, highlevel: Boolean) : RealtimeStatechart 
{

		assert fatal (false) with log ("Do not go here!");
}

mapping RealtimeStatechart :: RTSC2CoordinatorRTSC(context:OclAny, region:OclAny) : RealtimeStatechart {

		assert fatal (false) with log ("Do not go here!");
}

mapping State :: States2StatesSubrole(context:OclAny, region:OclAny) : State {

	assert fatal (false) with log ("Do not go here!");
}
	
	
	
	
	
	
	
-- to coordinator
mapping Transition :: Transition2TransitionCoordinator(context:OclAny, region:OclAny) : Transition {
		
		source := self.source.oclAsType(State).map Vertex2VertexCoordinator(context, region);
		target := self.target.oclAsType(State).map Vertex2VertexCoordinator(context, region);
		
		priority := self.priority;
		
		clockResets := self.clockResets->select(c|not isClockSubRoleSpecific(c))->map Clock2Clock();
		
		clockConstraints := self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->map ClockConstraint2ClockConstraint(context, region);
		
		guard := self.guard.map Expression2Expression(context);
		
		action := self.action.map Action2Action(context, region);
		
		synchronization := self.map TransferSchemata2Synchronization(context, region, SynchronizationKind::SEND, "first", "switchState", true, 1);
		
		absoluteDeadlines := self.absoluteDeadlines->map AbsoluteDeadline2AbsoluteDeadline(context, region);
		
		relativeDeadline := self.relativeDeadline.map RelativeDeadline2RelativeDeadline(context, region);
		
		blockable := self.blockable;
		
		urgent := self.urgent;
						
	}
	
	mapping Transition :: Transition2TransitionSubrole(context:OclAny, region:OclAny, toplevel : Boolean) : Transition {
		
		source := self.source.map Vertex2VertexSubrole(context, region);

		target := self.map TransitionNoMessage2TransitionRecSyncSubrole(context, region, toplevel);
		
		priority := self.priority;
		
		clockResets := self.clockResets->select(c|isClockSubRoleSpecific(c))->map Clock2Clock();
		
		clockConstraints := self.clockConstraints->map ClockConstraint2ClockConstraint(1, region);
		
		guard := self.guard.map Expression2Expression(1);
		
		synchronization := self.map TransferSchemata2Synchronization(context, region, SynchronizationKind::RECEIVE, "self", "switchState", true, 2);
		
	}
	
mapping Transition :: Transition2TransitionNotLastSubrole(context:OclAny, region:OclAny,toplevel : Boolean) : Transition {
		
		source := self.map TransitionNoMessage2TransitionRecSyncSubrole(context, region, toplevel);
		target := self.target.map Vertex2VertexSubrole(context, region);
		
		priority := 2;
		
		guard := self.map TransferSchemataLogicalExpression(result, PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
		
		synchronization := self.map TransferSchemata2Synchronization(context, region, SynchronizationKind::SEND, "self.next", "switchState", true, 3);
		
	}
	
mapping Transition :: Transition2TransitionLastSubrole(context:OclAny, region:OclAny,toplevel : Boolean) : Transition {
		
		source := self.map TransitionNoMessage2TransitionRecSyncSubrole(context, region, toplevel);
		target := self.target.map Vertex2VertexSubrole(context, region);
		
		priority := 1;
		
		guard := self.map TransferSchemataLogicalExpression(result,PositionSelectorKind::LAST, ComparingOperator::EQUAL);
		
	}
	
mapping Transition :: TransitionNoMessage2TransitionRecSyncSubrole(context:OclAny, region:OclAny,toplevel : Boolean) : State {
		
		name := self.source.name + "_" + self.target.name + "_" + self.priority.toString() +"_SwitchState";
		
		parentStatechart := self.statechart.map RTSC2SubroleRTSC(context, region,toplevel);
		
	}
	
mapping Expression :: Expression2UnaryExpression(context : OclAny, _operator : UnaryOperator) : UnaryExpression{
		
		result.operator := _operator;
		
		result.enclosedExpression := self.map Expression2Expression(context);
}	


mapping Transition :: Transition2Block(blockExpressions : Set(Expression)) : Block {
	result.expressions+=blockExpressions;
}

mapping Transition :: Transition2Block(blockExpression : Expression) : Block{
	init{
		result := self.map Transition2Block(Set{blockExpression});
	}
}
mapping Transition:: Transition2ComparisonExpression(context : OclAny, comparingoperator : ComparingOperator,lhs:Expression, rhs:Expression): core::expressions::common::ComparisonExpression{
	result.leftExpression := lhs;
	result.rightExpression :=rhs;
	result.operator := comparingoperator;	
}

mapping Transition:: Transition2LogicalExpression(context : OclAny, logicoperator : LogicOperator, lhs:Expression, rhs:Expression): core::expressions::common::LogicalExpression{
	result.leftExpression := lhs;
	result.rightExpression :=rhs;
	result.operator := logicoperator;
}



----------------------------------------------** new transformations that should replace the old ones ** 
mapping Transition :: TransferSchemataEndpointReference(identifier : EObject, positionSelectorKind: PositionSelectorKind, referencedTypedNamedElement : TypedNamedElement) : DiscreteInteractionEndpointReference {
	position := self.map Schema2PositionKindSelector(result,result,identifier, positionSelectorKind);
	typedNamedElementExpression := self.map Schema2TypedNamedElementExpression(result,referencedTypedNamedElement);
}

mapping Transition :: TransferSchemataEndpointReference(identifier : EObject, positionSelectorKind: PositionSelectorKind) : DiscreteInteractionEndpointReference {
	position := self.map Schema2PositionKindSelector(result,result,identifier, positionSelectorKind);	
}


mapping Transition :: Schema2TypedNamedElementAssignmentExpression(context : OclAny,operator : AssignOperator, referencedElement : TypedNamedElement, assignedExpression : Expression) : actionlanguage::Assignment{

	result.lhs_typedNamedElementExpression := self.map Schema2TypedNamedElementExpression(result,referencedElement);
	result.rhs_assignExpression := assignedExpression;
	result.assignOperator := operator;
}



mapping Transition :: Schema2LiteralExpression(context : OclAny, _value : String) : core::expressions::common::LiteralExpression{
	value := _value;
	
}

mapping Transition :: Schema2TypedNamedElementExpression(context : OclAny,referencedElement : TypedNamedElement) : TypedNamedElementExpression{
	
	typedNamedElement := referencedElement;
}

mapping Transition :: Schema2Variable(_name : String, _type : DataType) : Variable{
	result.name := _name;
	result.dataType := _type;
}
