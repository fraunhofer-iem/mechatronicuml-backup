library Iterate;
import common.AllSchemataMappings;
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype rtsc uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';
modeltype valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven uses 'http://www.storydriven.org/core/0.3.1';
modeltype schemata uses muml::realtimestatechart::one_to_n_schemata('http://www.fujaba.de/muml/0.4.0');
modeltype types uses muml::types('http://www.fujaba.de/muml/0.4.0');

----------------------------------------------------------XXXXXXXXXXXXXXXXX--ITERATE--XXXXXXXXXXXXXXXXX-------------------------------------------------------------------------	
property iterateCheckDone : String = "iterateCheckDone";
property iterate : String = "iterate";
property iterateDone : String = "iterateDone";
property iterateCheck : String = "iterateCheck";
property iterateDLCName : String = "DLC_Iterate";
property iteratePossibleName : String = "iteratePossible";
property terminateIterationName : String = "terminate";
property iterateDelayVariableName : String = "iterateDelay";
property sendIterateName : String = "sendIterate";
property iterateDelayClockName : String = "Delay_Clock";

----------------------------------------------------------------Transfer Schema Iterate of Coordinator------------------------------------------------------------------

// @author: sthiele2
mapping Transition :: Iterate2CoordinatorStartTransition(context:OclAny, region:RealtimeStatechart,toplevel : Boolean) : Transition {
	// this mapping creates an outgoing transition from the (mapped) source of the schema transition to a first intermediate state
	source := self.source.map Vertex2VertexCoordinator(context, region);
	target := self.map Schema2CoordinatorIntermediateState(context,region,1,iterateDLCName,toplevel);
	priority := self.priority;
	guard := self.guard.map Expression2Expression(result);		
	clockConstraints := self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock)).map ClockConstraint2ClockConstraint(result);
	
	synchronization := self. TransferSchemata2Synchronization(  iterateCheckDone,SynchronizationKind::RECEIVE);
}

// @author: sthiele2
mapping Transition :: Iterate2CoordinatorIntermediateTransition(context:OclAny, region:RealtimeStatechart,toplevel : Boolean): Transition
{
	// creates the transition from intermediate state 1 to intermediate state 2
	source := self.map Schema2CoordinatorIntermediateState(context,region,1,iterateDLCName,toplevel);
	target := self.map Schema2CoordinatorIntermediateState(context,region,2,iterateDLCName,toplevel);	
	priority := 1;
	if(not self.relativeDeadline.oclIsUndefined())
	{
		result.clockConstraints += self. RelativeDeadline2ClockConstraint( true, ComparingOperator::GREATER_OR_EQUAL, iterateDLCName );
	};
	if(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).startFromFirst) {
		synchronization := self. TransferSchemata2Synchronization( iterate,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
	}
	else {
		synchronization := self. TransferSchemata2Synchronization( iterate,SynchronizationKind::SEND, PositionSelectorKind::LAST);
	};
}

// @author: sthiele2
mapping Transition :: Iterate2CoordinatorEndTransition(context:OclAny, region:RealtimeStatechart, toplevel : Boolean): Transition
{
	// creates a transition from intermediate state 2 to the (mapped) target of the schema transition 
	source := self.map Schema2CoordinatorIntermediateState(context,region, 2, iterateDLCName,toplevel);
	target := self.target.map Vertex2VertexCoordinator(context,region);
	priority := 1;
	result.clockResets :=  self.clockResets->select(c| not isClockSubRoleSpecific(c)).map Clock2Clock();
	result.action := self.action.map Action2Action(context,region);
	
	synchronization := self. TransferSchemata2Synchronization(iterateDone,SynchronizationKind::RECEIVE);
}

	
------------- non Conditional Coordinator Mappings	
mapping Transition :: NonConditionalIterate2TranssitionFromSourceToIntermediate(context:OclAny, region:RealtimeStatechart, toplevel:Boolean) : Transition {

		priority := self.priority;
						
		source := self.source.map Vertex2VertexCoordinator(context, region);
		
		target := self.map Schema2CoordinatorIntermediateState(context, region,1, iterateDLCName, toplevel);
		
		synchronization := self. TransferSchemata2Synchronization(  iterate,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
		
		clockConstraints := self.clockConstraints.map ClockConstraint2ClockConstraint(result);
		
		guard := self.guard.map Expression2Expression(result);
}

mapping Transition :: NonConditionalIterate2TransitionFromIntermediateToTarget(context:OclAny, region:RealtimeStatechart,  toplevel:Boolean) : Transition{
	
		priority := 1;
		
		source := self.map Schema2CoordinatorIntermediateState(context,region, 1,iterateDLCName, toplevel);
	
		target := self.target.map Vertex2VertexCoordinator(context,region);
		
		action := self.action.map Action2Action(context, region);
		
		clockResets += self.clockResets->select(c|not isClockSubRoleSpecific(c)).map Clock2Clock();
	
		synchronization := self. TransferSchemata2Synchronization(  iterateDone,SynchronizationKind::RECEIVE);	
}

---------------- Coordinator Mappings for Embedded State

mapping Transition :: Iterate2SourceRegionCoordinator(context:OclAny, region:RealtimeStatechart) : Region {
		
		priority := self.priority;
		
		parentState := self.source.map Vertex2VertexCoordinator(context, region).oclAsType(State);
		
		embeddedStatechart := self.map Iterate2SourceEmbeddedRTSCCoordinator(context, region);
					
	}
	
mapping Transition :: Iterate2SourceEmbeddedRTSCCoordinator(context:OclAny, region:RealtimeStatechart) : RealtimeStatechart {
		
		name:= "iterateCheck" + "_" + self.source.name + "_" + self.target.name + "_" + self.priority.toString();
		
		states += self.map RegionState(context, region, "Idle", true);
		states += self.map RegionState(context, region, "Requesting", false);
		
		transitions += self.map Iterate2TransCheckEmbeddedCoordinator(context, region);
		transitions += self.map Iterate2TransCheckDoneEmbeddedCoordinator(context, region);
					
	}
	
mapping Transition :: Iterate2TransCheckEmbeddedCoordinator(context:OclAny, region:RealtimeStatechart) : Transition {

		priority := 1;
		
		source := self.map RegionState(context, region, "Idle", true);
		
		target := self.map RegionState(context, region, "Requesting", false);
		
		clockConstraints := self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->map ClockConstraint2ClockConstraint(result);
		
		guard := self.guard.map Expression2Expression(context);
		
		synchronization := 	self. TransferSchemata2Synchronization( iterateCheck,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
			
	}
	
mapping Transition :: Iterate2TransCheckDoneEmbeddedCoordinator(context:OclAny, region:RealtimeStatechart) : Transition {

		priority := 1;
		
		target := self.map RegionState(context, region, "Idle", true);
		
		source := self.map RegionState(context, region, "Requesting", false);
		
	
		
		synchronization :=  self. TransferSchemata2Synchronization( iterateCheckDone,SynchronizationKind::RECEIVE);
		
		guard := self. TransferSchemaGuard( iteratePossibleName, UnaryOperator::NOT);
			
	}
	
	

	

	
----------------------------------------------------------------- Transfer Schema Iterate of Subrole-------------------------------------------------------------------
	
mapping Transition :: Iterate2TransSendSyncSubrole(context:OclAny, region:RealtimeStatechart, toplevel:Boolean) : Transition {
		
		priority := 1; 
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context, region,1, toplevel);
		
		synchronization := self.TransferSchemata2Synchronization( iterate,SynchronizationKind::RECEIVE  ,PositionSelectorKind::SELF);
		
		clockConstraints += self.clockConstraints->select(c|isClockSubRoleSpecific(c.clock)).map ClockConstraint2ClockConstraint(result);
		
		clockResets += self.clockResets->select(c|isClockSubRoleSpecific(c)).map Clock2Clock();
		
		action := new Action();
		
		action.name :="";
		
		if(not self.raiseMessageEvent.oneToManyCommunicationSchema.action.oclIsUndefined()) {
			action.expressions += self.raiseMessageEvent.oneToManyCommunicationSchema.action.expressions.map Expression2Expression(result);
			action.name :=  action.name + self.raiseMessageEvent.oneToManyCommunicationSchema.action.name;
		};
		
		action.expressions+= self.TransferSchemata2AssignmentBlock(iterateDelayVariableName,"true");
		
		action.name := action.name + " " + iterateDelayVariableName + " := true";
		
		events += self.raiseMessageEvent.map Asynchronous2Asynchronous(context);
		
		var leftExpression : Expression := 	self.TransferSchemaGuard(terminateIterationName, UnaryOperator::NOT);
		var rightExpression : Expression := self.Schema2TypedNamedElementExpression(self.map Transition2SubroleSpecificBooleanVaribale(sendIterateName));
		
		guard := self.TransferSchemataLogicalExpression(leftExpression, rightExpression, LogicOperator::AND);
				
	}
	
	
	
	
mapping Transition :: Iterate2TransSendSyncNotConditionSubrole(context:OclAny, region:RealtimeStatechart, toplevel:Boolean) : Transition {
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context, region,1, toplevel);
		
		synchronization := self.TransferSchemata2Synchronization(iterate,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
		
		action := self.TransferSchemata2Action(iterateDelayVariableName + " := false;",iterateDelayVariableName,"false");			
		
		var leftExpression : Expression := 	self.TransferSchemaGuard(terminateIterationName, UnaryOperator::NOT);
		var rightExpression : Expression := self.TransferSchemaGuard(sendIterateName, UnaryOperator::NOT);
		guard :=  self.TransferSchemataLogicalExpression(leftExpression, rightExpression, LogicOperator::AND);
				
		priority :=2;
		
	}
	

mapping Transition :: Iterate2IdleToIntermediate2SubroleRegion(context: OclAny, region: RealtimeStatechart, toplevel:Boolean) : Transition {
	
	priority := 3;
	
	source := self.map Transition2StateSubrole(region,self.source, true);
		
	target := self.map Schema2SubroleIntermediateState(context, region,2, toplevel);
	
	guard := self.Schema2TypedNamedElementExpression(self.map Transition2SubroleSpecificBooleanVaribale(terminateIterationName));
		
}


mapping Transition :: Iterate2Transition1Intermediate1ToIntermedediate2SubroleRegion(context:OclAny, region: RealtimeStatechart, toplevel: Boolean) : Transition {
	
	priority := 1;
	
	source := self.map Schema2SubroleIntermediateState(context,region, 1,toplevel);
	
	target := self.map Schema2SubroleIntermediateState(context,region, 2,toplevel);
	
	var expr1 :=  self.TransferSchemaGuard(terminateIterationName, UnaryOperator::NOT);
	var expr2 := self.Schema2TypedNamedElementExpression(self.map Transition2SubroleSpecificBooleanVaribale(iterateDelayVariableName));
		
	var logic := self.TransferSchemataLogicalExpression(expr1,expr2,LogicOperator::AND);
	
	var logic2 : Expression;
	if(not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).terminationCondition.oclIsUndefined()) {
		var expr3 := self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate)
		.terminationCondition.map Expression2Expression(result);
		logic2 := self.TransferSchemataLogicalExpression(logic,expr3, LogicOperator::AND);
	}
	else {
		logic2 := logic;
	};
	
	guard := logic2;
	
	if(not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).delay.oclIsUndefined()) {	
		clockConstraints += self.Transition2ClockConstraint(iterateDelayClockName, self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).delay.map TimeValue2TimeValue(result), ComparingOperator:: GREATER_OR_EQUAL);
	};
	
}

mapping Transition :: Iterate2Transition2Intermediate1ToIntermedediate2SubroleRegion(context:OclAny, region: RealtimeStatechart, toplevel: Boolean) : Transition {
	
	priority := 2;
	
	source := self.map Schema2SubroleIntermediateState(context,region, 1,toplevel);
	
	target := self.map Schema2SubroleIntermediateState(context,region, 2,toplevel);
	
	var expr1 :=  self.TransferSchemaGuard(terminateIterationName, UnaryOperator::NOT);
	var expr2 := self.TransferSchemaGuard(iterateDelayVariableName, UnaryOperator::NOT);
	var logic := self.TransferSchemataLogicalExpression(expr1,expr2,LogicOperator::AND);
	
	var logic2 : Expression;
	if(not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).terminationCondition.oclIsUndefined()) {
		var expr3 := self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate)
		.terminationCondition.map Expression2Expression(result);
		logic2 := self.TransferSchemataLogicalExpression(logic,expr3, LogicOperator::AND);
	}
	else {
		logic2 := logic;
	};
	
	guard := logic2;
	
}

mapping Transition :: Iterate2Transition3Intermediate1ToIntermedediate2SubroleRegion(context:OclAny, region: RealtimeStatechart, toplevel: Boolean) : Transition {
	
	priority := 3;
	
	source := self.map Schema2SubroleIntermediateState(context,region, 1,toplevel);
	
	target := self.map Schema2SubroleIntermediateState(context,region, 2,toplevel);
	
	var expr1 :=  self.Schema2TypedNamedElementExpression(self.map Transition2SubroleSpecificBooleanVaribale(terminateIterationName));
		
	var expr2 := self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).terminationCondition.map Expression2Expression(result);
	
	guard := self.TransferSchemataLogicalExpression(expr1,expr2,LogicOperator::OR);
	
}

mapping Transition :: Iterate2TransReceiveSyncNotLastSubrole(context:OclAny, region:RealtimeStatechart, toplevel:Boolean) : Transition {
	
		priority := 2;
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		source := self.map Schema2SubroleIntermediateState(context, region,2, toplevel);	
		
		if(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).startFromFirst) {
			synchronization := self. TransferSchemata2Synchronization( iterate,SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
			guard := self.  TransferSchemataComparisonExpression(PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
		}
		else {
			synchronization := self. TransferSchemata2Synchronization( iterate,SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::PREV);
			guard := self.  TransferSchemataComparisonExpression(PositionSelectorKind::FIRST, ComparingOperator::UNEQUAL);
		}endif;		
	}
			
mapping Transition :: Iterate2TransReceiveSyncLastSubrole(context:OclAny, region:RealtimeStatechart, toplevel:Boolean) : Transition {
	
		priority := 1;
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		source := self.map Schema2SubroleIntermediateState(context, region,2, toplevel);		
		
		if(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::Iterate).startFromFirst) {
			guard := self.  TransferSchemataComparisonExpression(PositionSelectorKind::LAST, ComparingOperator::EQUAL);			
		}		
		else {
			guard := self.  TransferSchemataComparisonExpression(PositionSelectorKind::FIRST, ComparingOperator::EQUAL);	
		}endif;	
		
		
		if((not self.raiseMessageEvent.oclIsUndefined()) and (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsUndefined()) 
				and self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(muml::realtimestatechart::one_to_n_schemata::Iterate) 
				and (not self.raiseMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())){
				
			action := self. TransferSchemata2Action("iteratePossible:=false", iteratePossibleName, "false");
			
		}endif;
		synchronization := self. TransferSchemata2Synchronization( iterateDone,SynchronizationKind::SEND);
	}
	

	
mapping Transition :: Iterate2SourceRegionSubrole(context:OclAny, region:RealtimeStatechart) : Region {
		
		priority := self.priority;
		
		parentState := self.map Transition2StateSubrole(region,self.source, true).oclAsType(State);
		
		embeddedStatechart := self.map Iterate2SourceEmbeddedRTSCSubrole(context, region);
					
	}
	
mapping Transition :: Iterate2SourceEmbeddedRTSCSubrole(context:OclAny, region:RealtimeStatechart) : RealtimeStatechart {
		
		name:= "iterateCheck" + "_" + self.source.name + "_" + self.target.name + "_" + self.priority.toString();
		
		states += self.map RegionState(context, region, "Idle", true);
		states += self.map RegionState(context, region, "Requested", false);
		
		transitions += self.map Iterate2RequestedIdleCheckSubrole(context, region);
		transitions += self.map Iterate2RequestedIdleCheckDoneSubrole(context, region);
		transitions += self.map Iterate2IdleRequestedFulfilledSubrole(context, region);
		transitions += self.map Iterate2IdleRequestedNotFulfilledSubrole(context, region);
					
	}
	
mapping Transition :: Iterate2RequestedIdleCheckSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 2;
				
		source := self.map RegionState(context, region, "Requested", false);
		
		target := self.map RegionState(context, region, "Idle", true);
		
		guard := self.  TransferSchemataComparisonExpression(PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
		
		synchronization := self.TransferSchemata2Synchronization( "iterateCheck", SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
					
	}
	
mapping Transition :: Iterate2RequestedIdleCheckDoneSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 1;
				
		source := self.map RegionState(context, region, "Requested", false);
		
		target := self.map RegionState(context, region, "Idle", true);
		
		guard := self. TransferSchemataComparisonExpression(PositionSelectorKind::LAST, ComparingOperator::EQUAL);
		
		synchronization := self.TransferSchemata2Synchronization(iterateCheckDone,SynchronizationKind::SEND);
					
	}
	
mapping Transition :: Iterate2IdleRequestedFulfilledSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 2;
				
		target := self.map RegionState(context, region, "Requested", false);
		
		source := self.map RegionState(context, region, "Idle", true);
		
		guard := self.raiseMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(2);
		
		synchronization := 	self.TransferSchemata2Synchronization(iterateCheck,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
		
		action := self.TransferSchemata2TwoActions(iteratePossibleName + " :=true; " + sendIterateName + ":= true;",iteratePossibleName, sendIterateName,"true");
					
	}
	
mapping Transition :: Iterate2IdleRequestedNotFulfilledSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 1;
				
		target := self.map RegionState(context, region, "Requested", false);
		
		source := self.map RegionState(context, region, "Idle", true);
		
		guard := self. TransferSchemaNotCondition();

		synchronization := self.TransferSchemata2Synchronization(iterateCheck,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
					
	}

	