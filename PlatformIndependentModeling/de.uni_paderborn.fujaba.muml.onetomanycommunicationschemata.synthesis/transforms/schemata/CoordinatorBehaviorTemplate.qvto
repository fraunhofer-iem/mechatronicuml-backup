import common.AllSchemataMappings;
import common.SchemaSpecificMUML2MUML;

library CoordinatorBehaviorTemplate;
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype realtimestatechart uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';
modeltype valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven uses 'http://www.storydriven.org/core/0.3.1';
modeltype modelinstance uses modelinstance('http://www.fujaba.de/modelinstance/0.4.0');
modeltype schemata uses muml::realtimestatechart::one_to_n_schemata('http://www.fujaba.de/muml/0.4.0');
modeltype types uses muml::types('http://www.fujaba.de/muml/0.4.0');
modeltype ocl uses 'http://www.eclipse.org/ocl/1.1.0/oclstdlib.ecore';

	
// @author: sthiele2
mapping Transition :: Schema2CoordinatorStartTransition(context:OclAny, region:RealtimeStatechart, schemaCheckDoneChannelName : String, schemaDLCName : String, schemaPossibleVariableName : String) : Transition {
	// this mapping creates an outgoing transition from the (mapped) source of the schema transition to a first intermediate state
	source := self.source.map Vertex2VertexCoordinator(context);
	target := self.map Schema2CoordinatorIntermediateState(context,1, schemaDLCName);
	priority := self.priority;
	
	if(self.guard.oclIsUndefined()) {
		guard := new TypedNamedElementExpression(self.map Schema2BooleanVariable(schemaPossibleVariableName));	
	}
	else {
		guard := new LogicalExpression(new TypedNamedElementExpression(self.map Schema2BooleanVariable(schemaPossibleVariableName)), self.guard.map transform(result).oclAsType(Expression), LogicOperator::AND );
	};
			
	if(not self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->isEmpty())
		urgent := false;	
	clockConstraints += self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->map transform(result).oclAsType(ClockConstraint);	
	
	synchronization := self. createSynchronization( schemaCheckDoneChannelName, SynchronizationKind::RECEIVE);
}

// @author: sthiele2
mapping Transition :: Schema2CoordinatorIntermediateTransition(context:OclAny, region:RealtimeStatechart, schemaChannelName : String, schemaDLCName : String): Transition
{
	// creates the transition from intermediate state 1 to intermediate state 2
	source := self.map Schema2CoordinatorIntermediateState(context,1, schemaDLCName);
	target := self.map Schema2CoordinatorIntermediateState(context,2,schemaDLCName);	
	priority := 1;
	if(not self.relativeDeadline.oclIsUndefined())
	{
		urgent := false;
		result.clockConstraints += self. RelativeDeadline2ClockConstraint(true, ComparingOperator::GREATER_OR_EQUAL, schemaDLCName );
	};
	synchronization := self.createSynchronization( schemaChannelName,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
}

// @author: sthiele2
mapping Transition :: Schema2CoordinatorEndTransition(context:OclAny, region:RealtimeStatechart, schemaDoneChannelName : String, schemaDLCName : String): Transition
{
	// creates a transition from intermediate state 2 to the (mapped) target of the schema transition 
	source := self.map Schema2CoordinatorIntermediateState(context,2,schemaDLCName);
	target := self.target.map Vertex2VertexCoordinator(context);
	priority := 1;
	result.clockResets :=  self.clockResets->select(c| not isClockSubRoleSpecific(c)).map transform().oclAsType(Clock);
	result.action := self.action.map transform(result).oclAsType(Action);
	synchronization :=self.createSynchronization(schemaDoneChannelName,SynchronizationKind::RECEIVE);	
}


mapping Transition :: Schema2SourceRegionCoordinator(context:OclAny, schemaCheckChannelName : String, schemaCheckDoneChannelName : String, schemaPossibleVariableName : String): Region {
		
		priority := self.priority;
		
		parentState := self.source.map Vertex2VertexCoordinator(context).oclAsType(State);
		
		embeddedStatechart := self.map Schema2SourceEmbeddedRTSCCoordinator(context, schemaCheckChannelName, schemaCheckDoneChannelName, schemaPossibleVariableName);
					
	}
	
mapping Transition :: Schema2SourceEmbeddedRTSCCoordinator(context:OclAny, schemaCheckChannelName : String, schemaCheckDoneChannelName : String, schemaPossibleVariableName : String ) : RealtimeStatechart {
		
		name:= "SchemaCheck" + "_" + self.source.name + "_" + self.target.name + "_" + self.priority.toString();
		
		states += self.map RegionState(context,  "Idle", true);
		states += self.map RegionState(context,  "Requesting", false);
		
		transitions += self.map Schema2TransCheckEmbeddedCoordinator(context, schemaCheckChannelName);
		transitions += self.map Schema2TransCheckDoneEmbeddedCoordinator(context, schemaCheckDoneChannelName, schemaPossibleVariableName);
					
	}
	
mapping Transition :: Schema2TransCheckEmbeddedCoordinator(context:OclAny, schemaCheckChannelName : String) : Transition {

		priority := 1;
		
		source := self.map RegionState(context,  "Idle", true);
		
		target := self.map RegionState(context,  "Requesting", false);
		
		if(not self.clockConstraints->isEmpty())
			urgent := false;	
		clockConstraints += self.clockConstraints->map transform(result).oclAsType(ClockConstraint);	
	
		clockConstraints := self.clockConstraints.map transform(result).oclAsType(ClockConstraint);
		
		guard := self.guard.map transform(result).oclAsType(Expression);
		
		synchronization :=	self. createSynchronization(  schemaCheckChannelName,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
			
	}
	
mapping Transition :: Schema2TransCheckDoneEmbeddedCoordinator(context:OclAny, schemaCheckDoneChannelName : String, schemaPossibleVariableName : String) : Transition {

		priority := 1;
		
		target := self.map RegionState(context,  "Idle", true);
		
		source := self.map RegionState(context,  "Requesting", false);
		
		synchronization := self. createSynchronization( schemaCheckDoneChannelName,SynchronizationKind::RECEIVE);
		
		guard := self. createUnaryExpressionEnclosingTypedNamedElementExpression( schemaPossibleVariableName, UnaryOperator::NOT);
			
	}
	


