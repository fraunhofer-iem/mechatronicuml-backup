library MultiReceive;
import common.AllSchemataMappings;
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype rtsc uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';
modeltype valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven uses 'http://www.storydriven.org/core/0.3.1';
modeltype schemata uses muml::realtimestatechart::one_to_n_schemata('http://www.fujaba.de/muml/0.4.0');
modeltype types uses muml::types('http://www.fujaba.de/muml/0.4.0');
----------------------------------------------------------XXXXXXXXXXXXXXXX--MultiReceive--XXXXXXXXXXXXXXXXXX-------------------------------------------------------------------------
property multiReceiceChannelName : String = "multiReceive";
property multiReceiveDoneChannelName : String = "multiReceiveDone";

-------------------------------------------------------------Transfer Schema MultiReceive of Coordinator------------------------------------------------------------------

// @author: sthiele2 -- creates a transition in the coordinator region from the schema-transition's soruce to the intermediate state
mapping Transition :: MultiReceive2TransitionFromSourceToIntermediateCoordinator(context : OclAny, region:RealtimeStatechart) : Transition{
	
		priority := self.priority;
		
		source := self.source.map Vertex2VertexCoordinator(context);
		
		
		target := self.map Schema2CoordinatorIntermediateState(context, 1,multiReceiveDLCName);
		
		guard := self.guard.map multiTransform().oclAsType(Expression);
		if(not self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->isEmpty()) 
			urgent := false;		
		clockConstraints += self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->map multiTransform().oclAsType(ClockConstraint);	
	
		synchronization := self. createSynchronization( multiReceiceChannelName,SynchronizationKind::SEND  ,PositionSelectorKind::FIRST);
		
}

// @author: sthiele2 -- create a transition in the coordinator region from the intermediate state to the schema-transition's target 
mapping Transition :: MultiReceive2TransitionFromIntermediateToTargetCoordinator(context : OclAny, region:RealtimeStatechart) : Transition{
		
		priority := 1;
		
		source := self.map Schema2CoordinatorIntermediateState(context,1,multiReceiveDLCName);
		
		target := self.target.map Vertex2VertexCoordinator(context);
				
		clockResets := self.clockResets->select(c| not isClockSubRoleSpecific(c)).map transform().oclAsType(Clock);
		
		action := self.action.map multiTransform().oclAsType(Action);
		
		if(not self.relativeDeadline.oclIsUndefined()){
			urgent := false;
			clockConstraints += self. RelativeDeadline2ClockConstraint(true, ComparingOperator::GREATER_OR_EQUAL, multicastDLCName);
		}endif;		
		
		synchronization := self. createSynchronization( multiReceiveDoneChannelName,SynchronizationKind::RECEIVE);
}

	
------------------------------------------------------------------ Transfer Schema MultiReceive of Subrole---------------------------------------------------------------

// @author: sthiele2 -- creates a transition in the subrole region from the schema-transition's source to the intermediate state 1
mapping Transition :: MultiReceive2TransitionFromSourceToIntermediateState1Subrole(context : OclAny, region:RealtimeStatechart) : Transition{
	
		priority := 2;
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context, 1);
		
		if(not self.triggerMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())
		{
			guard := self.triggerMessageEvent.oneToManyCommunicationSchema.condition.map multiTransform().oclAsType(Expression);
		}endif;
			
		synchronization := self. createSynchronization( multiReceiceChannelName,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
}

// @author: sthiele2 -- creates a transition in the subrole region from the schema-transition's source to the intermediate state 2
mapping Transition :: MultiReceive2TransitionFromSourceToIntermediate2Subrole(context : OclAny, region:RealtimeStatechart) : Transition{
		
		priority := 1;
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context, 2);
		
		if(not self.triggerMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())
		{
			guard := self.triggerMessageEvent.oneToManyCommunicationSchema.condition.map Expression2UnaryExpression(result,UnaryOperator::NOT);
		}endif;
		
		synchronization := self. createSynchronization( multiReceiceChannelName,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
}


// @author: sthiele2 -- creates a transition in the subrole region from the intermediate state 1 source to the intermediate state 2 
// 					 -- implements the success case
mapping Transition :: MultiReceive2Transition1FromIntermediate1ToIntermediate2Subrole(context : OclAny, region:RealtimeStatechart) : Transition{
		
		priority := 1;
		
		source := self.map Schema2SubroleIntermediateState(context,1);
		
		target := self.map Schema2SubroleIntermediateState(context,2);
		
		events += self.triggerMessageEvent.map multiTransform().oclAsType(AsynchronousMessageEvent);
		
		action := self.triggerMessageEvent.oneToManyCommunicationSchema.oclAsType(muml::realtimestatechart::one_to_n_schemata::MultiReceive).failureAction.map multiTransform().oclAsType(Action);
}

// @author: sthiele2 -- creates a second transition in the subrole region from the intermediate state 1 source to the intermediate state 2
//					 -- implements the failuer case
mapping Transition :: MultiReceive2Transition2FromIntermediate1ToIntermediate2Subrole(context : OclAny) : Transition{
		
		priority := 2;
		
		source := self.map Schema2SubroleIntermediateState(context,1);
		
		target := self.map Schema2SubroleIntermediateState(context,2);
		
		action := self.triggerMessageEvent.oneToManyCommunicationSchema.action.map multiTransform().oclAsType(Action);
}	

// @author: sthiele2 -- creates a transition in the subrole region from the intermediate state 2 to the schema-transition's target state
// 					 -- implements the case that self == last
mapping Transition :: MultiReceive2Transition1FromIntermediate2ToTarget(context : OclAny,region: RealtimeStatechart) : Transition{
	
		priority := 1;
		
		source := self.map Schema2SubroleIntermediateState(context,2);
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		guard := self.  createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::EQUAL);
	
		synchronization := 	self. createSynchronization( multiReceiveDoneChannelName,SynchronizationKind::SEND);
}

// @author: sthiele2 -- creates a transition in the subrole region from the intermediate state 2 to the schema-transition's target state
// 					 -- implements the case that self <> last
mapping Transition :: MultiReceive2Transition2FromIntermediate2ToTarget(context : OclAny, region:RealtimeStatechart) : Transition{
	
		priority := 2;
		
		source := self.map Schema2SubroleIntermediateState(context,2);
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		guard := self.  createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
			
		synchronization := self. createSynchronization( multiReceiceChannelName,SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
}

