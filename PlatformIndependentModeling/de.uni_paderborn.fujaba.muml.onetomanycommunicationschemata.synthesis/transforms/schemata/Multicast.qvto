library Multicast;
import common.AllSchemataMappings;
modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype rtsc uses muml::realtimestatechart('http://www.fujaba.de/muml/0.4.0');
modeltype common uses core::expressions::common('http://www.storydriven.org/core/0.3.1');
modeltype expressions uses core::expressions('http://www.storydriven.org/core/0.3.1');
modeltype behavior uses muml::behavior('http://www.fujaba.de/muml/0.4.0');
modeltype actionLanguage uses 'http://www.fujaba.de/muml/actionlanguage/0.4.0';
modeltype valuetype uses muml::valuetype('http://www.fujaba.de/muml/0.4.0');
modeltype protocol uses muml::protocol('http://www.fujaba.de/muml/0.4.0');
modeltype storydriven uses 'http://www.storydriven.org/core/0.3.1';
modeltype schemata uses muml::realtimestatechart::one_to_n_schemata('http://www.fujaba.de/muml/0.4.0');
modeltype types uses muml::types('http://www.fujaba.de/muml/0.4.0');

----------------------------------------------------------XXXXXXXXXXXXXXXXX--MULTICAST--XXXXXXXXXXXXXXXXX-------------------------------------------------------------------------	
property multicastCheckDone : String = "multicastCheckDone";
property multicast : String = "multicast";
property multicastDone : String = "multicastDone";
property multicastCheck : String = "multicastCheck";
property multicastPossibleName : String = "multicastPossible";
property sendMulticastName : String = "sendMulticast";

----------------------------------------------------------------Transfer Schema Multicast of Coordinator------------------------------------------------------------------

// @author: sthiele2
mapping Transition :: Multicast2CoordinatorStartTransition(context:OclAny, region:RealtimeStatechart) : Transition {
	// this mapping creates an outgoing transition from the (mapped) source of the schema transition to a first intermediate state
	source := self.source.map Vertex2VertexCoordinator(context);
	target := self.map Schema2CoordinatorIntermediateState(context,1,multicastDLCName);
	priority := self.priority;
	guard := self.guard.map Expression2Expression(result);		
	clockConstraints := self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock)).map ClockConstraint2ClockConstraint(result);
	
	synchronization := self. createSynchronization(  multicastCheckDone,SynchronizationKind::RECEIVE);
}

// @author: sthiele2
mapping Transition :: Multicast2CoordinatorIntermediateTransition(context:OclAny, region:RealtimeStatechart): Transition
{
	// creates the transition from intermediate state 1 to intermediate state 2
	source := self.map Schema2CoordinatorIntermediateState(context,1,multicastDLCName);
	target := self.map Schema2CoordinatorIntermediateState(context,2,multicastDLCName);	
	priority := 1;
	if(not self.relativeDeadline.oclIsUndefined())
	{
		result.clockConstraints += self. RelativeDeadline2ClockConstraint( true, ComparingOperator::GREATER_OR_EQUAL, multicastDLCName );
	};
	
	synchronization := self. createSynchronization( multicast,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
}

// @author: sthiele2
mapping Transition :: Multicast2CoordinatorEndTransition(context:OclAny, region:RealtimeStatechart): Transition
{
	// creates a transition from intermediate state 2 to the (mapped) target of the schema transition 
	source := self.map Schema2CoordinatorIntermediateState(context, 2, multicastDLCName);
	target := self.target.map Vertex2VertexCoordinator(context);
	priority := 1;
	result.clockResets :=  self.clockResets->select(c| not isClockSubRoleSpecific(c)).map Clock2Clock();
	result.action := self.action.cloneAction();
	
	synchronization := self. createSynchronization(multicastDone,SynchronizationKind::RECEIVE);
}

	
------------- non Conditional Coordinator Mappings	
mapping Transition :: NonConditionalMulticast2TranssitionFromSourceToIntermediate(context:OclAny, region:RealtimeStatechart) : Transition {

		priority := self.priority;
						
		source := self.source.map Vertex2VertexCoordinator(context);
		
		target := self.map Schema2CoordinatorIntermediateState(context,1, multicastDLCName);
		
		synchronization := self. createSynchronization(  multicast,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
		
		clockConstraints := self.clockConstraints.map ClockConstraint2ClockConstraint(result);
		
		guard := self.guard.map Expression2Expression(result);
}

mapping Transition :: NonConditionalMulticast2TransitionFromIntermediateToTarget(context:OclAny, region:RealtimeStatechart) : Transition{
	
		priority := 1;
		
		source := self.map Schema2CoordinatorIntermediateState(context, 1,multicastDLCName);
	
		target := self.target.map Vertex2VertexCoordinator(context);
		
		action := self.action.cloneAction();
		
		clockResets += self.clockResets->select(c|not isClockSubRoleSpecific(c)).map Clock2Clock();
	
		synchronization := self. createSynchronization(  multicastDone,SynchronizationKind::RECEIVE);	
}

---------------- Coordinator Mappings for Embedded State

mapping Transition :: Multicast2SourceRegionCoordinator(context:OclAny) : Region {
		
		priority := self.priority;
		
		parentState := self.source.map Vertex2VertexCoordinator(context ).oclAsType(State);
		
		embeddedStatechart := self.map Multicast2SourceEmbeddedRTSCCoordinator(context);
					
	}
	
mapping Transition :: Multicast2SourceEmbeddedRTSCCoordinator(context:OclAny) : RealtimeStatechart {
		
		name:= "multicastCheck" + "_" + self.source.name + "_" + self.target.name + "_" + self.priority.toString();
		
		states += self.map RegionState(context,  "Idle", true);
		states += self.map RegionState(context,  "Requesting", false);
		
		transitions += self.map Multicast2TransCheckEmbeddedCoordinator(context);
		transitions += self.map Multicast2TransCheckDoneEmbeddedCoordinator(context);
					
	}
	
mapping Transition :: Multicast2TransCheckEmbeddedCoordinator(context:OclAny) : Transition {

		priority := 1;
		
		source := self.map RegionState(context, "Idle", true);
		
		target := self.map RegionState(context,  "Requesting", false);
		
		clockConstraints := self.clockConstraints->select(c|not isClockSubRoleSpecific(c.clock))->map ClockConstraint2ClockConstraint(result);
		
		guard := self.guard.map Expression2Expression(context);
		
		synchronization := 	self. createSynchronization( multicastCheck,SynchronizationKind::SEND, PositionSelectorKind::FIRST);
			
	}
	
mapping Transition :: Multicast2TransCheckDoneEmbeddedCoordinator(context:OclAny) : Transition {

		priority := 1;
		
		target := self.map RegionState(context,  "Idle", true);
		
		source := self.map RegionState(context,  "Requesting", false);
		
	
		
		synchronization :=  self. createSynchronization( multicastCheckDone,SynchronizationKind::RECEIVE);
		
		guard := self. createUnaryExpressionEnclosingTypedNamedElementExpression( multicastPossibleName, UnaryOperator::NOT);
			
	}
	
	

	

	
----------------------------------------------------------------- Transfer Schema Multicast of Subrole-------------------------------------------------------------------

// first mapping from 	
mapping Transition :: Multicast2TransSendSyncSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
		priority := 1;
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context,1);
		
		synchronization := self.createSynchronization( multicast,SynchronizationKind::RECEIVE  ,PositionSelectorKind::SELF);
		
		clockResets += self.clockResets->select(c|isClockSubRoleSpecific(c)).map Clock2Clock();
		
		action := self.raiseMessageEvent.oneToManyCommunicationSchema.action.cloneAction();
		
		events += self.raiseMessageEvent.cloneAsynchronousMessageEvent();
		
		if(not self.raiseMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())
			guard := self.createTypedNamedElementExpression(self.map Schema2BooleanVariable(sendMulticastName));
		
	}
	
	
mapping Transition :: Multicast2TransSendSyncNotConditionSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
		
		source := self.map Transition2StateSubrole(region,self.source, true);
		
		target := self.map Schema2SubroleIntermediateState(context,1);
		
		synchronization := self.createSynchronization(multicast,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
		
		if(not self.raiseMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())					
			guard := self.createUnaryExpressionEnclosingTypedNamedElementExpression(sendMulticastName, UnaryOperator::NOT);
		
		priority := 2;
		
	}
	
	
mapping Transition :: Multicast2TransReceiveSyncNotLastSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 2;
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		source := self.map Schema2SubroleIntermediateState(context,1);	
		
		synchronization := self. createSynchronization( multicast,SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
		
		guard := self.  createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
					
	}
			
mapping Transition :: Multicast2TransReceiveSyncLastSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 1;
		
		target := self.map Transition2StateSubrole(region,self.target, false);
		
		source := self.map Schema2SubroleIntermediateState(context,1);		
		
		guard := self.  createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::EQUAL);
		
		if((not self.raiseMessageEvent.oclIsUndefined()) and (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsUndefined()) 
				and self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(muml::realtimestatechart::one_to_n_schemata::Multicast) 
				and (not self.raiseMessageEvent.oneToManyCommunicationSchema.condition.oclIsUndefined())){
				
			action := self. createActionWithVariableAssignmentBlock("multicastPossible:=false", multicastPossibleName, "false");
			
		}endif;
		synchronization := self. createSynchronization( multicastDone,SynchronizationKind::SEND);			
	}
	

	
mapping Transition :: Multicast2SourceRegionSubrole(context:OclAny, region:RealtimeStatechart) : Region {
		
		priority := self.priority;
		
		parentState := self.map Transition2StateSubrole(region,self.source, true).oclAsType(State);
		
		embeddedStatechart := self.map Multicast2SourceEmbeddedRTSCSubrole(context, region);
					
	}
	
mapping Transition :: Multicast2SourceEmbeddedRTSCSubrole(context:OclAny, region:RealtimeStatechart) : RealtimeStatechart {
		
		name:= "multicastCheck" + "_" + self.source.name + "_" + self.target.name + "_" + self.priority.toString();
		
		states += self.map RegionState(context,  "Idle", true);
		states += self.map RegionState(context,  "Requested", false);
		
		transitions += self.map Multicast2RequestedIdleCheckSubrole(context, region);
		transitions += self.map Multicast2RequestedIdleCheckDoneSubrole(context, region);
		transitions += self.map Multicast2IdleRequestedFulfilledSubrole(context, region);
		transitions += self.map Multicast2IdleRequestedNotFulfilledSubrole(context, region);
					
	}
	
mapping Transition :: Multicast2RequestedIdleCheckSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 2;
				
		source := self.map RegionState(context,  "Requested", false);
		
		target := self.map RegionState(context,  "Idle", true);
		
		guard := self.  createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::UNEQUAL);
		
		synchronization := self.createSynchronization( "multicastCheck", SynchronizationKind::SEND, PositionSelectorKind::SELF, PositionSelectorKind::NEXT);
					
	}
	
mapping Transition :: Multicast2RequestedIdleCheckDoneSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 1;
				
		source := self.map RegionState(context,  "Requested", false);
		
		target := self.map RegionState(context,  "Idle", true);
		
		guard := self. createComparisonExpressionForSelectorKind(PositionSelectorKind::LAST, ComparingOperator::EQUAL);
		
		synchronization := self.createSynchronization(multicastCheckDone,SynchronizationKind::SEND);
					
	}
	
mapping Transition :: Multicast2IdleRequestedFulfilledSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 2;
				
		target := self.map RegionState(context,  "Requested", false);
		
		source := self.map RegionState(context,  "Idle", true);
		
		guard := self.raiseMessageEvent.oneToManyCommunicationSchema.condition.map Expression2Expression(2);
		
		synchronization := 	self.createSynchronization(multicastCheck,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
		
		action := self.createActionWithTwoVariableAssignments(multicastPossibleName + " :=true; " + sendMulticastName + ":= true;",multicastPossibleName, sendMulticastName,"true");
		
	}
	
mapping Transition :: Multicast2IdleRequestedNotFulfilledSubrole(context:OclAny, region:RealtimeStatechart) : Transition {
	
		priority := 1;
				
		target := self.map RegionState(context,  "Requested", false);
		
		source := self.map RegionState(context,  "Idle", true);
		
		guard := self. TransferSchemaNotCondition();

		synchronization := self.createSynchronization(multicastCheck,SynchronizationKind::RECEIVE, PositionSelectorKind::SELF);
					
	}
	

	