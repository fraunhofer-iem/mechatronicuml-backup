<?xml version="1.0" encoding="UTF-8"?>
<gmfmap:Mapping
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:gmfmap="http://www.eclipse.org/gmf/2008/mappings"
    xmlns:gmftool="http://www.eclipse.org/gmf/2005/ToolDefinition">
  <nodes>
    <ownedChild>
      <domainMetaElement
          href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart"/>
      <labelMappings
          xsi:type="gmfmap:FeatureLabelMapping">
        <diagramLabel
            href="realtimestatechart.gmfgraph#StatechartNameLabel"/>
        <features
            href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
      </labelMappings>
      <labelMappings
          xsi:type="gmfmap:ExpressionLabelMapping"
          readOnly="true">
        <diagramLabel
            href="realtimestatechart.gmfgraph#StatechartVariablesLabel"/>
        <viewExpression
            body="self->collect(&#xD;&#xA;(&#xD;&#xA;&#xD;&#xA;-- Attributes&#xD;&#xA;&#xD;&#xA;&#x9;if variables->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'variable: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;variables->iterate(attribute; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.dataType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.dataType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(&#xD;&#xA;&#xD;&#xA;-- Operations&#xD;&#xA;&#xD;&#xA;&#x9;if operations->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'operation: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;operations->iterate(operation; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.returnType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.returnType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;).concat('(').concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;-- parameters&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;operation.parameters->iterate(parameter; result2 : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(if result2 = '' then '' else result2.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if parameter.dataType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameter.dataType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if parameter.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameter.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;).concat(')')&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(&#xD;&#xA;&#xD;&#xA;-- Clocks&#xD;&#xA;&#xD;&#xA;&#x9;if clocks->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'clock: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;clocks->iterate(clock; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clock.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clock.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;)&#xD;&#xA;)->any(true)"/>
      </labelMappings>
      <diagramNode
          href="realtimestatechart.gmfgraph#Statechart"/>
      <children
          compartment="//@nodes.0/@ownedChild/@compartments.0">
        <containmentFeature
            href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart/states"/>
        <ownedChild>
          <domainMetaElement
              href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State"/>
          <labelMappings
              xsi:type="gmfmap:FeatureLabelMapping">
            <diagramLabel
                href="realtimestatechart.gmfgraph#StateNameLabel"/>
            <features
                href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
          </labelMappings>
          <tool
              xsi:type="gmftool:CreationTool"
              href="realtimestatechart.gmftool#//@palette/@tools.0/@tools.0"/>
          <diagramNode
              href="realtimestatechart.gmfgraph#State"/>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/entryEvent"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/EntryEvent"/>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#StateItemLabel"/>
                <viewExpression
                    body="'entry /'.concat(&#xA;&#x9;(&#xA;&#x9;if self.action.oclIsUndefined() or self.action.name = '' then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;' {'.concat(self.action.name).concat('}')&#xA;&#x9;endif&#xA;&#x9;).concat(&#xA;&#x9;&#x9;if self.clockResets->isEmpty() then&#xA;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' {reset: '.concat(self.clockResets->iterate(c : Clock; s : String = '' | if s = '' then s.concat(c.name) else s.concat(', ').concat(c.name) endif)).concat('}')&#xA;&#x9;&#x9;endif&#xA;&#x9;)&#xA;)"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.0"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#StateItem"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/doEvent"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/DoEvent"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/DoEvent/action"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
                      <value
                          body="'action'"/>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#StateItemLabel"/>
                <viewExpression
                    body="'do / '.concat(&#xD;&#xA;&#x9;if self.action.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'{'.concat(self.action.name).concat('}')&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(' [').concat(&#xD;&#xA;&#x9;if self.period.oclIsUndefined() then 'n.a.' else self.period.toString() endif&#xD;&#xA;).concat(']')"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.1"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#StateItem"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.0">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/exitEvent"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/ExitEvent"/>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#StateItemLabel"/>
                <viewExpression
                    body="'exit /'.concat(&#xA;&#x9;(&#xA;&#x9;if self.action.oclIsUndefined() or self.action.name = '' then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;' {'.concat(self.action.name).concat('}')&#xA;&#x9;endif&#xA;&#x9;).concat(&#xA;&#x9;&#x9;if self.clockResets->isEmpty() then&#xA;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;' {reset: '.concat(self.clockResets->iterate(c : Clock; s : String = '' | if s = '' then s.concat(c.name) else s.concat(', ').concat(c.name) endif)).concat('}')&#xA;&#x9;&#x9;endif&#xA;&#x9;)&#xA;)"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.2"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#StateItem"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.3">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/invariants"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/ClockConstraint"/>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#StateItemLabel"/>
                <viewExpression
                    body="(&#xD;&#xA;if self.oclAsType(ecore::EObject).eContainer().oclAsType(State).invariants->first() = self then&#xD;&#xA;&#x9;'invariant: '&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif&#xD;&#xA;).concat(&#xD;&#xA;&#xD;&#xA;-- BEGIN: The actual name of the Invariant&#xD;&#xA;&#xD;&#xA;&#x9;if self.clock.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;'null'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;self.clock.name&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(' ').concat(&#xD;&#xA;&#x9;if self.operator.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;'null'&#xD;&#xA;&#x9;else&#xD;&#xA;if operator = core::expressions::common::ComparingOperator::LESS then '&lt;'&#xD;&#xA;&#x9;else if operator = core::expressions::common::ComparingOperator::LESS_OR_EQUAL then '≤' &#xD;&#xA;&#x9;&#x9;else if operator = core::expressions::common::ComparingOperator::EQUAL then '='&#xD;&#xA;&#x9;&#x9;&#x9;else if operator = core::expressions::common::ComparingOperator::GREATER_OR_EQUAL then '≥'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else if operator = core::expressions::common::ComparingOperator::GREATER then '>'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if operator = core::expressions::common::ComparingOperator::UNEQUAL then '≠'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if operator = core::expressions::common::ComparingOperator::REGULAR_EXPRESSION then 'regexp' &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else ''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;endif &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;endif&#xD;&#xA;&#x9;endif&#xD;&#xA;&#x9;&#x9;--let array : Set(Tuple(s : String, d : core::expressions::common::ComparingOperator)) = Set{&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '&lt;', d = core::expressions::common::ComparingOperator::LESS },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '≤', d = core::expressions::common::ComparingOperator::LESS_OR_EQUAL },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '=', d = core::expressions::common::ComparingOperator::EQUAL },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '≥', d = core::expressions::common::ComparingOperator::GREATER_OR_EQUAL },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '>', d = core::expressions::common::ComparingOperator::GREATER },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = '≠', d = core::expressions::common::ComparingOperator::UNEQUAL },&#xD;&#xA;&#x9;&#x9;--&#x9;Tuple{s = 'regexp', d = core::expressions::common::ComparingOperator::REGULAR_EXPRESSION }&#xD;&#xA;&#x9;&#x9;--} in array->any(t | t.d = self.operator).s&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(' ').concat(&#xD;&#xA;&#x9;if self.bound.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;'null'&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'{boundExpression}'.concat(&#xA;&#x9;&#x9;&#x9;-- the following will evaluate to an empty string and is only added so that the OCL impact analyzer recognizes&#xA;&#x9;&#x9;&#x9;-- a dependency to these attributes and updates the label in case they change.&#xA;&#x9;&#x9;&#x9;(if self.bound.unit.oclIsUndefined() then '' else '' endif).concat&#xA;&#x9;&#x9;&#x9;(if self.bound.value.oclIsUndefined() then '' else '' endif).concat&#xA;&#x9;&#x9;&#x9;(if self.bound.value.oclIsUndefined() then '' else '' endif)&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;endif&#xD;&#xA;&#xD;&#xA;-- END: The actual name of the invariant&#xD;&#xA;&#xD;&#xA;).concat(&#xD;&#xA;if self.oclAsType(ecore::EObject).eContainer().oclAsType(State).invariants->last() = self then&#xD;&#xA;&#x9;';'&#xD;&#xA;else&#xD;&#xA;&#x9;','&#xD;&#xA;endif&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;"/>
              </labelMappings>
              <diagramNode
                  href="realtimestatechart.gmfgraph#StateItem"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.2">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/channels"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/SynchronizationChannel"/>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#StateItemLabel"/>
                <viewExpression
                    body="(&#xD;&#xA;if self.state.channels->first() = self then&#xD;&#xA;&#x9;'channel: '&#xD;&#xA;else&#xD;&#xA;&#x9;''&#xD;&#xA;endif&#xD;&#xA;&#xD;&#xA;).concat(&#xD;&#xA;&#x9;if self.name.oclIsUndefined() then 'null' else self.name endif&#xD;&#xA;).concat(&#xD;&#xA;&#x9;if self.selectorType.name.oclIsUndefined() then '' else '['.concat(self.selectorType.name).concat(']') endif&#xD;&#xA;).concat(&#xD;&#xA;if self.state.channels->last() = self then&#xD;&#xA;&#x9;';'&#xD;&#xA;else&#xD;&#xA;&#x9;','&#xD;&#xA;endif&#xD;&#xA;)"/>
              </labelMappings>
              <diagramNode
                  href="realtimestatechart.gmfgraph#StateItem"/>
            </ownedChild>
          </children>
          <children
              compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@compartments.1"
              referencedChild="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5/@ownedChild">
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/embeddedRegions"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Region"/>
              <domainInitializer
                  xsi:type="gmfmap:FeatureSeqInitializer">
                <initializers
                    xsi:type="gmfmap:FeatureValueSpec">
                  <feature
                      xsi:type="ecore:EAttribute"
                      href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/PrioritizedElement/priority"/>
                  <value
                      body="self.parentState.embeddedRegions.priority->max() + 1"/>
                </initializers>
                <initializers
                    xsi:type="gmfmap:ReferenceNewElementSpec">
                  <feature
                      xsi:type="ecore:EReference"
                      href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Region/embeddedStatechart"/>
                  <newElementInitializers>
                    <initializers
                        xsi:type="gmfmap:FeatureValueSpec">
                      <feature
                          xsi:type="ecore:EAttribute"
                          href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
                      <value
                          body="'statechart'"/>
                    </initializers>
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart/states"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
                          <value
                              body="'init'"/>
                        </initializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/initial"/>
                          <value
                              body="true"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                  </newElementInitializers>
                </initializers>
              </domainInitializer>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#RegionNameLabel"/>
                <viewExpression
                    body="name"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:FeatureLabelMapping"
                  viewPattern="">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#RegionPriorityLabel"/>
                <features
                    href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/PrioritizedElement/priority"/>
              </labelMappings>
              <labelMappings
                  xsi:type="gmfmap:ExpressionLabelMapping"
                  readOnly="true">
                <diagramLabel
                    href="realtimestatechart.gmfgraph#RegionVariablesLabel"/>
                <viewExpression
                    body="embeddedStatechart->collect(&#xD;&#xA;(&#xD;&#xA;&#xD;&#xA;-- Attributes&#xD;&#xA;&#xD;&#xA;&#x9;if variables->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'variable: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;variables->iterate(attribute; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.dataType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.dataType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if attribute.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(&#xD;&#xA;&#xD;&#xA;-- Operations&#xD;&#xA;&#xD;&#xA;&#x9;if operations->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'operation: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;operations->iterate(operation; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.returnType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.returnType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if operation.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;operation.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;).concat('(').concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;-- parameters&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;operation.parameters->iterate(parameter; result2 : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(if result2 = '' then '' else result2.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if parameter.dataType.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameter.dataType.name.concat(' ')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if parameter.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameter.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;).concat(')')&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;).concat(&#xD;&#xA;&#xD;&#xA;-- Clocks&#xD;&#xA;&#xD;&#xA;&#x9;if clocks->isEmpty() then&#xD;&#xA;&#x9;&#x9;''&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;'clocks: '.concat(&#xD;&#xA;&#x9;&#x9;&#x9;clocks->iterate(clock; result : String = '' |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clock.name.oclIsUndefined() then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clock.name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;).concat('; ')&#xD;&#xA;&#x9;endif&#xD;&#xA;)&#xD;&#xA;)->any(true)"/>
              </labelMappings>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.3"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#Region"/>
              <children
                  compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5/@ownedChild/@compartments.0">
                <containmentFeature
                    href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Region/embeddedStatechart"/>
                <ownedChild>
                  <domainMetaElement
                      href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart"/>
                  <domainInitializer
                      xsi:type="gmfmap:FeatureSeqInitializer">
                    <initializers
                        xsi:type="gmfmap:ReferenceNewElementSpec">
                      <feature
                          xsi:type="ecore:EReference"
                          href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart/states"/>
                      <newElementInitializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../org.storydriven.core/model/core.ecore#//NamedElement/name"/>
                          <value
                              body="'init'"/>
                        </initializers>
                        <initializers
                            xsi:type="gmfmap:FeatureValueSpec">
                          <feature
                              xsi:type="ecore:EAttribute"
                              href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/initial"/>
                          <value
                              body="true"/>
                        </initializers>
                      </newElementInitializers>
                    </initializers>
                  </domainInitializer>
                  <diagramNode
                      href="realtimestatechart.gmfgraph#InnerStatechart"/>
                  <children
                      compartment="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5/@ownedChild/@children.0/@ownedChild/@compartments.0"
                      referencedChild="//@nodes.0/@ownedChild/@children.0/@ownedChild">
                    <containmentFeature
                        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart/states"/>
                  </children>
                  <compartments
                      children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5/@ownedChild/@children.0/@ownedChild/@children.0">
                    <compartment
                        href="realtimestatechart.gmfgraph#StatechartContentsCompartment"/>
                  </compartments>
                </ownedChild>
              </children>
              <compartments
                  children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5/@ownedChild/@children.0">
                <compartment
                    href="realtimestatechart.gmfgraph#RegionContentsCompartment"/>
              </compartments>
            </ownedChild>
          </children>
          <children>
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/connectionPoints"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/EntryPoint"/>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.4"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#EntryPoint"/>
            </ownedChild>
          </children>
          <children>
            <containmentFeature
                href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/State/connectionPoints"/>
            <ownedChild>
              <domainMetaElement
                  href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/ExitPoint"/>
              <tool
                  xsi:type="gmftool:CreationTool"
                  href="realtimestatechart.gmftool#//@palette/@tools.1/@tools.5"/>
              <diagramNode
                  href="realtimestatechart.gmfgraph#ExitPoint"/>
            </ownedChild>
          </children>
          <compartments
              children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.0 //@nodes.0/@ownedChild/@children.0/@ownedChild/@children.1 //@nodes.0/@ownedChild/@children.0/@ownedChild/@children.2">
            <compartment
                href="realtimestatechart.gmfgraph#ActionCompartment"/>
          </compartments>
          <compartments
              children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.5">
            <compartment
                href="realtimestatechart.gmfgraph#RegionCompartment"/>
          </compartments>
          <compartments
              children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.4">
            <compartment
                href="realtimestatechart.gmfgraph#ChannelCompartment"/>
          </compartments>
          <compartments
              children="//@nodes.0/@ownedChild/@children.0/@ownedChild/@children.3">
            <compartment
                href="realtimestatechart.gmfgraph#InvariantCompartment"/>
          </compartments>
        </ownedChild>
      </children>
      <compartments
          children="//@nodes.0/@ownedChild/@children.0">
        <compartment
            href="realtimestatechart.gmfgraph#StatechartContentsCompartment"/>
      </compartments>
    </ownedChild>
  </nodes>
  <links>
    <domainMetaElement
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Transition"/>
    <domainInitializer
        xsi:type="gmfmap:FeatureSeqInitializer">
      <initializers
          xsi:type="gmfmap:FeatureValueSpec">
        <feature
            xsi:type="ecore:EAttribute"
            href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/PrioritizedElement/priority"/>
        <value
            body="self.source.getUniqueTransitionPriority(0)"/>
      </initializers>
    </domainInitializer>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimestatechart.gmfgraph#TransitionLabel"/>
      <viewExpression
          body="(&#xA;-- Clock Constraints&#xA;&#xA;&#x9;if self.clockConstraints->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;self.clockConstraints->iterate(clockConstraint; result : String = '' | (&#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.clock.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.clock.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.operator.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;if clockConstraint.operator = core::expressions::common::ComparingOperator::LESS then '&lt;'&#xA;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::LESS_OR_EQUAL then '≤' &#xA;&#x9;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::EQUAL then '='&#xA;&#x9;&#x9;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::GREATER_OR_EQUAL then '≥'&#xA;&#x9;&#x9;&#x9;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::GREATER then '>'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::UNEQUAL then '≠'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if clockConstraint.operator = core::expressions::common::ComparingOperator::REGULAR_EXPRESSION then 'regexp' &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;&#x9;endif &#xA;&#x9;&#x9;&#x9;&#x9;&#x9; &#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;let array : Set(Tuple(s : String, d : core::expressions::common::ComparingOperator)) = Set{&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '&lt;', d = core::expressions::common::ComparingOperator::LESS },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '=', d = core::expressions::common::ComparingOperator::LESS_OR_EQUAL },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '=', d = core::expressions::common::ComparingOperator::EQUAL },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '=', d = core::expressions::common::ComparingOperator::GREATER_OR_EQUAL },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '>', d = core::expressions::common::ComparingOperator::GREATER },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = '?', d = core::expressions::common::ComparingOperator::UNEQUAL },&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Tuple{s = 'regexp', d = core::expressions::common::ComparingOperator::REGULAR_EXPRESSION }&#xA;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} in array->any(t | t.d = clockConstraint.operator).s&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(' ').concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if clockConstraint.bound.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockConstraint.bound.toString()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;))&#xA;&#x9;&#x9;).concat('] ')&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;&#x9;-- Guard&#xA;&#xA;&#x9;-- Note: We use the XText Parser to build a String for the Guard Model-Element.&#xA;&#x9;-- For this purpose, the text &quot;{guardExpression}&quot; will be replaced in the custom parser within the &quot;realtimestatechart.diagram.custom&quot; project.&#xA;&#xA;&#x9;-- this is a placeholder which is replaced after ocl parsing&#xA;&#x9;'{guardExpression}'&#xA;&#xA;&#xA;).concat(&#xA;&#xA;-- Trigger Event&#xA;&#xA;&#x9;if self.triggerMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;if self.triggerMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;'null '&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;if self.triggerMessageEvent.oneToManyCommunicationSchema->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.instanceOf.name.concat(' ')&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.triggerMessageEvent.message.instanceOf.name.concat('->').concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if self.triggerMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::SingleReceive) then 'singleReceive('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if self.triggerMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::MultiReceive) then 'multiReceive('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else  'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.triggerMessageEvent.oneToManyCommunicationSchema.condition->isEmpty()) then 'if: '.concat('{receivingTransSchemaCondition}').concat('; ') &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.triggerMessageEvent.oneToManyCommunicationSchema.action->isEmpty()) then 'do: '.concat(if not self.triggerMessageEvent.oneToManyCommunicationSchema.action.name.oclIsUndefined() then self.triggerMessageEvent.oneToManyCommunicationSchema.action.name else 'null' endif).concat('; ') &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else ''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(self.triggerMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::MultiReceive) and not self.triggerMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::MultiReceive).failureAction->isEmpty()) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'failureAction: '.concat(if not self.triggerMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::MultiReceive).failureAction.name.oclIsUndefined() then self.triggerMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::MultiReceive).failureAction.name.toString() else 'null' endif)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(') ')&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;endif&#xA;&#x9;endif&#xA;).concat(&#xA;&#xA;-- Synchronizations&#xA;&#xA;&#x9;if self.synchronization.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;if self.synchronization.syncChannel.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.synchronization.syncChannel.name&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;-- this is a placeholder which is replaced after ocl parsing&#xA;&#x9;&#x9;&#x9;'{synchronizationExpression}'&#xA;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;if self.synchronization.kind = SynchronizationKind::SEND then&#xA;&#x9;&#x9;&#x9;&#x9;'!'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;'?'&#xA;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;)&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Slash (only shown, if one of the next parts is not null&#xA;&#xA;&#x9;if self.action.oclIsUndefined() and self.raiseMessageEvent.oclIsUndefined() and self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;' / '&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Action&#xA;&#xA;&#x9;if self.action.name.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'{ '.concat(&#xA;&#x9;&#x9;&#x9;self.action.name&#xA;&#x9;&#x9;).concat(' } ')&#xA;&#x9;endif&#xA;&#xA;&#xA;).concat(&#xA;&#xA;&#xA;-- Raise Event&#xA;&#xA;&#x9;if self.raiseMessageEvent.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#x9;&#x9;&#xA;&#x9;&#x9;''.concat(&#xA;&#x9;&#x9;if self.raiseMessageEvent.message.instanceOf.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;self.raiseMessageEvent.message.instanceOf.name&#xA;&#x9;&#x9;endif&#x9;&#xA;&#x9;&#x9;).concat(&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if self.raiseMessageEvent.oneToManyCommunicationSchema->isEmpty() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- this is a placeholder which is replaced after ocl parsing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'({raiseMessageEventParameterBinding})'&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;-- this is a placeholder which is replaced after ocl parsing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'({raiseMessageEventParameterBinding})'.concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::Multicast) then '->multicast('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::Unicast) then '->unicast('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::Iterate) then '->iterate('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::LoadBalancing) then '->loadBalancing('&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else 'null '&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.condition->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'if: {sendingTransSchemaCondition}; '&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif.concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.action->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'do: '.concat(if not self.triggerMessageEvent.oneToManyCommunicationSchema.action.name.oclIsUndefined() then self.triggerMessageEvent.oneToManyCommunicationSchema.action.name else 'null' endif).concat('; ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(--ITERATE&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::Iterate) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::Iterate).terminationCondition->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'until: '.concat('{transSchemaTermCondition}; ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::Iterate).delay->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'delay: '.concat(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::Iterate).delay.toString()).concat('; ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::Iterate).startFromFirst) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'start from: first; '&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'start from: last; '&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else--LOADBALANCING&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if self.raiseMessageEvent.oneToManyCommunicationSchema.oclIsTypeOf(one_to_n_schemata::LoadBalancing) then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::LoadBalancing).maxWorkingTime->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'maxWT: '.concat(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::LoadBalancing).maxWorkingTime.toString()).concat('; ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (not self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::LoadBalancing).responseMessage->isEmpty()) then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'responseMsg: '.concat(self.raiseMessageEvent.oneToManyCommunicationSchema.oclAsType(one_to_n_schemata::LoadBalancing).responseMessage.name).concat('; ')&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;''&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)).concat(')')&#xA;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#x9;&#xA;&#x9;endif&#xA;)&#xA;.concat(&#xA;&#xA;-- Clock Resets&#xA;&#xA;&#x9;if self.clockResets->isEmpty() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'{reset: '.concat(&#xA;&#x9;&#x9;&#x9;self.clockResets->iterate(clockReset; result : String = '' | &#xA;&#x9;&#x9;&#x9;&#x9;(if result = '' then '' else result.concat(', ') endif).concat(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if clockReset.name.oclIsUndefined() then&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'null'&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;clockReset.name&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;endif&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;).concat('}')&#xA;&#x9;endif&#xA;&#xA;)"/>
    </labelMappings>
    <labelMappings
        xsi:type="gmfmap:ExpressionLabelMapping"
        readOnly="true">
      <diagramLabel
          href="realtimestatechart.gmfgraph#TransitionDeadlineLabel"/>
      <viewExpression
          body="(&#xA;&#xA;-- Relative Deadline&#xA;&#xA;&#x9;if self.relativeDeadline.oclIsUndefined() then&#xA;&#x9;&#x9;''&#xA;&#x9;else&#xA;&#x9;&#x9;'['.concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.lowerBound.value.oclIsUndefined() or self.relativeDeadline.lowerBound.unit.oclIsUndefined() then 'null' else '{relativeLowerBoundExpression}' endif&#xA;&#x9;&#x9;).concat(';').concat(&#xA;&#x9;&#x9;&#x9;if self.relativeDeadline.upperBound.value.oclIsUndefined() or self.relativeDeadline.upperBound.unit.oclIsUndefined() then 'null' else '{relativeUpperBoundExpression}' endif&#xA;&#x9;&#x9;).concat(']').concat(if not absoluteDeadlines->isEmpty() then '\n' else '' endif)&#xA;&#x9;endif&#xA;&#xA;).concat(&#xA;&#xA;-- Absolute Deadlines&#xA;--&#x9;self.absoluteDeadlines->iterate(absoluteDeadline; result : String = '' |&#xA;--&#x9;&#x9;(if result = '\n' then '' else result.concat('\n') endif).concat(&#xA;--&#x9;&#x9;&#x9;if absoluteDeadline.clock.name.oclIsUndefined() then&#xA;--&#x9;&#x9;&#x9;&#x9;''&#xA;--&#x9;&#x9;&#x9;else&#xA;--&#x9;&#x9;&#x9;&#x9;absoluteDeadline.clock.name&#xA;--&#x9;&#x9;&#x9;endif&#xA;--&#x9;&#x9;).concat(' ∈ [').concat(&#xA;--&#x9;&#x9;&#x9;if absoluteDeadline.lowerBound.oclIsUndefined() then&#xA;--&#x9;&#x9;&#x9;&#x9;'null'&#xA;--&#x9;&#x9;&#x9;else&#xA;--&#x9;&#x9;&#x9;&#x9;absoluteDeadline.lowerBound.toString()&#xA;--&#x9;&#x9;&#x9;endif&#xA;--&#x9;&#x9;).concat(';').concat(&#xA;--&#x9;&#x9;&#x9;if absoluteDeadline.upperBound.oclIsUndefined() then &#xA;--&#x9;&#x9;&#x9;&#x9;'null'&#xA;--&#x9;&#x9;&#x9;else&#xA;--&#x9;&#x9;&#x9;&#x9;absoluteDeadline.upperBound.toString()&#xA;--&#x9;&#x9;&#x9;endif&#xA;--&#x9;&#x9;).concat(']')&#xA;--&#x9;)&#xA;&#xA;&#x9;-- list features that we need to listen to (Impact Analyzer)&#xA;&#x9;(if self.absoluteDeadlines->isEmpty() then '' else '' endif).concat&#xA;&#x9;(if self.absoluteDeadlines->select(clock.name.toString().oclIsUndefined())->isEmpty() then '' else '' endif).concat&#xA;&#x9;(if self.absoluteDeadlines->select(lowerBound.value.oclIsUndefined())->isEmpty() then '' else '' endif).concat&#xA;&#x9;(if self.absoluteDeadlines->select(lowerBound.unit.oclIsUndefined())->isEmpty() then '' else '' endif).concat&#xA;&#x9;(if self.absoluteDeadlines->select(upperBound.value.oclIsUndefined())->isEmpty() then '' else '' endif).concat&#xA;&#x9;(if self.absoluteDeadlines->select(upperBound.unit.oclIsUndefined())->isEmpty() then '' else '' endif).concat&#xA;&#x9;('{absoluteDeadlinesExpression}')&#xA;)"/>
    </labelMappings>
    <containmentFeature
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart/transitions"/>
    <tool
        xsi:type="gmftool:CreationTool"
        href="realtimestatechart.gmftool#//@palette/@tools.0/@tools.1"/>
    <diagramLink
        href="realtimestatechart.gmfgraph#Transition"/>
    <sourceMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Transition/source"/>
    <linkMetaFeature
        xsi:type="ecore:EReference"
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/Transition/target"/>
    <creationConstraints>
      <sourceEnd
          body="-- Deactivated because StateEntryPoint has been deleted and logic changed.&#xA;&#xA;-- not (self.oclIsKindOf(EntryPoint) and (not oppositeEnd.oclIsKindOf(State))) and&#xA;-- not (self.oclIsKindOf(ExitPoint) and (not oppositeEnd.oclIsKindOf(State)))&#xA;true"/>
    </creationConstraints>
  </links>
  <diagram>
    <diagramCanvas
        href="realtimestatechart.gmfgraph#statechart"/>
    <domainModel
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart"/>
    <domainMetaElement
        href="../../de.uni_paderborn.fujaba.muml/model/muml.ecore#//realtimestatechart/RealtimeStatechart"/>
    <palette
        href="realtimestatechart.gmftool#//@palette"/>
  </diagram>
</gmfmap:Mapping>
