library SchemaSpecificMUML2MUML;
import org.muml.ImplicitCopy;

modeltype ecore uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype rtsc uses pim::realtimestatechart('http://www.muml.org/pim/1.0.0');
modeltype common uses core::expressions::common('http://www.muml.org/core/1.0.0');
modeltype expressions uses core::expressions('http://www.muml.org/core/1.0.0');
modeltype behavior uses pim::behavior('http://www.muml.org/pim/1.0.0');
modeltype actionLanguage uses 'http://www.muml.org/pim/actionlanguage/1.0.0';
modeltype valuetype uses pim::valuetype('http://www.muml.org/pim/1.0.0');
modeltype protocol uses pim::protocol('http://www.muml.org/pim/1.0.0');
modeltype storydriven uses 'http://www.muml.org/core/1.0.0';
modeltype schemata uses pim::realtimestatechart::one_to_n_schemata('http://www.muml.org/pim/1.0.0');
modeltype types uses pim::types('http://www.muml.org/pim/1.0.0');


helper  isClockSubRoleSpecific(c : Clock): Boolean
{
	
}
helper isVariableSubRoleSpecific(v : Variable): Boolean
{
	
}
helper isOperationSubRoleSpecific(o : Operation): Boolean
{
	
}

property internalVariables			: Set(Variable);
property internalOperations			: Set(Operation);
property internalClocks				: Set(Clock);
property internalSynchronizations	: Set(SynchronizationChannel);

// helpers that are needed to deepCopy Elements. In order to simplify the helpers, they use internally the MUML2MUML library. 
// When a Variable is acces
// It is not possible to use self.deepclone() since references to other elements should reference the mapped elements instead of the original values, as it is done in deepClone()


	
	mapping actionlanguage::TriggerMessageExpression :: transform() : TriggerMessageExpression {
		messageType := self.messageType;
		parameter := self.parameter;
		
	    extensions := self._extensions.map transform().oclAsType(Extension);
	    	
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
	}

	mapping actionlanguage::TriggerMessageExpression :: transformWithContext(container : OclAny) : TriggerMessageExpression {

		messageType := self.messageType;
		parameter := self.parameter;
		
	    extensions := self._extensions.map transformWithContext(container).oclAsType(Extension);
	    	
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
	}
	
	mapping actionLanguage::NondeterministicChoiceExpression ::transform() : NondeterministicChoiceExpression {
		range := self.range.map transform().oclAsType(Range);
		dataType := self.dataType;
		
	    extensions := self._extensions.map transform().oclAsType(Extension);
	    	
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};	
	}
	
	mapping actionLanguage::NondeterministicChoiceExpression ::transformWithContext(container : OclAny) : NondeterministicChoiceExpression {
		range := self.range.map transformWithContext(container).oclAsType(Range);
		dataType := self.dataType;
		
	    extensions := self._extensions.map transformWithContext(container).oclAsType(Extension);
	    	
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};	
	}
-- variables, operations, parametes...

	mapping Variable :: transform() : Variable disjuncts Variable::DefaultVariable2Variable, Variable::Variable2SelfVariable;
	
	mapping Variable :: Variable2SelfVariable() : Variable 
	when {not internalVariables->includes(self)} {
		init {
			result := self;
		}
	}
	
	mapping Variable :: DefaultVariable2Variable() : Variable
	when {internalVariables->includes(self)} {
					
		dataType := self.dataType;
		initializeExpression := self.initializeExpression.map transformWithContext(result).oclAsType(Expression);
	    extensions := self._extensions.map transform().oclAsType(Extension);
		
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};		
	}	

 	mapping Variable :: transformWithContext(container : OclAny) : Variable {
 		init {
 			result := self.map transform();
 		}
 	}
	
	mapping Operation :: transform() : Operation
		disjuncts Operation::DefaultOpertation2Operation, Operation::Operation2Self;
	
	mapping Operation :: DefaultOpertation2Operation() : Operation
	when {internalOperations->includes(self)} {
			
		returnType := self.returnType;
		
		implementations := self.implementations->map transform().oclAsType(Expression);
	    extensions := self._extensions.map transform().oclAsType(Extension);
	    parameters := self.parameters -> map transform().oclAsType(Parameter);
	    
	    self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
	}
	
	mapping Operation :: Operation2Self() : Operation 
	when {not internalOperations->includes(self)} {
		init {
			result := self;
		}
	}
		
	mapping Operation :: transformWithContext(container : OclAny) : Operation {
 		init {
 			result := self.map transform();
 		}
 	}

	mapping Parameter :: transform() : Parameter {
		
		dataType := self.dataType;
			    	
		self.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
		
	}

	mapping Parameter :: transformWithContext(container : OclAny) : EObject {
 		init {
 			result := self.map transform();
 		}
 	}
		-- synchronizations
	
	mapping SynchronizationChannel :: transform() : SynchronizationChannel
		disjuncts SynchronizationChannel::DefaultChannel2Channel, SynchronizationChannel::Channel2Self;
		
	
	mapping SynchronizationChannel :: DefaultChannel2Channel() : SynchronizationChannel
	when {internalSynchronizations->includes(self)} {
		
		extensions := self._extensions.map transform().oclAsType(Extension);
		selectorType := self.selectorType;
		state := self.state.map transform().oclAsType(State);
	    
	    var element := self.oclAsType(SynchronizationChannel);			    	
		element.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
	}
	
	mapping SynchronizationChannel :: Channel2Self() : SynchronizationChannel
	when {not internalSynchronizations->includes(self)} {
		init {
			result := self;
		}					
	}
	
	
	mapping SynchronizationChannel :: transformWithContext(container : OclAny) : SynchronizationChannel {
 		init {
 			result := self.map transform();
 		}
 	}
	-- Clocks	
	
	mapping Clock :: transform() : Clock
		disjuncts Clock::DefaultClock2Clock, Clock::Clock2Self;
	
	mapping Clock :: DefaultClock2Clock() : Clock
	when {internalClocks->includes(self)} {
		extensions := self._extensions.map transform().oclAsType(Extension);
	 	//statechart := self.statechart.map transform().oclAsType(RealtimeStatechart);
	    
	    var element := self.oclAsType(Clock);			    	
		element.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};
	}
	
	mapping Clock :: Clock2Self() : Clock 
	when {not internalClocks->includes(self)} {
		init {
			result := self;
		}
	}
	
	mapping Clock :: transformWithContext(container : OclAny) : EObject {
 		init {
 			result := self.map transform();
 		}
 	}
 	
	mapping pim::realtimestatechart::AsynchronousMessageEvent :: transform() : AsynchronousMessageEvent {	
		var resultingElement : AsynchronousMessageEvent := result.oclAsType(AsynchronousMessageEvent);
		resultingElement.message := self.message.map transform().oclAsType(Message);
		resultingElement.kind := self.kind;
				
	}
	
	mapping pim::realtimestatechart::AsynchronousMessageEvent :: transformWithContext(container : OclAny) : AsynchronousMessageEvent {	
		var resultingElement : AsynchronousMessageEvent := result.oclAsType(AsynchronousMessageEvent);
		resultingElement.message := self.message.map transform().oclAsType(Message);
		resultingElement.kind := self.kind;		
	}
	
	
	mapping pim::realtimestatechart::Message :: transform() : Message {
		
		var resultingElement : Message := result.oclAsType(Message);
		resultingElement._extensions := self._extensions.map transform().oclAsType(Extension);
		resultingElement.instanceOf := self.instanceOf;
		resultingElement.parameterBinding := self.parameterBinding.map transform().oclAsType(ParameterBinding);
		
		var element := self.oclAsType(Message);			    	
		element.oclAsType(EObject).eClass().eAllAttributes->select(f | f.isValidFeature())->forEach(f) {
			setValues(result, f, self.getValues(f));
		};	
	}
	
	mapping pim::behavior::ParameterBinding :: transform() : ParameterBinding {
		
		var resultingElement : ParameterBinding := result.oclAsType(ParameterBinding);
		resultingElement.parameter := self.parameter;
		resultingElement.value := self.value.map transform().oclAsType(Expression);
		resultingElement._extensions := self._extensions.map transform().oclAsType(Extension);		
	}
	
	
	
	