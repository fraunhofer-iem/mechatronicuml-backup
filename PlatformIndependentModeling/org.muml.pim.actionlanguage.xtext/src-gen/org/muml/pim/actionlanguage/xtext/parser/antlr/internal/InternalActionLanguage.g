/*
 * generated by Xtext
 */
grammar InternalActionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.muml.pim.actionlanguage.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.muml.pim.actionlanguage.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.muml.pim.actionlanguage.xtext.services.ActionLanguageGrammarAccess;

}

@parser::members {

 	private ActionLanguageGrammarAccess grammarAccess;
 	
    public InternalActionLanguageParser(TokenStream input, ActionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Entry";	
   	}
   	
   	@Override
   	protected ActionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleEntry
entryRuleEntry returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntryRule()); }
	 iv_ruleEntry=ruleEntry 
	 { $current=$iv_ruleEntry.current; } 
	 EOF 
;

// Rule Entry
ruleEntry returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getBlockParserRuleCall_0()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEntryAccess().getArrayInitializeExpressionParserRuleCall_2()); 
    }
    this_ArrayInitializeExpression_2=ruleArrayInitializeExpression
    { 
        $current = $this_ArrayInitializeExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getExpressionsExpressionStartRuleParserRuleCall_2_0()); 
	    }
		lv_expressions_2_0=ruleExpressionStartRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ExpressionStartRule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	 iv_ruleForLoop=ruleForLoop 
	 { $current=$iv_ruleForLoop.current; } 
	 EOF 
;

// Rule ForLoop
ruleForLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getInitializeExpressionAssignmentParserRuleCall_2_0()); 
	    }
		lv_initializeExpression_2_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getLoopTestExpressionParserRuleCall_3_0()); 
	    }
		lv_loopTest_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getCountingExpressionForLoopCountingExpressionParserRuleCall_5_0()); 
	    }
		lv_countingExpression_5_0=ruleForLoopCountingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"countingExpression",
        		lv_countingExpression_5_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ForLoopCountingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForLoopAccess().getRightParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopAccess().getBlockBlockParserRuleCall_7_0()); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForLoopCountingExpression
entryRuleForLoopCountingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForLoopCountingExpressionRule()); }
	 iv_ruleForLoopCountingExpression=ruleForLoopCountingExpression 
	 { $current=$iv_ruleForLoopCountingExpression.current; } 
	 EOF 
;

// Rule ForLoopCountingExpression
ruleForLoopCountingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_typedNamedElementExpression_0_0=ruleTypedNamedElementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"lhs_typedNamedElementExpression",
        		lv_lhs_typedNamedElementExpression_0_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.TypedNamedElementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_incrementDecrementOperator_1_0=ruleUnaryPostIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.UnaryPostIncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_1_0_0()); 
	    }
		lv_assignOperator_2_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForLoopCountingExpressionAccess().getRhs_assignExpressionExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rhs_assignExpression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForLoopCountingExpressionRule());
	        }
       		set(
       			$current, 
       			"rhs_assignExpression",
        		lv_rhs_assignExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleWhileLoop
entryRuleWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhileLoopRule()); }
	 iv_ruleWhileLoop=ruleWhileLoop 
	 { $current=$iv_ruleWhileLoop.current; } 
	 EOF 
;

// Rule WhileLoop
ruleWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileLoopAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileLoopAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getLoopTestExpressionParserRuleCall_2_0()); 
	    }
		lv_loopTest_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileLoopAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileLoopAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDoWhileLoop
entryRuleDoWhileLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileLoopRule()); }
	 iv_ruleDoWhileLoop=ruleDoWhileLoop 
	 { $current=$iv_ruleDoWhileLoop.current; } 
	 EOF 
;

// Rule DoWhileLoop
ruleDoWhileLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileLoopAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getBlockBlockParserRuleCall_1_0()); 
	    }
		lv_block_1_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileLoopAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoWhileLoopAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileLoopAccess().getLoopTestExpressionParserRuleCall_4_0()); 
	    }
		lv_loopTest_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileLoopRule());
	        }
       		set(
       			$current, 
       			"loopTest",
        		lv_loopTest_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=');' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoWhileLoopAccess().getRightParenthesisSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_ifCondition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifCondition",
        		lv_ifCondition_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIfBlockBlockParserRuleCall_4_0()); 
	    }
		lv_ifBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"ifBlock",
        		lv_ifBlock_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfStatementsElseIfStatementParserRuleCall_5_0()); 
	    }
		lv_elseIfStatements_5_0=ruleElseIfStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		add(
       			$current, 
       			"elseIfStatements",
        		lv_elseIfStatements_5_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ElseIfStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getElseKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockBlockParserRuleCall_6_1_0()); 
	    }
		lv_elseBlock_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_7_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleElseIfStatement
entryRuleElseIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseIfStatementRule()); }
	 iv_ruleElseIfStatement=ruleElseIfStatement 
	 { $current=$iv_ruleElseIfStatement.current; } 
	 EOF 
;

// Rule ElseIfStatement
ruleElseIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elseif' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseIfStatementAccess().getElseifKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfStatementAccess().getElseIfConditionExpressionParserRuleCall_2_0()); 
	    }
		lv_elseIfCondition_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseIfCondition",
        		lv_elseIfCondition_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElseIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfStatementAccess().getElseIfBlockBlockParserRuleCall_4_0()); 
	    }
		lv_elseIfBlock_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseIfBlock",
        		lv_elseIfBlock_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleOperationCallStatement
entryRuleOperationCallStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallStatementRule()); }
	 iv_ruleOperationCallStatement=ruleOperationCallStatement 
	 { $current=$iv_ruleOperationCallStatement.current; } 
	 EOF 
;

// Rule OperationCallStatement
ruleOperationCallStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationCallStatementAccess().getOperationCallParserRuleCall_0()); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleExpressionStartRule
entryRuleExpressionStartRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStartRuleRule()); }
	 iv_ruleExpressionStartRule=ruleExpressionStartRule 
	 { $current=$iv_ruleExpressionStartRule.current; } 
	 EOF 
;

// Rule ExpressionStartRule
ruleExpressionStartRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getAssignmentParserRuleCall_0()); 
    }
    this_Assignment_0=ruleAssignment
    { 
        $current = $this_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getForLoopParserRuleCall_1()); 
    }
    this_ForLoop_1=ruleForLoop
    { 
        $current = $this_ForLoop_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getWhileLoopParserRuleCall_2()); 
    }
    this_WhileLoop_2=ruleWhileLoop
    { 
        $current = $this_WhileLoop_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getDoWhileLoopParserRuleCall_3()); 
    }
    this_DoWhileLoop_3=ruleDoWhileLoop
    { 
        $current = $this_DoWhileLoop_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getIfStatementParserRuleCall_4()); 
    }
    this_IfStatement_4=ruleIfStatement
    { 
        $current = $this_IfStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getReturnStatementParserRuleCall_5()); 
    }
    this_ReturnStatement_5=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getLocalVariableOrConstantDeclarationStatementParserRuleCall_6()); 
    }
    this_LocalVariableOrConstantDeclarationStatement_6=ruleLocalVariableOrConstantDeclarationStatement
    { 
        $current = $this_LocalVariableOrConstantDeclarationStatement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionStartRuleAccess().getOperationCallStatementParserRuleCall_7()); 
    }
    this_OperationCallStatement_7=ruleOperationCallStatement
    { 
        $current = $this_OperationCallStatement_7.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getLhs_typedNamedElementExpressionTypedNamedElementExpressionParserRuleCall_0_0()); 
	    }
		lv_lhs_typedNamedElementExpression_0_0=ruleTypedNamedElementExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"lhs_typedNamedElementExpression",
        		lv_lhs_typedNamedElementExpression_0_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.TypedNamedElementExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getAssignOperatorAssignOperatorEnumRuleCall_1_0_0_0()); 
	    }
		lv_assignOperator_1_0=ruleAssignOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"assignOperator",
        		lv_assignOperator_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.AssignOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getRhs_assignExpressionInitializeExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_rhs_assignExpression_2_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"rhs_assignExpression",
        		lv_rhs_assignExpression_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getIncrementDecrementOperatorUnaryPostIncrementDecrementOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_incrementDecrementOperator_3_0=ruleUnaryPostIncrementDecrementOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.UnaryPostIncrementDecrementOperator");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleInitializeExpression
entryRuleInitializeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializeExpressionRule()); }
	 iv_ruleInitializeExpression=ruleInitializeExpression 
	 { $current=$iv_ruleInitializeExpression.current; } 
	 EOF 
;

// Rule InitializeExpression
ruleInitializeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getArrayInitializeExpressionParserRuleCall_0()); 
    }
    this_ArrayInitializeExpression_0=ruleArrayInitializeExpression
    { 
        $current = $this_ArrayInitializeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getNondeterministicChoiceExpressionParserRuleCall_1()); 
    }
    this_NondeterministicChoiceExpression_1=ruleNondeterministicChoiceExpression
    { 
        $current = $this_NondeterministicChoiceExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitializeExpressionAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression
    { 
        $current = $this_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayInitializeExpression
entryRuleArrayInitializeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayInitializeExpressionRule()); }
	 iv_ruleArrayInitializeExpression=ruleArrayInitializeExpression 
	 { $current=$iv_ruleArrayInitializeExpression.current; } 
	 EOF 
;

// Rule ArrayInitializeExpression
ruleArrayInitializeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayInitializeExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_1_0()); 
	    }
		lv_expressions_1_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializeExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayInitializeExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayInitializeExpressionAccess().getExpressionsInitializeExpressionParserRuleCall_2_1_0()); 
	    }
		lv_expressions_3_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayInitializeExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayInitializeExpressionAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLocalVariableOrConstantDeclarationStatement
entryRuleLocalVariableOrConstantDeclarationStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule()); }
	 iv_ruleLocalVariableOrConstantDeclarationStatement=ruleLocalVariableOrConstantDeclarationStatement 
	 { $current=$iv_ruleLocalVariableOrConstantDeclarationStatement.current; } 
	 EOF 
;

// Rule LocalVariableOrConstantDeclarationStatement
ruleLocalVariableOrConstantDeclarationStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_variable_0_1=ruleLocalVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_1, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LocalVariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLocalVariableOrConstantDeclarationStatementAccess().getVariableLocalConstantDeclarationParserRuleCall_0_1()); 
	    }
		lv_variable_0_2=ruleLocalConstantDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableOrConstantDeclarationStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_2, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LocalConstantDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getDataTypeDataTypeCrossReference_0_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLocalVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ID");
	    }

)
)(	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getColonEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_2_1_0()); 
	    }
		lv_initializeExpression_3_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLocalVariableDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleLocalConstantDeclaration
entryRuleLocalConstantDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalConstantDeclarationRule()); }
	 iv_ruleLocalConstantDeclaration=ruleLocalConstantDeclaration 
	 { $current=$iv_ruleLocalConstantDeclaration.current; } 
	 EOF 
;

// Rule LocalConstantDeclaration
ruleLocalConstantDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_constant_0_0=	'const' 
    {
        newLeafNode(lv_constant_0_0, grammarAccess.getLocalConstantDeclarationAccess().getConstantConstKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "const");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getDataTypeDataTypeCrossReference_1_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLocalConstantDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ID");
	    }

)
)	otherlv_3=':=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLocalConstantDeclarationAccess().getColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalConstantDeclarationAccess().getInitializeExpressionInitializeExpressionParserRuleCall_4_0()); 
	    }
		lv_initializeExpression_4_0=ruleInitializeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalConstantDeclarationRule());
	        }
       		set(
       			$current, 
       			"initializeExpression",
        		lv_initializeExpression_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.InitializeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLocalConstantDeclarationAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleNondeterministicChoiceExpression
entryRuleNondeterministicChoiceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNondeterministicChoiceExpressionRule()); }
	 iv_ruleNondeterministicChoiceExpression=ruleNondeterministicChoiceExpression 
	 { $current=$iv_ruleNondeterministicChoiceExpression.current; } 
	 EOF 
;

// Rule NondeterministicChoiceExpression
ruleNondeterministicChoiceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNondeterministicChoiceExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getNondeterministicChoiceExpressionAccess().getDataTypePrimitiveDataTypeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNondeterministicChoiceExpressionAccess().getRangeRangeParserRuleCall_1_0()); 
	    }
		lv_range_1_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNondeterministicChoiceExpressionRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Range");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRangeAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getLowerBoundLONGParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleLONG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LONG");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRangeAccess().getCommaKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRangeAccess().getUpperBoundLONGParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleLONG		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LONG");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRangeAccess().getGreaterThanSignKeyword_4());
    }
)
;





// Entry rule entryRuleLONG
entryRuleLONG returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLONGRule()); } 
	 iv_ruleLONG=ruleLONG 
	 { $current=$iv_ruleLONG.current.getText(); }  
	 EOF 
;

// Rule LONG
ruleLONG returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLONGAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionParserRuleCall()); 
    }
    this_LogicalExpression_0=ruleLogicalExpression
    { 
        $current = $this_LogicalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getLogicalOrExpressionParserRuleCall()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalOrOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LogicalOrOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getComparisonExpressionParserRuleCall_0()); 
    }
    this_ComparisonExpression_0=ruleComparisonExpression
    { 
        $current = $this_ComparisonExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getLogicalExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleLogicalAndOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.LogicalAndOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleComparisonExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ComparisonExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	 iv_ruleComparisonExpression=ruleComparisonExpression 
	 { $current=$iv_ruleComparisonExpression.current; } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getComparisonHigherOpExpressionParserRuleCall_0()); 
    }
    this_ComparisonHigherOpExpression_0=ruleComparisonHigherOpExpression
    { 
        $current = $this_ComparisonHigherOpExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparingEQNEQOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparingEQNEQOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ComparingEQNEQOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleComparisonHigherOpExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ComparisonHigherOpExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleComparisonHigherOpExpression
entryRuleComparisonHigherOpExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonHigherOpExpressionRule()); }
	 iv_ruleComparisonHigherOpExpression=ruleComparisonHigherOpExpression 
	 { $current=$iv_ruleComparisonHigherOpExpression.current; } 
	 EOF 
;

// Rule ComparisonHigherOpExpression
ruleComparisonHigherOpExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getArithmeticExpressionParserRuleCall_0()); 
    }
    this_ArithmeticExpression_0=ruleArithmeticExpression
    { 
        $current = $this_ArithmeticExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonHigherOpExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorComparingRelOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleComparingRelOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ComparingRelOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionArithmeticExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleArithmeticExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ArithmeticExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	 iv_ruleArithmeticExpression=ruleArithmeticExpression 
	 { $current=$iv_ruleArithmeticExpression.current; } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAdditionExpressionParserRuleCall()); 
    }
    this_AdditionExpression_0=ruleAdditionExpression
    { 
        $current = $this_AdditionExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	 iv_ruleAdditionExpression=ruleAdditionExpression 
	 { $current=$iv_ruleAdditionExpression.current; } 
	 EOF 
;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0()); 
    }
    this_MultiplicationExpression_0=ruleMultiplicationExpression
    { 
        $current = $this_MultiplicationExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorEnumRuleCall_1_1_0()); 
	    }
		lv_operator_2_0=ruleAdditionOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.AdditionOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0()); 
	    }
		lv_rightExpression_3_0=ruleMultiplicationExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.MultiplicationExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	 iv_ruleMultiplicationExpression=ruleMultiplicationExpression 
	 { $current=$iv_ruleMultiplicationExpression.current; } 
	 EOF 
;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getUnaryPreExpressionParserRuleCall_0()); 
    }
    this_UnaryPreExpression_0=ruleUnaryPreExpression
    { 
        $current = $this_UnaryPreExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getTypeCastExpressionParserRuleCall_1_0()); 
    }
    this_TypeCastExpression_1=ruleTypeCastExpression
    { 
        $current = $this_TypeCastExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorEnumRuleCall_1_1_1_0()); 
	    }
		lv_operator_3_0=ruleMultiplicationOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.MultiplicationOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionUnaryPreExpressionParserRuleCall_1_1_2_0_0()); 
	    }
		lv_rightExpression_4_1=ruleUnaryPreExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_1, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.UnaryPreExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionTypeCastExpressionParserRuleCall_1_1_2_0_1()); 
	    }
		lv_rightExpression_4_2=ruleTypeCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
	        }
       		set(
       			$current, 
       			"rightExpression",
        		lv_rightExpression_4_2, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.TypeCastExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*))
;





// Entry rule entryRuleUnaryPreExpression
entryRuleUnaryPreExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryPreExpressionRule()); }
	 iv_ruleUnaryPreExpression=ruleUnaryPreExpression 
	 { $current=$iv_ruleUnaryPreExpression.current; } 
	 EOF 
;

// Rule UnaryPreExpression
ruleUnaryPreExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryPreExpressionAccess().getUnaryExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getOperatorUnaryPreOperatorEnumRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleUnaryPreOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.UnaryPreOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionTypeCastExpressionParserRuleCall_2_0()); 
	    }
		lv_enclosedExpression_2_0=ruleTypeCastExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
	        }
       		set(
       			$current, 
       			"enclosedExpression",
        		lv_enclosedExpression_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.TypeCastExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeCastExpression
entryRuleTypeCastExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeCastExpressionRule()); }
	 iv_ruleTypeCastExpression=ruleTypeCastExpression 
	 { $current=$iv_ruleTypeCastExpression.current; } 
	 EOF 
;

// Rule TypeCastExpression
ruleTypeCastExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getOperandParserRuleCall_0()); 
    }
    this_Operand_0=ruleOperand
    { 
        $current = $this_Operand_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeCastExpressionAccess().getTypeCastExpressionAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeCastExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeCastExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getDataTypeDataTypeCrossReference_1_2_0()); 
	    }
		ruleDATATYPE		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeCastExpressionAccess().getRightParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeCastExpressionAccess().getEnclosedExpressionOperandParserRuleCall_1_4_0()); 
	    }
		lv_enclosedExpression_5_0=ruleOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeCastExpressionRule());
	        }
       		set(
       			$current, 
       			"enclosedExpression",
        		lv_enclosedExpression_5_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Operand");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	 iv_ruleOperand=ruleOperand 
	 { $current=$iv_ruleOperand.current; } 
	 EOF 
;

// Rule Operand
ruleOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getOperandAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getLiteralExpressionParserRuleCall_1()); 
    }
    this_LiteralExpression_3=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getExtendedTypedNamedElementExpressionParserRuleCall_2()); 
    }
    this_ExtendedTypedNamedElementExpression_4=ruleExtendedTypedNamedElementExpression
    { 
        $current = $this_ExtendedTypedNamedElementExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getTimeValueExpressionParserRuleCall_3()); 
    }
    this_TimeValueExpression_5=ruleTimeValueExpression
    { 
        $current = $this_TimeValueExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getOperationCallParserRuleCall_4()); 
    }
    this_OperationCall_6=ruleOperationCall
    { 
        $current = $this_OperationCall_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getTriggerMessageExpressionParserRuleCall_5()); 
    }
    this_TriggerMessageExpression_7=ruleTriggerMessageExpression
    { 
        $current = $this_TriggerMessageExpression_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperandAccess().getNoAttributeSelectorExpressionParserRuleCall_6()); 
    }
    this_NoAttributeSelectorExpression_8=ruleNoAttributeSelectorExpression
    { 
        $current = $this_NoAttributeSelectorExpression_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionAccess().getLiteralExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueLiteralParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Literal");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_NUMBER_0=RULE_NUMBER    {
		$current.merge(this_NUMBER_0);
    }

    { 
    newLeafNode(this_NUMBER_0, grammarAccess.getLiteralAccess().getNUMBERTerminalRuleCall_0()); 
    }

    |    this_BOOLEAN_1=RULE_BOOLEAN    {
		$current.merge(this_BOOLEAN_1);
    }

    { 
    newLeafNode(this_BOOLEAN_1, grammarAccess.getLiteralAccess().getBOOLEANTerminalRuleCall_1()); 
    }

    |    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_2()); 
    }

    |
	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleTimeValueExpression
entryRuleTimeValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeValueExpressionRule()); }
	 iv_ruleTimeValueExpression=ruleTimeValueExpression 
	 { $current=$iv_ruleTimeValueExpression.current; } 
	 EOF 
;

// Rule TimeValueExpression
ruleTimeValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeValueExpressionRule());
	        }
        }
	otherlv_0=RULE_MINORMAXKEYWORD
	{
		newLeafNode(otherlv_0, grammarAccess.getTimeValueExpressionAccess().getTimeValueTimeValueCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleExtendedTypedNamedElementExpression
entryRuleExtendedTypedNamedElementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionRule()); }
	 iv_ruleExtendedTypedNamedElementExpression=ruleExtendedTypedNamedElementExpression 
	 { $current=$iv_ruleExtendedTypedNamedElementExpression.current; } 
	 EOF 
;

// Rule ExtendedTypedNamedElementExpression
ruleExtendedTypedNamedElementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getTypedNamedElementExpressionParserRuleCall_0()); 
    }
    this_TypedNamedElementExpression_0=ruleTypedNamedElementExpression
    { 
        $current = $this_TypedNamedElementExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExtendedTypedNamedElementExpressionAccess().getDiscreteInteractionEndpointReferenceTypedNamedElementExpressionAction_1_0_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendedTypedNamedElementExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_position_3_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedTypedNamedElementExpressionRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExtendedTypedNamedElementExpressionAccess().getAssignmentLhs_typedNamedElementExpressionAction_1_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendedTypedNamedElementExpressionAccess().getIncrementDecrementOperatorIncrementDecrementOperatorExpressionEnumRuleCall_1_1_1_0()); 
	    }
		lv_incrementDecrementOperator_5_0=ruleIncrementDecrementOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendedTypedNamedElementExpressionRule());
	        }
       		set(
       			$current, 
       			"incrementDecrementOperator",
        		lv_incrementDecrementOperator_5_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.IncrementDecrementOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleTypedNamedElementExpression
entryRuleTypedNamedElementExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypedNamedElementExpressionRule()); }
	 iv_ruleTypedNamedElementExpression=ruleTypedNamedElementExpression 
	 { $current=$iv_ruleTypedNamedElementExpression.current; } 
	 EOF 
;

// Rule TypedNamedElementExpression
ruleTypedNamedElementExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypedNamedElementExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypedNamedElementExpressionAccess().getTypedNamedElementTypedNamedElementCrossReference_0_0()); 
	}

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsArrayIndexExpressionParserRuleCall_1_0_0()); 
	    }
		lv_elementAccessors_1_1=ruleArrayIndexExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNamedElementExpressionRule());
	        }
       		add(
       			$current, 
       			"elementAccessors",
        		lv_elementAccessors_1_1, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ArrayIndexExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTypedNamedElementExpressionAccess().getElementAccessorsAttributeAccessorExpressionParserRuleCall_1_0_1()); 
	    }
		lv_elementAccessors_1_2=ruleAttributeAccessorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypedNamedElementExpressionRule());
	        }
       		add(
       			$current, 
       			"elementAccessors",
        		lv_elementAccessors_1_2, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.AttributeAccessorExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*)
;





// Entry rule entryRuleArrayIndexExpression
entryRuleArrayIndexExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayIndexExpressionRule()); }
	 iv_ruleArrayIndexExpression=ruleArrayIndexExpression 
	 { $current=$iv_ruleArrayIndexExpression.current; } 
	 EOF 
;

// Rule ArrayIndexExpression
ruleArrayIndexExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayIndexExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayIndexExpressionAccess().getIndexArithmeticExpressionParserRuleCall_1_0()); 
	    }
		lv_index_1_0=ruleArithmeticExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayIndexExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_1_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ArithmeticExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArrayIndexExpressionAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleAttributeAccessorExpression
entryRuleAttributeAccessorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeAccessorExpressionRule()); }
	 iv_ruleAttributeAccessorExpression=ruleAttributeAccessorExpression 
	 { $current=$iv_ruleAttributeAccessorExpression.current; } 
	 EOF 
;

// Rule AttributeAccessorExpression
ruleAttributeAccessorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='.' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAttributeAccessorExpressionAccess().getFullStopKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeAccessorExpressionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAttributeAccessorExpressionAccess().getAttributeAttributeCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleNoAttributeSelectorExpression
entryRuleNoAttributeSelectorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoAttributeSelectorExpressionRule()); }
	 iv_ruleNoAttributeSelectorExpression=ruleNoAttributeSelectorExpression 
	 { $current=$iv_ruleNoAttributeSelectorExpression.current; } 
	 EOF 
;

// Rule NoAttributeSelectorExpression
ruleNoAttributeSelectorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoAttributeSelectorExpressionAccess().getPositionPositionSelectorExpressionParserRuleCall_0()); 
	    }
		lv_position_0_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoAttributeSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"position",
        		lv_position_0_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePositionSelectorExpression
entryRulePositionSelectorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionSelectorExpressionRule()); }
	 iv_rulePositionSelectorExpression=rulePositionSelectorExpression 
	 { $current=$iv_rulePositionSelectorExpression.current; } 
	 EOF 
;

// Rule PositionSelectorExpression
rulePositionSelectorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPositionSelectorExpressionAccess().getKindPositionSelectorKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=rulePositionSelectorKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.PositionSelectorKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPositionSelectorExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPositionSelectorExpressionAccess().getSuccessorPositionSelectorExpressionParserRuleCall_1_1_0()); 
	    }
		lv_successor_2_0=rulePositionSelectorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionSelectorExpressionRule());
	        }
       		set(
       			$current, 
       			"successor",
        		lv_successor_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.PositionSelectorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_0_0()); 
	    }
		lv_parameterBinding_2_0=ruleParamaterBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterBinding",
        		lv_parameterBinding_2_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ParamaterBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParameterBindingParamaterBindingParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterBinding_4_0=ruleParamaterBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"parameterBinding",
        		lv_parameterBinding_4_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.ParamaterBinding");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleParamaterBinding
entryRuleParamaterBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamaterBindingRule()); }
	 iv_ruleParamaterBinding=ruleParamaterBinding 
	 { $current=$iv_ruleParamaterBinding.current; } 
	 EOF 
;

// Rule ParamaterBinding
ruleParamaterBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParamaterBindingAccess().getParameterBindingAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamaterBindingRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getParamaterBindingAccess().getParameterParameterCrossReference_1_0()); 
	}

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParamaterBindingAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamaterBindingAccess().getValueExpressionParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamaterBindingRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"org.muml.pim.actionlanguage.xtext.ActionLanguage.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTriggerMessageExpression
entryRuleTriggerMessageExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerMessageExpressionRule()); }
	 iv_ruleTriggerMessageExpression=ruleTriggerMessageExpression 
	 { $current=$iv_ruleTriggerMessageExpression.current; } 
	 EOF 
;

// Rule TriggerMessageExpression
ruleTriggerMessageExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerMessageExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTriggerMessageExpressionAccess().getMessageTypeMessageTypeCrossReference_0_0()); 
	}

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggerMessageExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerMessageExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTriggerMessageExpressionAccess().getParameterParameterCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleDATATYPE
entryRuleDATATYPE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDATATYPERule()); } 
	 iv_ruleDATATYPE=ruleDATATYPE 
	 { $current=$iv_ruleDATATYPE.current.getText(); }  
	 EOF 
;

// Rule DATATYPE
ruleDATATYPE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getDATATYPEAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDATATYPEAccess().getLeftSquareBracketKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDATATYPEAccess().getINTTerminalRuleCall_1_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDATATYPEAccess().getRightSquareBracketKeyword_1_2()); 
    }
)*)
    ;





// Rule UnaryPostIncrementDecrementOperator
ruleUnaryPostIncrementDecrementOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryPostIncrementDecrementOperatorAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



// Rule IncrementDecrementOperatorExpression
ruleIncrementDecrementOperatorExpression returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='++' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIncrementDecrementOperatorExpressionAccess().getINCREMENTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='--' 
	{
        $current = grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIncrementDecrementOperatorExpressionAccess().getDECREMENTEnumLiteralDeclaration_1()); 
    }
));



// Rule AssignOperator
ruleAssignOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0=':=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAssignOperatorAccess().getASSIGNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAssignOperatorAccess().getPLUS_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-=' 
	{
        $current = grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAssignOperatorAccess().getMINUS_EQUALEnumLiteralDeclaration_2()); 
    }
));



// Rule LogicalOrOperator
ruleLogicalOrOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOrOperatorAccess().getOREnumLiteralDeclaration()); 
    }
);



// Rule LogicalAndOperator
ruleLogicalAndOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalAndOperatorAccess().getANDEnumLiteralDeclaration()); 
    }
);



// Rule ComparingEQNEQOperator
ruleComparingEQNEQOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<>' 
	{
        $current = grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALEnumLiteralDeclaration_1()); 
    }
));



// Rule ComparingRelOperator
ruleComparingRelOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getComparingRelOperatorAccess().getLESSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getComparingRelOperatorAccess().getGREATEREnumLiteralDeclaration_3()); 
    }
));



// Rule AdditionOperator
ruleAdditionOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAdditionOperatorAccess().getPLUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAdditionOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiplicationOperator
ruleMultiplicationOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplicationOperatorAccess().getTIMESEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplicationOperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMultiplicationOperatorAccess().getMODULOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplicationOperatorAccess().getMODULOEnumLiteralDeclaration_2()); 
    }
));



// Rule UnaryPreOperator
ruleUnaryPreOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryPreOperatorAccess().getNOTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryPreOperatorAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule PositionSelectorKind
rulePositionSelectorKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='self' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPositionSelectorKindAccess().getSELFEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='first' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPositionSelectorKindAccess().getFIRSTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='last' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPositionSelectorKindAccess().getLASTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='prev' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getPositionSelectorKindAccess().getPREVEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='next' 
	{
        $current = grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getPositionSelectorKindAccess().getNEXTEnumLiteralDeclaration_4()); 
    }
));



RULE_MINORMAXKEYWORD : 'maxMsgDelay';

RULE_NUMBER : RULE_INT '.' RULE_INT;

RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


