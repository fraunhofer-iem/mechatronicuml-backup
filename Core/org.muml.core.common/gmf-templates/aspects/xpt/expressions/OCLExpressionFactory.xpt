«IMPORT 'http://www.eclipse.org/gmf/2009/GenModel'»

«AROUND OCLExpressionFactory FOR gmfgen::GenExpressionInterpreter-»
«EXPAND xpt::Common::copyright FOR container.editorGen-»
package «container.expressionsPackageName»;

«EXPAND xpt::Common::generatedClassComment»
public class «className» {

	«EXPAND _initInterpreterFactory»

	«EXPAND xpt::Common::generatedMemberComment('This is factory method, callers are responsible to keep reference to the return value if they want to reuse parsed expression')»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» environment) {
		return new Expression(body, context, environment);
	}

	«EXPAND xpt::Common::generatedMemberComment('This method will become private in the next release')»«REM»FIXME private or completely remove in the next release. Besides, no real need to pass emptyMap when null would suffice «ENDREM»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(String body, org.eclipse.emf.ecore.EClassifier context) {
		return getExpression(body, context, «EXPAND CodeStyle::emptyMap('String, org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram»);
	}

	«EXPAND xpt::Common::generatedMemberComment»
	private static class Expression extends «container.getAbstractExpressionQualifiedClassName()» {

		«EXPAND xpt::Common::generatedMemberComment»
		private final org.eclipse.ocl.pivot.utilities.OCL pivotOclInstance;

		«EXPAND xpt::Common::generatedMemberComment»
		private org.eclipse.ocl.pivot.ExpressionInOCL pivotOclExpression;

		«EXPAND xpt::Common::generatedMemberComment»
		public Expression(String body, org.eclipse.emf.ecore.EClassifier context, java.util.Map«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» environment) {
			super(body, context);
			pivotOclInstance = org.eclipse.ocl.pivot.utilities.OCL.newInstance();
			org.eclipse.ocl.pivot.utilities.OCLHelper pivotHelper = pivotOclInstance.createOCLHelper(context);
			try {
				pivotOclExpression = pivotHelper.createQuery(body());
				setStatus(org.eclipse.core.runtime.IStatus.OK, null, null);
			} catch (org.eclipse.ocl.pivot.utilities.ParserException e1) {
				e1.printStackTrace();
				setStatus(org.eclipse.core.runtime.IStatus.ERROR, e1.getMessage(), e1);
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		«EXPAND CodeStyle::SuppressWarnings('"rawtypes"') FOR container.editorGen.diagram-»
		protected Object doEvaluate(Object context, java.util.Map env) {
			if (pivotOclExpression == null) {
				return null;
			}
			try {
				Object pivotResult = pivotOclInstance.evaluate(context, pivotOclExpression);
				// XXX Check for invalid and return null:
				// return oclInstance.isInvalid(result) ? null : result;
				return pivotResult;
			} finally {
				// XXX
//				evalEnv.clear();
//				oclInstance.setExtentMap(null); // clear allInstances cache, and get the oclInstance ready for the next call
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private static void initCustomEnv(org.eclipse.ocl.Environment«EXPAND CodeStyle::G('?,org.eclipse.emf.ecore.EClassifier,?,?,?,org.eclipse.emf.ecore.EParameter,?,?,?,?,?,?') FOR container.editorGen.diagram» ecoreEnv, java.util.Map«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» environment) {
			«EXPAND initializeEnvironment('ecoreEnv')-»
			«EXPAND CodeStyle::iterate('varName', 'String', 'environment.keySet()') FOR container.editorGen.diagram-»
				org.eclipse.emf.ecore.EClassifier varType = «EXPAND CodeStyle::castTyped('org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram»environment.get(varName);
				ecoreEnv.addElement(varName, createVar(ecoreEnv, varName, varType), false);
			}
		}

		«EXPAND xpt::Common::generatedMemberComment»
		private static org.eclipse.ocl.ecore.Variable createVar(org.eclipse.ocl.Environment«EXPAND CodeStyle::G('?,org.eclipse.emf.ecore.EClassifier,?,?,?,?,?,?,?,?,?,?') FOR container.editorGen.diagram» ecoreEnv, String name, org.eclipse.emf.ecore.EClassifier type) {
			org.eclipse.ocl.ecore.Variable var = org.eclipse.ocl.ecore.EcoreFactory.eINSTANCE.createVariable();
			var.setName(name);
			var.setType(«EXPAND CodeStyle::castTyped('org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram»ecoreEnv.getUMLReflection().getOCLType(type));
			return var;
		}
	}
	«EXPAND additions-»
}
«ENDAROUND»




«REM»
  The rest below this line is just copied and not modified.
«ENDREM»






«REM»
  Clients may override if they don't need
«ENDREM»
«DEFINE initializeEnvironment(String environmentVar) FOR gmfgen::GenExpressionInterpreter-»
// Use EObject as implicit root class for any object, to allow eContainer() and other EObject operations from OCL expressions
org.eclipse.ocl.options.ParsingOptions.setOption(«environmentVar», org.eclipse.ocl.options.ParsingOptions.implicitRootClass(«environmentVar»), org.eclipse.emf.ecore.EcorePackage.eINSTANCE.getEObject());
«ENDDEFINE»

«DEFINE additions FOR gmfgen::GenExpressionInterpreter»«ENDDEFINE»

// just to avoid identical piece of template in the RegexpExpressionFactory
«DEFINE _initInterpreterFactory FOR gmfgen::GenExpressionInterpreter-»
	«EXPAND xpt::Common::generatedMemberComment»
	private final «container.getAbstractExpressionQualifiedClassName()»[] expressions; 
	
	«EXPAND xpt::Common::generatedMemberComment»
	private final String [] expressionBodies;	

	«EXPAND xpt::Common::generatedMemberComment»
	protected «className»() {
		this.expressions = new «container.getAbstractExpressionQualifiedClassName()»[«expressions->size()»];
		this.expressionBodies = new String[] {
				«FOREACH expressions.getBodyString() AS b»«b», «EXPAND xpt::Common::nonNLS»
				«ENDFOREACH-»
			};
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	private static «className» getInstance() {
		«className» instance = «EXPAND plugin::Activator::instanceAccess FOR container.editorGen».get«className»();
		if (instance == null) {			
			«EXPAND plugin::Activator::instanceAccess FOR container.editorGen».set«className»(instance = new «className»());
		}
		return instance;
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	public static String getExpressionBody(int index) {
		return getInstance().expressionBodies[index];
	}
	
	«EXPAND xpt::Common::generatedMemberComment»
	«REM»
			- I'm not quite sure indexes instead of string bodies are good approach, may revisit this later.
			- There's no confidence we shouldn't keep Map/Set instead of fixed length array for expressions.
			  The reason I didn't use Map/Set right away is uncertainty with the key - i.e. body only, body + context, or
			  body+context+environment(how). I.e. if it's possible (reasonable) to have same body for different contexts - 
			  of course, 'self.oclIsUndefined()' may be run in different contexts, but it's useless example.
			- DGMT and reuse of gmfgen::ValueExpressions might be related here - if we decide identical body is enough to
			  reuse an expression (and change DGMT#bindToProvider accordingly), then the answer to previous point would become obvious (i.e. "body is enough")   
	«ENDREM-»
	public static «container.getAbstractExpressionQualifiedClassName()» getExpression(int index, org.eclipse.emf.ecore.EClassifier context, java.util.Map«EXPAND CodeStyle::G2('String', 'org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» environment) {
		«className» cached = getInstance();
		if (index < 0 || index >= cached.expressions.length) {
			throw new IllegalArgumentException();
		}
		if (cached.expressions[index] == null) {			
			cached.expressions[index] = getExpression(cached.expressionBodies[index], context, environment == null ? «EXPAND CodeStyle::emptyMap('String, org.eclipse.emf.ecore.EClassifier') FOR container.editorGen.diagram» : environment);
		}
		return cached.expressions[index];
	}
«ENDDEFINE»