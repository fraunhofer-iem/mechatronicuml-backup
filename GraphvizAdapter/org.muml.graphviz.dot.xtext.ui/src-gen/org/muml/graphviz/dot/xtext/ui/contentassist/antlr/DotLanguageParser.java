/*
 * generated by Xtext
 */
package org.muml.graphviz.dot.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.muml.graphviz.dot.xtext.services.DotLanguageGrammarAccess;

public class DotLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private DotLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.muml.graphviz.dot.xtext.ui.contentassist.antlr.internal.InternalDotLanguageParser createParser() {
		org.muml.graphviz.dot.xtext.ui.contentassist.antlr.internal.InternalDotLanguageParser result = new org.muml.graphviz.dot.xtext.ui.contentassist.antlr.internal.InternalDotLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDotGraphAccess().getAlternatives_1(), "rule__DotGraph__Alternatives_1");
					put(grammarAccess.getDotGraphAccess().getAlternatives_4(), "rule__DotGraph__Alternatives_4");
					put(grammarAccess.getDotSubGraphAccess().getAlternatives_4(), "rule__DotSubGraph__Alternatives_4");
					put(grammarAccess.getDotEdgeAccess().getAlternatives(), "rule__DotEdge__Alternatives");
					put(grammarAccess.getDotIDAccess().getAlternatives(), "rule__DotID__Alternatives");
					put(grammarAccess.getNumberAccess().getAlternatives_1(), "rule__Number__Alternatives_1");
					put(grammarAccess.getDotGraphAccess().getGroup(), "rule__DotGraph__Group__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_0(), "rule__DotGraph__Group_4_0__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_0_3(), "rule__DotGraph__Group_4_0_3__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_1(), "rule__DotGraph__Group_4_1__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_1_3(), "rule__DotGraph__Group_4_1_3__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_2(), "rule__DotGraph__Group_4_2__0");
					put(grammarAccess.getDotGraphAccess().getGroup_4_2_3(), "rule__DotGraph__Group_4_2_3__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup(), "rule__DotSubGraph__Group__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_0(), "rule__DotSubGraph__Group_4_0__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_0_3(), "rule__DotSubGraph__Group_4_0_3__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_1(), "rule__DotSubGraph__Group_4_1__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_1_3(), "rule__DotSubGraph__Group_4_1_3__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_2(), "rule__DotSubGraph__Group_4_2__0");
					put(grammarAccess.getDotSubGraphAccess().getGroup_4_2_3(), "rule__DotSubGraph__Group_4_2_3__0");
					put(grammarAccess.getDotNodeAccess().getGroup(), "rule__DotNode__Group__0");
					put(grammarAccess.getDotNodeAccess().getGroup_1(), "rule__DotNode__Group_1__0");
					put(grammarAccess.getDotNodeAccess().getGroup_1_2(), "rule__DotNode__Group_1_2__0");
					put(grammarAccess.getDirectedDotEdgeAccess().getGroup(), "rule__DirectedDotEdge__Group__0");
					put(grammarAccess.getDirectedDotEdgeAccess().getGroup_3(), "rule__DirectedDotEdge__Group_3__0");
					put(grammarAccess.getDirectedDotEdgeAccess().getGroup_3_2(), "rule__DirectedDotEdge__Group_3_2__0");
					put(grammarAccess.getUndirectedDotEdgeAccess().getGroup(), "rule__UndirectedDotEdge__Group__0");
					put(grammarAccess.getUndirectedDotEdgeAccess().getGroup_3(), "rule__UndirectedDotEdge__Group_3__0");
					put(grammarAccess.getUndirectedDotEdgeAccess().getGroup_3_2(), "rule__UndirectedDotEdge__Group_3_2__0");
					put(grammarAccess.getSettingAccess().getGroup(), "rule__Setting__Group__0");
					put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
					put(grammarAccess.getDotGraphAccess().getDirectedGraphAssignment_1_0(), "rule__DotGraph__DirectedGraphAssignment_1_0");
					put(grammarAccess.getDotGraphAccess().getIdAssignment_2(), "rule__DotGraph__IdAssignment_2");
					put(grammarAccess.getDotGraphAccess().getGraphSettingsAssignment_4_0_2(), "rule__DotGraph__GraphSettingsAssignment_4_0_2");
					put(grammarAccess.getDotGraphAccess().getGraphSettingsAssignment_4_0_3_1(), "rule__DotGraph__GraphSettingsAssignment_4_0_3_1");
					put(grammarAccess.getDotGraphAccess().getNodeSettingsAssignment_4_1_2(), "rule__DotGraph__NodeSettingsAssignment_4_1_2");
					put(grammarAccess.getDotGraphAccess().getNodeSettingsAssignment_4_1_3_1(), "rule__DotGraph__NodeSettingsAssignment_4_1_3_1");
					put(grammarAccess.getDotGraphAccess().getEdgeSettingsAssignment_4_2_2(), "rule__DotGraph__EdgeSettingsAssignment_4_2_2");
					put(grammarAccess.getDotGraphAccess().getEdgeSettingsAssignment_4_2_3_1(), "rule__DotGraph__EdgeSettingsAssignment_4_2_3_1");
					put(grammarAccess.getDotGraphAccess().getSubgraphsAssignment_4_3(), "rule__DotGraph__SubgraphsAssignment_4_3");
					put(grammarAccess.getDotGraphAccess().getNodesAssignment_4_4(), "rule__DotGraph__NodesAssignment_4_4");
					put(grammarAccess.getDotGraphAccess().getEdgesAssignment_4_5(), "rule__DotGraph__EdgesAssignment_4_5");
					put(grammarAccess.getDotSubGraphAccess().getIdAssignment_2(), "rule__DotSubGraph__IdAssignment_2");
					put(grammarAccess.getDotSubGraphAccess().getGraphSettingsAssignment_4_0_2(), "rule__DotSubGraph__GraphSettingsAssignment_4_0_2");
					put(grammarAccess.getDotSubGraphAccess().getGraphSettingsAssignment_4_0_3_1(), "rule__DotSubGraph__GraphSettingsAssignment_4_0_3_1");
					put(grammarAccess.getDotSubGraphAccess().getNodeSettingsAssignment_4_1_2(), "rule__DotSubGraph__NodeSettingsAssignment_4_1_2");
					put(grammarAccess.getDotSubGraphAccess().getNodeSettingsAssignment_4_1_3_1(), "rule__DotSubGraph__NodeSettingsAssignment_4_1_3_1");
					put(grammarAccess.getDotSubGraphAccess().getEdgeSettingsAssignment_4_2_2(), "rule__DotSubGraph__EdgeSettingsAssignment_4_2_2");
					put(grammarAccess.getDotSubGraphAccess().getEdgeSettingsAssignment_4_2_3_1(), "rule__DotSubGraph__EdgeSettingsAssignment_4_2_3_1");
					put(grammarAccess.getDotSubGraphAccess().getSubgraphsAssignment_4_3(), "rule__DotSubGraph__SubgraphsAssignment_4_3");
					put(grammarAccess.getDotSubGraphAccess().getNodesAssignment_4_4(), "rule__DotSubGraph__NodesAssignment_4_4");
					put(grammarAccess.getDotSubGraphAccess().getEdgesAssignment_4_5(), "rule__DotSubGraph__EdgesAssignment_4_5");
					put(grammarAccess.getDotNodeAccess().getNameAssignment_0(), "rule__DotNode__NameAssignment_0");
					put(grammarAccess.getDotNodeAccess().getSettingsAssignment_1_1(), "rule__DotNode__SettingsAssignment_1_1");
					put(grammarAccess.getDotNodeAccess().getSettingsAssignment_1_2_1(), "rule__DotNode__SettingsAssignment_1_2_1");
					put(grammarAccess.getDirectedDotEdgeAccess().getSourceAssignment_0(), "rule__DirectedDotEdge__SourceAssignment_0");
					put(grammarAccess.getDirectedDotEdgeAccess().getTargetAssignment_2(), "rule__DirectedDotEdge__TargetAssignment_2");
					put(grammarAccess.getDirectedDotEdgeAccess().getSettingsAssignment_3_1(), "rule__DirectedDotEdge__SettingsAssignment_3_1");
					put(grammarAccess.getDirectedDotEdgeAccess().getSettingsAssignment_3_2_1(), "rule__DirectedDotEdge__SettingsAssignment_3_2_1");
					put(grammarAccess.getUndirectedDotEdgeAccess().getSourceAssignment_0(), "rule__UndirectedDotEdge__SourceAssignment_0");
					put(grammarAccess.getUndirectedDotEdgeAccess().getTargetAssignment_2(), "rule__UndirectedDotEdge__TargetAssignment_2");
					put(grammarAccess.getUndirectedDotEdgeAccess().getSettingsAssignment_3_1(), "rule__UndirectedDotEdge__SettingsAssignment_3_1");
					put(grammarAccess.getUndirectedDotEdgeAccess().getSettingsAssignment_3_2_1(), "rule__UndirectedDotEdge__SettingsAssignment_3_2_1");
					put(grammarAccess.getSettingAccess().getAttributeAssignment_0(), "rule__Setting__AttributeAssignment_0");
					put(grammarAccess.getSettingAccess().getValueAssignment_2(), "rule__Setting__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.muml.graphviz.dot.xtext.ui.contentassist.antlr.internal.InternalDotLanguageParser typedParser = (org.muml.graphviz.dot.xtext.ui.contentassist.antlr.internal.InternalDotLanguageParser) parser;
			typedParser.entryRuleDotGraph();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DotLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DotLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
